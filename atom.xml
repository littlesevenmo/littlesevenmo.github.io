<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>且听风吟</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.windsings.com/"/>
  <updated>2018-10-15T10:37:36.552Z</updated>
  <id>https://www.windsings.com/</id>
  
  <author>
    <name>Wind</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指Offer-替换空格</title>
    <link href="https://www.windsings.com//posts/ba28a029/"/>
    <id>https://www.windsings.com//posts/ba28a029/</id>
    <published>2018-10-15T09:53:35.000Z</published>
    <updated>2018-10-15T10:37:36.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&amp;tqId=11155&amp;tPage=1&amp;rp=1&amp;ru=%2Fta%2Fcoding-interviews&amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x66FF;&#x6362;&#x7A7A;&#x683C;<br><a id="more"></a></p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x8BF7;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5C06;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x7A7A;&#x683C;&#x66FF;&#x6362;&#x6210;&#x201C;%20&#x201D;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5F53;&#x5B57;&#x7B26;&#x4E32;&#x4E3A;We Are Happy.&#x5219;&#x7ECF;&#x8FC7;&#x66FF;&#x6362;&#x4E4B;&#x540E;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4E3A;We%20Are%20Happy&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><p>&#x6211;&#x81EA;&#x5DF1;&#x4E00;&#x5F00;&#x59CB;&#x5199;&#x7684;&#xFF0C;&#x975E;&#x5E38;&#x7B28;&#x7684;&#x65B9;&#x6CD5;&#x3002;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">replaceSpace</span><span class="params">(<span class="keyword">char</span> *str, <span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (str[i]==<span class="string">&apos; &apos;</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = length+<span class="number">1</span>; j &gt; i+<span class="number">2</span>; j--)</span><br><span class="line">                {</span><br><span class="line">                    str[j] = str[j - <span class="number">2</span>];</span><br><span class="line">                }</span><br><span class="line">                length += <span class="number">2</span>;</span><br><span class="line">                str[i++] = <span class="string">&apos;%&apos;</span>;</span><br><span class="line">                str[i++] = <span class="string">&apos;2&apos;</span>;</span><br><span class="line">                str[i] = <span class="string">&apos;0&apos;</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></p><p>&#x7136;&#x540E;&#x70B9;&#x5F00;&#x8BA8;&#x8BBA;&#x533A;&#xFF0C;&#x5927;&#x4F6C;&#x4EEC;&#x5F00;&#x59CB;&#x79C0;&#x81EA;&#x5DF1;&#x7684;&#x725B;&#x903C;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x83DC;&#x9E21;&#x745F;&#x745F;&#x53D1;&#x6296;&#x3002;</p><p>&#x5927;&#x6982;&#x601D;&#x8DEF;&#x5982;&#x4E0B;&#xFF1A;</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/4060ac7e3e404ad1a894ef3e17650423?tpId=13&amp;amp;tqId=11155&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=%2Fta%2Fcoding-interviews&amp;amp;qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x66FF;&amp;#x6362;&amp;#x7A7A;&amp;#x683C;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="剑指Offer" scheme="https://www.windsings.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="字符串" scheme="https://www.windsings.com/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="剑指Offer" scheme="https://www.windsings.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指Offer-二维数组中的查找</title>
    <link href="https://www.windsings.com//posts/2f2a2f9c/"/>
    <id>https://www.windsings.com//posts/2f2a2f9c/</id>
    <published>2018-10-15T09:34:52.000Z</published>
    <updated>2018-10-15T09:53:44.939Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;tqId=11154&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a></p><p>&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x67E5;&#x627E;<br><a id="more"></a></p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x5728;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x4E2D;&#xFF08;&#x6BCF;&#x4E2A;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x7684;&#x957F;&#x5EA6;&#x76F8;&#x540C;&#xFF09;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x90FD;&#x6309;&#x7167;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x9012;&#x589E;&#x7684;&#x987A;&#x5E8F;&#x6392;&#x5E8F;&#xFF0C;&#x6BCF;&#x4E00;&#x5217;&#x90FD;&#x6309;&#x7167;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x9012;&#x589E;&#x7684;&#x987A;&#x5E8F;&#x6392;&#x5E8F;&#x3002;&#x8BF7;&#x5B8C;&#x6210;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x8F93;&#x5165;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x548C;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x5224;&#x65AD;&#x6570;&#x7EC4;&#x4E2D;&#x662F;&#x5426;&#x542B;&#x6709;&#x8BE5;&#x6574;&#x6570;&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><ol><li>&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x66B4;&#x529B;&#x641C;&#x7D22;&#xFF0C;&#x4F46;&#x662F;&#x8981;&#x6CE8;&#x610F;&#x526A;&#x679D;&#x3002;</li><li>&#x7559;&#x610F;&#x5230;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x884C;&#xFF0C;&#x90FD;&#x662F;&#x6309;&#x7167;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x5217;&#xFF0C;&#x4E5F;&#x662F;&#x6309;&#x7167;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x9012;&#x589E;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x4ECE;&#x6700;&#x5DE6;&#x4E0B;&#x8FDB;&#x884C;&#x641C;&#x7D22;&#xFF1A;&#x82E5;&#x5F53;&#x524D;&#x6570;&gt;target&#xFF0C;&#x5411;&#x4E0A;&#x3002;&#x53CD;&#x4E4B;&#xFF0C;&#x82E5;&#x5F53;&#x524D;&#x6570;\&lt;target&#xFF0C;&#x5411;&#x53F3;&#x3002;</li></ol><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><p>&#x66B4;&#x529B;&#x641C;&#x7D22;+&#x526A;&#x679D;</p><p>&#x8FD9;&#x91CC;&#x6CA1;&#x7528;&#x5230;&#x6BCF;&#x5217;&#x90FD;&#x662F;&#x6309;&#x7167;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x7684;&#x6761;&#x4EF6;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x5F00;&#x59CB;&#x5199;&#x7684;&#xFF0C;&#x5199;&#x7684;&#x4E0D;&#x597D;&#x3002;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">array</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">        <span class="keyword">int</span> hang = <span class="built_in">array</span>.size();</span><br><span class="line">        <span class="keyword">int</span> lie = <span class="built_in">array</span>[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hang; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; lie; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">array</span>[i][j] == target)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">array</span>[i][j] &gt; target)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></p><p>&#x66F4;&#x597D;&#x7684;&#x4EE3;&#x7801;&#xFF1A;&#x4ECE;&#x5DE6;&#x4E0B;&#x5F00;&#x59CB;&#x641C;&#x7D22;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> {</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">array</span>)</span> </span>{</span><br><span class="line">        <span class="comment">// array&#x662F;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#xFF0C;&#x8FD9;&#x91CC;&#x6CA1;&#x505A;&#x5224;&#x7A7A;&#x64CD;&#x4F5C;</span></span><br><span class="line">        <span class="keyword">int</span> rows = <span class="built_in">array</span>.size();</span><br><span class="line">        <span class="keyword">int</span> cols = <span class="built_in">array</span>[<span class="number">0</span>].size();</span><br><span class="line">        <span class="keyword">int</span> i=rows<span class="number">-1</span>,j=<span class="number">0</span>;<span class="comment">//&#x5DE6;&#x4E0B;&#x89D2;&#x5143;&#x7D20;&#x5750;&#x6807;</span></span><br><span class="line">        <span class="keyword">while</span>(i&gt;=<span class="number">0</span> &amp;&amp; j&lt;cols){<span class="comment">//&#x4F7F;&#x5176;&#x4E0D;&#x8D85;&#x51FA;&#x6570;&#x7EC4;&#x8303;&#x56F4;</span></span><br><span class="line">            <span class="keyword">if</span>(target&lt;<span class="built_in">array</span>[i][j])</span><br><span class="line">                i--;<span class="comment">//&#x67E5;&#x627E;&#x7684;&#x5143;&#x7D20;&#x8F83;&#x5C11;&#xFF0C;&#x5F80;&#x4E0A;&#x627E;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(target&gt;<span class="built_in">array</span>[i][j])</span><br><span class="line">                j++;<span class="comment">//&#x67E5;&#x627E;&#x5143;&#x7D20;&#x8F83;&#x5927;&#xFF0C;&#x5F80;&#x53F3;&#x627E;</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//&#x627E;&#x5230;</span></span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">};</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.nowcoder.com/practice/abc3fe2ce8e146608e868a70efebf62e?tpId=13&amp;amp;tqId=11154&amp;amp;tPage=1&amp;amp;rp=1&amp;amp;ru=/ta/coding-interviews&amp;amp;qru=/ta/coding-interviews/question-ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x4E8C;&amp;#x7EF4;&amp;#x6570;&amp;#x7EC4;&amp;#x4E2D;&amp;#x7684;&amp;#x67E5;&amp;#x627E;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="剑指Offer" scheme="https://www.windsings.com/categories/%E5%89%91%E6%8C%87Offer/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="查找" scheme="https://www.windsings.com/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="剑指Offer" scheme="https://www.windsings.com/tags/%E5%89%91%E6%8C%87Offer/"/>
    
      <category term="数组" scheme="https://www.windsings.com/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>红黑树-C++语言实现</title>
    <link href="https://www.windsings.com//posts/ef3f5fdd/"/>
    <id>https://www.windsings.com//posts/ef3f5fdd/</id>
    <published>2018-10-13T15:09:16.000Z</published>
    <updated>2018-10-15T12:29:13.700Z</updated>
    
    <content type="html"><![CDATA[<p>&#x7B97;&#x6CD5;&#x8BFE;&#x4E0A;&#x8001;&#x5E08;&#x8BB2;&#x4E86;&#x7EA2;&#x9ED1;&#x6811;&#x3002;&#x6839;&#x636E;&#x7F51;&#x4E0A;&#x5927;&#x795E;&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x81EA;&#x5DF1;&#x53C8;&#x6572;&#x4E86;&#x4E00;&#x904D;&#x3002;<br><a id="more"></a><br>&#x6839;&#x636E; <a href="https://bbs.pediy.com/thread-225432.htm" target="_blank" rel="noopener">&#x7801;&#x56FE;&#x5E76;&#x8302;&#x7EA2;&#x9ED1;&#x6811;</a>&#x81EA;&#x5DF1;&#x53C8;&#x6572;&#x4E86;&#x4E00;&#x904D;&#x3002;</p><h1 id="&#x7C7B;&#x7684;&#x5B9A;&#x4E49;"><a href="#&#x7C7B;&#x7684;&#x5B9A;&#x4E49;" class="headerlink" title="&#x7C7B;&#x7684;&#x5B9A;&#x4E49;"></a>&#x7C7B;&#x7684;&#x5B9A;&#x4E49;</h1><p>RBTree.h<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x7EA2;&#x9ED1;&#x6811;&#x662F;&#x4E00;&#x79CD;&#x81EA;&#x5E73;&#x8861;&#x7684;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x7528;&#x9014;&#x662F;&#x5B9E;&#x73B0;&#x5173;&#x8054;&#x6570;&#x7EC4;&#x3002;</span></span><br><span class="line"><span class="comment">&#x7EA2;&#x9ED1;&#x6811;&#x7531;&#x4EE5;&#x4E0B;5&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x9650;&#x5236;&#xFF1A;</span></span><br><span class="line"><span class="comment">1. &#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x6216;&#x8005;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x6216;&#x8005;&#x662F;&#x7EA2;&#x8272;&#x3002;</span></span><br><span class="line"><span class="comment">2. &#x6839;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#x3002;</span></span><br><span class="line"><span class="comment">3. &#x6BCF;&#x4E2A;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF08;NIL&#xFF09;&#x662F;&#x9ED1;&#x8272;&#x3002;&#x8FD9;&#x91CC;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x662F;&#x6307;&#x4E3A;&#x7A7A;(NIL&#x6216;NULL)&#x7684;&#x53F6;&#x5B50;&#x8282;&#x70B9;</span></span><br><span class="line"><span class="comment">4. &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#x7684;&#xFF0C;&#x5219;&#x5B83;&#x7684;&#x5B50;&#x8282;&#x70B9;&#x5FC5;&#x987B;&#x662F;&#x9ED1;&#x8272;&#x7684;&#x3002;</span></span><br><span class="line"><span class="comment">5. &#x4ECE;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x5230;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x5B59;&#x8282;&#x70B9;&#x7684;&#x6240;&#x6709;&#x8DEF;&#x5F84;&#x4E0A;&#x5305;&#x542B;&#x76F8;&#x540C;&#x6570;&#x76EE;&#x7684;&#x9ED1;&#x8282;&#x70B9;&#x3002;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#x7531;&#x7EA6;&#x675F;&#x6761;&#x4EF6;5&#xFF0C;&#x53EF;&#x5F97;&#xFF1A;&#x4ECE;&#x6839;&#x5230;&#x6240;&#x6709;&#x6930;&#x5B50;&#x7684;&#x6700;&#x957F;&#x7684;&#x8DEF;&#x5F84;&#x4E0D;&#x591A;&#x4E8E;&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x7684;2&#x500D;&#x957F;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x68F5;&#x6811;&#x5927;&#x81F4;&#x4E0A;&#x662F;&#x5E73;&#x8861;&#x7684;&#x3002;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x8FD9;&#x4E2A;class&#x91CC;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x6BD4;&#x8F83;&#x7684;&#x8BED;&#x53E5;&#xFF0C;&#x6211;&#x628A;&#x5E38;&#x91CF;&#x503C;&#x5168;&#x90FD;&#x653E;&#x5728;&#x4E86;&#x5DE6;&#x8FB9;&#xFF0C;&#x9632;&#x6B62;&#x5C11;&#x5199;&#x4E00;&#x4E2A;&#x7B49;&#x53F7;&#x7684;&#x60C5;&#x51B5;&#x3002;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RBTree</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">enum</span></span><br><span class="line">    {</span><br><span class="line">        RBT_COLOR_RED,</span><br><span class="line">        RBT_COLOR_BLACK,</span><br><span class="line">    }RBTColor;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> __<span class="title">RBTreeNode</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">        __RBTreeNode* pParent;</span><br><span class="line">        __RBTreeNode* pLeft;</span><br><span class="line">        __RBTreeNode* pRight;</span><br><span class="line">        RBTColor Color;</span><br><span class="line">        <span class="keyword">int</span> Value;</span><br><span class="line">    }RBTreeNode, *pRBTreeNode;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertFixUP</span><span class="params">(pRBTreeNode pInsertNode)</span></span>;<span class="comment">//&#x63D2;&#x5165;InsertNode&#x4E4B;&#x540E;&#xFF0C;&#x8C03;&#x6574;&#x7EA2;&#x9ED1;&#x6811;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DeleteFixUp</span><span class="params">(pRBTreeNode pFixNode)</span></span>;<span class="comment">//&#x5220;&#x9664;DeleteNode&#x4E4B;&#x540E;&#xFF0C;&#x8C03;&#x6574;&#x7EA2;&#x9ED1;&#x6811;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SingleLeft</span><span class="params">(pRBTreeNode &amp;pNode, pRBTreeNode &amp;newTop)</span></span>;<span class="comment">//&#x5DE6;&#x65CB;&#x8F6C;&#xFF0C;&#x8FD4;&#x56DE;&#x65B0;&#x7684;&#x9876;&#x70B9;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SingleRight</span><span class="params">(pRBTreeNode &amp;pNode, pRBTreeNode &amp;newTop)</span></span>;<span class="comment">//&#x53F3;&#x65CB;&#x8F6C;&#xFF0C;&#x8FD4;&#x56DE;&#x65B0;&#x7684;&#x9876;&#x70B9;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ReplaceParent</span><span class="params">(pRBTreeNode pBeReplacedNode, pRBTreeNode pReplaceNode)</span></span>;<span class="comment">//&#x628A;pReplaceNode&#x7684;&#x7236;&#x8282;&#x70B9;&#x4FEE;&#x6539;&#x4E3A;pBeReplacedNode&#x7684;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">GetMinNode</span><span class="params">(pRBTreeNode pNode, pRBTreeNode &amp;pMinNode)</span></span>;<span class="comment">//&#x83B7;&#x53D6;&#x6700;&#x5C0F;&#x7684;&#x8282;&#x70B9;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    RBTree();</span><br><span class="line">    ~RBTree();</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">FindElement</span><span class="params">(<span class="keyword">int</span> Value)</span></span>;<span class="comment">//&#x67E5;&#x627E;&#x6570;&#x636E;&#xFF0C;&#x627E;&#x5230;&#x8FD4;&#x56DE;true&#xFF0C;&#x5426;&#x5219;&#x8FD4;&#x56DE;false</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span>;<span class="comment">//&#x5E7F;&#x5EA6;&#x904D;&#x5386;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">()</span></span>;<span class="comment">//&#x5224;&#x7A7A;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">GetMax</span><span class="params">(pRBTreeNode pNode, <span class="keyword">int</span> &amp;MaxValue)</span></span>;<span class="comment">//&#x83B7;&#x53D6;&#x6700;&#x5927;&#x503C;</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">GetMin</span><span class="params">(pRBTreeNode pNode, <span class="keyword">int</span> &amp;MinValue)</span></span>;<span class="comment">//&#x83B7;&#x53D6;&#x6700;&#x5C0F;&#x503C;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DeleteElement</span><span class="params">(<span class="keyword">int</span> DeleteValue)</span></span>;<span class="comment">//&#x5220;&#x9664;&#x5236;&#x5B9A;&#x7684;&#x5143;&#x7D20;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">InsertData</span><span class="params">(<span class="keyword">int</span> InsertValue)</span></span>;<span class="comment">//&#x63D2;&#x5165;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    pRBTreeNode pRoot;<span class="comment">//&#x6839;&#x8282;&#x70B9;&#x6307;&#x9488;</span></span><br><span class="line">    pRBTreeNode pNil;<span class="comment">//&#x7A7A;&#x8282;&#x70B9;</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RBTree::InsertFixUP(pRBTreeNode pInsertNode)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x63D2;&#x5165;&#x8282;&#x70B9;&#x540E;&#xFF0C;&#x5BF9;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x8C03;&#x6574;&#x64CD;&#x4F5C;&#xFF1A;</span></span><br><span class="line"><span class="comment">&#x6839;&#x636E;&#x88AB;&#x63D2;&#x5165;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x60C5;&#x51B5;&#x5206;&#x4E09;&#x7C7B;&#x6765;&#x8BA8;&#x8BBA;</span></span><br><span class="line"><span class="comment">1. &#x88AB;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;</span></span><br><span class="line"><span class="comment">&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x4F1A;&#x4EA7;&#x751F;&#x51B2;&#x7A81;&#xFF0C;&#x4E0D;&#x6EE1;&#x8DB3;&#x7EA6;&#x675F;&#x6761;&#x4EF6;5&#x3002;</span></span><br><span class="line"><span class="comment">&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x88AB;&#x63D2;&#x5165;&#x8282;&#x70B9;&#x662F;&#x4E00;&#x5B9A;&#x5B58;&#x5728;&#x975E;&#x7A7A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#xFF1B;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x8BB2;&#xFF0C;&#x88AB;&#x63D2;&#x5165;&#x8282;&#x70B9;&#x4E5F;&#x4E00;&#x5B9A;&#x5B58;&#x5728;&#x53D4;&#x53D4;&#x8282;&#x70B9;(&#x5373;&#x4F7F;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x7A7A;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x89C6;&#x4E4B;&#x4E3A;&#x5B58;&#x5728;&#xFF0C;&#x7A7A;&#x8282;&#x70B9;&#x672C;&#x8EAB;&#x5C31;&#x662F;&#x9ED1;&#x8272;&#x8282;&#x70B9;)&#x3002;</span></span><br><span class="line"><span class="comment">&#x4F9D;&#x636E;&quot;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;&quot;&#xFF0C;&#x5C06;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x8FDB;&#x4E00;&#x6B65;&#x5212;&#x5206;&#x4E3A;3&#x79CD;&#x60C5;&#x51B5;&#x8FDB;&#x884C;&#x8BA8;&#x8BBA;&#x3002;&#x5904;&#x7406;&#x7684;&#x6838;&#x5FC3;&#x601D;&#x8DEF;&#x662F;&#xFF1A;&#x5C06;&#x7EA2;&#x8272;&#x7684;&#x8282;&#x70B9;&#x79FB;&#x5230;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x6839;&#x8282;&#x70B9;&#x8BBE;&#x7F6E;&#x4E3A;&#x9ED1;&#x8272;&#x3002;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">**&#x4EE5;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#x4E3A;&#x4F8B;**</span></span><br><span class="line"><span class="comment">**&#x5BF9;&#x5E94;&#x7684;&#xFF0C;&#x82E5;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x65F6;&#xFF0C;&#x628A;&#x5BF9;&#x5E94;&#x7684;right&#x548C;left&#x4E92;&#x6362;&#x5373;&#x53EF;**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1.1 &#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#xFF0C;&#x4E14;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF08;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#xFF09;&#x4E5F;&#x662F;&#x7EA2;&#x8272;&#x3002;</span></span><br><span class="line"><span class="comment">1. &#x5C06;&#x201C;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x9ED1;&#x8272;&#x3002;</span></span><br><span class="line"><span class="comment">2. &#x5C06;&#x201C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x9ED1;&#x8272;&#x3002;</span></span><br><span class="line"><span class="comment">3. &#x5C06;&#x201C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x201C;&#x7EA2;&#x8272;&#x201D;&#x3002;</span></span><br><span class="line"><span class="comment">4. &#x5C06;&#x201C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x201C;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x201D;(&#x7EA2;&#x8272;&#x8282;&#x70B9;)&#xFF1B;&#x5373;&#xFF0C;&#x4E4B;&#x540E;&#x7EE7;&#x7EED;&#x5BF9;&#x201C;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x201D;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;</span></span><br><span class="line"><span class="comment">1.2 &#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#xFF0C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x662F;&#x5176;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x3002;</span></span><br><span class="line"><span class="comment">1. &#x5C06;&#x201C;&#x7236;&#x8282;&#x70B9;&#x201D;&#x4F5C;&#x4E3A;&#x201C;&#x65B0;&#x7684;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x201D;&#x3002;</span></span><br><span class="line"><span class="comment">2. &#x4EE5;&#x201C;&#x65B0;&#x7684;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x201D;&#x4E3A;&#x652F;&#x70B9;&#x8FDB;&#x884C;&#x5DE6;&#x65CB;&#x3002;</span></span><br><span class="line"><span class="comment">1.3 &#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#xFF0C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x662F;&#x5176;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#x3002;</span></span><br><span class="line"><span class="comment">1. &#x5C06;&#x201C;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x201C;&#x9ED1;&#x8272;&#x201D;&#x3002;</span></span><br><span class="line"><span class="comment">2. &#x5C06;&#x201C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x201C;&#x7EA2;&#x8272;&#x201D;&#x3002;</span></span><br><span class="line"><span class="comment">3. &#x4EE5;&#x201C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x201D;&#x4E3A;&#x652F;&#x70B9;&#x8FDB;&#x884C;&#x53F3;&#x65CB;&#x3002;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2. &#x88AB;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;</span></span><br><span class="line"><span class="comment">&#x4EC0;&#x4E48;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x505A;&#x3002;&#x8282;&#x70B9;&#x88AB;&#x63D2;&#x5165;&#x540E;&#xFF0C;&#x4ECD;&#x7136;&#x662F;&#x7EA2;&#x9ED1;&#x6811;&#x3002;</span></span><br><span class="line"><span class="comment">3. &#x88AB;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x662F;&#x6839;&#x8282;&#x70B9;&#xFF1A;</span></span><br><span class="line"><span class="comment">&#x76F4;&#x63A5;&#x628A;&#x6B64;&#x8282;&#x70B9;&#x6D82;&#x4E3A;&#x9ED1;&#x8272;&#x3002;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    pRBTreeNode pFixNode = pInsertNode;;</span><br><span class="line">    <span class="comment">//&#x5982;&#x679C;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#x3002;&#xFF08;&#x6839;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;Nil&#xFF0C;&#x4E3A;&#x9ED1;&#x8272;&#x3002;&#xFF09;</span></span><br><span class="line">    <span class="keyword">while</span> (RBT_COLOR_RED == pFixNode-&gt;pParent-&gt;Color)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//1. &#x5982;&#x679C;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x7684;&#x7236;&#x4EB2;&#x4E3A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;</span></span><br><span class="line">        <span class="keyword">if</span> (pFixNode-&gt;pParent == pFixNode-&gt;pParent-&gt;pParent-&gt;pLeft)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//&#x83B7;&#x53D6;&#x53D4;&#x53D4;&#x8282;&#x70B9;(&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;)</span></span><br><span class="line">            pRBTreeNode pUncle = pFixNode-&gt;pParent-&gt;pParent-&gt;pRight;</span><br><span class="line">            <span class="comment">//1.1 &#x5982;&#x679C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x60C5;&#x51B5;1.1.1</span></span><br><span class="line">            <span class="keyword">if</span> (RBT_COLOR_RED == pUncle-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x628A;&#x7236;&#x8282;&#x70B9;&#x548C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x90FD;&#x6539;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                pUncle-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                <span class="comment">//&#x628A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x6539;&#x4E3A;&#x7EA2;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;pParent-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">                <span class="comment">//&#x91CD;&#x65B0;&#x8BA1;&#x7B97;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7956;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">                pFixNode = pFixNode-&gt;pParent-&gt;pParent;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//1.2 &#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E0D;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x4E14;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x3002;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x7A0D;&#x52A0;&#x5904;&#x7406;&#x53D8;&#x4F1A;&#x8F6C;&#x5316;&#x4E3A;&#x60C5;&#x51B5;1.3</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pRight)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x4ECE;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#x65CB;&#x8F6C;</span></span><br><span class="line">                pFixNode = pFixNode-&gt;pParent;</span><br><span class="line">                <span class="comment">//&#x8BB0;&#x5F55;&#x4E0B;&#x65B0;&#x7684;&#x9876;&#x70B9;</span></span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                SingleLeft(pFixNode-&gt;pParent-&gt;pLeft, pNewTop);</span><br><span class="line">                <span class="comment">//&#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x8C03;&#x6574;&#x8282;&#x70B9;</span></span><br><span class="line">                pFixNode = pNewTop-&gt;pLeft;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//1.3 &#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x9ED1;&#xFF0C;&#x4E14;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pLeft)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x628A;&#x7236;&#x8282;&#x70B9;&#x53D8;&#x6210;&#x9ED1;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                <span class="comment">//&#x628A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x53D8;&#x6210;&#x7EA2;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;pParent-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">                <span class="comment">//&#x4EE5;&#x7956;&#x7236;&#x8282;&#x70B9;&#x53F3;&#x65CB;&#x8F6C;(&#x6CE8;&#x610F;&#x5230;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;)</span></span><br><span class="line">                pFixNode = pFixNode-&gt;pParent-&gt;pParent;</span><br><span class="line">                <span class="comment">//&#x8BB0;&#x5F55;&#x4E0B;&#x65B0;&#x7684;&#x9876;&#x70B9;</span></span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">if</span> (pRoot == pFixNode)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pRoot, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pLeft)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pFixNode-&gt;pParent-&gt;pLeft, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pRight)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pFixNode-&gt;pParent-&gt;pRight, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//&#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x8C03;&#x6574;&#x70B9;</span></span><br><span class="line">                pFixNode = pNewTop-&gt;pLeft;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//2. &#x5982;&#x679C;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x4E3A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#xFF0C;&#x76F8;&#x5BF9;&#x4E8E;1&#x4E2D;&#xFF0C;&#x628A;left&#x548C;right&#x4E92;&#x6362;&#x5373;&#x53EF;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode-&gt;pParent == pFixNode-&gt;pParent-&gt;pParent-&gt;pRight)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//&#x83B7;&#x53D6;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#xFF08;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#xFF09;</span></span><br><span class="line">            pRBTreeNode pUncle = pFixNode-&gt;pParent-&gt;pParent-&gt;pLeft;</span><br><span class="line">            <span class="comment">//2.1 &#x5982;&#x679C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x7EA2;&#x8272;</span></span><br><span class="line">            <span class="keyword">if</span> (RBT_COLOR_RED == pUncle-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x628A;&#x7236;&#x8282;&#x70B9;&#x548C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x90FD;&#x6539;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                pUncle-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                <span class="comment">//&#x628A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x6539;&#x4E3A;&#x7EA2;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;pParent-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">                <span class="comment">//&#x91CD;&#x65B0;&#x8BA1;&#x7B97;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7956;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">                pFixNode = pFixNode-&gt;pParent-&gt;pParent;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//2.2 &#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7236;&#x4EB2;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#xFF0C;&#x5BF9;&#x5E94;&#x60C5;&#x51B5;1.2&#xFF08;&#x5DE6;&#x53F3;&#x4E92;&#x6362;&#xFF09;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pLeft)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x4ECE;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#x65CB;&#x8F6C;</span></span><br><span class="line">                pFixNode = pFixNode-&gt;pParent;</span><br><span class="line">                <span class="comment">//&#x8BB0;&#x5F55;&#x4E0B;&#x65B0;&#x7684;&#x9876;&#x70B9;</span></span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                SingleRight(pFixNode-&gt;pParent-&gt;pRight, pNewTop);</span><br><span class="line">                <span class="comment">//&#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x8C03;&#x6574;&#x8282;&#x70B9;</span></span><br><span class="line">                pFixNode = pNewTop-&gt;pRight;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//2.3 &#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#xFF0C;&#x5BF9;&#x5E94;&#x60C5;&#x51B5;1.3&#xFF08;&#x5DE6;&#x53F3;&#x4E92;&#x6362;&#xFF09;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pRight)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x628A;&#x7236;&#x8282;&#x70B9;&#x53D8;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                <span class="comment">//&#x628A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x53D8;&#x4E3A;&#x7EA2;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;pParent-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">                <span class="comment">//&#x5BF9;&#x7956;&#x7236;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x5DE6;&#x65CB;&#x8F6C;&#xFF08;&#x6CE8;&#x610F;&#x5230;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;&#xFF09;</span></span><br><span class="line">                pFixNode = pFixNode-&gt;pParent-&gt;pParent;</span><br><span class="line">                <span class="comment">//&#x8BB0;&#x5F55;&#x4E0B;&#x65B0;&#x8282;&#x70B9;</span></span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">if</span> (pRoot == pFixNode)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pRoot, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pLeft)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pFixNode-&gt;pParent-&gt;pLeft, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pRight)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pFixNode-&gt;pParent-&gt;pRight, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//&#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x8C03;&#x6574;&#x8282;&#x70B9;</span></span><br><span class="line">                pFixNode = pNewTop-&gt;pRight;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//&#x6700;&#x540E;&#x628A;&#x6839;&#x8282;&#x70B9;&#x8BBE;&#x7F6E;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">    pRoot-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RBTree::DeleteFixUp(pRBTreeNode pFixNode)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x6062;&#x590D;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x3002;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="keyword">while</span> (pFixNode != pRoot&amp;&amp;RBT_COLOR_BLACK == pFixNode-&gt;Color)</span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//1. &#x5982;&#x679C;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x662F;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;</span></span><br><span class="line">        <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pLeft)</span><br><span class="line">        {</span><br><span class="line">            pRBTreeNode pBrotherNode = pFixNode-&gt;pParent-&gt;pRight;<span class="comment">//&#x5144;&#x5F1F;&#x8282;&#x70B9;</span></span><br><span class="line">            <span class="comment">//1.1 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x5219;&#x53EA;&#x80FD;&#x8C03;&#x6574;&#x6210;&#x5176;&#x4ED6;&#x7684;&#x60C5;&#x51B5;</span></span><br><span class="line">            <span class="keyword">if</span> (RBT_COLOR_RED == pBrotherNode-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x628A;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">                pBrotherNode-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                <span class="comment">//&#x628A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x7EA2;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">                <span class="comment">//&#x4EE5;&#x7236;&#x8282;&#x70B9;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x65CB;</span></span><br><span class="line">                pRBTreeNode pPivot = pFixNode-&gt;pParent;</span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="comment">//&#x5907;&#x4EFD;parent&#x7684;&#x6307;&#x9488;&#xFF0C;&#x56E0;&#x4E3A;&#x65CB;&#x8F6C;&#x64CD;&#x4F5C;&#x4F1A;&#x4FEE;&#x6539;parent&#x6307;&#x9488;</span></span><br><span class="line">                pRBTreeNode pBackParent = pFixNode-&gt;pParent;</span><br><span class="line">                <span class="keyword">if</span> (pRoot == pPivot)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pRoot, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pPivot == pPivot-&gt;pParent-&gt;pLeft)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pPivot-&gt;pParent-&gt;pLeft, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pPivot == pPivot-&gt;pParent-&gt;pRight)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pPivot-&gt;pParent-&gt;pRight, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//&#x6062;&#x590D;pFixNode&#x7684;parent&#x6307;&#x9488;</span></span><br><span class="line">                pFixNode-&gt;pParent = pBackParent;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//1.2 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x53F3;&#x5B69;&#x5B50;&#x5747;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (RBT_COLOR_BLACK == pBrotherNode-&gt;pLeft-&gt;Color&amp;&amp;RBT_COLOR_BLACK == pBrotherNode-&gt;pRight-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x628A;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x67D3;&#x6210;&#x7EA2;&#x8272;</span></span><br><span class="line">                pBrotherNode-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">                <span class="comment">//FixUpNode&#x4FEE;&#x6539;&#x4E3A;&#x7236;&#x4EB2;&#x8282;&#x70B9;</span></span><br><span class="line">                pFixNode = pFixNode-&gt;pParent;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//1.3 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#x5E76;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x5DE6;&#x5B69;&#x5B50;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x53F3;&#x5B69;&#x5B50;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (RBT_COLOR_RED == pBrotherNode-&gt;pLeft-&gt;Color&amp;&amp;RBT_COLOR_BLACK == pBrotherNode-&gt;pRight-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x4EA4;&#x6362;&#x989C;&#x8272;</span></span><br><span class="line">                RBTColor tempNodeColor = pBrotherNode-&gt;pLeft-&gt;Color;</span><br><span class="line">                pBrotherNode-&gt;pLeft-&gt;Color = pBrotherNode-&gt;Color;</span><br><span class="line">                pBrotherNode-&gt;Color = tempNodeColor;</span><br><span class="line">                <span class="comment">//&#x5907;&#x4EFD;parent&#x7684;&#x6307;&#x9488;&#xFF0C;&#x56E0;&#x4E3A;&#x65CB;&#x8F6C;&#x64CD;&#x4F5C;&#x4F1A;&#x4FEE;&#x6539;parent&#x6307;&#x9488;</span></span><br><span class="line">                pRBTreeNode pBackParent = pFixNode-&gt;pParent;</span><br><span class="line">                <span class="comment">//&#x4EE5;pBrotherNode&#x8FDB;&#x884C;&#x53F3;&#x65CB;</span></span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                SingleRight(pBrotherNode-&gt;pParent-&gt;pRight, pNewTop);</span><br><span class="line">                <span class="comment">//&#x6062;&#x590D;pFixNode&#x7684;parent&#x6307;&#x9488;</span></span><br><span class="line">                pFixNode-&gt;pParent = pBackParent;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//1.4 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x610F;&#x989C;&#x8272;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (RBT_COLOR_RED == pBrotherNode-&gt;pRight-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                pBrotherNode-&gt;Color = pFixNode-&gt;pParent-&gt;Color;</span><br><span class="line">                pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                pBrotherNode-&gt;pRight-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                <span class="comment">//&#x4EE5;pFixNode-&gt;pParent&#x5DE6;&#x65CB;</span></span><br><span class="line">                pRBTreeNode pPivot = pFixNode-&gt;pParent;</span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">if</span> (pRoot == pPivot)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pPivot, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pPivot == pPivot-&gt;pParent-&gt;pLeft)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pPivot-&gt;pParent-&gt;pLeft, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pPivot == pPivot-&gt;pParent-&gt;pRight)</span><br><span class="line">                {</span><br><span class="line">                    SingleLeft(pPivot-&gt;pParent-&gt;pRight, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                pFixNode = pRoot;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//2. &#x5982;&#x679C;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x662F;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (pFixNode == pFixNode-&gt;pParent-&gt;pRight)</span><br><span class="line">        {</span><br><span class="line">            pRBTreeNode pBrotherNode = pFixNode-&gt;pParent-&gt;pLeft;</span><br><span class="line">            <span class="comment">//2.1 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x4E3A;&#x7EA2;&#x8272;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x53EA;&#x80FD;&#x901A;&#x8FC7;&#x9009;&#x62E9;&#x8C03;&#x6574;&#x6210;&#x5176;&#x4ED6;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x518D;&#x6765;&#x5904;&#x7406;</span></span><br><span class="line">            <span class="keyword">if</span> (RBT_COLOR_RED == pBrotherNode-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x628A;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">                pBrotherNode-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                <span class="comment">//&#x628A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x7EA2;&#x8272;</span></span><br><span class="line">                pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">                <span class="comment">//&#x4EE5;&#x7236;&#x8282;&#x70B9;&#x4E3A;&#x6839;&#xFF0C;&#x8FDB;&#x884C;&#x53F3;&#x65CB;</span></span><br><span class="line">                pRBTreeNode pPivot = pFixNode-&gt;pParent;</span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="comment">//&#x540C;&#x6837;&#x5907;&#x4EFD;&#x7236;&#x8282;&#x70B9;&#x6307;&#x9488;</span></span><br><span class="line">                pRBTreeNode pBackParent = pFixNode-&gt;pParent;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">if</span> (pRoot == pPivot)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pRoot, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pPivot == pPivot-&gt;pParent-&gt;pLeft)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pPivot-&gt;pParent-&gt;pLeft, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pPivot == pPivot-&gt;pParent-&gt;pRight)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pPivot-&gt;pParent-&gt;pRight, pNewTop);</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">                <span class="comment">//&#x6062;&#x590D;pFixNode&#x7684;Parent&#x6307;&#x9488;</span></span><br><span class="line">                pFixNode-&gt;pParent = pBackParent;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//2.2 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x53F3;&#x5B69;&#x5B50;&#x5747;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (RBT_COLOR_BLACK == pBrotherNode-&gt;pLeft-&gt;Color&amp;&amp;RBT_COLOR_BLACK == pBrotherNode-&gt;pRight-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x7EA2;&#x8272;</span></span><br><span class="line">                pBrotherNode-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">                <span class="comment">//FixUpNode &#x4FEE;&#x6539;&#x4E3A;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">                pFixNode = pFixNode-&gt;pParent;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//2.3 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x5E76;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x53F3;&#x5B69;&#x5B50;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x5DE6;&#x5B69;&#x5B50;&#x4E3A;&#x9ED1;&#x8272;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (RBT_COLOR_BLACK == pBrotherNode-&gt;pLeft-&gt;Color&amp;&amp;RBT_COLOR_RED == pBrotherNode-&gt;pRight-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                <span class="comment">//&#x4EA4;&#x6362;&#x989C;&#x8272;</span></span><br><span class="line">                RBTColor tempNodeColor = pBrotherNode-&gt;pRight-&gt;Color;</span><br><span class="line">                pBrotherNode-&gt;pRight-&gt;Color = pBrotherNode-&gt;Color;</span><br><span class="line">                pBrotherNode-&gt;Color = tempNodeColor;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//&#x5907;&#x4EFD;parent&#x6307;&#x9488;</span></span><br><span class="line">                pRBTreeNode pBackParent = pFixNode-&gt;pParent;</span><br><span class="line">                <span class="comment">//&#x4EE5;pBrotherNode&#x8FDB;&#x884C;&#x53F3;&#x65CB;</span></span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                SingleLeft(pBrotherNode-&gt;pParent-&gt;pLeft, pNewTop);</span><br><span class="line">                <span class="comment">//&#x6062;&#x590D;pFixNode&#x7684;parent&#x6307;&#x9488;</span></span><br><span class="line">                pFixNode-&gt;pParent = pBrotherNode;</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">//2.4. &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;,&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x5DE6;&#x5B69;&#x5B50;&#x662F;&#x7EA2;&#x8272;,&#x53F3;&#x5B69;&#x5B50;&#x989C;&#x8272;&#x4E0D;&#x9650;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (RBT_COLOR_RED == pBrotherNode-&gt;pLeft-&gt;Color)</span><br><span class="line">            {</span><br><span class="line">                pBrotherNode-&gt;Color = pFixNode-&gt;pParent-&gt;Color;</span><br><span class="line">                pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                pBrotherNode-&gt;pLeft-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">                pRBTreeNode pPivot = pFixNode-&gt;pParent;</span><br><span class="line">                pRBTreeNode pNewTop = <span class="literal">nullptr</span>;</span><br><span class="line">                <span class="keyword">if</span> (pRoot == pPivot)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pPivot, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pPivot == pPivot-&gt;pParent-&gt;pLeft)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pPivot-&gt;pParent-&gt;pLeft, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (pPivot == pPivot-&gt;pParent-&gt;pRight)</span><br><span class="line">                {</span><br><span class="line">                    SingleRight(pPivot-&gt;pParent-&gt;pRight, pNewTop);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">//&#x5728;&#x6267;&#x884C;&#x5B8C;&#x8FD9;&#x4E00;&#x6B65;&#x540E;&#xFF0C;&#x4E00;&#x5B9A;&#x4F1A;&#x8C03;&#x6574;&#x597D;&#xFF0C;&#x76F4;&#x63A5;&#x8BBE;&#x7F6E;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x4E0B;&#x6B21;&#x9000;&#x51FA;</span></span><br><span class="line">                pFixNode = pRoot;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    pFixNode-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RBTree::SingleLeft(pRBTreeNode &amp; pNode, pRBTreeNode &amp; newTop)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">k2k1</span></span><br><span class="line"><span class="comment">\ /     \</span></span><br><span class="line"><span class="comment">k1      k2  N</span></span><br><span class="line"><span class="comment">\</span></span><br><span class="line"><span class="comment">N</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    pRBTreeNode k2 = pNode;</span><br><span class="line">    pRBTreeNode k1 = pNode-&gt;pRight;</span><br><span class="line">    k2-&gt;pRight = k1-&gt;pLeft;</span><br><span class="line">    <span class="comment">//&#x4FEE;&#x6539;k1&#x5DE6;&#x5B69;&#x5B50;&#x7684;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">    <span class="keyword">if</span> (k1-&gt;pLeft)</span><br><span class="line">    {</span><br><span class="line">        k1-&gt;pLeft-&gt;pParent = k2;</span><br><span class="line">    }</span><br><span class="line">    k1-&gt;pLeft = k2;</span><br><span class="line">    <span class="comment">//&#x4FEE;&#x6539;k1&#x7684;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">    k1-&gt;pParent = pNode-&gt;pParent;</span><br><span class="line">    <span class="comment">//&#x4FEE;&#x6539;k2&#x7684;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">    k2-&gt;pParent = k1;</span><br><span class="line">    <span class="comment">//&#x8FD4;&#x56DE;&#x7ED3;&#x679C;</span></span><br><span class="line">    pNode = k1;</span><br><span class="line">    newTop = k1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RBTree::SingleRight(pRBTreeNode &amp; pNode, pRBTreeNode &amp; newTop)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">k2 k1</span></span><br><span class="line"><span class="comment">/   /     \</span></span><br><span class="line"><span class="comment">k1 N         k2</span></span><br><span class="line"><span class="comment">/</span></span><br><span class="line"><span class="comment">N</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    pRBTreeNode k2 = pNode;</span><br><span class="line">    pRBTreeNode k1 = pNode-&gt;pLeft;</span><br><span class="line">    k2-&gt;pLeft = k1-&gt;pRight;</span><br><span class="line">    <span class="comment">//&#x4FEE;&#x6539;k1&#x53F3;&#x5B69;&#x5B50;&#x7684;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">    <span class="keyword">if</span> (k1-&gt;pRight)</span><br><span class="line">    {</span><br><span class="line">        k1-&gt;pRight-&gt;pParent = k2;</span><br><span class="line">    }</span><br><span class="line">    k1-&gt;pRight = k2;</span><br><span class="line">    <span class="comment">//&#x4FEE;&#x6539;k1&#x7684;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">    k1-&gt;pParent = pNode-&gt;pParent;</span><br><span class="line">    <span class="comment">//&#x4FEE;&#x6539;k2&#x7684;&#x7236;&#x8282;&#x70B9;</span></span><br><span class="line">    k2-&gt;pParent = k1;</span><br><span class="line">    <span class="comment">//&#x8FD4;&#x56DE;&#x7ED3;&#x679C;</span></span><br><span class="line">    pNode = k1;</span><br><span class="line">    newTop = k1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RBTree::ReplaceParent(pRBTreeNode pBeReplacedNode, pRBTreeNode pReplaceNode)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//&#x66FF;&#x6362;&#x8282;&#x70B9;&#x5E76;&#x4FEE;&#x6539;&#x7236;&#x8282;&#x70B9;&#x7684;&#x64CD;&#x4F5C;</span></span><br><span class="line">    <span class="comment">//1. &#x5982;&#x679C;pBeReplacedNode&#x662F;&#x6839;&#x8282;&#x70B9;</span></span><br><span class="line">    <span class="keyword">if</span> (pBeReplacedNode == pRoot)</span><br><span class="line">    {</span><br><span class="line">        pRoot = pReplaceNode;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//2. &#x5982;&#x679C;pBeReplacedNode&#x662F;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pBeReplacedNode == pBeReplacedNode-&gt;pParent-&gt;pLeft)</span><br><span class="line">    {</span><br><span class="line">        pBeReplacedNode-&gt;pParent-&gt;pLeft = pReplaceNode;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//3. &#x5982;&#x679C;pBeReplacedNode&#x662F;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pBeReplacedNode == pBeReplacedNode-&gt;pParent-&gt;pRight)</span><br><span class="line">    {</span><br><span class="line">        pBeReplacedNode-&gt;pParent-&gt;pRight = pReplaceNode;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//4. &#x4FEE;&#x6539;pReplaceNode&#x7684;&#x7236;&#x4EB2;&#x8282;&#x70B9;</span></span><br><span class="line">    pReplaceNode-&gt;pParent = pBeReplacedNode-&gt;pParent;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> RBTree::GetMinNode(pRBTreeNode pNode, pRBTreeNode &amp; pMinNode)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == pNode || pNode == pNil)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    pRBTreeNode pPreNode = pNode-&gt;pParent;</span><br><span class="line">    <span class="keyword">while</span> (pNil != pNode)</span><br><span class="line">    {</span><br><span class="line">        pPreNode = pNode;</span><br><span class="line">        pNode = pNode-&gt;pLeft;</span><br><span class="line">    }</span><br><span class="line">    pMinNode = pPreNode;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">RBTree::RBTree()</span><br><span class="line">{</span><br><span class="line">    pRoot = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    pNil = <span class="keyword">new</span> RBTreeNode();</span><br><span class="line">    pNil-&gt;pLeft = <span class="literal">nullptr</span>;</span><br><span class="line">    pNil-&gt;pRight = <span class="literal">nullptr</span>;</span><br><span class="line">    pNil-&gt;pParent = <span class="literal">nullptr</span>;</span><br><span class="line">    pNil-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">    pNil-&gt;Value = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">RBTree::~RBTree()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (!isEmpty())</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;pRBTreeNode&gt;nodeQue;</span><br><span class="line">        nodeQue.push(pRoot);<span class="comment">//&#x6839;&#x8282;&#x70B9;&#x5165;&#x961F;</span></span><br><span class="line">        <span class="keyword">while</span> (!nodeQue.empty())<span class="comment">//&#x961F;&#x5217;&#x975E;&#x7A7A;</span></span><br><span class="line">        {</span><br><span class="line">            pRBTreeNode pNode = nodeQue.front();</span><br><span class="line">            pRBTreeNode pLeft = pNode-&gt;pLeft;</span><br><span class="line">            pRBTreeNode pRight = pNode-&gt;pRight;</span><br><span class="line">            <span class="comment">//&#x51FA;&#x961F;&#x91CA;&#x653E;&#x8D44;&#x6E90;</span></span><br><span class="line">            nodeQue.pop();</span><br><span class="line">            <span class="keyword">if</span> (pLeft != pNil)nodeQue.push(pLeft);</span><br><span class="line">            <span class="keyword">if</span> (pRight != pNil)nodeQue.push(pRight);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (pNil)<span class="comment">//&#x5982;&#x679C;&#x662F;&#x7A7A;&#x8282;&#x70B9;</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">delete</span> pNil;</span><br><span class="line">        pNil = <span class="literal">nullptr</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> RBTree::FindElement(<span class="keyword">int</span> Value)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (isEmpty())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    pRBTreeNode pCurrent = pRoot;</span><br><span class="line">    <span class="keyword">while</span> (pNil != pCurrent)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (Value&lt;pCurrent-&gt;Value)</span><br><span class="line">        {</span><br><span class="line">            pCurrent = pCurrent-&gt;pLeft;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (Value&gt;pCurrent-&gt;Value)</span><br><span class="line">        {</span><br><span class="line">            pCurrent = pCurrent-&gt;pRight;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RBTree::BFS()</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (isEmpty())<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;pRBTreeNode&gt;nodeQue;</span><br><span class="line">    nodeQue.push(pRoot);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//BFS</span></span><br><span class="line">    <span class="keyword">int</span> TreeHeight = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!nodeQue.empty())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> nCurrentLevelSize = nodeQue.size();<span class="comment">//&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x5C42;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;</span></span><br><span class="line">        <span class="keyword">int</span> nCnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#x7B2C;&quot;</span> &lt;&lt; TreeHeight + <span class="number">1</span> &lt;&lt; <span class="string">&quot;&#x5C42;&quot;</span>;</span><br><span class="line">        <span class="keyword">while</span> (nCnt &lt; nCurrentLevelSize)</span><br><span class="line">        {</span><br><span class="line">            pRBTreeNode acessNode = nodeQue.front();</span><br><span class="line">            nodeQue.pop();</span><br><span class="line">            <span class="keyword">if</span> (acessNode == pRoot)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; acessNode-&gt;Value &lt;&lt; <span class="string">&quot;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x989C;&#x8272;&quot;</span> &lt;&lt; acessNode-&gt;Color &lt;&lt; <span class="string">&quot;)&quot;</span> &lt;&lt; <span class="string">&apos; &apos;</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (acessNode-&gt;pParent-&gt;pLeft == acessNode)</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[(&quot;</span> &lt;&lt; acessNode-&gt;Value &lt;&lt; <span class="string">&quot;&#x989C;&#x8272;&quot;</span> &lt;&lt; acessNode-&gt;Color &lt;&lt; <span class="string">&apos;)&apos;</span> &lt;&lt; <span class="string">&apos;(&apos;</span> &lt;&lt; acessNode-&gt;pParent-&gt;Value &lt;&lt; <span class="string">&quot;&#x7684;&#x5DE6;&#x5B69;&#x5B50;)]&quot;</span> &lt;&lt; <span class="string">&apos; &apos;</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (acessNode-&gt;pParent-&gt;pRight == acessNode)</span><br><span class="line">                {</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;[(&quot;</span> &lt;&lt; acessNode-&gt;Value &lt;&lt; <span class="string">&quot;&#x989C;&#x8272;&quot;</span> &lt;&lt; acessNode-&gt;Color &lt;&lt; <span class="string">&apos;)&apos;</span> &lt;&lt; <span class="string">&apos;(&apos;</span> &lt;&lt; acessNode-&gt;pParent-&gt;Value &lt;&lt; <span class="string">&quot;&#x7684;&#x53F3;&#x5B69;&#x5B50;)]&quot;</span> &lt;&lt; <span class="string">&apos; &apos;</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">//&#x4E0B;&#x4E00;&#x5C42;&#x7684;&#x5143;&#x7D20;</span></span><br><span class="line">            pRBTreeNode pLeft = acessNode-&gt;pLeft;</span><br><span class="line">            pRBTreeNode pRight = acessNode-&gt;pRight;</span><br><span class="line">            <span class="keyword">if</span> (pNil != pLeft)</span><br><span class="line">            {</span><br><span class="line">                nodeQue.push(pLeft);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (pNil != pRight)</span><br><span class="line">            {</span><br><span class="line">                nodeQue.push(pRight);</span><br><span class="line">            }</span><br><span class="line">            ++nCnt;</span><br><span class="line">        }</span><br><span class="line">        TreeHeight++;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> RBTree::isEmpty()<span class="comment">//&#x5224;&#x7A7A;</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">return</span> pRoot == <span class="literal">nullptr</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> RBTree::GetMax(pRBTreeNode pNode, <span class="keyword">int</span> &amp; MaxValue)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == pNode)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">while</span> (pNode)</span><br><span class="line">    {</span><br><span class="line">        MaxValue = pNode-&gt;Value;</span><br><span class="line">        pNode = pNode-&gt;pRight;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> RBTree::GetMin(pRBTreeNode pNode, <span class="keyword">int</span> &amp; MinValue)</span><br><span class="line">{</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == pNode)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (pNode)</span><br><span class="line">    {</span><br><span class="line">        MinValue = pNode-&gt;Value;</span><br><span class="line">        pNode = pNode-&gt;pLeft;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RBTree::DeleteElement(<span class="keyword">int</span> DeleteValue)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x5220;&#x9664;&#x64CD;&#x4F5C;</span></span><br><span class="line"><span class="comment">&#x57FA;&#x672C;&#x601D;&#x8DEF;&#x5982;&#x4E0B;&#xFF1A;</span></span><br><span class="line"><span class="comment">1. &#x5C06;&#x7EA2;&#x9ED1;&#x6811;&#x5F53;&#x505A;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#xFF0C;&#x5C06;&#x8282;&#x70B9;&#x5220;&#x9664;&#x3002;</span></span><br><span class="line"><span class="comment">&#x5206;&#x4E09;&#x79CD;&#x60C5;&#x51B5;&#xFF1A;</span></span><br><span class="line"><span class="comment">1. &#x88AB;&#x5220;&#x9664;&#x8282;&#x70B9;&#x6CA1;&#x6709;&#x513F;&#x5B50;&#xFF0C;&#x5373;&#x4E3A;&#x53F6;&#x8282;&#x70B9;&#xFF0C;&#x6B64;&#x65F6;&#x76F4;&#x63A5;&#x5220;&#x9664;&#x5373;&#x53EF;&#x3002;&#x7528;&#x7A7A;&#x8282;&#x70B9;&#x9876;&#x66FF;&#x5B83;&#x7684;&#x4F4D;&#x7F6E;&#x3002;</span></span><br><span class="line"><span class="comment">2. &#x88AB;&#x5220;&#x9664;&#x8282;&#x70B9;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x6B64;&#x65F6;&#xFF0C;&#x76F4;&#x63A5;&#x5220;&#x9664;&#x8BE5;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x552F;&#x4E00;&#x5B50;&#x8282;&#x70B9;&#x9876;&#x66FF;&#x4ED6;&#x3002;</span></span><br><span class="line"><span class="comment">3. &#x88AB;&#x5220;&#x9664;&#x8282;&#x70B9;&#x6709;&#x4E24;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x8981;&#x5148;&#x627E;&#x5230;&#x5B83;&#x7684;&#x76F4;&#x63A5;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF0C;&#x628A;&#x503C;&#x590D;&#x5236;&#x5230;&#x5B83;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x5220;&#x9664;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x4E0D;&#x53EF;&#x80FD;&#x6709;&#x4E24;&#x4E2A;&#x975E;&#x7A7A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x6700;&#x591A;&#x53EA;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x3002;</span></span><br><span class="line"><span class="comment">2. &#x4FEE;&#x6B63;&#x8FD9;&#x68F5;&#x6811;</span></span><br><span class="line"><span class="comment">&#x5728;&#x5220;&#x9664;&#x8282;&#x70B9;&#x540E;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x8FDD;&#x53CD;2,4,5&#x4E09;&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x5373;&#x662F;&#x8C03;&#x6574;&#x6574;&#x68F5;&#x6811;&#xFF0C;&#x4F7F;&#x4E4B;&#x6EE1;&#x8DB3;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x3002;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isEmpty())</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//&#x5148;&#x627E;&#x5230;&#x8981;&#x5220;&#x9664;&#x7684;&#x8282;&#x70B9;</span></span><br><span class="line">    pRBTreeNode pCurrent = pRoot;</span><br><span class="line">    pRBTreeNode pDeletedNode = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">while</span> (pNil != pCurrent)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (DeleteValue&lt;pCurrent-&gt;Value)</span><br><span class="line">        {</span><br><span class="line">            pCurrent = pCurrent-&gt;pLeft;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (DeleteValue&gt;pCurrent-&gt;Value)</span><br><span class="line">        {</span><br><span class="line">            pCurrent = pCurrent-&gt;pRight;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            pDeletedNode = pCurrent;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//2. &#x5982;&#x679C;&#x672A;&#x627E;&#x5230;&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x9000;&#x51FA;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> == pDeletedNode)<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//3. &#x6267;&#x884C;&#x5220;&#x9664;&#x64CD;&#x4F5C;&#xFF0C;&#x8BA1;&#x7B97;&#x51FA;pDeletedNode,pRealDeleteNode,pFixUpNode.</span></span><br><span class="line"></span><br><span class="line">    pRBTreeNode pRealDeleteNode = <span class="literal">nullptr</span>;</span><br><span class="line">    pRBTreeNode pFixUpNode = <span class="literal">nullptr</span>;</span><br><span class="line">    RBTColor RealDeleteColor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.1&#x5982;&#x679C;&#x5DE6;&#x5B50;&#x6811;&#x4E3A;&#x7A7A;</span></span><br><span class="line">    <span class="keyword">if</span> (pNil == pDeletedNode-&gt;pLeft)</span><br><span class="line">    {</span><br><span class="line">        pRealDeleteNode = pDeletedNode;</span><br><span class="line">        RealDeleteColor = pRealDeleteNode-&gt;Color;</span><br><span class="line">        pFixUpNode = pRealDeleteNode-&gt;pRight;</span><br><span class="line">        <span class="comment">//&#x66FF;&#x6362;</span></span><br><span class="line">        ReplaceParent(pRealDeleteNode, pRealDeleteNode-&gt;pRight);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//3.2 &#x5982;&#x679C;&#x53F3;&#x5B50;&#x6811;&#x4E3A;&#x7A7A;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pNil == pDeletedNode-&gt;pRight)</span><br><span class="line">    {</span><br><span class="line">        pRealDeleteNode = pDeletedNode;</span><br><span class="line">        RealDeleteColor = pRealDeleteNode-&gt;Color;</span><br><span class="line">        pFixUpNode = pRealDeleteNode-&gt;pLeft;</span><br><span class="line">        <span class="comment">//&#x66FF;&#x6362;</span></span><br><span class="line">        ReplaceParent(pRealDeleteNode, pRealDeleteNode-&gt;pLeft);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//3.3 &#x5982;&#x679C;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x90FD;&#x4E0D;&#x4E3A;&#x7A7A;</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x53EF;&#x4EE5;&#x7528;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5C0F;&#x7684;&#x8282;&#x70B9;&#x6216;&#x8005;&#x5DE6;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5927;&#x7684;&#x8282;&#x70B9;&#x6765;&#x66FF;&#x6362;&#xFF0C;&#x8FD9;&#x91CC;&#x9009;&#x62E9;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5C0F;&#x7684;&#x8282;&#x70B9;&#x3002;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6027;&#x8D28;&#x4E0D;&#x53D8;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="comment">//&#x83B7;&#x53D6;&#x51C6;&#x5907;&#x5220;&#x9664;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#xFF0C;pRealDeleteNode&#x4E00;&#x5B9A;&#x4E0D;&#x662F;pNil</span></span><br><span class="line">        <span class="keyword">bool</span> GetMinRet = GetMinNode(pDeletedNode-&gt;pRight, pRealDeleteNode);</span><br><span class="line">        assert(GetMinRet);</span><br><span class="line">        assert(pRealDeleteNode != pNil);</span><br><span class="line">        RealDeleteColor = pRealDeleteNode-&gt;Color;</span><br><span class="line">        <span class="comment">//&#x6700;&#x5C0F;&#x7684;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x5DF2;&#x5B9A;&#x4F4D;pNil,&#x6240;&#x4EE5;pRight&#x5C31;&#x662F;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x3002;</span></span><br><span class="line">        pFixUpNode = pRealDeleteNode-&gt;pRight;</span><br><span class="line">        <span class="comment">//&#x601D;&#x8DEF;&#x662F;&#x7528;&#x6700;&#x5C0F;&#x70B9;&#xFF08;pRealDeleteNode&#xFF09;&#x6765;&#x66FF;&#x6362;&#x9700;&#x8981;&#x5220;&#x9664;&#x7684;&#x70B9;&#xFF08;pDeletedNode&#xFF09;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5206;&#x4E24;&#x79CD;&#x60C5;&#x51B5;</span></span><br><span class="line">        <span class="keyword">if</span> (pRealDeleteNode-&gt;pParent == pDeletedNode)</span><br><span class="line">        {</span><br><span class="line">            pFixUpNode-&gt;pParent = pRealDeleteNode;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">//&#x8BA9;pRealDeleteNode&#x7236;&#x8282;&#x70B9;&#x6307;&#x5411; pRealDeleteNode-&gt;pRight</span></span><br><span class="line">            ReplaceParent(pRealDeleteNode, pRealDeleteNode-&gt;pRight);</span><br><span class="line">            <span class="comment">//&#x8BA9;pRealDeleteNode&#x7684;&#x53F3;&#x8282;&#x70B9;&#x63A5;&#x7BA1;&#x539F;&#x6765;pDeletedNode&#x7684;&#x53F3;&#x8282;&#x70B9;</span></span><br><span class="line">            pRealDeleteNode-&gt;pRight = pDeletedNode-&gt;pRight;</span><br><span class="line">            <span class="comment">//&#x8BA9;pRealDeleteNode&#x7684;&#x53F3;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x6307;&#x5411;pRealDeleteNode(&#x53F3;&#x5B50;&#x6811;&#x4E00;&#x5B9A;&#x4E0D;&#x4E3A;pNil)</span></span><br><span class="line">            pRealDeleteNode-&gt;pRight-&gt;pParent = pRealDeleteNode;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//&#x8BA9;pDeleteNode&#x7236;&#x8282;&#x70B9;&#x6307;&#x5411;pRealDeleteNode</span></span><br><span class="line">        ReplaceParent(pDeletedNode, pRealDeleteNode);</span><br><span class="line">        <span class="comment">//&#x8BA9;pRealDeleteNode&#x7684;&#x5DE6;&#x8282;&#x70B9;&#x63A5;&#x7BA1;&#x539F;&#x6765;pDeleteNode&#x7684;&#x53F3;&#x8282;&#x70B9;</span></span><br><span class="line">        pRealDeleteNode-&gt;pLeft = pDeletedNode-&gt;pLeft;</span><br><span class="line">        <span class="comment">//&#x8BA9;pRealDeleteNode&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#x7684;&#x7236;&#x8282;&#x70B9;&#x6307;&#x5411;pRealDeleteNode(&#x5DE6;&#x5B50;&#x6811;&#x4E00;&#x5B9A;&#x4E0D;&#x4E3A;pNil)</span></span><br><span class="line">        pRealDeleteNode-&gt;pLeft-&gt;pParent = pRealDeleteNode;</span><br><span class="line">        <span class="comment">// &#x4F7F;&#x7528;pDeleteNode&#x7684;&#x989C;&#x8272;</span></span><br><span class="line">        pRealDeleteNode-&gt;Color = pDeletedNode-&gt;Color;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//4. &#x5728;pFixUpNode&#x70B9;&#x6267;&#x884C;&#x8C03;&#x6574;</span></span><br><span class="line">    <span class="keyword">if</span> (RBT_COLOR_BLACK == RealDeleteColor)</span><br><span class="line">    {</span><br><span class="line">        DeleteFixUp(pFixUpNode);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//5. &#x5904;&#x7406;&#x6839;&#x8282;&#x70B9;&#x95EE;&#x9898;</span></span><br><span class="line">    <span class="keyword">if</span> (pRoot == pNil)</span><br><span class="line">        pRoot = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="keyword">delete</span> pDeletedNode;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RBTree::InsertData(<span class="keyword">int</span> InsertValue)</span><br><span class="line">{</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x63D2;&#x5165;&#x8282;&#x70B9;&#xFF1A;</span></span><br><span class="line"><span class="comment">&#x4EE5;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#x7684;&#x65B9;&#x6CD5;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002;</span></span><br><span class="line"><span class="comment">&#x4E00;&#x5F00;&#x59CB;&#x8981;&#x628A;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6807;&#x8BB0;&#x4E3A;&#x7EA2;&#x8272;&#x3002;&#x5982;&#x679C;&#x8BBE;&#x4E3A;&#x9ED1;&#x8272;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x6839;&#x5230;&#x53F6;&#x5B50;&#x7684;&#x8DEF;&#x5F84;&#x4E0A;&#xFF0C;&#x4F1A;&#x6709;&#x4E00;&#x6761;&#x8DEF;&#x591A;&#x4E00;&#x4E2A;&#x989D;&#x5916;&#x7684;&#x9ED1;&#x8272;&#x8282;&#x70B9;&#x3002;&#x8FD9;&#x4E2A;&#x662F;&#x5F88;&#x96BE;&#x8C03;&#x6574;&#x7684;&#x3002;</span></span><br><span class="line"><span class="comment">&#x53E6;&#x4E00;&#x4E2A;&#x7406;&#x89E3;&#x662F;&#xFF0C;&#x628A;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x7740;&#x8272;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x4E0D;&#x4F1A;&#x8FDD;&#x80CC;&#x7EA6;&#x675F;&#x6761;&#x4EF6;1235&#xFF0C;&#x53EA;&#x8FDD;&#x80CC;&#x4E00;&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#xFF0C;&#x9700;&#x8981;&#x5904;&#x7406;&#x7684;&#x60C5;&#x51B5;&#x4F1A;&#x5F88;&#x5C11;&#x3002;</span></span><br><span class="line"><span class="comment">&#x63D2;&#x5165;&#x540E;&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x65CB;&#x8F6C;&#x3001;&#x7740;&#x8272;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x4E4B;&#x91CD;&#x65B0;&#x6210;&#x4E3A;&#x4E00;&#x9897;&#x7EA2;&#x9ED1;&#x6811;&#x3002;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="comment">//&#x63D2;&#x5165;&#x7684;&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF1A;&#x8981;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;</span></span><br><span class="line">    <span class="keyword">if</span> (isEmpty())</span><br><span class="line">    {</span><br><span class="line">        pRoot = <span class="keyword">new</span> RBTreeNode();</span><br><span class="line">        pRoot-&gt;Color = RBT_COLOR_BLACK;</span><br><span class="line">        pRoot-&gt;Value = InsertValue;</span><br><span class="line">        pRoot-&gt;pLeft = pNil;</span><br><span class="line">        pRoot-&gt;pRight = pNil;</span><br><span class="line">        pRoot-&gt;pParent = pNil;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//2. &#x627E;&#x5230;&#x9700;&#x8981;&#x63D2;&#x5165;&#x7684;&#x4F4D;&#x7F6E;</span></span><br><span class="line">    pRBTreeNode pPreNode = pRoot-&gt;pParent;</span><br><span class="line">    pRBTreeNode pCurrent = pRoot;</span><br><span class="line">    <span class="keyword">while</span> (pNil != pCurrent)</span><br><span class="line">    {</span><br><span class="line">        pPreNode = pCurrent;</span><br><span class="line">        <span class="keyword">if</span> (InsertValue &lt;= pCurrent-&gt;Value)</span><br><span class="line">        {</span><br><span class="line">            pCurrent = pCurrent-&gt;pLeft;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            pCurrent = pCurrent-&gt;pRight;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//3. &#x628A;&#x6570;&#x636E;&#x63D2;&#x5165;&#x5230;&#x6B63;&#x786E;&#x7684;&#x4F4D;&#x7F6E;</span></span><br><span class="line">    pRBTreeNode pInsertNode = <span class="keyword">new</span> RBTreeNode();</span><br><span class="line">    pInsertNode-&gt;Color = RBT_COLOR_RED;</span><br><span class="line">    pInsertNode-&gt;Value = InsertValue;</span><br><span class="line">    pInsertNode-&gt;pLeft = pNil;</span><br><span class="line">    pInsertNode-&gt;pRight = pNil;</span><br><span class="line">    pInsertNode-&gt;pParent = pPreNode;</span><br><span class="line">    <span class="keyword">if</span> (InsertValue &lt;= pPreNode-&gt;Value)</span><br><span class="line">    {</span><br><span class="line">        pPreNode-&gt;pLeft = pInsertNode;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    {</span><br><span class="line">        pPreNode-&gt;pRight = pInsertNode;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//4. &#x8C03;&#x6574;</span></span><br><span class="line">    InsertFixUP(pInsertNode);</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><h1 id="&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;"><a href="#&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;"></a>&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;</h1><p>main.cpp<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;RBTree.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    RBTree rbTree;</span><br><span class="line">    <span class="comment">//&#x63D2;&#x5165;</span></span><br><span class="line">    <span class="keyword">int</span> n[]= { <span class="number">12</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">19</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">18</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">16</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">17</span> };</span><br><span class="line">    <span class="comment">//int n[] = {1,2,3 };</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        rbTree.InsertData(n[i]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    rbTree.BFS();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//&#x5220;&#x9664;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#x5220;&#x9664;&quot;</span> &lt;&lt; n[i] &lt;&lt; <span class="string">&quot;&#x540E;&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        rbTree.DeleteElement(n[i]);</span><br><span class="line">        rbTree.BFS();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//&#x63D2;&#x5165;&#x4EFB;&#x610F;&#x5E8F;&#x5217;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#x63D2;&#x5165;&#x4EFB;&#x610F;&#x5E8F;&#x5217;&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        rbTree.InsertData(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//&#x67E5;&#x627E;3</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#x67E5;&#x627E;3&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;&#x7ED3;&#x679C;:&quot;</span> &lt;&lt; rbTree.FindElement(<span class="number">3</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    rbTree.BFS();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//&#x5220;&#x9664;&#x4EFB;&#x610F;&#x5E8F;&#x5217;,&#x53EA;&#x7559;&#x4E09;&#x4E2A;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">99</span>; i &gt;= <span class="number">3</span>; i--)</span><br><span class="line">    {</span><br><span class="line">        rbTree.DeleteElement(i);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//&#x5E7F;&#x5EA6;&#x904D;&#x5386;</span></span><br><span class="line">    rbTree.BFS();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;------------------------------&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><h1 id="&#x56FE;&#x89E3;"><a href="#&#x56FE;&#x89E3;" class="headerlink" title="&#x56FE;&#x89E3;"></a>&#x56FE;&#x89E3;</h1><h2 id="&#x5DE6;&#x65CB;"><a href="#&#x5DE6;&#x65CB;" class="headerlink" title="&#x5DE6;&#x65CB;"></a>&#x5DE6;&#x65CB;</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;#x7B97;&amp;#x6CD5;&amp;#x8BFE;&amp;#x4E0A;&amp;#x8001;&amp;#x5E08;&amp;#x8BB2;&amp;#x4E86;&amp;#x7EA2;&amp;#x9ED1;&amp;#x6811;&amp;#x3002;&amp;#x6839;&amp;#x636E;&amp;#x7F51;&amp;#x4E0A;&amp;#x5927;&amp;#x795E;&amp;#x7684;&amp;#x6587;&amp;#x7AE0;&amp;#xFF0C;&amp;#x81EA;&amp;#x5DF1;&amp;#x53C8;&amp;#x6572;&amp;#x4E86;&amp;#x4E00;&amp;#x904D;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://www.windsings.com/categories/algorithm/"/>
    
    
      <category term="红黑树" scheme="https://www.windsings.com/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
      <category term="算法导论" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
      <category term="C++" scheme="https://www.windsings.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>Win10+Anaconda+1060安装TensorFlowow-GPU版</title>
    <link href="https://www.windsings.com//posts/2e45cbc8/"/>
    <id>https://www.windsings.com//posts/2e45cbc8/</id>
    <published>2018-10-05T18:46:44.000Z</published>
    <updated>2018-10-06T18:36:29.095Z</updated>
    
    <content type="html"><![CDATA[<p>1060&#x771F;&#x9999;&#x3002;<br><a id="more"></a></p><h1 id="&#x5F15;&#x8A00;"><a href="#&#x5F15;&#x8A00;" class="headerlink" title="&#x5F15;&#x8A00;"></a>&#x5F15;&#x8A00;</h1><p>TensorFlow&#x662F;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x673A;&#x5668;&#x5B66;&#x4E60;&amp;&amp;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x6846;&#x67B6;&#xFF0C;&#x4F7F;&#x7528;GPU&#x5728;&#x5927;&#x591A;&#x6570;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x5927;&#x5E45;&#x63D0;&#x9AD8;&#x5176;&#x8FD0;&#x7B97;&#x901F;&#x5EA6;&#x3002;</p><p>&#x672C;&#x6587;&#x8BB0;&#x5F55;&#x4E86;&#x6211;&#x5B89;&#x88C5;TensorFlow-GPU&#x7248;&#x672C;&#x7684;&#x8FC7;&#x7A0B;&#x3002;</p><h1 id="&#x73AF;&#x5883;"><a href="#&#x73AF;&#x5883;" class="headerlink" title="&#x73AF;&#x5883;"></a>&#x73AF;&#x5883;</h1><ol><li>&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF1A;Win10&#xFF0C;Windows SDK&#xFF1A;10.0.17134.0</li><li>GPU&#x578B;&#x53F7;&#xFF1A;GTX1060&#xFF0C;&#x79FB;&#x52A8;&#x7248;</li><li>IDE&#xFF1A;VS2017&#x4F01;&#x4E1A;&#x7248;&#xFF0C;&#x7248;&#x672C;15.8.5</li><li>Anaconda&#x7248;&#x672C;1.9.2</li><li>&#x76EE;&#x6807;TensorFlow&#x7248;&#x672C;&#xFF1A;1.10</li></ol><h1 id="&#x5B89;&#x88C5;NVIDIA&#x663E;&#x5361;&#x9A71;&#x52A8;"><a href="#&#x5B89;&#x88C5;NVIDIA&#x663E;&#x5361;&#x9A71;&#x52A8;" class="headerlink" title="&#x5B89;&#x88C5;NVIDIA&#x663E;&#x5361;&#x9A71;&#x52A8;"></a>&#x5B89;&#x88C5;NVIDIA&#x663E;&#x5361;&#x9A71;&#x52A8;</h1><p>&#x4E00;&#x822C;&#x7684;&#x90FD;&#x662F;GTX&#x7CFB;&#x5217;&#x7684;&#x663E;&#x5361;&#xFF0C;&#x53EF;&#x7531;NVIDIA&#x5B98;&#x7F51;&#x4E0B;&#x8F7D;&#x6216;&#x8005;&#x4ECE;&#x7535;&#x8111;&#x5382;&#x5546;&#x7ED9;&#x51FA;&#x7684;&#x9A71;&#x52A8;&#x91CC;&#x5B89;&#x88C5;&#x3002;<br>&#x6211;&#x7684;&#x7B14;&#x8BB0;&#x672C;&#x662F;&#x8054;&#x60F3;&#x62EF;&#x6551;&#x8005;Y7000P&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x76F4;&#x63A5;&#x5B89;&#x88C5;&#x7684;&#x8054;&#x60F3;&#x7ED9;&#x7684;&#x9A71;&#x52A8;&#x3002;</p><h1 id="&#x5B89;&#x88C5;CUDA&#x548C;cudnn"><a href="#&#x5B89;&#x88C5;CUDA&#x548C;cudnn" class="headerlink" title="&#x5B89;&#x88C5;CUDA&#x548C;cudnn"></a>&#x5B89;&#x88C5;CUDA&#x548C;cudnn</h1><p>&#x5728;TensorFlow&#x7684;&#x5B89;&#x88C5;&#x4ECB;&#x7ECD;&#x91CC;&#x7684;&#x663E;&#x793A;&#xFF0C;TensorFlow&#x652F;&#x6301;CUDA9.0&#x3002;</p><p>&#x4E0B;&#x8F7D;CUDA&#x7684;&#x65F6;&#x5019;&#x53D1;&#x73B0;&#xFF0C;CUDA9.0&#x7ADF;&#x7136;&#x4E0D;&#x652F;&#x6301;1060&#x3002;&#x66FE;&#x8003;&#x8651;&#x5728;Docker&#x73AF;&#x5883;&#x4E0B;&#x5B89;&#x88C5;TensorFlow&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0;NVIDIA&#x7ED9;&#x7684;GPU&#x652F;&#x6301;&#x7684;Docker&#x73AF;&#x5883;&#x662F;Linux&#x4E0B;&#x7684;&#xFF0C;&#x4E0D;&#x652F;&#x6301;Windows&#x3002;</p><p>&#x5982;&#x679C;&#x8981;&#x5728;CUDA9.2&#x4E0B;&#x5B89;&#x88C5;TensorFlow&#xFF0C;&#x5219;&#x8981;&#x901A;&#x8FC7;&#x6E90;&#x7801;&#x7F16;&#x8BD1;&#x3002;&#x4E0D;&#x8FC7;&#x597D;&#x5728;&#x6709;&#x5927;&#x795E;&#x5DF2;&#x7ECF;&#x7F16;&#x8BD1;&#x597D;&#x4E86;&#x3002;</p><p>&#x5B89;&#x88C5;CUDA9.2&#xFF0C;&#x53CA;&#x5176;&#x8865;&#x4E01;&#x7A0B;&#x5E8F;&#x3002;</p><p>&#x5728;cudnn&#x91CC;&#x627E;&#x5230;&#x652F;&#x6301;CUDA9.2&#x7684;&#x7248;&#x672C;&#x3002;&#x89E3;&#x538B;&#x540E;&#x5C06;bin,include,lib&#x6587;&#x4EF6;&#x5939;&#x7684;&#x6587;&#x4EF6;&#xFF08;&#x4E00;&#x5171;&#x5C31;&#x4E09;&#x4E2A;&#xFF09;&#x590D;&#x5236;&#x5230;CUDA9.2&#x7684;&#x76EE;&#x5F55;&#xFF08;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2&#xFF09;&#x91CC;&#x3002;</p><p>&#x81F3;&#x6B64;&#xFF0C;CUDA9.2&#x5DF2;&#x5B89;&#x88C5;&#x5B8C;&#x6BD5;&#x3002;</p><p>&#x6211;&#x7684;VS&#x662F;VS2017&#x4F01;&#x4E1A;&#x7248;&#xFF0C;&#x7248;&#x672C;15.8.5&#x3002;&#x4E3A;&#x4E86;&#x80FD;&#x6B63;&#x5E38;&#x7684;&#x8FD0;&#x884C;CUDA9.2&#x7ED9;&#x51FA;&#x7684;&#x793A;&#x4F8B;&#x4EE3;&#x7801;&#xFF0C;&#x9700;&#x8981;&#x5C06;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2\include\crt&#x91CC;&#x7684;host_config.h &#x7B2C;131&#x884C;&#xFF0C;&#x6539;&#x4E3A;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#if _MSC_VER &lt; 1600 || _MSC_VER &gt; 1920</span><br></pre></td></tr></table></figure></p><p>&#x7136;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x6253;&#x5F00;&#x5BF9;&#x5E94;&#x7684;VS2017&#x7684;.sln&#x6587;&#x4EF6;&#xFF0C;&#x8FD0;&#x884C;&#x793A;&#x4F8B;&#x4EE3;&#x7801;&#x4E86;&#x3002;</p><h1 id="&#x5728;Anaconda&#x73AF;&#x5883;&#x4E2D;&#x5B89;&#x88C5;TensorFlow1-10"><a href="#&#x5728;Anaconda&#x73AF;&#x5883;&#x4E2D;&#x5B89;&#x88C5;TensorFlow1-10" class="headerlink" title="&#x5728;Anaconda&#x73AF;&#x5883;&#x4E2D;&#x5B89;&#x88C5;TensorFlow1.10"></a>&#x5728;Anaconda&#x73AF;&#x5883;&#x4E2D;&#x5B89;&#x88C5;TensorFlow1.10</h1><p>&#x4EE5;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;&#x8FD0;&#x884C;anaconda prompt&#x3002;</p><p>&#x9996;&#x5148;&#x5728;anaconda&#x91CC;&#x5EFA;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create -n tensorflow pip python=3.6</span><br></pre></td></tr></table></figure></p><p>&#x6FC0;&#x6D3B;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate tensorflow</span><br></pre></td></tr></table></figure></p><p>&#x66F4;&#x65B0;pip<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure></p><p>&#x5728;<a href="https://github.com/fo40225/tensorflow-windows-wheel/tree/master/1.10.0/py36/GPU/cuda92cudnn72sse2" target="_blank" rel="noopener">&#x8FD9;&#x91CC;</a>&#x4E0B;&#x8F7D;&#x7531;&#x5927;&#x795E;&#x7F16;&#x8BD1;&#x597D;&#x7684;TensorFlow1.10GPU&#x7248;&#x672C;&#x3002;</p><p>&#x8F6C;&#x5230;&#x4E0B;&#x8F7D;&#x76EE;&#x5F55;&#xFF0C;&#x901A;&#x8FC7;pip install&#x547D;&#x4EE4;&#x5B89;&#x88C5;&#x3002;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow_gpu-1.10.0-cp36-cp36m-win_amd64.whl</span><br></pre></td></tr></table></figure></p><p>&#x7ED3;&#x679C;&#x5982;&#x56FE;<br><img src="/posts/2e45cbc8/&#x5B89;&#x88C5;TF1.png" alt="&#x5B89;&#x88C5;TF1"></p><h1 id="&#x6D4B;&#x8BD5;"><a href="#&#x6D4B;&#x8BD5;" class="headerlink" title="&#x6D4B;&#x8BD5;"></a>&#x6D4B;&#x8BD5;</h1><h2 id="&#x5B89;&#x88C5;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;"><a href="#&#x5B89;&#x88C5;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;" class="headerlink" title="&#x5B89;&#x88C5;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;"></a>&#x5B89;&#x88C5;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;</h2><p>&#x68C0;&#x6D4B;&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x7684;&#x4EE3;&#x7801;&#xFF1A;</p><ol><li><p>&#x8C03;&#x7528;Python</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br></pre></td></tr></table></figure></li><li><p>&#x5728; Python &#x4EA4;&#x4E92;&#x5F0F; shell &#x4E2D;&#x8F93;&#x5165;&#x4EE5;&#x4E0B;&#x51E0;&#x884C;&#x7A0B;&#x5E8F;&#x4EE3;&#x7801;&#xFF1A;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import tensorflow as tf</span><br><span class="line">&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TensorFlow!&apos;)</span><br><span class="line">&gt;&gt;&gt; sess = tf.Session()</span><br><span class="line">&gt;&gt;&gt; print(sess.run(hello))</span><br></pre></td></tr></table></figure></li></ol><p>&#x8FD0;&#x884C;&#x7ED3;&#x679C;&#x5982;&#x56FE;<br><img src="/posts/2e45cbc8/&#x5B89;&#x88C5;TF2.png" alt="&#x5B89;&#x88C5;TF2"><br>&#x8868;&#x793A;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x3002;</p><h2 id="&#x6D4B;&#x8BD5;GPU&#x901F;&#x5EA6;&#x4EE3;&#x7801;"><a href="#&#x6D4B;&#x8BD5;GPU&#x901F;&#x5EA6;&#x4EE3;&#x7801;" class="headerlink" title="&#x6D4B;&#x8BD5;GPU&#x901F;&#x5EA6;&#x4EE3;&#x7801;"></a>&#x6D4B;&#x8BD5;GPU&#x901F;&#x5EA6;&#x4EE3;&#x7801;</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">device_name=<span class="string">&quot;/cpu:0&quot;</span></span><br><span class="line"></span><br><span class="line">shape=(int(<span class="number">10000</span>),int(<span class="number">10000</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.device(device_name):</span><br><span class="line"><span class="comment">#&#x5F62;&#x72B6;&#x4E3A;shap,&#x5143;&#x7D20;&#x670D;&#x4ECE;minval&#x548C;maxval&#x4E4B;&#x95F4;&#x7684;&#x5747;&#x5300;&#x5206;&#x5E03;</span></span><br><span class="line">    random_matrix = tf.random_uniform(shape=shape, minval=<span class="number">0</span>, maxval=<span class="number">1</span>)</span><br><span class="line">    dot_operation = tf.matmul(random_matrix, tf.transpose(random_matrix))</span><br><span class="line">    sum_operation = tf.reduce_sum(dot_operation)</span><br><span class="line"></span><br><span class="line">startTime = datetime.now()</span><br><span class="line"><span class="keyword">with</span> tf.Session(config=tf.ConfigProto(log_device_placement=<span class="keyword">True</span>)) <span class="keyword">as</span> session:</span><br><span class="line">    result = session.run(sum_operation)</span><br><span class="line">    print(result)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;\n&quot;</span> * <span class="number">2</span>)</span><br><span class="line">print(<span class="string">&quot;Shape:&quot;</span>, shape, <span class="string">&quot;Device:&quot;</span>, device_name)</span><br><span class="line">print(<span class="string">&quot;Time taken:&quot;</span>, datetime.now() - startTime)</span><br></pre></td></tr></table></figure><p>&#x5728;&#x6211;&#x7684;&#x7535;&#x8111;&#x4E0A;&#xFF0C;&#x8FD0;&#x884C;&#x7ED3;&#x679C;&#x5982;&#x4E0B;&#xFF1A;</p><p>&#x4F7F;&#x7528;GPU&#xFF1A;<br><img src="/posts/2e45cbc8/gpu.png" alt="gpu"><br>&#x4F7F;&#x7528;CPU&#xFF1A;<br><img src="/posts/2e45cbc8/cpu.png" alt="cpu"></p><p>&#x53EF;&#x89C1;&#xFF0C;&#x5C31;&#x4E0A;&#x8FF0;&#x4EE3;&#x7801;&#x800C;&#x8A00;&#xFF0C;&#x4F7F;&#x7528;GPU&#x662F;&#x6BD4;&#x4F7F;&#x7528;CPU&#x5FEB;&#x597D;&#x51E0;&#x500D;&#x7684;&#x3002;</p><p>&#x4EE5;&#x4E0A;&#x3002;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1060&amp;#x771F;&amp;#x9999;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://www.windsings.com/categories/Technology/"/>
    
    
      <category term="TensorFlow" scheme="https://www.windsings.com/tags/TensorFlow/"/>
    
      <category term="GPU" scheme="https://www.windsings.com/tags/GPU/"/>
    
      <category term="Anaconda" scheme="https://www.windsings.com/tags/Anaconda/"/>
    
      <category term="GTX1060" scheme="https://www.windsings.com/tags/GTX1060/"/>
    
      <category term="安装教程" scheme="https://www.windsings.com/tags/%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    
      <category term="机器学习" scheme="https://www.windsings.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="https://www.windsings.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>01背包笔记</title>
    <link href="https://www.windsings.com//posts/829adb17/"/>
    <id>https://www.windsings.com//posts/829adb17/</id>
    <published>2018-09-20T09:42:08.000Z</published>
    <updated>2018-09-27T18:29:43.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="01&#x80CC;&#x5305;&#x95EE;&#x9898;&#x63CF;&#x8FF0;"><a href="#01&#x80CC;&#x5305;&#x95EE;&#x9898;&#x63CF;&#x8FF0;" class="headerlink" title="01&#x80CC;&#x5305;&#x95EE;&#x9898;&#x63CF;&#x8FF0;"></a>01&#x80CC;&#x5305;&#x95EE;&#x9898;&#x63CF;&#x8FF0;</h1><p>&#x5DF2;&#x77E5;:&#x6709;&#x4E00;&#x4E2A;&#x5BB9;&#x91CF;&#x4E3A;V&#x7684;&#x80CC;&#x5305;&#x548C;N&#x4EF6;&#x7269;&#x54C1;&#xFF0C;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#x7684;&#x91CD;&#x91CF;&#x662F;weight[i]&#xFF0C;&#x6536;&#x76CA;&#x662F;cost[i]&#x3002;</p><p>&#x9650;&#x5236;:&#x6BCF;&#x79CD;&#x7269;&#x54C1;&#x53EA;&#x6709;&#x4E00;&#x4EF6;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x653E;&#x6216;&#x8005;&#x4E0D;&#x653E;</p><p>&#x95EE;&#x9898;:&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x6216;&#x6536;&#x76CA;</p><p>&#x76F8;&#x4F3C;&#x95EE;&#x9898;:&#x5728;&#x6070;&#x597D;&#x88C5;&#x6EE1;&#x80CC;&#x5305;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x6216;&#x6536;&#x76CA;</p><p>&#x8FD9;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x8BA8;&#x8BBA;&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x6216;&#x6536;&#x76CA;&#x3002;<br><a id="more"></a></p><h1 id="&#x601D;&#x8DEF;"><a href="#&#x601D;&#x8DEF;" class="headerlink" title="&#x601D;&#x8DEF;"></a>&#x601D;&#x8DEF;</h1><h2 id="&#x95EE;&#x9898;&#x7279;&#x70B9;"><a href="#&#x95EE;&#x9898;&#x7279;&#x70B9;" class="headerlink" title="&#x95EE;&#x9898;&#x7279;&#x70B9;"></a>&#x95EE;&#x9898;&#x7279;&#x70B9;</h2><p>&#x6BCF;&#x79CD;&#x7269;&#x54C1;&#x53EA;&#x6709;&#x4E00;&#x4EF6;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x653E;&#x6216;&#x8005;&#x4E0D;&#x653E;&#x3002;</p><h2 id="&#x5B50;&#x95EE;&#x9898;"><a href="#&#x5B50;&#x95EE;&#x9898;" class="headerlink" title="&#x5B50;&#x95EE;&#x9898;"></a>&#x5B50;&#x95EE;&#x9898;</h2><p>&#x5B9A;&#x4E49;f[i][v]:&#x524D;i&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x4E00;&#x4E2A;&#x5BB9;&#x91CF;&#x4E3A;v&#x7684;&#x80CC;&#x5305;&#x4E2D;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002;</p><h2 id="&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;"><a href="#&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;" class="headerlink" title="&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;"></a>&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;</h2><p>f[i][v]=max(f[i - 1][v],f[i - 1][v - weight[i]] + cost[i])</p><p>&#x4EE3;&#x7801;&#xFF1A;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)  </span><br><span class="line">    {  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= W; j++)  </span><br><span class="line">        {  </span><br><span class="line">            <span class="keyword">if</span>(j &lt; w[i])    dp[i][j]  = dp[i<span class="number">-1</span>][j];  </span><br><span class="line">            <span class="keyword">else</span> dp[i][j] =  max(dp[i<span class="number">-1</span>][j], dp[i<span class="number">-1</span>][j - w[i]] + v[i]);  </span><br><span class="line">        }  </span><br><span class="line">  }</span><br></pre></td></tr></table></figure></p><p>&#x5373;&#x5BF9;&#x4E8E;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#xFF0C;&#x653E;&#x5165;&#x80CC;&#x5305;&#x6216;&#x8005;&#x4E0D;&#x653E;&#x5165;&#x80CC;&#x5305;&#x3002;</p><h2 id="&#x89E3;&#x91CA;"><a href="#&#x89E3;&#x91CA;" class="headerlink" title="&#x89E3;&#x91CA;"></a>&#x89E3;&#x91CA;</h2><p>&#x8003;&#x8651;&#x6211;&#x4EEC;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x5C06;&#x524D;i&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v&#x7684;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x82E5;&#x6211;&#x4EEC;&#x53EA;&#x8003;&#x8651;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#x65F6;&#xFF0C;&#x5B83;&#x6709;&#x4E24;&#x79CD;&#x9009;&#x62E9;&#xFF0C;&#x653E;&#x6216;&#x8005;&#x4E0D;&#x653E;&#x3002;</p><ol><li>&#x5982;&#x679C;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#x4E0D;&#x653E;&#x5165;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x5C31;&#x8F6C;&#x6362;&#x4E3A;&#xFF1A;&#x5C06;&#x524D;i - 1&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v&#x7684;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;f[i - 1][v]</li><li>&#x5982;&#x679C;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#x80FD;&#x653E;&#x5165;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x5C31;&#x8F6C;&#x6362;&#x4E3A;&#xFF1A;&#x5C06;&#x524D;i - 1&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v - weight[i]&#x7684;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;f[i - 1][v - weight[i]] + cost[i]&#x3002;</li></ol><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;<span class="comment">//&#x7269;&#x54C1;&#x4E2A;&#x6570;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">5</span>;<span class="comment">//&#x80CC;&#x5305;&#x6700;&#x5927;&#x5BB9;&#x91CF;</span></span><br><span class="line"><span class="keyword">int</span> weight[N + <span class="number">1</span>] = {<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>};<span class="comment">//&#x7269;&#x54C1;&#x91CD;&#x91CF;</span></span><br><span class="line"><span class="keyword">int</span> value[N + <span class="number">1</span>] = {<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>};<span class="comment">//&#x7269;&#x54C1;&#x4EF7;&#x503C;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[N + <span class="number">1</span>][V + <span class="number">1</span>] = {{<span class="number">0</span>}};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x76EE;&#x6807;&#xFF1A;&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;</span></span><br><span class="line"><span class="comment">&#x5B50;&#x95EE;&#x9898;&#x72B6;&#x6001;:f[i][j]:&#x8868;&#x793A;&#x524D;i&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5165;&#x5BB9;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x5F97;&#x5230;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;</span></span><br><span class="line"><span class="comment">&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;:f[i][j] = max{f[i - 1][j],f[i - 1][j - weight[i]] + value[i]}</span></span><br><span class="line"><span class="comment">&#x521D;&#x59CB;&#x5316;:f&#x6570;&#x7EC4;&#x5168;&#x8BBE;&#x7F6E;&#x4E3A;0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Knapsack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//&#x521D;&#x59CB;&#x5316;</span></span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="comment">//&#x9012;&#x63A8;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;i++) <span class="comment">//&#x679A;&#x4E3E;&#x7269;&#x54C1;</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j &lt;= V;j++) <span class="comment">//&#x679A;&#x4E3E;&#x80CC;&#x5305;&#x5BB9;&#x91CF;</span></span><br><span class="line">        {</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= weight[i])</span><br><span class="line">            {</span><br><span class="line">                f[i][j] = Max(f[i - <span class="number">1</span>][j],f[i - <span class="number">1</span>][j - weight[i]] + value[i]);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f[N][V];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Knapsack()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6548;&#x7387;&#x5206;&#x6790;"><a href="#&#x6548;&#x7387;&#x5206;&#x6790;" class="headerlink" title="&#x6548;&#x7387;&#x5206;&#x6790;"></a>&#x6548;&#x7387;&#x5206;&#x6790;</h2><p>&#x4EE5;&#x4E0A;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O&#xFF08;N*V&#xFF09;&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E5F;&#x662F;O&#xFF08;N*V&#xFF09;&#x3002;&#x5176;&#x4E2D;N&#x4EE3;&#x8868;&#x7269;&#x54C1;&#x7684;&#x4E2A;&#x6570;&#xFF0C;V&#x662F;&#x80CC;&#x5305;&#x7684;&#x5BB9;&#x91CF;&#x3002;</p><p>&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E0D;&#x53EF;&#x4EE5;&#x518D;&#x4F18;&#x5316;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F;&#x53EF;&#x4EE5;&#x7EE7;&#x7EED;&#x4F18;&#x5316;&#x5230;O(V)&#x3002;</p><h3 id="&#x4F18;&#x5316;&#x5206;&#x6790;"><a href="#&#x4F18;&#x5316;&#x5206;&#x6790;" class="headerlink" title="&#x4F18;&#x5316;&#x5206;&#x6790;"></a>&#x4F18;&#x5316;&#x5206;&#x6790;</h3><p>&#x53EF;&#x4EE5;&#x53EA;&#x7528;f[V]&#x8868;&#x793A;&#x4E2D;&#x95F4;&#x72B6;&#x6001;&#x3002;&#x6839;&#x636E;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A;</p><p>f[i][v]=max(f[i - 1][v],f[i - 1][v - weight[i]] + cost[i])</p><p>&#x8981;&#x60F3;&#x5F97;&#x5230;f[i][v]&#x53EA;&#x9700;&#x8981;&#x77E5;&#x9053; f[i - 1][v] &#x548C; f[i - 1][v - weight[i]]&#x3002;</p><p>&#x6211;&#x7684;&#x7406;&#x89E3;&#xFF1A;&#x7531;&#x4E8E;&#x53EA;&#x6709;&#x4E00;&#x4F4D;&#x6570;&#x7EC4;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x6C42;&#x5F97;f[i][v]&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x8981;&#x628A;f[i - 1][v]&#x8986;&#x76D6;&#x6389;&#x4E86;&#x3002;</p><p>&#x56E0;&#x6B64;&#x6C42;f&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x6CD5;&#x5982;&#x4E0B;&#xFF1A;</p><ol><li>&#x521D;&#x59CB;&#x72B6;&#x6001;&#xFF1A;&#x8BA1;&#x7B97;&#x524D;1&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;V&#x7684;&#x80CC;&#x5305;&#x4E2D;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;&#x3002;</li><li>&#x9012;&#x63A8;&#x5173;&#x7CFB;&#xFF1A;&#x5728;i&gt;=2&#x65F6;&#xFF0C;&#x6839;&#x636E;&#x524D;i-1&#x4E2A;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v&#x4E2D;&#x7684;&#x80CC;&#x5305;&#x4E2D;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;&#xFF0C;&#x5373;&#x7528;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x7684;&#x65F6;&#x5019;&#x7684;f[i-1][v]&#x3002;&#x6839;&#x636E;&#x524D;i-1&#x4E2A;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v-weight[i]&#x7684;&#x80CC;&#x5305;&#x4E2D;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;&#xFF0C;&#x5373;&#x7528;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x7684;&#x65F6;&#x5019;&#x7684;f[i-1][v-weight[i]]&#x3002;&#x8BA1;&#x7B97;f[i-1][v-weight[i]]+cost[i]&#x3002;</li><li>&#x5728;&#x6267;&#x884C;&#x7B2C;i&#x6B21;&#x5FAA;&#x73AF;&#x4E4B;&#x524D;&#xFF0C;f[0~v]&#x4E2D;&#x4FDD;&#x5B58;&#x7684;&#x662F;&#x7B2C;i-1&#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x5373;&#x662F;&#x524D;i-1&#x4E2A;&#x7269;&#x4F53;&#x5206;&#x522B;&#x653E;&#x5230;&#x5BB9;&#x91CF;0~V&#x65F6;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x5373;f[i-1][0~V]&#x3002;</li><li>&#x7531;&#x9012;&#x63A8;&#x516C;&#x5F0F;&#xFF1A;f[i][v]=max(f[i - 1][v],f[i - 1][v - weight[i]] + cost[i])&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF1A;&#x5728;&#x66F4;&#x65B0;f[v]&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8981;&#x7528;&#x5230;f[v]&#x548C;f[v-weight[i]]&#x5219;&#x4E24;&#x4E2A;&#x503C;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;<strong>&#x9006;&#x5E8F;</strong>&#x66F4;&#x65B0;&#x3002;&#x5373;&#x4ECE;V&#x2026;0&#x66F4;&#x65B0;&#x3002;</li></ol><p>&#x9006;&#x5E8F;&#x66F4;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x539F;&#x56E0;&#xFF1A;</p><p>&#x6211;&#x4EEC;&#x662F;&#x7531;&#x7B2C; i-1 &#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x4E24;&#x4E2A;&#x72B6;&#x6001;&#x63A8;&#x51FA;&#x7B2C;i&#x4E2A;&#x72B6;&#x6001;&#x7684;&#xFF0C;&#x800C;&#x4E14;v&gt;v-weight[i]&#xFF0C;&#x5219;&#x5BF9;&#x4E8E;&#x7B2C;i&#x6B21;&#x5FAA;&#x73AF;&#xFF0C;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x53EA;&#x6709;&#x5F53;V..0&#x5FAA;&#x73AF;&#x65F6;&#xFF0C;&#x624D;&#x4F1A;&#x5148;&#x5904;&#x7406;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x4E3A;v&#x7684;&#x72B6;&#x51B5;&#xFF0C;&#x540E;&#x5904;&#x7406;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x4E3A; v-weight[i] &#x7684;&#x60C5;&#x51B5;&#x3002;</p><p>&#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x7531;&#x4E8E;&#xFF0C;&#x5728;&#x6267;&#x884C;v&#x65F6;&#xFF0C;&#x8FD8;&#x6CA1;&#x6267;&#x884C;&#x5230;v - weight[i]&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;f[v-weight[i]]&#x4FDD;&#x5B58;&#x7684;&#x8FD8;&#x662F;&#x7B2C;i - 1&#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x5373;&#x5728;&#x6267;&#x884C;&#x7B2C;i&#x6B21;&#x5FAA;&#x73AF; &#x4E14; &#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x4E3A;v&#x65F6;&#xFF0C;&#x6B64;&#x65F6;&#x7684;f[v]&#x5B58;&#x50A8;&#x7684;&#x662F; f[i-1][v] &#xFF0C;&#x6B64;&#x65F6;f[v-weight[i]]&#x5B58;&#x50A8;&#x7684;&#x662F;f[i-1][v-weight[i]]&#x3002;</p><p>&#x76F8;&#x53CD;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x6267;&#x884C;&#x7B2C; i &#x6B21;&#x5FAA;&#x73AF;&#x65F6;&#xFF0C;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x6309;&#x7167;0..V&#x7684;&#x987A;&#x5E8F;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x6765;&#x68C0;&#x6D4B;&#x7B2C; i &#x4EF6;&#x7269;&#x54C1;&#x662F;&#x5426;&#x80FD;&#x653E;&#x3002;&#x6B64;&#x65F6;&#x5728;&#x6267;&#x884C;&#x7B2C;i&#x6B21;&#x5FAA;&#x73AF; &#x4E14; &#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x4E3A;v&#x65F6;&#xFF0C;&#x6B64;&#x65F6;&#x7684;f[v]&#x5B58;&#x50A8;&#x7684;&#x662F; f[i - 1][v] &#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x6B64;&#x65F6;f[v-weight[i]]&#x5B58;&#x50A8;&#x7684;&#x662F;f[i][v-weight[i]]&#x3002;</p><p>&#x4E3E;&#x4F8B;&#x5B50;&#x5C31;&#x662F;&#xFF0C;&#x5047;&#x8BBE;&#x66F4;&#x65B0;f[8]&#x8981;&#x7528;&#x5230;f[8]&#x548C;f[6]&#xFF0C;&#x66F4;&#x65B0;f[6]&#x8981;&#x7528;&#x5230;f[6]&#x548C;f[4]&#xFF0C;&#x5982;&#x679C;&#x5148;&#x66F4;&#x65B0;&#x4E86;f[4]&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x65E0;&#x6CD5;&#x66F4;&#x65B0;&#x540E;&#x9762;&#x7684;f[6]&#x548C;f[8]&#x3002;</p><p>&#x56E0;&#x6B64;&#x4F2A;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N <span class="comment">//&#x679A;&#x4E3E;&#x7269;&#x54C1;</span></span><br><span class="line">    <span class="keyword">for</span> v=V.<span class="number">.0</span> <span class="comment">//&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#xFF0C;&#x4ECE;&#x5927;&#x5230;&#x5C0F;</span></span><br><span class="line">        f[v]=max{f[v],f[v-weight[i]] + cost[i]};</span><br></pre></td></tr></table></figure></p><p>&#x591A;&#x8BF4;&#x4E00;&#x70B9;&#xFF0C;&#x987A;&#x5E8F;&#x66F4;&#x65B0;&#x6570;&#x7EC4;&#xFF08;&#x987A;&#x5E8F;&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#xFF09;&#x662F;<strong>&#x5B8C;&#x5168;&#x80CC;&#x5305;&#x95EE;&#x9898;</strong>&#x7684;&#x6700;&#x4F73;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;</p><h3 id="&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;1"><a href="#&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;1" class="headerlink" title="&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;1"></a>&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;1</h3><p>&#x6839;&#x636E;&#x524D;&#x6587;&#x8BF4;&#x7684;&#xFF0C;&#x4F7F;&#x7528;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x63CF;&#x8FF0;&#x72B6;&#x6001;&#x66F4;&#x65B0;&#x7684;&#x4F2A;&#x4EE3;&#x7801;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N <span class="comment">//&#x679A;&#x4E3E;&#x7269;&#x54C1;</span></span><br><span class="line">    <span class="keyword">for</span> v=V.<span class="number">.0</span> <span class="comment">//&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#xFF0C;&#x4ECE;&#x5927;&#x5230;&#x5C0F;</span></span><br><span class="line">        f[v]=max{f[v],f[v-weight[i]] + cost[i]};</span><br></pre></td></tr></table></figure></p><p>&#x5BF9;&#x4E8E;&#x7B2C;i&#x4E2A;&#x7269;&#x54C1;&#xFF0C;&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#x5230;weight[i]&#x5C31;&#x53EF;&#x4EE5;&#x505C;&#x6B62;&#x4E86;&#x3002;&#x4E00;&#x662F;&#x53EF;&#x4EE5;&#x9632;&#x6B62;&#x8D8A;&#x754C;&#xFF0C;&#x4E8C;&#x662F;&#x5BB9;&#x91CF;&#x4E3A;&#x8D1F;&#x7684;&#x80CC;&#x5305;&#x65E0;&#x610F;&#x4E49;&#x3002;</p><p>&#x56E0;&#x6B64;&#x4F2A;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x66F4;&#x65B0;&#x4E3A;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N <span class="comment">//&#x679A;&#x4E3E;&#x7269;&#x54C1;</span></span><br><span class="line">    <span class="keyword">for</span> v=V..weight[i] <span class="comment">//&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#xFF0C;&#x4ECE;&#x5927;&#x5230;&#x5C0F;</span></span><br><span class="line">        f[v]=max{f[v],f[v-weight[i]] + cost[i]};</span><br></pre></td></tr></table></figure></p><p>&#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x5C0F;&#x4F18;&#x5316;&#x5C31;&#x662F;&#xFF0C;&#x5148;&#x5904;&#x7406;&#x82B1;&#x8D39;&#x8F83;&#x5927;&#x7684;&#x7269;&#x54C1;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4F7F;&#x540E;&#x7EED;&#x7269;&#x54C1;&#x7684;&#x5FAA;&#x73AF;&#x6B21;&#x6570;&#x66F4;&#x5C11;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5148;&#x628A;&#x7269;&#x54C1;&#x6309;&#x7167;&#x82B1;&#x8D39;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;&#x3002;</p><h3 id="&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;2"><a href="#&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;2" class="headerlink" title="&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;2"></a>&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;2</h3><p>&#x5728;&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;1&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x4E0B;&#x754C;&#x5B9A;&#x4E3A;&#x4E86;weight[i]&#xFF0C;&#x610F;&#x601D;&#x662F;&#xFF0C;&#x81F3;&#x5C11;&#x9700;&#x8981;weight[i]&#x624D;&#x53EF;&#x4EE5;&#x653E;&#x4E0B;&#x7B2C;i&#x4E2A;&#x7269;&#x54C1;&#x3002;</p><p>&#x7EE7;&#x7EED;&#x60F3;&#x5982;&#x4E0B;&#x60C5;&#x51B5;&#xFF0C;&#x52A0;&#x5165;&#x8FD9;&#x4E2A;&#x80CC;&#x5305;&#x7684;&#x5BB9;&#x91CF;&#x975E;&#x5E38;&#x975E;&#x5E38;&#x5927;&#xFF0C;&#x5927;&#x5230;&#x80FD;&#x628A;i&#x53CA;&#x4E4B;&#x540E;&#x7684;&#x6240;&#x6709;&#x7684;&#x7269;&#x54C1;&#x5168;&#x653E;&#x8FDB;&#x53BB;&#x3002;&#x8FD9;&#x65F6;&#xFF0C;&#x5C31;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x518D;&#x53BB;&#x8BA1;&#x7B97;&#x4E4B;&#x540E;&#x7684;&#x60C5;&#x51B5;&#x4E86;&#x3002;&#x5373;&#x5BF9;&#x4E8E;&#x7269;&#x54C1;i&#xFF0C;&#x8BA1;&#x7B97;&#x5C0F;&#x4E8E;V-sum{weight[i..n]}&#x7684;v&#x7684;&#x503C;&#xFF0C;&#x65E0;&#x610F;&#x4E49;&#xFF0C;&#x53CD;&#x6B63;&#x6240;&#x6709;&#x4E1C;&#x897F;&#x90FD;&#x80FD;&#x653E;&#x8FDB;&#x53BB;&#x3002;</p><p>&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x4E0B;&#x754C;&#x8C03;&#x6574;&#x5230;bound=max{V-sum{weight[i..n]},weight[i]}&#x3002;</p><p>&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i=<span class="number">1.</span>.N <span class="comment">//&#x679A;&#x4E3E;&#x7269;&#x54C1;</span></span><br><span class="line">    bound=max{V-sum{weight[i..n]},weight[i]}<span class="comment">//&#x786E;&#x5B9A;&#x9700;&#x8981;&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#x7684;&#x4E0B;&#x754C;</span></span><br><span class="line">    <span class="keyword">for</span> v=V..bound</span><br><span class="line">        f[v]=max{f[v],f[v-weight[i]] + cost[i]};</span><br></pre></td></tr></table></figure></p><p>&#x8FD9;&#x4E2A;&#x4F18;&#x5316;&#x5BF9;&#x4E8E;V&#x5F88;&#x5927;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6548;&#x679C;&#x5F88;&#x597D;&#x3002;</p><h2 id="&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;"><a href="#&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;" class="headerlink" title="&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;"></a>&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;</h2><p>&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x6CA1;&#x6709;&#x5BF9;weight&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3</span>;<span class="comment">//&#x7269;&#x54C1;&#x4E2A;&#x6570;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">5</span>;<span class="comment">//&#x80CC;&#x5305;&#x6700;&#x5927;&#x5BB9;&#x91CF;</span></span><br><span class="line"><span class="keyword">int</span> weight[N + <span class="number">1</span>] = {<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>};<span class="comment">//&#x7269;&#x54C1;&#x91CD;&#x91CF;</span></span><br><span class="line"><span class="keyword">int</span> value[N + <span class="number">1</span>] = {<span class="number">0</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>};<span class="comment">//&#x7269;&#x54C1;&#x4EF7;&#x503C;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[V + <span class="number">1</span>] = {<span class="number">0</span>};</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> x &gt; y ? x : y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#x76EE;&#x6807;&#xFF1A;&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;</span></span><br><span class="line"><span class="comment">&#x5B50;&#x95EE;&#x9898;&#x72B6;&#x6001;:f[j]:&#x8868;&#x793A;&#x524D;i&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5165;&#x5BB9;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x5F97;&#x5230;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;</span></span><br><span class="line"><span class="comment">&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;:f[j] = max{f[j],f[j - weight[i]] + value[i]}</span></span><br><span class="line"><span class="comment">&#x521D;&#x59CB;&#x5316;:f&#x6570;&#x7EC4;&#x5168;&#x8BBE;&#x7F6E;&#x4E3A;0</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Knapsack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//&#x5B58;&#x50A8;&#x8FD8;&#x672A;&#x5904;&#x7406;&#x7269;&#x54C1;&#x7684;&#x603B;&#x5BB9;&#x91CF;</span></span><br><span class="line">    <span class="keyword">int</span> bound = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//&#x521D;&#x59CB;&#x5316;</span></span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;i++)</span><br><span class="line">    {</span><br><span class="line">        sum += weight[i];</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&#x9012;&#x63A8;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= N;i++) <span class="comment">//&#x679A;&#x4E3E;&#x7269;&#x54C1;</span></span><br><span class="line">    {</span><br><span class="line">        <span class="comment">//&#x8BBE;&#x7F6E;&#x4E0B;&#x754C;</span></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span>)</span><br><span class="line">        {</span><br><span class="line">            sum -= weight[i - <span class="number">1</span>];</span><br><span class="line">        }</span><br><span class="line">        bound = Max(V - sum,weight[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = V;j &gt;= bound;j--) <span class="comment">//&#x679A;&#x4E3E;&#x80CC;&#x5305;&#x5BB9;&#x91CF;</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (f[j] &lt; f[j - weight[i]] + value[i])</span><br><span class="line">            {</span><br><span class="line">                f[j] = f[j - weight[i]] + value[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> f[V];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;Knapsack()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;01&amp;#x80CC;&amp;#x5305;&amp;#x95EE;&amp;#x9898;&amp;#x63CF;&amp;#x8FF0;&quot;&gt;&lt;a href=&quot;#01&amp;#x80CC;&amp;#x5305;&amp;#x95EE;&amp;#x9898;&amp;#x63CF;&amp;#x8FF0;&quot; class=&quot;headerlink&quot; title=&quot;01&amp;#x80CC;&amp;#x5305;&amp;#x95EE;&amp;#x9898;&amp;#x63CF;&amp;#x8FF0;&quot;&gt;&lt;/a&gt;01&amp;#x80CC;&amp;#x5305;&amp;#x95EE;&amp;#x9898;&amp;#x63CF;&amp;#x8FF0;&lt;/h1&gt;&lt;p&gt;&amp;#x5DF2;&amp;#x77E5;:&amp;#x6709;&amp;#x4E00;&amp;#x4E2A;&amp;#x5BB9;&amp;#x91CF;&amp;#x4E3A;V&amp;#x7684;&amp;#x80CC;&amp;#x5305;&amp;#x548C;N&amp;#x4EF6;&amp;#x7269;&amp;#x54C1;&amp;#xFF0C;&amp;#x7B2C;i&amp;#x4EF6;&amp;#x7269;&amp;#x54C1;&amp;#x7684;&amp;#x91CD;&amp;#x91CF;&amp;#x662F;weight[i]&amp;#xFF0C;&amp;#x6536;&amp;#x76CA;&amp;#x662F;cost[i]&amp;#x3002;&lt;/p&gt;
&lt;p&gt;&amp;#x9650;&amp;#x5236;:&amp;#x6BCF;&amp;#x79CD;&amp;#x7269;&amp;#x54C1;&amp;#x53EA;&amp;#x6709;&amp;#x4E00;&amp;#x4EF6;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x9009;&amp;#x62E9;&amp;#x653E;&amp;#x6216;&amp;#x8005;&amp;#x4E0D;&amp;#x653E;&lt;/p&gt;
&lt;p&gt;&amp;#x95EE;&amp;#x9898;:&amp;#x5728;&amp;#x4E0D;&amp;#x8D85;&amp;#x8FC7;&amp;#x80CC;&amp;#x5305;&amp;#x5BB9;&amp;#x91CF;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#xFF0C;&amp;#x6700;&amp;#x591A;&amp;#x80FD;&amp;#x83B7;&amp;#x5F97;&amp;#x591A;&amp;#x5C11;&amp;#x4EF7;&amp;#x503C;&amp;#x6216;&amp;#x6536;&amp;#x76CA;&lt;/p&gt;
&lt;p&gt;&amp;#x76F8;&amp;#x4F3C;&amp;#x95EE;&amp;#x9898;:&amp;#x5728;&amp;#x6070;&amp;#x597D;&amp;#x88C5;&amp;#x6EE1;&amp;#x80CC;&amp;#x5305;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#xFF0C;&amp;#x6700;&amp;#x591A;&amp;#x80FD;&amp;#x83B7;&amp;#x5F97;&amp;#x591A;&amp;#x5C11;&amp;#x4EF7;&amp;#x503C;&amp;#x6216;&amp;#x6536;&amp;#x76CA;&lt;/p&gt;
&lt;p&gt;&amp;#x8FD9;&amp;#x91CC;&amp;#xFF0C;&amp;#x6211;&amp;#x4EEC;&amp;#x5148;&amp;#x8BA8;&amp;#x8BBA;&amp;#x5728;&amp;#x4E0D;&amp;#x8D85;&amp;#x8FC7;&amp;#x80CC;&amp;#x5305;&amp;#x5BB9;&amp;#x91CF;&amp;#x7684;&amp;#x60C5;&amp;#x51B5;&amp;#x4E0B;&amp;#xFF0C;&amp;#x6700;&amp;#x591A;&amp;#x80FD;&amp;#x83B7;&amp;#x5F97;&amp;#x591A;&amp;#x5C11;&amp;#x4EF7;&amp;#x503C;&amp;#x6216;&amp;#x6536;&amp;#x76CA;&amp;#x3002;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="https://www.windsings.com/categories/algorithm/"/>
    
    
      <category term="动态规划" scheme="https://www.windsings.com/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="NP-Hard" scheme="https://www.windsings.com/tags/NP-Hard/"/>
    
      <category term="01背包" scheme="https://www.windsings.com/tags/01%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>读研日记</title>
    <link href="https://www.windsings.com//posts/52379290/"/>
    <id>https://www.windsings.com//posts/52379290/</id>
    <published>2018-09-11T14:16:14.000Z</published>
    <updated>2018-10-15T11:58:38.626Z</updated>
    
    <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">输入密码访问</h3><link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css"> <link rel="stylesheet" href="//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap-theme.min.css"> <script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script> <script src="//cdn.bootcss.com/bootstrap/3.3.5/js/bootstrap.min.js"></script> <div id="security"> <div> <div class="input-group"> <input type="text" class="form-control" aria-label="Enter the password." id="pass"/> <div class="input-group-btn"> <button type="button" class="btn btn-default" onclick="decryptAES()">Decrypt</button> </div> </div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
    
    <summary type="html">
    
      我的读研日记。谨以此文记录我的研究生生涯。
    
    </summary>
    
      <category term="日记" scheme="https://www.windsings.com/categories/%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="日记" scheme="https://www.windsings.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="研究生" scheme="https://www.windsings.com/tags/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2996 Help Me with the Game</title>
    <link href="https://www.windsings.com//posts/a5731d96/"/>
    <id>https://www.windsings.com//posts/a5731d96/</id>
    <published>2018-09-04T06:28:16.000Z</published>
    <updated>2018-09-04T07:34:35.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=2996" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x5E2E;&#x6211;&#x5B8C;&#x6210;&#x6E38;&#x620F;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Your task is to read a picture of a chessboard position and print it in the chess notation.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>The input consists of an ASCII-art picture of a chessboard with chess pieces on positions described by the input. The pieces of the white player are shown in upper-case letters, while the black player&#x2019;s pieces are lower-case letters. The letters are one of &#x201C;K&#x201D; (King), &#x201C;Q&#x201D; (Queen), &#x201C;R&#x201D; (Rook), &#x201C;B&#x201D; (Bishop), &#x201C;N&#x201D; (Knight), or &#x201C;P&#x201D; (Pawn). The chessboard outline is made of plus (&#x201C;+&#x201D;), minus (&#x201C;-&#x201C;), and pipe (&#x201C;|&#x201D;) characters. The black fields are filled with colons (&#x201C;:&#x201D;), white fields with dots (&#x201C;.&#x201D;).</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>The output consists of two lines. The first line consists of the string &#x201C;White: &#x201C;, followed by the description of positions of the pieces of the white player. The second line consists of the string &#x201C;Black: &#x201C;, followed by the description of positions of the pieces of the black player.</p><p>The description of the position of the pieces is a comma-separated list of terms describing the pieces of the appropriate player. The description of a piece consists of a single upper-case letter that denotes the type of the piece (except for pawns, for that this identifier is omitted). This letter is immediatelly followed by the position of the piece in the standard chess notation &#x2013; a lower-case letter between &#x201C;a&#x201D; and &#x201C;h&#x201D; that determines the column (&#x201C;a&#x201D; is the leftmost column in the input) and a single digit between 1 and 8 that determines the row (8 is the first row in the input).</p><p>The pieces in the description must appear in the following order: King(&#x201C;K&#x201D;), Queens (&#x201C;Q&#x201D;), Rooks (&#x201C;R&#x201D;), Bishops (&#x201C;B&#x201D;), Knights (&#x201C;N&#x201D;), and pawns. Note that the numbers of pieces may differ from the initial position because of capturing the pieces and the promotions of pawns. In case two pieces of the same type appear in the input, the piece with the smaller row number must be described before the other one if the pieces are white, and the one with the larger row number must be described first if the pieces are black. If two pieces of the same type appear in the same row, the one with the smaller column letter must appear first.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x6839;&#x636E;&#x68CB;&#x76D8;&#x6253;&#x5370;&#x56FD;&#x9645;&#x8C61;&#x68CB;&#x7684;&#x68CB;&#x5B50;&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x767D;&#x8272;&#x73A9;&#x5BB6;&#x7684;&#x68CB;&#x5B50;&#x7528;&#x5927;&#x5199;&#x5B57;&#x6BCD;&#x663E;&#x793A;&#xFF0C;&#x9ED1;&#x8272;&#x73A9;&#x5BB6;&#x7684;&#x68CB;&#x5B50;&#x7528;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#x663E;&#x793A;&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x8F93;&#x51FA;&#x7531;&#x4E24;&#x884C;&#x7EC4;&#x6210;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x201C;White:&#x201D;&#xFF0C;&#x540E;&#x9762;&#x8DDF;&#x767D;&#x8272;&#x68CB;&#x5B50;&#x7684;&#x63CF;&#x8FF0;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x662F;&#x201C;Black&#x201D;&#x540E;&#x9762;&#x8DDF;&#x9ED1;&#x8272;&#x68CB;&#x5B50;&#x7684;&#x63CF;&#x8FF0;&#x3002;</p><p>&#x6BCF;&#x4E2A;&#x68CB;&#x5B50;&#x7684;&#x63CF;&#x8FF0;&#x7531;&#x4E00;&#x4E2A;&#x5927;&#x5199;&#x5B57;&#x6BCD;&#x7EC4;&#x6210;&#xFF08;&#x5982;&#x679C;&#x4E0D;&#x662F;Pawns&#x7684;&#x8BDD;&#xFF09;&#x3002;&#x7136;&#x540E;&#x7D27;&#x8DDF;&#x7684;&#x662F;&#x68CB;&#x5B50;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;a~h&#x7528;&#x4E8E;&#x786E;&#x5B9A;&#x5217;&#xFF0C;1~8&#x7528;&#x4E8E;&#x786E;&#x5B9A;&#x884C;&#xFF08;8&#x662F;&#x8F93;&#x5165;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#xFF09;&#x3002;</p><p>&#x63CF;&#x8FF0;&#x90E8;&#x5206;&#x5FC5;&#x987B;&#x6309;&#x7167;&#x4EE5;&#x4E0B;&#x987A;&#x5E8F;&#x51FA;&#x73B0;&#xFF1A;K,Q,R,B,N&#x548C;Pawns&#x3002;&#x8F93;&#x51FA;&#x7684;&#x6392;&#x5E8F;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A;&#x7C7B;&#x578B;&#x4E0D;&#x540C;&#xFF0C;&#x6309;&#x7167;&#x524D;&#x8FF0;&#x987A;&#x5E8F;&#xFF0C;&#x5982;&#x679C; &#x7C7B;&#x578B;&#x76F8;&#x540C;&#xFF0C;&#x767D;&#x8272;&#x68CB;&#x5B50;&#x5177;&#x6709;&#x8F83;&#x5C0F;&#x884C;&#x53F7;&#x7684;&#x4F18;&#x5148;&#xFF0C;&#x9ED1;&#x8272;&#x68CB;&#x5B50;&#x5219;&#x662F;&#x884C;&#x53F7;&#x5927;&#x7684;&#x4F18;&#x5148;&#x3002;&#x5982;&#x679C;&#x4ECD;&#x7136;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5217;&#x8F83;&#x5C0F;&#x7684;&#x4F18;&#x5148;&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&#x6A21;&#x62DF;</p><h2 id="&#x4EE3;&#x7801;-C"><a href="#&#x4EE3;&#x7801;-C" class="headerlink" title="&#x4EE3;&#x7801; C++"></a>&#x4EE3;&#x7801; C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> lieshu[<span class="number">9</span>] = {<span class="string">&apos;z&apos;</span>, <span class="string">&apos;a&apos;</span>,<span class="string">&apos;b&apos;</span>,<span class="string">&apos;c&apos;</span>,<span class="string">&apos;d&apos;</span>,<span class="string">&apos;e&apos;</span>,<span class="string">&apos;f&apos;</span>,<span class="string">&apos;g&apos;</span>,<span class="string">&apos;h&apos;</span> };</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">bool</span> xiaobing;</span><br><span class="line">    <span class="keyword">char</span> qizi;</span><br><span class="line">    <span class="keyword">char</span> lie;</span><br><span class="line">    <span class="keyword">int</span> hang;</span><br><span class="line">}node;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt;yingshe;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; Black;</span><br><span class="line"><span class="built_in">vector</span>&lt;node&gt; White;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    yingshe[<span class="string">&apos;K&apos;</span>] = <span class="number">6</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;Q&apos;</span>] = <span class="number">5</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;R&apos;</span>] = <span class="number">4</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;B&apos;</span>] = <span class="number">3</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;N&apos;</span>] = <span class="number">2</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;P&apos;</span>] = <span class="number">1</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;k&apos;</span>] = <span class="number">6</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;q&apos;</span>] = <span class="number">5</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;r&apos;</span>] = <span class="number">4</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;b&apos;</span>] = <span class="number">3</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;n&apos;</span>] = <span class="number">2</span>;</span><br><span class="line">    yingshe[<span class="string">&apos;p&apos;</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(node a, node b)</span><span class="comment">//&#x767D;&#x8272;&#x7684;&#xFF0C;&#x884C;&#x8F83;&#x5C0F;&#x4F18;&#x5148;</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (a.xiaobing != b.xiaobing)</span><br><span class="line">        <span class="keyword">return</span>(a.xiaobing &lt; b.xiaobing);</span><br><span class="line">    <span class="keyword">if</span> (yingshe[a.qizi] != yingshe[b.qizi])</span><br><span class="line">        <span class="keyword">return</span> yingshe[a.qizi] &gt; yingshe[b.qizi];</span><br><span class="line">    <span class="keyword">if</span> (a.hang != b.hang)</span><br><span class="line">        <span class="keyword">return</span> a.hang &lt; b.hang;</span><br><span class="line">    <span class="keyword">if</span> (a.lie != b.lie)</span><br><span class="line">        <span class="keyword">return</span> a.lie &lt; b.lie;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(node a, node b)</span><span class="comment">//&#x9ED1;&#x8272;&#x7684;&#xFF0C;&#x884C;&#x8F83;&#x5927;&#x4F18;&#x5148;</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (a.xiaobing != b.xiaobing)</span><br><span class="line">        <span class="keyword">return</span>(a.xiaobing &lt; b.xiaobing);</span><br><span class="line">    <span class="keyword">if</span> (yingshe[a.qizi] != yingshe[b.qizi])</span><br><span class="line">        <span class="keyword">return</span> yingshe[a.qizi] &gt; yingshe[b.qizi];</span><br><span class="line">    <span class="keyword">if</span> (a.hang != b.hang)</span><br><span class="line">        <span class="keyword">return</span> a.hang &gt; b.hang;</span><br><span class="line">    <span class="keyword">if</span> (a.lie != b.lie)</span><br><span class="line">        <span class="keyword">return</span> a.lie &lt; b.lie;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> cntb = <span class="number">0</span>, cntw = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">17</span>;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="keyword">int</span> z = <span class="number">1</span>;</span><br><span class="line">    node temp;</span><br><span class="line">    <span class="keyword">while</span> (z++!=t)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">&apos;+&apos;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (str[i] == <span class="string">&apos;.&apos;</span>||str[i]==<span class="string">&apos;:&apos;</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (str[i + <span class="number">1</span>] != <span class="string">&apos;.&apos;</span>&amp;&amp;str[i + <span class="number">1</span>] != <span class="string">&apos;:&apos;</span>&amp;&amp;str[i + <span class="number">1</span>] != <span class="string">&apos;|&apos;</span>)</span><br><span class="line">                {</span><br><span class="line">                    <span class="keyword">if</span> (str[i+<span class="number">1</span>]&lt;=<span class="string">&apos;Z&apos;</span>&amp;&amp;str[i+<span class="number">1</span>]&gt;=<span class="string">&apos;A&apos;</span>)<span class="comment">//&#x5927;&#x5199;&#x5B57;&#x6BCD;&#xFF0C;&#x767D;&#x8272;</span></span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">if</span> (str[i + <span class="number">1</span>] == <span class="string">&apos;P&apos;</span>)</span><br><span class="line">                            temp.xiaobing = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            temp.xiaobing = <span class="literal">false</span>;</span><br><span class="line">                        temp.qizi = str[i + <span class="number">1</span>];</span><br><span class="line">                        temp.hang = (t - z + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">                        temp.lie = (i + <span class="number">3</span>) / <span class="number">4</span>;</span><br><span class="line">                        White.push_back(temp);</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    {</span><br><span class="line">                        <span class="keyword">if</span> (str[i + <span class="number">1</span>] == <span class="string">&apos;p&apos;</span>)</span><br><span class="line">                            temp.xiaobing = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            temp.xiaobing = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                        temp.qizi = str[i + <span class="number">1</span>];</span><br><span class="line">                        temp.hang = (t - z + <span class="number">2</span>) / <span class="number">2</span>;</span><br><span class="line">                        temp.lie = (i + <span class="number">3</span>) / <span class="number">4</span>;</span><br><span class="line">                        Black.push_back(temp);</span><br><span class="line">                    }</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    sort(White.begin(), White.end(), cmp1);</span><br><span class="line">    sort(Black.begin(), Black.end(), cmp2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;White: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; White.size(); i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (White[i].qizi != <span class="string">&apos;P&apos;</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; White[i].qizi;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; lieshu[White[i].lie] &lt;&lt; White[i].hang;</span><br><span class="line">        <span class="keyword">if</span> (i != White.size() - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&apos;,&apos;</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Black: &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Black.size(); i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (Black[i].qizi != <span class="string">&apos;p&apos;</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, Black[i].qizi - <span class="string">&apos;a&apos;</span> + <span class="string">&apos;A&apos;</span>);<span class="comment">//&#x5C0F;&#x5199;&#x6362;&#x5927;&#x5199;</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; lieshu[Black[i].lie] &lt;&lt; Black[i].hang;</span><br><span class="line">        <span class="keyword">if</span> (i != Black.size() - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&apos;,&apos;</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">|...|:::|.n.|:::|...|:::|...|:p:|</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">|:::|...|:::|...|:::|...|:::|...|</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">|...|:::|...|:::|.P.|:::|...|:::|</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">|:P:|...|:::|...|:::|...|:::|...|</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|</span><br><span class="line">+---+---+---+---+---+---+---+---+</span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line">White: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4</span><br><span class="line">Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2996&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x5E2E;&amp;#x6211;&amp;#x5B8C;&amp;#x6210;&amp;#x6E38;&amp;#x620F;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="模拟" scheme="https://www.windsings.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1573 Robot Motion</title>
    <link href="https://www.windsings.com//posts/5035921d/"/>
    <id>https://www.windsings.com//posts/5035921d/</id>
    <published>2018-09-04T06:28:04.000Z</published>
    <updated>2018-09-04T07:27:42.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=1573" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x673A;&#x5668;&#x4EBA;&#x79FB;&#x52A8;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>A robot has been programmed to follow the instructions in its path. Instructions for the next direction the robot is to move are laid down in a grid. The possible instructions are</p><ul><li>N north (up the page)</li><li>S south (down the page)</li><li>E east (to the right on the page)</li><li>W west (to the left on the page)</li></ul><p>For example, suppose the robot starts on the north (top) side of Grid 1 and starts south (down). The path the robot follows is shown. The robot goes through 10 instructions in the grid before leaving the grid.</p><p>Compare what happens in Grid 2: the robot goes through 3 instructions only once, and then starts a loop through 8 instructions, and never exits.</p><p>You are to write a program that determines how long it takes a robot to get out of the grid or how the robot loops around.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>There will be one or more grids for robots to navigate. The data for each is in the following form. On the first line are three integers separated by blanks: the number of rows in the grid, the number of columns in the grid, and the number of the column in which the robot enters from the north. The possible entry columns are numbered starting with one at the left. Then come the rows of the direction instructions. Each grid will have at least one and at most 10 rows and columns of instructions. The lines of instructions contain only the characters N, S, E, or W with no blanks. The end of input is indicated by a row containing 0 0 0.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>For each grid in the input there is one line of output. Either the robot follows a certain number of instructions and exits the grid on any one the four sides or else the robot follows the instructions on a certain number of locations once, and then the instructions on some number of locations repeatedly. The sample input below corresponds to the two grids above and illustrates the two forms of output. The word &#x201C;step&#x201D; is always immediately followed by &#x201C;(s)&#x201D; whether or not the number before it is 1.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x673A;&#x5668;&#x4EBA;&#x6309;&#x7167;&#x6307;&#x4EE4;&#x79FB;&#x52A8;&#xFF0C;&#x95EE;&#x6700;&#x540E;&#x662F;&#x8D70;&#x51FA;&#x4E86;&#x77E9;&#x9635;&#x8FD8;&#x662F;&#x8FDB;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x5F53;&#x4E2D;&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E09;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x77E9;&#x9635;&#x7684;&#x884C;&#xFF0C;&#x77E9;&#x9635;&#x7684;&#x5217;&#xFF0C;&#x4EE5;&#x53CA;&#x673A;&#x5668;&#x4EBA;&#x6700;&#x521D;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x5982;&#x679C;&#x673A;&#x5668;&#x4EBA;&#x8D70;&#x51FA;&#x77E9;&#x9635;&#xFF0C;&#x8F93;&#x51FA;t step(s) to exit  &#x53CD;&#x4E4B;&#x8F93;&#x51FA;x step(s) before a loop of y step(s)</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&#x6A21;&#x62DF;</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h2 id="&#x4EE3;&#x7801;-C"><a href="#&#x4EE3;&#x7801;-C" class="headerlink" title="&#x4EE3;&#x7801; C++"></a>&#x4EE3;&#x7801; C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m, n, Start;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt;&gt;G;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;visit;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; Start;</span><br><span class="line">        <span class="keyword">if</span> (!n &amp;&amp; !m &amp;&amp; !Start)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        G.clear(); visit.clear();</span><br><span class="line">        G.resize(n); visit.resize(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        {</span><br><span class="line">            G[i].resize(m); visit[i].resize(m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; G[i][j];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>, loop = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>, j = Start<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        {</span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">if</span> (visit[i][j] == <span class="number">1</span>)</span><br><span class="line">                loop++;</span><br><span class="line">            visit[i][j]++;</span><br><span class="line">            <span class="keyword">switch</span> (G[i][j])</span><br><span class="line">            {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&apos;N&apos;</span>:</span><br><span class="line">                i--; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&apos;E&apos;</span>:</span><br><span class="line">                j++; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&apos;W&apos;</span>:</span><br><span class="line">                j--; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&apos;S&apos;</span>:</span><br><span class="line">                i++; <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (j &lt; <span class="number">0</span> || i &lt; <span class="number">0</span> || j &gt;= m || i &gt;= n)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="string">&quot; step(s) to exit&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (visit[i][j] == <span class="number">2</span>)</span><br><span class="line">            {</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; cnt - loop - loop &lt;&lt; <span class="string">&quot; step(s) before a loop of &quot;</span> &lt;&lt; loop &lt;&lt; <span class="string">&quot; step(s)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">6</span> <span class="number">5</span></span><br><span class="line">NEESWE</span><br><span class="line">WWWESS</span><br><span class="line">SNWWWW</span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line">SESWE</span><br><span class="line">EESNW</span><br><span class="line">NWEEN</span><br><span class="line">EWSEN</span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> step(s) to <span class="built_in">exit</span></span><br><span class="line"><span class="number">3</span> step(s) before a loop of <span class="number">8</span> step(s)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1573&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x673A;&amp;#x5668;&amp;#x4EBA;&amp;#x79FB;&amp;#x52A8;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="模拟" scheme="https://www.windsings.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1860 Currency Exchange</title>
    <link href="https://www.windsings.com//posts/d8ff61b5/"/>
    <id>https://www.windsings.com//posts/d8ff61b5/</id>
    <published>2018-09-04T04:18:12.000Z</published>
    <updated>2018-09-04T07:22:02.292Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=1860" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x4EA4;&#x6362;&#x8D27;&#x5E01;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Several currency exchange points are working in our city. Let us suppose that each point specializes in two particular currencies and performs exchange operations only with these currencies. There can be several points specializing in the same pair of currencies. Each point has its own exchange rates, exchange rate of A to B is the quantity of B you get for 1A. Also each exchange point has some commission, the sum you have to pay for your exchange operation. Commission is always collected in source currency.<br>For example, if you want to exchange 100 US Dollars into Russian Rubles at the exchange point, where the exchange rate is 29.75, and the commission is 0.39 you will get (100 - 0.39) * 29.75 = 2963.3975RUR.<br>You surely know that there are N different currencies you can deal with in our city. Let us assign unique integer number from 1 to N to each currency. Then each exchange point can be described with 6 numbers: integer A and B - numbers of currencies it exchanges, and real R<sub>AB</sub>, C<sub>AB</sub>, R<sub>BA</sub> and C<sub>BA</sub> - exchange rates and commissions when exchanging A to B and B to A respectively.<br>Nick has some money in currency S and wonders if he can somehow, after some exchange operations, increase his capital. Of course, he wants to have his money in currency S in the end. Help him to answer this difficult question. Nick must always have non-negative sum of money while making his operations.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>The first line of the input contains four numbers: N - the number of currencies, M - the number of exchange points, S - the number of currency Nick has and V - the quantity of currency units he has. The following M lines contain 6 numbers each - the description of the corresponding exchange point - in specified above order. Numbers are separated by one or more spaces. 1&lt;=S&lt;=N&lt;=100, 1&lt;=M&lt;=100, V is real number, 0&lt;=V&lt;=10<sup>3</sup>.<br>For each point exchange rates and commissions are real, given with at most two digits after the decimal point, 10<sup>-2</sup>&lt;=rate&lt;=10<sup>2</sup>, 0&lt;=commission&lt;=10<sup>2</sup>.<br>Let us call some sequence of the exchange operations simple if no exchange point is used more than once in this sequence. You may assume that ratio of the numeric values of the sums at the end and at the beginning of any simple sequence of the exchange operations will be less than 10<sup>4</sup>.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>If Nick can increase his wealth, output YES, in other case output NO to the output file.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x6709;&#x591A;&#x79CD;&#x6C47;&#x5E01;&#xFF0C;&#x6C47;&#x5E01;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x4EA4;&#x6362;&#xFF0C;&#x8FD9;&#x9700;&#x8981;&#x624B;&#x7EED;&#x8D39;&#xFF0C;&#x5F53;&#x4F60;&#x7528;100A&#x5E01;&#x4EA4;&#x6362;B&#x5E01;&#x65F6;&#xFF0C;A&#x5230;B&#x7684;&#x6C47;&#x7387;&#x662F;29.75&#xFF0C;&#x624B;&#x7EED;&#x8D39;&#x662F;0.39&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x53EF;&#x4EE5;&#x5F97;&#x5230;(100 - 0.39) * 29.75 = 2963.3975 B&#x5E01;&#x3002;&#x95EE;s&#x5E01;&#x7684;&#x91D1;&#x989D;&#x7ECF;&#x8FC7;&#x4EA4;&#x6362;&#x6700;&#x7EC8;&#x5F97;&#x5230;&#x7684;s&#x5E01;&#x91D1;&#x989D;&#x6570;&#x80FD;&#x5426;&#x589E;&#x52A0;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x7B2C;&#x4E00;&#x884C;&#x662F;4&#x4E2A;&#x6570;&#x5B57;&#xFF0C;N-&#x8D27;&#x5E01;&#x7684;&#x79CD;&#x7C7B;&#xFF0C;M-&#x4EA4;&#x6613;&#x6240;&#x7684;&#x6570;&#x91CF;&#x3002;S-Nick&#x4E00;&#x5F00;&#x59CB;Nick&#x6240;&#x6301;&#x6709;&#x7684;&#x8D27;&#x5E01;&#x79CD;&#x7C7B;&#x3002;V-Nick&#x4E00;&#x5F00;&#x59CB;&#x6301;&#x6709;&#x7684;&#x8D27;&#x5E01;&#x7684;&#x989D;&#x6570;&#x91CF;&#x3002;</p><p>&#x63A5;&#x7740;&#x662F;M&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x5305;&#x62EC;6&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x6574;&#x6570;A&#x548C;B-&#x8FD9;&#x4E2A;&#x4EA4;&#x6613;&#x6240;&#x4EA4;&#x6362;&#x7684;&#x8D27;&#x5E01;&#x7684;&#x79CD;&#x7C7B;&#xFF0C;R<sub>AB</sub>, C<sub>AB</sub>, R<sub>BA</sub> &#x548C; C<sub>BA</sub>&#x4E24;&#x79CD;&#x8D27;&#x5E01;&#x95F4;&#x7684;&#x6C47;&#x7387;&#x548C;&#x624B;&#x7EED;&#x8D39;&#x3002;</p><p>&#x6C47;&#x7387;&#x548C;&#x624B;&#x7EED;&#x8D39;&#x4FDD;&#x7559;&#x5C0F;&#x6570;&#x70B9;&#x540E;2&#x4F4D;&#xFF0C;10<sup>-2</sup>&lt;=&#x6C47;&#x7387;&lt;=10<sup>2</sup>, 0&lt;=&#x624B;&#x7EED;&#x8D39;&lt;=10<sup>2</sup></p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x5982;&#x679C;&#x94B1;&#x80FD;&#x8D8A;&#x6362;&#x8D8A;&#x591A;&#xFF0C;&#x8F93;&#x51FA;YES&#xFF0C;&#x53CD;&#x4E4B;&#x8F93;&#x51FA;NO&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&#x8FD9;&#x4E2A;&#x9898;&#x975E;&#x5E38;&#x597D;&#xFF0C;&#x4EE5;&#x524D;&#x505A;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x7684;&#x9898;&#xFF0C;&#x90FD;&#x771F;&#x7684;&#x662F;&#x5B57;&#x9762;&#x4E0A;&#x7684;&#x627E;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x9898;&#x662F;&#x7528;BF&#x7B97;&#x6CD5;&#x627E;&#x4E00;&#x4E2A;&#x6B63;&#x6743;&#x56DE;&#x8DEF;&#x3002;</p><p>&#x627E;&#x51FA;&#x4E00;&#x6761;&#x6B63;&#x6743;&#x56DE;&#x8DEF;&#x5373;&#x53EF;&#x3002;</p><p>&#x4E00;&#x79CD;&#x8D27;&#x5E01;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002;</p><p>&#x4E00;&#x4E2A;&#x201C;&#x5151;&#x6362;&#x70B9;&#x201D;&#x5C31;&#x662F;&#x56FE;&#x4E0A;&#x4E24;&#x79CD;&#x8D27;&#x5E01;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x4E2A;&#x5151;&#x6362;&#x65B9;&#x5F0F;&#xFF0C;&#x662F;&#x53CC;&#x8FB9;&#xFF0C;&#x4F46;A&#x5230;B&#x7684;&#x6C47;&#x7387;&#x548C;&#x624B;&#x7EED;&#x8D39;&#x53EF;&#x80FD;&#x4E0E;B&#x5230;A&#x7684;&#x6C47;&#x7387;&#x548C;&#x624B;&#x7EED;&#x8D39;&#x4E0D;&#x540C;&#x3002;</p><p>&#x552F;&#x4E00;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x6743;&#x503C;&#xFF0C;&#x5F53;&#x62E5;&#x6709;&#x8D27;&#x5E01;A&#x7684;&#x6570;&#x91CF;&#x4E3A;V&#x65F6;&#xFF0C;A&#x5230;A&#x7684;&#x6743;&#x503C;&#x4E3A;V&#xFF0C;&#x5373;&#x6CA1;&#x6709;&#x5151;&#x6362;,&#x800C;A&#x5230;B&#x7684;&#x6743;&#x503C;&#x4E3A;(V-Cab)*Rab&#x3002;</p><p>&#x672C;&#x9898;&#x662F;&#x201C;&#x6C42;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x201D;&#xFF0C;&#x4E4B;&#x6240;&#x4EE5;&#x88AB;&#x5F52;&#x7C7B;&#x4E3A;&#x201C;&#x6C42;&#x6700;&#x5C0F;&#x8DEF;&#x5F84;&#x201D;&#x662F;&#x56E0;&#x4E3A;&#x672C;&#x9898;&#x9898;&#x6070;&#x6070;&#x4E0E;bellman-Ford&#x7B97;&#x6CD5;&#x7684;&#x677E;&#x5F1B;&#x6761;&#x4EF6;&#x76F8;&#x53CD;&#xFF0C;&#x6C42;&#x7684;&#x662F;&#x80FD;&#x65E0;&#x9650;&#x677E;&#x5F1B;&#x7684;&#x6700;&#x5927;&#x6B63;&#x6743;&#x8DEF;&#x5F84;&#xFF0C;&#x4F46;&#x662F;&#x4F9D;&#x7136;&#x80FD;&#x591F;&#x5229;&#x7528;bellman-Ford&#x7684;&#x601D;&#x60F3;&#x53BB;&#x89E3;&#x9898;&#x3002;</p><p>&#x56E0;&#x6B64;&#x521D;&#x59CB;&#x5316;dis(S)=V   &#x800C;&#x6E90;&#x70B9;&#x5230;&#x5176;&#x4ED6;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#xFF08;&#x6743;&#x503C;&#xFF09;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x65E0;&#x7A77;&#x5C0F;&#xFF08;0&#xFF09;&#xFF0C;&#x5F53;s&#x5230;&#x5176;&#x4ED6;&#x67D0;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x80FD;&#x4E0D;&#x65AD;&#x53D8;&#x5927;&#x65F6;&#xFF0C;&#x8BF4;&#x660E;&#x5B58;&#x5728;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#xFF1B;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#x4E00;&#x76F4;&#x53D8;&#x5927;&#xFF0C;&#x8BF4;&#x660E;&#x5B58;&#x5728;&#x6B63;&#x73AF;&#x3002;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;&#x73AF;&#x8DEF;&#xFF0C;&#x7528;Bellman-Ford&#x548C;spfa&#x90FD;&#x53EF;&#x4EE5;&#x3002;</p><h2 id="&#x4EE3;&#x7801;-C"><a href="#&#x4EE3;&#x7801;-C" class="headerlink" title="&#x4EE3;&#x7801; C++"></a>&#x4EE3;&#x7801; C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, s, cnt;<span class="comment">//n&#x8D27;&#x5E01;&#x6570;&#x91CF;&#xFF0C;m&#x4EA4;&#x6613;&#x6240;&#x6570;&#x91CF;&#xFF0C;S&#x521D;&#x8BD5;&#x8D27;&#x5E01;&#x7684;&#x79CD;&#x7C7B;&#xFF0C;V&#x521D;&#x59CB;&#x8D27;&#x5E01;&#x7684;&#x6570;&#x91CF;&#xFF0C;C&#x4E3A;&#x8BA1;&#x6570;&#x53D8;&#x91CF;&#x3002;</span></span><br><span class="line"><span class="keyword">double</span> v, dis[<span class="number">110</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">double</span> rate, cost;</span><br><span class="line">}node;</span><br><span class="line">node p[<span class="number">220</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Bellman_Ford</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">memset</span>(dis, <span class="number">0</span>, <span class="keyword">sizeof</span>(dis));  <span class="comment">//&#x6B64;&#x5904;&#x4E0E;Bellman-Ford&#x7684;&#x5904;&#x7406;&#x76F8;&#x53CD;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x6E90;&#x70B9;&#x5230;&#x5404;&#x70B9;&#x8DDD;&#x79BB;0&#xFF0C;&#x5230;&#x81EA;&#x8EAB;&#x7684;&#x503C;&#x4E3A;&#x539F;&#x503C;</span></span><br><span class="line">    dis[s] = v;<span class="comment">//&#x4E00;&#x5F00;&#x59CB;&#x81EA;&#x5DF1;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x6570;&#x91CF;&#x662F;V</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)<span class="comment">//&#x9650;&#x5B9A;&#x6700;&#x5927;&#x5FAA;&#x73AF;&#x6B21;&#x6570;</span></span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; cnt; j++)<span class="comment">//&#x904D;&#x5386;&#x6BCF;&#x4E2A;&#x4EA4;&#x6613;&#x6240;&#x4E2D;&#xFF0C;&#x6C42;&#x5F97;&#x80FD;&#x6362;&#x6700;&#x591A;&#x94B1;&#x7684;</span></span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> a = p[j].a, b = p[j].b;</span><br><span class="line">            <span class="keyword">double</span> r = p[j].rate, c = p[j].cost;</span><br><span class="line">            <span class="keyword">if</span> (dis[b] &lt; (dis[a] - c) * r)</span><br><span class="line">            {</span><br><span class="line">                dis[b] = (dis[a] - c) * r;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (!flag)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cnt; i++)</span><br><span class="line">        <span class="keyword">if</span> (dis[p[i].b] &lt; (dis[p[i].a] - p[i].cost) * p[i].rate)    <span class="comment">//dis[p[i].b]&#x662F;&#x6362;&#x4E86;&#x4E00;&#x5708;&#x4E4B;&#x540E;&#xFF0C;&#x80FD;&#x62FF;&#x5230;&#x7684;&#x94B1;&#xFF0C;&#x73B0;&#x5728;&#x5728;&#x8FD9;&#x4E2A;&#x4EA4;&#x6613;&#x6240;&#x80FD;&#x62FF;&#x5230;&#x66F4;&#x591A;&#xFF0C;&#x8868;&#x793A;&#x80FD;&#x677E;&#x5F1B;&#x8DEF;&#x5F84;&#x3002;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> i, j, a, b;</span><br><span class="line">    <span class="keyword">double</span> rab, rba, cab, cba;</span><br><span class="line">    <span class="keyword">while</span> (~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%lf&quot;</span>, &amp;n, &amp;m, &amp;s, &amp;v))</span><br><span class="line">    {</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; rab &gt;&gt; cab &gt;&gt; rba &gt;&gt; cba;<span class="comment">//&#x8F93;&#x5165;&#x4EA4;&#x6613;&#x6240;&#x4FE1;&#x606F;</span></span><br><span class="line">            p[cnt].a = a;</span><br><span class="line">            p[cnt].b = b;</span><br><span class="line">            p[cnt].rate = rab;</span><br><span class="line">            p[cnt++].cost = cab;</span><br><span class="line">            p[cnt].a = b;</span><br><span class="line">            p[cnt].b = a;</span><br><span class="line">            p[cnt].rate = rba;</span><br><span class="line">            p[cnt++].cost = cba;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (Bellman_Ford())</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">20.0</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1.00</span> <span class="number">1.00</span> <span class="number">1.00</span> <span class="number">1.00</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1.10</span> <span class="number">1.00</span> <span class="number">1.10</span> <span class="number">1.00</span></span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line">YES</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1860&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x4EA4;&amp;#x6362;&amp;#x8D27;&amp;#x5E01;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="最短路径" scheme="https://www.windsings.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
      <category term="Bellman_Ford" scheme="https://www.windsings.com/tags/Bellman-Ford/"/>
    
      <category term="正权回路" scheme="https://www.windsings.com/tags/%E6%AD%A3%E6%9D%83%E5%9B%9E%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2632 Crashing Robots</title>
    <link href="https://www.windsings.com//posts/53ad7638/"/>
    <id>https://www.windsings.com//posts/53ad7638/</id>
    <published>2018-08-22T05:37:50.000Z</published>
    <updated>2018-09-04T07:22:15.278Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=2632" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x5D29;&#x6E83;&#x7684;&#x673A;&#x5668;&#x4EBA;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>In a modernized warehouse, robots are used to fetch the goods. Careful planning is needed to ensure that the robots reach their destinations without crashing into each other. Of course, all warehouses are rectangular, and all robots occupy a circular floor space with a diameter of 1 meter. Assume there are N robots, numbered from 1 through N. You will get to know the position and orientation of each robot, and all the instructions, which are carefully (and mindlessly) followed by the robots. Instructions are processed in the order they come. No two robots move simultaneously; a robot always completes its move before the next one starts moving.<br>A robot crashes with a wall if it attempts to move outside the area of the warehouse, and two robots crash with each other if they ever try to occupy the same spot.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>The first line of input is K, the number of test cases. Each test case starts with one line consisting of two integers, 1 &lt;= A, B &lt;= 100, giving the size of the warehouse in meters. A is the length in the EW-direction, and B in the NS-direction.<br>The second line contains two integers, 1 &lt;= N, M &lt;= 100, denoting the numbers of robots and instructions respectively.<br>Then follow N lines with two integers, 1 &lt;= Xi &lt;= A, 1 &lt;= Yi &lt;= B and one letter (N, S, E or W), giving the starting position and direction of each robot, in order from 1 through N. No two robots start at the same position.<br><img src="/posts/53ad7638/2632_1.jpg" alt="2632"><br>Finally there are M lines, giving the instructions in sequential order.<br>An instruction has the following format:<br>&lt; robot #&gt; &lt; action&gt; &lt; repeat&gt;<br>Where is one of<br>L: turn left 90 degrees,<br>R: turn right 90 degrees, or<br>F: move forward one meter,</p><p>and 1 &lt;= &lt; repeat&gt; &lt;= 100 is the number of times the robot should perform this single move.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>Output one line for each test case:<br>Robot i crashes into the wall, if robot i crashes into a wall. (A robot crashes into a wall if Xi = 0, Xi = A + 1, Yi = 0 or Yi = B + 1.)<br>Robot i crashes into robot j, if robots i and j crash, and i is the moving robot.<br>OK, if no crashing occurs.</p><p>Only the first crash is to be reported.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x673A;&#x5668;&#x4EBA;&#x5728;&#x4ED3;&#x5E93;&#x4E2D;&#x53D6;&#x8D27;&#xFF0C;&#x4ED3;&#x5E93;&#x662F;&#x77E9;&#x5F62;&#x7684;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x673A;&#x5668;&#x4EBA;&#x90FD;&#x5360;&#x76F4;&#x5F84;1M&#x7684;&#x5706;&#x5F62;&#x5730;&#x677F;&#x7A7A;&#x95F4;&#xFF0C;&#x5047;&#x8BBE;&#x6709;N&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x4ECE;1~N&#x7F16;&#x53F7;&#x3002;&#x73B0;&#x5728;&#x77E5;&#x9053;&#x6BCF;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x65B9;&#x5411;&#x3002;&#x673A;&#x5668;&#x4EBA;&#x4F1A;&#x65E0;&#x610F;&#x8BC6;&#x7684;&#x9075;&#x4ECE;&#x6240;&#x6709;&#x7684;&#x6307;&#x4EE4;&#xFF0C;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x8FDB;&#x884C;&#x3002;&#x4FDD;&#x8BC1;&#x6CA1;&#x6709;&#x4E24;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x540C;&#x65F6;&#x79FB;&#x52A8;&#xFF0C;&#x673A;&#x5668;&#x4EBA;&#x603B;&#x662F;&#x5728;&#x4E0B;&#x4E00;&#x4E2A;&#x6307;&#x4EE4;&#x4E4B;&#x524D;&#x5904;&#x7406;&#x5F53;&#x524D;&#x4E4B;&#x7075;&#x3002;</p><p>&#x5982;&#x679C;&#x673A;&#x5668;&#x4EBA;&#x8BD5;&#x56FE;&#x79FB;&#x52A8;&#x5230;&#x4ED3;&#x5E93;&#x533A;&#x57DF;&#x4E4B;&#x5916;&#xFF0C;&#x673A;&#x5668;&#x4EBA;&#x4F1A;&#x649E;&#x5899;&#x3002;&#x5982;&#x679C;&#x673A;&#x5668;&#x4EBA;&#x8BD5;&#x56FE;&#x5360;&#x636E;&#x4E00;&#x4E2A;&#x5DF2;&#x7ECF;&#x6709;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x70B9;&#xFF0C;&#x5219;&#x8FD9;&#x4E24;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x4F1A;&#x4E92;&#x76F8;&#x649E;&#x51FB;&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;K&#xFF0C;&#x8868;&#x793A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7684;&#x6570;&#x91CF;&#x3002;</p><p>&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x4EE5;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#x7684;&#x884C;&#x5F00;&#x59CB;&#xFF0C;1 &lt;= A&#xFF0C;B &lt;= 100&#xFF0C;&#x4EE5;&#x7C73;&#x4E3A;&#x5355;&#x4F4D;&#x7ED9;&#x51FA;&#x4ED3;&#x5E93;&#x7684;&#x5927;&#x5C0F;&#x3002;A&#x662F;EW&#x65B9;&#x5411;&#x7684;&#x957F;&#x5EA6;&#xFF0C;B&#x662F;NS&#x65B9;&#x5411;&#x7684;&#x957F;&#x5EA6;&#x3002;<br>&#x7B2C;&#x4E8C;&#x884C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#xFF0C;1 &lt;= N&#xFF0C;M &lt;= 100&#xFF0C;&#x5206;&#x522B;&#x8868;&#x793A;&#x673A;&#x5668;&#x4EBA;&#x548C;&#x6307;&#x4EE4;&#x7684;&#x6570;&#x91CF;&#x3002;<br>&#x7136;&#x540E;&#x8DDF;&#x968F;N&#x884C;&#xFF0C;&#x7528;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#xFF0C;1 &lt;= Xi &lt;= A&#xFF0C;1 &lt;= Yi &lt;= B&#x548C;&#x4E00;&#x4E2A;&#x5B57;&#x6BCD;&#xFF08;N&#xFF0C;S&#xFF0C;E&#x6216;W&#xFF09;&#xFF0C;&#x7ED9;&#x51FA;&#x6BCF;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x548C;&#x65B9;&#x5411;&#xFF0C;&#x4FDD;&#x8BC1;&#x6CA1;&#x6709;&#x4E24;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x4ECE;&#x540C;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#x3002;</p><p>&#x6700;&#x540E;&#x6709;M&#x884C;&#xFF0C;&#x6309;&#x987A;&#x5E8F;&#x7ED9;&#x51FA;&#x8BF4;&#x660E;&#x3002;<br>&#x6307;&#x4EE4;&#x5177;&#x6709;&#x4EE5;&#x4E0B;&#x683C;&#x5F0F;&#xFF1A;</p><ul><li>&lt;robot&#xFF03;&gt; <action> <repeat></repeat></action></li></ul><p>&#x5176;&#x4E2D;&#xFF0C;<action> &#x662F;&#x4EE5;&#x4E0B;&#x7684;&#x5176;&#x4E2D;&#x4E4B;&#x4E00;</action></p><ul><li>L&#xFF1A;&#x5411;&#x5DE6;&#x8F6C;90&#x5EA6;&#x3002;</li><li>R&#xFF1A;&#x5411;&#x53F3;&#x8F6C;90&#x5EA6;</li><li>F&#xFF1A;&#x524D;&#x8FDB;&#x4E00;&#x7C73;&#x3002;</li></ul><p>1 &lt;= <repeat> &lt;= 100&#x662F;&#x673A;&#x5668;&#x4EBA;&#x6267;&#x884C;&#x6B64;&#x5355;&#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x6B21;&#x6570;&#x3002;</repeat></p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x6709;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#xFF1A;</p><ul><li>Robot i crashes into the wall     &#x5982;&#x679C;&#x673A;&#x5668;&#x4EBA;&#x649E;&#x5899;&#x4E86;</li><li>Robot i crashes into robot j    &#x5982;&#x679C;i&#x662F;&#x6B63;&#x5728;&#x79FB;&#x52A8;&#x7684;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x649E;&#x5230;&#x4E86;j&#x3002;</li><li>OK, if no crashing occurs.</li></ul><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&#x6A21;&#x62DF;</p><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> Directions[<span class="number">4</span>] = { <span class="string">&apos;N&apos;</span>,<span class="string">&apos;E&apos;</span>,<span class="string">&apos;S&apos;</span>,<span class="string">&apos;W&apos;</span> };</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> Direction;<span class="comment">//&#x65B9;&#x5411;</span></span><br><span class="line">    <span class="keyword">int</span> x;<span class="comment">//&#x5750;&#x6807;</span></span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">}robot;</span><br><span class="line"><span class="built_in">vector</span>&lt;robot&gt;R;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> times;</span><br><span class="line">}command;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;G;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">int</span> K, A, B, N, M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(command comm,<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (comm.c == <span class="string">&apos;L&apos;</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comm.times; i++)</span><br><span class="line">            R[comm.num].Direction = (R[comm.num].Direction + <span class="number">3</span>) % <span class="number">4</span>;<span class="comment">//&#x5411;&#x5DE6;</span></span><br><span class="line">    <span class="keyword">if</span> (comm.c == <span class="string">&apos;R&apos;</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comm.times; i++)</span><br><span class="line">            R[comm.num].Direction = (R[comm.num].Direction + <span class="number">1</span>) % <span class="number">4</span>;<span class="comment">//&#x5411;&#x53F3;</span></span><br><span class="line">    <span class="keyword">if</span> (comm.c == <span class="string">&apos;F&apos;</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">switch</span> (R[comm.num].Direction)</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">//&#x5411;&#x5317;&#x8D70;</span></span><br><span class="line">            G[R[comm.num].y][R[comm.num].x] = <span class="number">0</span>;<span class="comment">//&#x8D77;&#x6B65;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comm.times; i++)</span><br><span class="line">            {</span><br><span class="line">                R[comm.num].y += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (R[comm.num].y &gt; B)</span><br><span class="line">                {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Robot %d crashes into the wall\n&quot;</span>, comm.num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (G[R[comm.num].y][R[comm.num].x] != <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Robot %d crashes into robot %d\n&quot;</span>, comm.num, G[R[comm.num].y][R[comm.num].x]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                G[R[comm.num].y][R[comm.num].x] = comm.num;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">//&#x5411;&#x4E1C;&#x8D70;</span></span><br><span class="line">            G[R[comm.num].y][R[comm.num].x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comm.times; i++)</span><br><span class="line">            {</span><br><span class="line">                R[comm.num].x += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (R[comm.num].x &gt; A)</span><br><span class="line">                {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Robot %d crashes into the wall\n&quot;</span>, comm.num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (G[R[comm.num].y][R[comm.num].x] != <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Robot %d crashes into robot %d\n&quot;</span>, comm.num, G[R[comm.num].y][R[comm.num].x]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(flag)</span><br><span class="line">                G[R[comm.num].y][R[comm.num].x] = comm.num;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">//&#x5411;&#x5357;&#x8D70;</span></span><br><span class="line">            G[R[comm.num].y][R[comm.num].x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comm.times; i++)</span><br><span class="line">            {</span><br><span class="line">                R[comm.num].y -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (R[comm.num].y == <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Robot %d crashes into the wall\n&quot;</span>, comm.num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (G[R[comm.num].y][R[comm.num].x] != <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Robot %d crashes into robot %d\n&quot;</span>, comm.num, G[R[comm.num].y][R[comm.num].x]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                G[R[comm.num].y][R[comm.num].x] = comm.num;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="comment">//&#x5411;&#x897F;&#x8D70;</span></span><br><span class="line">            G[R[comm.num].y][R[comm.num].x] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; comm.times; i++)</span><br><span class="line">            {</span><br><span class="line">                R[comm.num].x -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (R[comm.num].x == <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Robot %d crashes into the wall\n&quot;</span>, comm.num);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">if</span> (G[R[comm.num].y][R[comm.num].x] != <span class="number">0</span>)</span><br><span class="line">                {</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Robot %d crashes into robot %d\n&quot;</span>, comm.num, G[R[comm.num].y][R[comm.num].x]);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span> (flag)</span><br><span class="line">                G[R[comm.num].y][R[comm.num].x] = comm.num;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (cnt == M&amp;&amp;flag)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;OK&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> Dir;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K;</span><br><span class="line">    <span class="keyword">while</span> (K--)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B;</span><br><span class="line">        G.clear();</span><br><span class="line">        G.resize(B+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= B; i++)</span><br><span class="line">            G[i].resize(A+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">        R.resize(N + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; R[i].x &gt;&gt; R[i].y &gt;&gt; Dir;</span><br><span class="line">            G[R[i].y][R[i].x] = i;</span><br><span class="line">            <span class="keyword">switch</span> (Dir)</span><br><span class="line">            {</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&apos;N&apos;</span>: R[i].Direction = <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&apos;E&apos;</span>: R[i].Direction = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&apos;S&apos;</span>: R[i].Direction = <span class="number">2</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&apos;W&apos;</span>: R[i].Direction = <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        command comm;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; comm.num &gt;&gt; comm.c &gt;&gt; comm.times;</span><br><span class="line">            move(comm, cnt);</span><br><span class="line">            cnt++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    solution();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><pre><code class="cpp"></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2632&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x5D29;&amp;#x6E83;&amp;#x7684;&amp;#x673A;&amp;#x5668;&amp;#x4EBA;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="模拟" scheme="https://www.windsings.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1068 Parencodings</title>
    <link href="https://www.windsings.com//posts/d837b83f/"/>
    <id>https://www.windsings.com//posts/d837b83f/</id>
    <published>2018-08-20T09:32:11.000Z</published>
    <updated>2018-09-04T06:33:46.024Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=1068" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>Parencodings<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Let S = s1 s2&#x2026;s2n be a well-formed string of parentheses. S can be encoded in two different ways:<br>q    By an integer sequence P = p1 p2&#x2026;pn where pi is the number of left parentheses before the ith right parenthesis in S (P-sequence).<br>q    By an integer sequence W = w1 w2&#x2026;wn where for each right parenthesis, say a in S, we associate an integer which is the number of right parentheses counting from the matched left parenthesis of a up to a. (W-sequence).</p><p>Following is an example of the above encodings:</p><ul><li><p>S        (((()()())))</p></li><li><p>P-sequence        4 5 6666</p></li><li><p>W-sequence        1 1 1456</p></li></ul><p>Write a program to convert P-sequence of a well-formed string to the W-sequence of the same string.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>The first line of the input contains a single integer t (1 &lt;= t &lt;= 10), the number of test cases, followed by the input data for each test case. The first line of each test case is an integer n (1 &lt;= n &lt;= 20), and the second line is the P-sequence of a well-formed string. It contains n positive integers, separated with blanks, representing the P-sequence.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>The output file consists of exactly t lines corresponding to test cases. For each test case, the output line should contain n integers describing the W-sequence of the string corresponding to its given P-sequence.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>S&#x662F;&#x4E00;&#x4E2A;&#x7528;&#x62EC;&#x53F7;&#x7EC4;&#x6210;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;S&#x53EF;&#x4EE5;&#x6709;&#x4E24;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x7F16;&#x7801;&#xFF1A;</p><ul><li>P&#x5E8F;&#x5217;&#xFF0C;P = p1 p2&#x2026;pn&#xFF0C;pi&#x662F;S&#x5E8F;&#x5217;&#x4E2D;&#x7B2C;i&#x4E2A;&#x53F3;&#x62EC;&#x53F7;&#x4E4B;&#x524D;&#x7684;&#x5DE6;&#x62EC;&#x53F7;&#x7684;&#x6570;&#x91CF;&#x3002;</li><li>W&#x5E8F;&#x5217;&#xFF0C;W = w1 w2&#x2026;wn&#xFF0C;Wi&#x662F;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x53F3;&#x62EC;&#x53F7;&#xFF0C;&#x4E0E;&#x4E4B;&#x5339;&#x914D;&#x7684;&#x54CD;&#x5E94;&#x7684;&#x5DE6;&#x62EC;&#x53F7;&#x4E4B;&#x95F4;&#x7684;&#xFF0C;&#x53F3;&#x62EC;&#x53F7;&#x7684;&#x6570;&#x91CF;&#x3002;</li></ul><p>&#x73B0;&#x5728;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;P&#x5E8F;&#x5217;&#xFF0C;&#x6C42;&#x51FA;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#x7684;W&#x5E8F;&#x5217;&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x8F93;&#x5165;&#x5305;&#x62EC;&#x591A;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x6570;t&#xFF0C;&#x8868;&#x793A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x6570;n&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x662F;P&#x5E8F;&#x5217;&#xFF0C;&#x6709;N&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;P&#x5E8F;&#x5217;&#xFF0C;&#x8F93;&#x51FA;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#x7684;W&#x5E8F;&#x5217;&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&#x6A21;&#x62DF;</p><h2 id="&#x4EE3;&#x7801;-C"><a href="#&#x4EE3;&#x7801;-C" class="headerlink" title="&#x4EE3;&#x7801; C++"></a>&#x4EE3;&#x7801; C++</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t, n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;P(n);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; W;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; S;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; P[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = cnt; j &lt; P[i]; j++)</span><br><span class="line">                S.push_back(<span class="string">&apos;(&apos;</span>);</span><br><span class="line">            cnt = P[i];</span><br><span class="line">            S.push_back(<span class="string">&apos;)&apos;</span>);</span><br><span class="line">        }</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;<span class="comment">//&#x62EC;&#x53F7;&#x91CC;&#x5F85;&#x5339;&#x914D;&#x7684;&#x53F3;&#x62EC;&#x53F7;&#x7684;&#x4E2A;&#x6570;</span></span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;<span class="comment">//&#x53F3;&#x62EC;&#x53F7;&#x7684;&#x4E2A;&#x6570;</span></span><br><span class="line">        <span class="keyword">while</span> (cnt &lt; S.size())</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (S[cnt] != <span class="string">&apos;)&apos;</span>)</span><br><span class="line">            {</span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            }</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">            res = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = cnt<span class="number">-1</span>; i &gt;=<span class="number">0</span>; i--)</span><br><span class="line">            {</span><br><span class="line">                <span class="keyword">if</span> (S[i] == <span class="string">&apos;(&apos;</span>)</span><br><span class="line">                    <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">                    {</span><br><span class="line">                        W.push_back(res);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        num--;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                {</span><br><span class="line">                    num++;</span><br><span class="line">                    res++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            cnt++;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; W.size(); i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (i != <span class="number">0</span>)</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">&apos; &apos;</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; W[i];</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span> <span class="number">6</span> <span class="number">8</span> <span class="number">9</span> <span class="number">9</span> <span class="number">9</span></span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1068&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;Parencodings&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="模拟" scheme="https://www.windsings.com/tags/%E6%A8%A1%E6%8B%9F/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ-3295 Tautology</title>
    <link href="https://www.windsings.com//posts/8893c4a8/"/>
    <id>https://www.windsings.com//posts/8893c4a8/</id>
    <published>2018-08-19T10:19:43.000Z</published>
    <updated>2018-09-04T07:22:27.228Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=3295" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x6C38;&#x771F;&#x5F0F;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>WFF &#x2018;N PROOF is a logic game played with dice. Each die has six faces representing some subset of the possible symbols K, A, N, C, E, p, q, r, s, t. A Well-formed formula (WFF) is any string of these symbols obeying the following rules:</p><ul><li>p, q, r, s, and t are WFFs</li><li>if w is a WFF, Nw is a WFF</li><li>if w and x are WFFs, Kwx, Awx, Cwx, and Ewx are WFFs.</li></ul><p>The meaning of a WFF is defined as follows:</p><ul><li>p, q, r, s, and t are logical variables that may take on the value 0 (false) or 1 (true).</li><li><p>K, A, N, C, E mean and, or, not, implies, and equals as defined in the truth table below.</p><p>Definitions of K, A, N, C, and E</p></li></ul><table><thead><tr><th>w  x</th><th>Kwx</th><th>Awx</th><th>Nw</th><th>Cwx</th><th>Ewx</th></tr></thead><tbody><tr><td>1  1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0  0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0  1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>0  0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>A tautology is a WFF that has value 1 (true) regardless of the values of its variables. For example, ApNp is a tautology because it is true regardless of the value of p. On the other hand, ApNq is not, because it has the value 0 for p=0, q=1.</p><p>You must determine whether or not a WFF is a tautology.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>Input consists of several test cases. Each test case is a single line containing a WFF with no more than 100 symbols. A line containing 0 follows the last case.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>For each test case, output a line containing tautology or not as appropriate.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x7ED9;&#x5B9A;5&#x4E2A;&#x53D8;&#x91CF;&#x548C;5&#x4E2A;&#x64CD;&#x4F5C;&#x7B26;&#xFF0C;&#x6C42;&#x7ED9;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x662F;&#x5426;&#x6052;&#x4E3A;&#x771F;&#x3002;</p><p>5&#x4E2A;&#x53D8;&#x91CF;&#x5168;&#x90FD;&#x662F;&#x5E03;&#x5C14;&#x53D8;&#x91CF;&#xFF0C;&#x53D6;&#x503C;&#x53EA;&#x6709;0&#x548C;1&#x4E24;&#x79CD;&#x3002;&#x64CD;&#x4F5C;&#x7B26;&#x7684;&#x771F;&#x503C;&#x8868;&#x5982;&#x4E0B;&#xFF1A;</p><table><thead><tr><th>w  x</th><th>Kwx</th><th>Awx</th><th>Nw</th><th>Cwx</th><th>Ewx</th></tr></thead><tbody><tr><td>1  1</td><td>1</td><td>1</td><td>0</td><td>1</td><td>1</td></tr><tr><td>0  0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0  1</td><td>0</td><td>1</td><td>1</td><td>1</td><td>0</td></tr><tr><td>0  0</td><td>0</td><td>0</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>&#x4E3E;&#x4F8B;&#x8BF4;&#x660E;&#xFF1A;</p><ol><li>ApNp&#x6052;&#x4E3A;&#x771F;&#xFF0C;&#x4E0D;&#x8BBA;p&#x53D6;&#x503C;&#x662F;0&#x8FD8;&#x662F;1&#xFF0C;ApNp&#x90FD;&#x662F;&#x771F;&#x3002;</li><li>ApNq&#x5C31;&#x4E0D;&#x662F;&#x6052;&#x4E3A;&#x771F;&#x7684;&#xFF0C;&#x5F53;p=0, q=1&#x65F6;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#x4E3A;&#x5047;&#x3002;</li></ol><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x8F93;&#x5165;&#x5305;&#x62EC;&#x591A;&#x4E2A;&#x6D4B;&#x8BD5;&#xFF0C;&#x6BCF;&#x884C;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#xFF0C;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x8D85;&#x8FC7;100&#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x7528;&#x4E00;&#x4E2A;&#x72EC;&#x5360;&#x4E00;&#x884C;&#x7684;0&#x8868;&#x793A;&#x6D4B;&#x8BD5;&#x7ED3;&#x675F;&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x5BF9;&#x4E8E;&#x6CA1;&#x4E2A;&#x6D4B;&#x8BD5;&#xFF0C;&#x5982;&#x679C;&#x6052;&#x4E3A;&#x771F;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;tautology&#x3002;&#x53CD;&#x4E4B;&#x8F93;&#x51FA;not&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><ul><li>&#x679A;&#x4E3E;&#x6240;&#x6709;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4E00;&#x5171;&#x6709;2^5=32&#x79CD;&#x53EF;&#x80FD;&#x3002;</li><li>&#x6216;&#x8005;&#x5229;&#x7528;&#x6808;&#xFF0C;&#x6A21;&#x62DF;&#x64CD;&#x4F5C;&#x3002;</li></ul><h2 id="&#x4EE3;&#x7801;-&#x679A;&#x4E3E;"><a href="#&#x4EE3;&#x7801;-&#x679A;&#x4E3E;" class="headerlink" title="&#x4EE3;&#x7801;-&#x679A;&#x4E3E;"></a>&#x4EE3;&#x7801;-&#x679A;&#x4E3E;</h2><p><strong>&#x7F16;&#x8BD1;&#x73AF;&#x5883;&#xFF1A;&#x53EA;&#x5728;G++&#x4E2D;AC&#xFF0C;&#x5728;C++&#x4E2D;&#x4F1A;WA&#xFF0C;&#x6211;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x4E3A;&#x5565;</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n, p, q, r, s, t;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">res</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    n++;</span><br><span class="line">    <span class="keyword">int</span> t1, t2;</span><br><span class="line">    <span class="keyword">switch</span> (str[n])</span><br><span class="line">    {</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;K&apos;</span>:t1 = res(); t2 = res(); <span class="keyword">return</span> t1 &amp;&amp; t2;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;A&apos;</span>:t1 = res(); t2 = res(); <span class="keyword">return</span> t1 || t2;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;N&apos;</span>:t1 = res(); <span class="keyword">return</span> !t1;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;C&apos;</span>:t1 = res(); t2 = res(); <span class="keyword">return</span> (!t1) || t2;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;E&apos;</span>:t1 = res(); t2 = res(); <span class="keyword">return</span> t1== t2;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;p&apos;</span>:<span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;q&apos;</span>:<span class="keyword">return</span> q;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;r&apos;</span>:<span class="keyword">return</span> r;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;s&apos;</span>:<span class="keyword">return</span> s;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&apos;t&apos;</span>:<span class="keyword">return</span> t;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; str)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">2</span> &amp;&amp; flag; p++)</span><br><span class="line">            <span class="keyword">for</span> (q = <span class="number">0</span>; q &lt; <span class="number">2</span> &amp;&amp; flag; q++)</span><br><span class="line">                <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">2</span> &amp;&amp; flag; r++)</span><br><span class="line">                    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; <span class="number">2</span> &amp;&amp; flag; s++)</span><br><span class="line">                        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; <span class="number">2</span> &amp;&amp; flag; t++)</span><br><span class="line">                        {</span><br><span class="line">                            n = <span class="number">-1</span>;</span><br><span class="line">                            <span class="keyword">if</span> (!res())</span><br><span class="line">                                flag = <span class="literal">false</span>;</span><br><span class="line">                        }</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;tautology&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    solution();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><h2 id="&#x4EE3;&#x7801;-&#x679A;&#x4E3E;-&#x6808;"><a href="#&#x4EE3;&#x7801;-&#x679A;&#x4E3E;-&#x6808;" class="headerlink" title="&#x4EE3;&#x7801;-&#x679A;&#x4E3E;-&#x6808;"></a>&#x4EE3;&#x7801;-&#x679A;&#x4E3E;-&#x6808;</h2><p><strong>&#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x5728;G++&#x548C;C++&#x4E2D;AC</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p, q, r, s, t;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;res;</span><br><span class="line">    <span class="keyword">int</span> t1, t2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = str.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">switch</span> (str[i])</span><br><span class="line">        {</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;p&apos;</span>:</span><br><span class="line">            res.push(p);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;q&apos;</span>:</span><br><span class="line">            res.push(q);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;r&apos;</span>:</span><br><span class="line">            res.push(r);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;s&apos;</span>:</span><br><span class="line">            res.push(s);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;t&apos;</span>:</span><br><span class="line">            res.push(t);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;K&apos;</span>:</span><br><span class="line">            t1 = res.top(); res.pop();</span><br><span class="line">            t2 = res.top(); res.pop();</span><br><span class="line">            <span class="keyword">if</span> (t1&amp;&amp;t2)</span><br><span class="line">                res.push(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.push(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;A&apos;</span>:</span><br><span class="line">            t1 = res.top(); res.pop();</span><br><span class="line">            t2 = res.top(); res.pop();</span><br><span class="line">            <span class="keyword">if</span> (t1 || t2)</span><br><span class="line">                res.push(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.push(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;N&apos;</span>:</span><br><span class="line">            t1 = res.top(); res.pop();</span><br><span class="line">            <span class="keyword">if</span> (!t1)</span><br><span class="line">                res.push(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.push(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;C&apos;</span>:</span><br><span class="line">            t1 = res.top(); res.pop();</span><br><span class="line">            t2 = res.top(); res.pop();</span><br><span class="line">            <span class="keyword">if</span> (!t1 || t2)</span><br><span class="line">                res.push(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.push(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&apos;E&apos;</span>:</span><br><span class="line">            t1 = res.top(); res.pop();</span><br><span class="line">            t2 = res.top(); res.pop();</span><br><span class="line">            <span class="keyword">if</span> (t1 == t2)</span><br><span class="line">                res.push(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                res.push(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    t1 = res.top(); res.pop();</span><br><span class="line">    <span class="keyword">return</span> t1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;str)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="string">&quot;0&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; <span class="number">2</span> &amp;&amp; flag; p++)</span><br><span class="line">            <span class="keyword">for</span> (q = <span class="number">0</span>; q &lt; <span class="number">2</span> &amp;&amp; flag; q++)</span><br><span class="line">                <span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">2</span> &amp;&amp; flag; r++)</span><br><span class="line">                    <span class="keyword">for</span> (s = <span class="number">0</span>; s &lt; <span class="number">2</span> &amp;&amp; flag; s++)</span><br><span class="line">                        <span class="keyword">for</span> (t = <span class="number">0</span>; t &lt; <span class="number">2</span> &amp;&amp; flag; t++)</span><br><span class="line">                        {</span><br><span class="line">                            <span class="keyword">if</span> (!judge())</span><br><span class="line">                                flag = <span class="literal">false</span>;</span><br><span class="line">                        }</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;tautology&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;not&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;2.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    solution();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></p><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line">ApNp</span><br><span class="line">ApNq</span><br><span class="line"><span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line">tautology</span><br><span class="line"><span class="keyword">not</span></span><br></pre></td></tr></table></figure><p><strong>&#x826F;&#x5FC3;&#x5927;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x6765;&#x81EA;Waterloo Local Contest, 2006.9.30</strong><br>&#x8F93;&#x5165;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">p</span><br><span class="line">q</span><br><span class="line">r</span><br><span class="line">s</span><br><span class="line">t</span><br><span class="line">Cpp</span><br><span class="line">App</span><br><span class="line">Kpp</span><br><span class="line">Epp</span><br><span class="line">NNNNNNNNNNNNNNNNNNNAKKKEEKEEKppppppppppp</span><br><span class="line">NNNNNNNNNNNNNCAKKEEEAACKKKKKCEEEACKKEKCCEKAppqqqppppqqpqppppqqppppqqqppppp</span><br><span class="line">NNNNNNNNNNNACKCAKEAAEKCAKECEKKKACAAEAKAKCKKrqqqprpppprpqprqprrppqrqqrqrqppqp</span><br><span class="line">NNNNNNNNCAEACACKEEEKKAEEEEAKKEECACKACECCCEKAECEECCCACrrrrprrqssrprrqpsssrrpsqssqprrqpprrpqrppqqsqqs</span><br><span class="line">NNNNNNNNNNNKAEEACEKKCCCKKAAECACAECAEKKECKAAAECCCKEAACArqpsrstpqsspsppssrpsprstsqspsspptrqrprptstps</span><br><span class="line">NNNNNNNNNNNNEAAECEAEAECKCEAAAEEACAACCKEAKtqptstpttssrptqrtsstpptqtssppp</span><br><span class="line">NNNNNNNNNNNNNNNNNNNCAAAKEEAEACCCACECCCCCCEKCKCAKCpqpssqsppprttrqprspsssttsrprtqq</span><br><span class="line">NNNNNNNNNNNNEEKKCCCACACECEACCKCCAEKKKKCEKCEKEppsrrpqtqrrspqrqrpprtpqpqqrqqqtprp</span><br><span class="line">NNNNCAAEAECKKEKKEAACEAECAEEECCCCEKAKCKKAAEKrrtssrrppprrpstsrqqrrqprqrsprsspsrpsspsq</span><br><span class="line">NNNNNNNNNECCKAAACAKAAECCKAECKEAEKEACCKErstrqpqrtrtrqstqpptprttprtrrqtq</span><br><span class="line">NNAKAKEAKEAEAKACCEECCKKAACECAACACrrtrqtsttstspqrstqrpspqttrpspqsp</span><br><span class="line">NNNEECEACEECKAAKKKCEKECKAKKAAAAAKsrtpprtrqqtpsssrrprtsqtsrpssspt</span><br><span class="line">NNNNNNCEECAKAACEKECAKCCAEECCCAEAEKKKrpqqqsqprqqsqtqstsrpqsqsqsrqsqs</span><br><span class="line">NNNAEAEKEACEECECKCAEAKCEEEKEKEKKCECEqtpssqrptpsqppqpprsqpttqrsqqrqqtrq</span><br><span class="line">CNNNEECEEEKECAAEACAsppsrqpptpspppqqNNNEECEEEKECAAEACAsppsrqpptpspppqq</span><br><span class="line">ANNNEECEEEKECAAEACAsppsrqpptpspppqqNNNEECEEEKECAAEACAsppsrqpptpspppqq</span><br><span class="line">KNNNEECEEEKECAAEACAsppsrqpptpspppqqNNNEECEEEKECAAEACAsppsrqpptpspppqq</span><br><span class="line">ENNNEECEEEKECAAEACAsppsrqpptpspppqqNNNEECEEEKECAAEACAsppsrqpptpspppqq</span><br><span class="line">CNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqss</span><br><span class="line">ANNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqss</span><br><span class="line">KNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqss</span><br><span class="line">ENNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqss</span><br><span class="line">NCNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqss</span><br><span class="line">NANNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqss</span><br><span class="line">NKNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqss</span><br><span class="line">NENNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqss</span><br><span class="line">NNNNEEEEEAAACKEKAAEEAqpptpsqsrqpprssptt</span><br><span class="line">NNNKAKCEECACCEECACEKrtrrsstpqptpstsrsq</span><br><span class="line">NNNNNNNNNCACCCEKEACEACpqrqpsststtpps</span><br><span class="line">NNNNKKCACEACECCssqptqptrrtr</span><br><span class="line">NNNAAAACKECCAKAKACprspqspspsttpttr</span><br><span class="line">NNNECCCECCAAEpqstpspppss</span><br><span class="line">NNNNNCEAECACCEKAEEEppsptpsppprpqrq</span><br><span class="line">AEAAKKEEEKAEAKpqqtpppsssqrqsp</span><br><span class="line">NNAKEKAAKprqrpqpt</span><br><span class="line">NNNAKACAKEKCECKtqppqtpqsqspr</span><br><span class="line">NCEKEEACCCppsstppprp</span><br><span class="line">NNNAEKCEKAEEECEEKEtrqpppqqpppqstpp</span><br><span class="line">NNNNCKEAACAKEKACECCEKstppprrptqqpqqpppp</span><br><span class="line">NNEAKCECKACEEECKprrpqqsppppttqr</span><br><span class="line">NNNNNCKAAAKKEKKKECKECppqrppttpsttrtqtq</span><br><span class="line">NNEKKACCKKACEKErpprsptppppptq</span><br><span class="line">NNNCKECCAEAECAEspqpqpprsptpr</span><br><span class="line">NNNCKECKCEEECstrtppsrtrp</span><br><span class="line">NNKCCKACKAACKprtttttpttpp</span><br><span class="line">NNNNEACCKKEArqpptrppt</span><br><span class="line">NKECKACAptrrrttt</span><br><span class="line">NNAEEEKECAAptpspptqpp</span><br><span class="line">NNNACKEEAAKAKKpsrttqtssrrt</span><br><span class="line">NNKKAKAKEEECACEEtstqqrsptttrprp</span><br><span class="line">CKAKECKKKtttppptptq</span><br><span class="line">NNNCEEEKCECCtsptqqqptp</span><br><span class="line">NAECCAKKCCttttpptpsr</span><br><span class="line">NCEEKCCAErpptpsppt</span><br><span class="line">NKKEEKtppttt</span><br><span class="line">NCKCAECEpttqqttp</span><br><span class="line">NNNNNEEKAAECqqpqpppt</span><br><span class="line">NECAACAECCAACKtrpptpptqtpppp</span><br><span class="line">NNKECKKACrttttrtp</span><br><span class="line">AECAECrrtsptt</span><br><span class="line">0</span><br></pre></td></tr></table></figure></p><p>&#x8F93;&#x51FA;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">tautology</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">tautology</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">tautology</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">tautology</span><br><span class="line">tautology</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">tautology</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">tautology</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br><span class="line">not</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=3295&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x6C38;&amp;#x771F;&amp;#x5F0F;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
      <category term="枚举" scheme="https://www.windsings.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="栈" scheme="https://www.windsings.com/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2586 Y2K Accounting Bug</title>
    <link href="https://www.windsings.com//posts/b572d5b3/"/>
    <id>https://www.windsings.com//posts/b572d5b3/</id>
    <published>2018-08-17T11:14:07.000Z</published>
    <updated>2018-09-04T07:20:06.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=2586" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x5343;&#x5E74;&#x866B;&#x9519;&#x8BEF;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Accounting for Computer Machinists (ACM) has sufferred from the Y2K bug and lost some vital data for preparing annual report for MS Inc.<br>All what they remember is that MS Inc. posted a surplus or a deficit each month of 1999 and each month when MS Inc. posted surplus, the amount of surplus was s and each month when MS Inc. posted deficit, the deficit was d. They do not remember which or how many months posted surplus or deficit. MS Inc., unlike other companies, posts their earnings for each consecutive 5 months during a year. ACM knows that each of these 8 postings reported a deficit but they do not know how much. The chief accountant is almost sure that MS Inc. was about to post surplus for the entire year of 1999. Almost but not quite.</p><p>Write a program, which decides whether MS Inc. suffered a deficit during 1999, or if a surplus for 1999 was possible, what is the maximum amount of surplus that they can post.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>Input is a sequence of lines, each containing two positive integers s and d.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>For each line of input, output one line containing either a single integer giving the amount of surplus for the entire year, or output Deficit if it is impossible.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x9898;&#x76EE;&#x770B;&#x7684;&#x6211;&#x5410;&#x8840;&#x2026;.</p><p>&#x5927;&#x610F;&#xFF1A;&#x67D0;&#x516C;&#x53F8;&#x6BCF;&#x4E2A;&#x6708;&#x7684;&#x76C8;&#x4F59;&#x6216;&#x8005;&#x8D64;&#x5B57;&#x53EA;&#x6709;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF1A;&#x8981;&#x4E48;&#x662F;&#x8D5A;&#x4E86;s&#xFF0C;&#x8981;&#x4E48;&#x662F;&#x4E8F;&#x4E86;d&#xFF0C;&#x53EA;&#x6709;&#x53EF;&#x80FD;&#x662F;&#x8FD9;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x800C;&#x4E14;&#x91D1;&#x989D;&#x56FA;&#x5B9A;&#xFF0C;&#x5C31;&#x662F;s&#x6216;&#x8005;d&#xFF0C;&#x4E0D;&#x4F1A;&#x662F;&#x5176;&#x4ED6;&#x7684;&#x6570;&#x3002;</p><p>&#x4F46;&#x662F;&#x5751;&#x7239;&#x7684;&#x662F;&#xFF0C;&#x4ED6;&#x4EEC;&#x4E0D;&#x8BB0;&#x5F97;&#x8FD9;&#x4E00;&#x5E74;&#x4E2D;&#xFF0C;&#x54EA;&#x51E0;&#x4E2A;&#x6708;&#x8D5A;&#x4E86;&#xFF0C;&#x54EA;&#x51E0;&#x4E2A;&#x6708;&#x8D54;&#x4E86;&#x3002;&#x4ED6;&#x4EEC;&#x53EA;&#x77E5;&#x9053;&#xFF1A;&#x4ED6;&#x4EEC;&#x6BCF;&#x6B21;&#x7EDF;&#x8BA1;&#x5F53;&#x5E74;&#x7684;&#x8D22;&#x52A1;&#x62A5;&#x8868;&#x65F6;&#xFF0C;&#x90FD;&#x662F;&#x4E00;&#x8FDE;&#x8BA1;&#x7B97;5&#x4E2A;&#x6708;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x4E00;&#x5E74;&#x5171;&#x516C;&#x5E03;8&#x6B21;&#x8D22;&#x52A1;&#x62A5;&#x8868;&#xFF08;1~5,2~6,3~7,4~8,5~9,6~10,7~11,8~12&#xFF09;&#x3002;&#x8FD9;8&#x4E2A;&#x6708;&#x7684;&#x8D22;&#x52A1;&#x62A5;&#x8868;&#x5168;&#x90FD;&#x662F;&#x4E8F;&#x635F;&#x7684;&#x3002;</p><p>&#x5751;&#x7239;&#x6210;&#x8FD9;&#x4E2A;&#x6837;&#x5B50;&#xFF0C;&#x4ED6;&#x4EEC;&#x8FD8;&#x62B1;&#x6709;&#x4E00;&#x4E1D;&#x4FA5;&#x5E78;&#x5FC3;&#x7406;&#xFF0C;&#x8BA4;&#x4E3A;&#x4ED6;&#x4EEC;&#x4ECA;&#x5E74;&#x6709;&#x53EF;&#x80FD;&#x8D5A;&#x94B1;&#xFF0C;&#x95EE;&#xFF0C;&#x4ED6;&#x4EEC;&#x4ECA;&#x5E74;&#x6700;&#x591A;&#x53EF;&#x80FD;&#x80FD;&#x8D5A;&#x591A;&#x5C11;&#x94B1;&#xFF0C;&#x5982;&#x679C;&#x91D1;&#x989D;&lt;0&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x201D;Deficit&#x201D;&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x6709;&#x591A;&#x4E2A;&#x8F93;&#x5165;&#xFF0C;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x53EA;&#x6709;&#x4E00;&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x6709;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;s&#x548C;d&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x8F93;&#x51FA;&#x53EF;&#x80FD;&#x7684;&#x6700;&#x5927;&#x7684;&#x8425;&#x5229;&#xFF0C;&#x5982;&#x679C;&#x4E8F;&#x635F;&#xFF0C;&#x8F93;&#x51FA;&#x201D;Deficit&#x201D;&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&lt;&#x8D2A;&#x5FC3;&gt;&#x56E0;&#x4E3A;&#x6BCF;5&#x4E2A;&#x6708;&#x7EDF;&#x8BA1;&#x4E00;&#x6B21;&#x90FD;&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x6709;5&#x79CD;&#x60C5;&#x51B5;&#xFF1A;</p><ol><li>&#x82E5;SSSSD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;: SSSSDSSSSDSS</li><li>&#x82E5;SSSDD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;&#xFF1A;SSSDDSSSDDSS</li><li>&#x82E5;SSDDD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;: SSDDDSSDDDSS</li><li>&#x82E5;SDDDD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;: SDDDDSDDDDSD</li><li>&#x82E5;DDDDD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;: DDDDDDDDDDDD</li></ol><p><dfs>&#x679A;&#x4E3E;&#x548C;&#x904D;&#x5386;</dfs></p><ol><li>&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6708;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x53EA;&#x6709;&#x8D5A;&#x4E86;s&#x548C;&#x4E8F;&#x4E86;d&#xFF0C;&#x56E0;&#x6B64;&#x5206;&#x522B;&#x5047;&#x8BBE;&#xFF0C;&#x8FDB;&#x884C;&#x6DF1;&#x5EA6;&#x641C;&#x7D22;&#xFF0C;&#x8981;&#x7528;&#x5230;2<sup>12</sup>&#x4E2A;&#x53EF;&#x80FD;&#x3002;</li></ol><h2 id="&#x4EE3;&#x7801;&#xFF08;&#x8D2A;&#x5FC3;&#xFF09;"><a href="#&#x4EE3;&#x7801;&#xFF08;&#x8D2A;&#x5FC3;&#xFF09;" class="headerlink" title="&#x4EE3;&#x7801;&#xFF08;&#x8D2A;&#x5FC3;&#xFF09;"></a>&#x4EE3;&#x7801;&#xFF08;&#x8D2A;&#x5FC3;&#xFF09;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> s, d;</span><br><span class="line">    <span class="keyword">int</span> ans;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; s &amp;&amp; <span class="built_in">cin</span> &gt;&gt; d)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (d&gt;<span class="number">4</span> * s)ans = <span class="number">10</span> * s - <span class="number">2</span> * d;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">2</span> * d&gt;<span class="number">3</span> * s)ans = <span class="number">8</span> * s - <span class="number">4</span> * d;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">3</span> * d&gt;<span class="number">2</span> * s)ans = <span class="number">6</span> * (s - d);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">4</span> * d&gt;s)ans = <span class="number">3</span> * (s - <span class="number">3</span> * d);</span><br><span class="line">        <span class="keyword">else</span> ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ans&lt;<span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Deficit&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x4EE3;&#x7801;&#xFF08;DFS&#xFF09;"><a href="#&#x4EE3;&#x7801;&#xFF08;DFS&#xFF09;" class="headerlink" title="&#x4EE3;&#x7801;&#xFF08;DFS&#xFF09;"></a>&#x4EE3;&#x7801;&#xFF08;DFS&#xFF09;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> s, d;</span><br><span class="line"><span class="keyword">int</span> month[<span class="number">12</span>];</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">// &#x4ECE;5&#x6708;&#x5F00;&#x59CB;&#xFF0C;&#x6BCF;&#x4E2A;&#x6708;&#x53D1;&#x5E03;&#x4E00;&#x4E2A;&#x62A5;&#x8868;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x68C0;&#x67E5;</span></span><br><span class="line">    <span class="comment">// &#x68C0;&#x67E5;&#x8FD9;&#x4E2A;&#x62A5;&#x8868;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x5426;&#x4E3A;&#x4E8F;&#x635F;</span></span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">4</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">5</span>; j &lt; m; j++) {</span><br><span class="line">            tmp += month[j];</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (tmp &gt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// &#x5E74;&#x5E95;&#x67E5;&#x770B;&#x53EF;&#x80FD;&#x7684;&#x5229;&#x6DA6;&#xFF0C;&#x4FDD;&#x7559;&#x6700;&#x5927;&#x5229;&#x6DA6;</span></span><br><span class="line">    <span class="keyword">if</span> (m == <span class="number">12</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; j++) sum += month[j];</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; res) res = sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// &#x8425;&#x5229;&#x6216;&#x4E8F;&#x635F;&#x90FD;&#x8BD5;&#x4E00;&#x8BD5;</span></span><br><span class="line">    month[m] = s;</span><br><span class="line">    dfs(m + <span class="number">1</span>);</span><br><span class="line">    month[m] = -d;</span><br><span class="line">    dfs(m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;s&gt;&gt;d)</span><br><span class="line">    {</span><br><span class="line">        res = <span class="number">-1e9</span>;</span><br><span class="line">        dfs(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (res &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Deficit&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line"><span class="number">59</span> <span class="number">237</span></span><br><span class="line"><span class="number">375</span> <span class="number">743</span></span><br><span class="line"><span class="number">200000</span> <span class="number">849694</span></span><br><span class="line"><span class="number">2500000</span> <span class="number">8000000</span></span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line"><span class="number">116</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">300612</span></span><br><span class="line">Deficit</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2586&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x5343;&amp;#x5E74;&amp;#x866B;&amp;#x9519;&amp;#x8BEF;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心" scheme="https://www.windsings.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="DFS" scheme="https://www.windsings.com/tags/DFS/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2109 Power of Cryptography</title>
    <link href="https://www.windsings.com//posts/ea1deaf6/"/>
    <id>https://www.windsings.com//posts/ea1deaf6/</id>
    <published>2018-08-15T11:02:12.000Z</published>
    <updated>2018-09-04T07:19:46.064Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=2109" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x5BC6;&#x7801;&#x5B66;&#x7684;&#x529B;&#x91CF;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Current work in cryptography involves (among other things) large prime numbers and computing powers of numbers among these primes. Work in this area has resulted in the practical use of results from number theory and other branches of mathematics once considered to be only of theoretical interest.<br>This problem involves the efficient computation of integer roots of numbers.<br>Given an integer n&gt;=1 and an integer p&gt;= 1 you have to write a program that determines the n th positive root of p. In this problem, given such integers n and p, p will always be of the form k to the nth. power, for an integer k (this integer is what your program must find).</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>The input consists of a sequence of integer pairs n and p with each integer on a line by itself. For all such pairs 1&lt;=n&lt;= 200, 1&lt;=p&lt;10<sup>101</sup> and there exists an integer k, 1&lt;=k&lt;=10<sup>9</sup> such that k<sup>n</sup> = p.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>For each integer pair n and p the value k should be printed, i.e., the number k such that k n =p.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;N&#x548C;P&#xFF0C;&#x6C42;&#x4E00;&#x4E2A;&#x6570;K&#xFF0C;&#x4F7F;&#x5F97;K<sup>N</sup>=P&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x4E00;&#x884C;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x662F;N&#xFF08;1&lt;=n&lt;= 200&#xFF09;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x662F;P(1&lt;=p&lt;10<sup>101</sup>),&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x6574;&#x6570;K&#xFF0C;1&lt;=k&lt;=10<sup>9</sup>&#xFF0C;&#x6EE1;&#x8DB3; k<sup>n</sup> = p&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x8F93;&#x51FA;K&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&#x5176;&#x5B9E;&#x8FD9;&#x4E2A;&#x9898;&#x5C31;&#x662F;&#x7528;pow&#x51FD;&#x6570;&#x6765;&#x6C42;&#x7684;&#x3002;</p><p>&#x5728;double&#x7CBE;&#x5EA6;&#x5185;&#xFF0C;&#x4E00;&#x4E2A;&#x5927;&#x6570;&#xFF0C;&#x5F00;N&#x6B21;&#x65B9;&#x548C;&#x5F00;N+1&#x6B21;&#x65B9;&#xFF0C;&#x662F;&#x80FD;&#x611F;&#x77E5;&#x5230;&#x7684;&#x3002;</p><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">double</span> n, p;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>,&amp;n,&amp;p)!=EOF)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.0lf\n&quot;</span>, <span class="built_in">pow</span>(p, <span class="number">1.0</span> / n));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">16</span></span><br><span class="line"><span class="number">3</span> <span class="number">27</span></span><br><span class="line"><span class="number">7</span> <span class="number">4357186184021382204544</span></span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1234</span></span><br><span class="line">Source</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2109&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x5BC6;&amp;#x7801;&amp;#x5B66;&amp;#x7684;&amp;#x529B;&amp;#x91CF;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="数学问题" scheme="https://www.windsings.com/tags/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
      <category term="幂运算" scheme="https://www.windsings.com/tags/%E5%B9%82%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1328 Radar Installation</title>
    <link href="https://www.windsings.com//posts/be1dc362/"/>
    <id>https://www.windsings.com//posts/be1dc362/</id>
    <published>2018-08-10T08:45:09.000Z</published>
    <updated>2018-09-04T07:19:07.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=1328" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x5B89;&#x88C5;&#x96F7;&#x8FBE;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Assume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d.</p><p>We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates.<br><img src="/posts/be1dc362/1328_1.jpg" alt="1328"></p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>The input consists of several test cases. The first line of each case contains two integers n (1&lt;=n&lt;=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases.</p><p>The input is terminated by a line containing pair of zeros</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>For each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. &#x201C;-1&#x201D; installation means no solution for that case.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x5E73;&#x9762;&#x76F4;&#x89D2;&#x5750;&#x6807;&#x7CFB;&#x4E0A;&#x6709;n&#x4E2A;&#x70B9;&#xFF0C;&#x6C42;&#x5728;x&#x8F74;&#x4E0A;&#x627E;&#x5C3D;&#x91CF;&#x5C11;&#x7684;&#x70B9;&#xFF0C;&#x4EE5;&#x8FD9;&#x4E9B;&#x70B9;&#x4E3A;&#x5706;&#x5FC3;&#x753B;&#x4E00;&#x4E2A;&#x534A;&#x5F84;&#x4E3A;d&#x7684;&#x5706;&#xFF0C;&#x4F7F;&#x5F97;&#x7ED9;&#x5B9A;&#x7684;&#x70B9;&#x90FD;&#x5728;&#x753B;&#x51FA;&#x6765;&#x7684;&#x5706;&#x91CC;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x8F93;&#x51FA;-1&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x4E00;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x591A;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6574;&#x6570;n&#xFF08;1 &lt;= n &lt;= 1000&#xFF09;&#x548C;d&#xFF0C;&#x5176;&#x4E2D;n&#x662F;&#x6D77;&#x4E2D;&#x5C9B;&#x5C7F;&#x7684;&#x6570;&#x91CF;&#xFF0C;d&#x662F;&#x96F7;&#x8FBE;&#x88C5;&#x7F6E;&#x7684;&#x8986;&#x76D6;&#x8DDD;&#x79BB;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x662F;n&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x6BCF;&#x4E2A;&#x5C9B;&#x7684;&#x4F4D;&#x7F6E;&#x5750;&#x6807;&#x3002;&#x7136;&#x540E;&#x662F;&#x4E00;&#x4E2A;&#x7A7A;&#x767D;&#x884C;&#x6765;&#x5206;&#x9694;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;</p><p>&#x8F93;&#x5165;&#x7531;&#x5305;&#x542B;&#x4E24;&#x4E2A;0&#x7684;&#x884C;&#x8868;&#x793A;&#x7EC8;&#x6B62;&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x542B;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7F16;&#x53F7;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x6240;&#x9700;&#x7684;&#x5B89;&#x88C5;&#x6570;&#x91CF;&#x6700;&#x5C11;&#x7684;&#x96F7;&#x8FBE;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x201C;-1&#x201D;&#x8868;&#x793A;&#x6CA1;&#x6709;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><ol><li>&#x8003;&#x8651;&#x5728;&#x4EC0;&#x4E48;&#x60C5;&#x51B5;&#x4E0B;&#x6CA1;&#x6709;&#x89E3;&#xFF1A;&#x5F53;&#x4E14;&#x4EC5;&#x5F53;&#x4EE5;&#xFF08;a,b&#xFF09;&#x4E3A;&#x5706;&#x5FC3;&#xFF0C;D&#x4E3A;&#x534A;&#x5F84;&#x753B;&#x4E00;&#x4E2A;&#x5706;&#xFF0C;&#x8FD9;&#x4E2A;&#x5706;&#x4E0E;x&#x8F74;&#x6CA1;&#x6709;&#x4EA4;&#x70B9;&#x65F6;&#xFF0C;&#x8FD9;&#x4E2A;&#x6D77;&#x5C9B;&#x662F;&#x65E0;&#x6CD5;&#x88AB;&#x96F7;&#x8FBE;&#x8986;&#x76D6;&#x7684;&#x3002;&#x5982;&#x56FE;&#xFF1A;<img src="/posts/be1dc362/1328-2.png" alt="1328"></li><li>&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x5706;&#x5FC3;&#x548C;&#x534A;&#x5F84;&#xFF0C;&#x53EF;&#x4EE5;&#x6C42;&#x51FA;&#x5706;&#x7684;&#x65B9;&#x7A0B;&#xFF1A;(x-a)<sup>2</sup>+(y-b)<sup>2</sup>=d<sup>2</sup>&#xFF0C;&#x4E0E;y=0&#x8054;&#x7ACB;&#x3002;&#x53EF;&#x5F97;&#xFF1A;x<sup>2</sup>-2ax+a<sup>2</sup>+b<sup>2</sup>-d<sup>2</sup>=0&#x3002;</li><li>&#x5224;&#x522B;&#x5F0F;&#x25B3;=4a<sup>2</sup>-4(a<sup>2</sup>+b<sup>2</sup>-d<sup>2</sup>)=d<sup>2</sup>-b<sup>2</sup>&#x3002;</li><li>&#x5982;&#x679C;&#x65E0;&#x89E3;&#xFF0C;&#x5219;&#x25B3;&lt;0&#xFF0C;&#x5373;d<sup>2</sup>&lt;b<sup>2</sup>&#x3002;</li><li>&#x5982;&#x679C;&#x6709;&#x89E3;&#xFF0C;&#x6839;&#x636E;&#x6C42;&#x6839;&#x516C;&#x5F0F;&#xFF1A;x<sub>1</sub>=a-(d<sup>2</sup>-b<sup>2</sup>)&#xFF0C;x<sub>2</sub>=a+(d<sup>2</sup>-b<sup>2</sup>)&#x3002;</li></ol><p>&#x90A3;&#x4E48;&#x56DE;&#x5230;&#x56FE;&#x4E2D;&#xFF0C;&#x4E24;&#x4E2A;&#x70B9;&#x5728;&#x5750;&#x6807;&#x8F74;&#x7684;&#x4F4D;&#x7F6E;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A;<br><img src="/posts/be1dc362/1328-3.png" alt="1328"></p><p>&#x7EE7;&#x7EED;&#x60F3;&#xFF1A;</p><ol><li>&#x5982;&#x679C;&#x8981;&#x5728;x&#x8F74;&#x4E0A;&#x9009;&#x70B9;&#x753B;&#x5706;&#x8986;&#x76D6;(a,b),&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x70B9;&#x7684;&#x6A2A;&#x5750;&#x6807;&#x5C31;&#x4E00;&#x5B9A;&#x5728;[a-d&#xB2;+b&#xB2;,a+d&#xB2;-b&#xB2;]&#x533A;&#x95F4;&#x5185;&#x3002;</li><li>&#x56E0;&#x6B64;&#x8FD9;&#x9053;&#x9898;&#x53D8;&#x6210;&#x4E86;&#x5728;&#x6570;&#x8F74;&#x4E0A;&#x9009;&#x6700;&#x5C11;&#x7684;&#x70B9;&#xFF0C;&#x8986;&#x76D6;&#x7ED9;&#x5B9A;&#x7EBF;&#x6BB5;&#x3002;&#x8FD9;&#x5C31;&#x7C7B;&#x4F3C;&#x4E8E;&#x6574;&#x6570;&#x533A;&#x95F4;&#x4E86;&#x3002;</li><li>&#x5047;&#x8BBE;&#x6570;&#x8F74;&#x4E0A;&#x6709;&#x5F88;&#x591A;&#x6BB5;&#x533A;&#x95F4;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x5B83;&#x4EEC;&#x4ECE;&#x6570;&#x8F74;&#x4E0A;&#x5206;&#x79BB;&#x51FA;&#x6765;&#x3002; <img src="/posts/be1dc362/1328-4.png" alt="1328"></li><li>&#x53D6;&#x70B9;&#x7684;&#x8FC7;&#x7A0B;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x753B;&#x4E00;&#x6761;&#x94C5;&#x5782;&#x7EBF;&#x6765;&#x5272;&#x8FD9;&#x4E9B;&#x7EBF;&#x6BB5;&#x3002;<img src="/posts/be1dc362/1328-5.png" alt="1328"></li><li>&#x628A;&#x6240;&#x6709;&#x7EBF;&#x6BB5;&#x6309;&#x7167;&#x53F3;&#x7AEF;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x3002;</li><li>&#x5982;&#x4E0A;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x5C31;&#x7B2C;&#x4E00;&#x90E8;&#x5206;&#x800C;&#x8A00;&#xFF0C;&#x9009;&#x62E9;&#x7B2C;&#x4E00;&#x6761;&#x7EBF;&#x6BB5;&#x7684;&#x53F3;&#x7AEF;&#x70B9;&#xFF0C;&#x8BB0;&#x4F4D;&#x7F6E;&#x4E3A;P&#xFF0C;&#x5982;&#x679C;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x51E0;&#x6761;&#x7EBF;&#x6BB5;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x90FD;&#x5728;P&#x7684;&#x5DE6;&#x8FB9;&#xFF0C;&#x56E0;&#x4E3A;&#x662F;&#x6309;&#x7167;&#x53F3;&#x7AEF;&#x70B9;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5176;&#x53F3;&#x7AEF;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x4E00;&#x5B9A;&#x5927;&#x4E8E;P&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;P&#x5728;&#x8FD9;&#x6761;&#x7EBF;&#x6BB5;&#x5185;&#x3002;&#x5373;&#x9009;&#x5728;P&#x70B9;&#xFF0C;&#x53EF;&#x4EE5;&#x5C3D;&#x80AF;&#x80FD;&#x591A;&#x7684;&#x8986;&#x76D6;&#x5230;&#x6D77;&#x5C9B;&#x3002;</li><li>&#x5F53;&#x9047;&#x5230;&#x67D0;&#x4E2A;&#x70B9;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x4F4D;&#x7F6E;&#x5927;&#x4E8E;P&#x65F6;&#x3002;P&#x5C31;&#x65E0;&#x6CD5;&#x8986;&#x76D6;&#x5230;&#x8FD9;&#x4E2A;&#x6D77;&#x5C9B;&#x4E86;&#xFF0C;&#x9009;&#x62E9;&#x8FD9;&#x4E2A;&#x7EBF;&#x6BB5;&#x7684;&#x53F3;&#x7AEF;&#x70B9;&#xFF0C;&#x8BB0;&#x4E3A;P&#xFF0C;&#x91CD;&#x590D;6~7&#x6D41;&#x7A0B;&#x3002;</li></ol><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, D;<span class="comment">//N&#x662F;&#x6D77;&#x5C9B;&#x7684;&#x6570;&#x91CF;&#xFF0C;D&#x662F;&#x8DDD;&#x79BB;.</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">}node;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">{</span></span><br><span class="line">    <span class="keyword">double</span> left;</span><br><span class="line">    <span class="keyword">double</span> right;</span><br><span class="line">}Radar;</span><br><span class="line">node temp;</span><br><span class="line">Radar r;</span><br><span class="line"><span class="built_in">vector</span>&lt;Radar&gt;p;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Radar a, Radar b)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> a.right &lt; b.right;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    {</span><br><span class="line">        p.clear();</span><br><span class="line">        <span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; D;</span><br><span class="line">        <span class="keyword">if</span> (!N &amp;&amp; !D)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case %d: &quot;</span>, ++cnt);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp.x &gt;&gt; temp.y;</span><br><span class="line">            <span class="keyword">double</span> delta = <span class="number">1.0</span>*D*D - <span class="number">1.0</span>*temp.y*temp.y;</span><br><span class="line">            <span class="keyword">if</span> (D &gt;= temp.y&amp;&amp;flag)</span><br><span class="line">            {</span><br><span class="line">                r.left = <span class="number">1.0</span>*temp.x - <span class="built_in">sqrt</span>(delta);</span><br><span class="line">                r.right = <span class="number">1.0</span>*temp.x + <span class="built_in">sqrt</span>(delta);</span><br><span class="line">                p.push_back(r);</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        }</span><br><span class="line">        sort(p.begin(), p.end(), cmp);</span><br><span class="line">        <span class="keyword">double</span> now = p[<span class="number">0</span>].right;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p.size(); i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">if</span> (p[i].left &gt; now)<span class="comment">//&#x4E0B;&#x4E00;&#x4E2A;&#x70B9;&#x7684;&#x6700;&#x5DE6;&#x8FB9;&#x5DF2;&#x7ECF;&#x5927;&#x4E8E;&#x73B0;&#x5728;&#x7684;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x4E86;&#xFF0C;&#x65E0;&#x6CD5;&#x8986;&#x76D6;&#xFF0C;&#x53EA;&#x80FD;&#x518D;&#x5B89;&#x7F6E;&#x4E00;&#x4E2A;&#x96F7;&#x8FBE;</span></span><br><span class="line">            {</span><br><span class="line">                res++;</span><br><span class="line">                now = p[i].right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, res);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">-3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">0</span></span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line">Case <span class="number">1</span>: <span class="number">2</span></span><br><span class="line">Case <span class="number">2</span>: <span class="number">1</span></span><br></pre></td></tr></table></figure><hr><h2 id="&#x5F15;&#x7528;"><a href="#&#x5F15;&#x7528;" class="headerlink" title="&#x5F15;&#x7528;"></a>&#x5F15;&#x7528;</h2><p><a href="https://blog.csdn.net/c20182030/article/details/75107606" target="_blank" rel="noopener">https://blog.csdn.net/c20182030/article/details/75107606</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1328&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x5B89;&amp;#x88C5;&amp;#x96F7;&amp;#x8FBE;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心" scheme="https://www.windsings.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="数学问题" scheme="https://www.windsings.com/tags/%E6%95%B0%E5%AD%A6%E9%97%AE%E9%A2%98/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
      <category term="区间覆盖" scheme="https://www.windsings.com/tags/%E5%8C%BA%E9%97%B4%E8%A6%86%E7%9B%96/"/>
    
      <category term="圆" scheme="https://www.windsings.com/tags/%E5%9C%86/"/>
    
      <category term="二次方程" scheme="https://www.windsings.com/tags/%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B/"/>
    
      <category term="解析几何" scheme="https://www.windsings.com/tags/%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>POJ-2965 The Pilots Brothers&#39; refrigerator</title>
    <link href="https://www.windsings.com//posts/9424e4c0/"/>
    <id>https://www.windsings.com//posts/9424e4c0/</id>
    <published>2018-08-06T14:35:43.000Z</published>
    <updated>2018-08-10T08:43:28.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=2965" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x98DE;&#x884C;&#x5458;&#x5144;&#x5F1F;&#x7684;&#x51B0;&#x7BB1;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>The game &#x201C;The Pilots Brothers: following the stripy elephant&#x201D; has a quest where a player needs to open a refrigerator.</p><p>There are 16 handles on the refrigerator door. Every handle can be in one of two states: open or closed. The refrigerator is open only when all handles are open. The handles are represented as a matrix 4&#x445;4. You can change the state of a handle in any location [i, j] (1 &#x2264; i, j &#x2264; 4). However, this also changes states of all handles in row i and all handles in column j.</p><p>The task is to determine the minimum number of handle switching necessary to open the refrigerator.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>The input contains four lines. Each of the four lines contains four characters describing the initial state of appropriate handles. A symbol &#x201C;+&#x201D; means that the handle is in closed state, whereas the symbol &#x201C;&#x2212;&#x201D; means &#x201C;open&#x201D;. At least one of the handles is initially closed.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>The first line of the input contains N &#x2013; the minimum number of switching. The rest N lines describe switching sequence. Each of the lines contains a row number and a column number of the matrix separated by one or more spaces. If there are several solutions, you may give any one of them.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x51B0;&#x7BB1;&#x95E8;&#x4E0A;&#x6709;16&#x4E2A;&#x628A;&#x624B;&#x3002;&#x6BCF;&#x4E2A;&#x628A;&#x624B;&#x53EF;&#x4EE5;&#x662F;&#x5173;&#x95ED;&#x6216;&#x8005;&#x662F;&#x6253;&#x5F00;&#x7684;&#x3002;&#x5F53;&#x6240;&#x6709;&#x7684;&#x628A;&#x624B;&#x90FD;&#x6253;&#x5F00;&#x65F6;&#xFF0C;&#x51B0;&#x7BB1;&#x624D;&#x4F1A;&#x6253;&#x5F00;&#x3002;&#x628A;&#x624B;&#x7684;&#x77E9;&#x9635;&#x662F;4*4&#xFF0C;&#x53EF;&#x4EE5;&#x6539;&#x53D8;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x628A;&#x624B;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x548C;&#x5B83;&#x540C;&#x884C;&#x540C;&#x5217;&#x7684;&#x628A;&#x624B;&#x7684;&#x72B6;&#x6001;&#x4E5F;&#x4F1A;&#x968F;&#x4E4B;&#x6539;&#x53D8;&#x3002;&#x6C42;&#x6253;&#x5F00;&#x51B0;&#x7BB1;&#x6240;&#x9700;&#x8981;&#x7684;&#x6700;&#x5C11;&#x7684;&#x6B21;&#x6570;&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x8F93;&#x5165;&#x5305;&#x62EC;4&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x6709;4&#x4E2A;&#x5B57;&#x7B26;&#x8868;&#x793A;&#x628A;&#x624B;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x201D;+&#x201D;&#x8868;&#x793A;&#x628A;&#x624B;&#x5904;&#x4E8E;&#x95ED;&#x5408;&#x72B6;&#x6001;&#xFF0C;&#x201D;-&#x201C;&#x8868;&#x793A;&#x628A;&#x624B;&#x5904;&#x4E8E;&#x6253;&#x5F00;&#x72B6;&#x6001;&#x3002;&#x4FDD;&#x8BC1;&#x6700;&#x521D;&#x72B6;&#x6001;&#x81F3;&#x5C11;&#x6709;&#x4E00;&#x4E2A;&#x628A;&#x624B;&#x662F;&#x5173;&#x95ED;&#x7684;&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x6570;N&#xFF0C;&#x8868;&#x793A;&#x6700;&#x5C0F;&#x5207;&#x6362;&#x6B21;&#x6570;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x7684;N&#x884C;&#x91CC;&#x63CF;&#x8FF0;&#x5207;&#x6362;&#x987A;&#x5E8F;&#xFF0C;&#x6BCF;&#x884C;&#x4E00;&#x4E2A;&#x77E9;&#x9635;&#x7684;&#x884C;&#x53F7;&#x548C;&#x5217;&#x53F7;&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;&#x5982;&#x679C;&#x6709;&#x591A;&#x79CD;&#x89E3;&#x90FD;&#x7B26;&#x5408;&#x8981;&#x6C42;&#xFF0C;&#x4EFB;&#x610F;&#x8F93;&#x51FA;&#x5176;&#x4E2D;&#x4E4B;&#x4E00;&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&#x679A;&#x4E3E;+DFS+&#x4FDD;&#x5B58;&#x8DEF;&#x5F84;&#x3002;</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>&#x7C7B;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;POJ-1753&#x3002;</p><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> handle[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> minn = <span class="number">16</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;res, temp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">char</span> h;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; h;</span><br><span class="line">            <span class="keyword">if</span> (h == <span class="string">&apos;+&apos;</span>)</span><br><span class="line">                handle[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                handle[i][j] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">finish</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            res += handle[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res == <span class="number">16</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> cnt)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> x = cnt / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> y = cnt % <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        handle[x][i] = !handle[x][i];</span><br><span class="line">        handle[i][y] = !handle[i][y];</span><br><span class="line">    }</span><br><span class="line">    handle[x][y] = !handle[x][y];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (finish())</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">if</span> (res.size() &lt; temp.size())</span><br><span class="line">            res = temp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    DFS(i + <span class="number">1</span>);</span><br><span class="line">    change(i);</span><br><span class="line">    temp.push_back(i);</span><br><span class="line">    DFS(i + <span class="number">1</span>);</span><br><span class="line">    change(i);</span><br><span class="line">    temp.pop_back();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    build();</span><br><span class="line">    DFS(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[i] / <span class="number">4</span> + <span class="number">1</span> &lt;&lt; <span class="string">&apos; &apos;</span> &lt;&lt; res[i] % <span class="number">4</span> + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line">-+--</span><br><span class="line">----</span><br><span class="line">----</span><br><span class="line">-+--</span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=2965&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x98DE;&amp;#x884C;&amp;#x5458;&amp;#x5144;&amp;#x5F1F;&amp;#x7684;&amp;#x51B0;&amp;#x7BB1;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.windsings.com/tags/DFS/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
      <category term="枚举" scheme="https://www.windsings.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>POJ-1753 Flip Game</title>
    <link href="https://www.windsings.com//posts/a4273118/"/>
    <id>https://www.windsings.com//posts/a4273118/</id>
    <published>2018-08-06T14:22:16.000Z</published>
    <updated>2018-08-10T08:43:28.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="http://poj.org/problem?id=1753" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x53CD;&#x8F6C;&#x6E38;&#x620F;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Flip game is played on a rectangular 4x4 field with two-sided pieces placed on each of its 16 squares. One side of each piece is white and the other one is black and each piece is lying either it&#x2019;s black or white side up. Each round you flip 3 to 5 pieces, thus changing the color of their upper side from black to white and vice versa. The pieces to be flipped are chosen every round according to the following rules:</p><ol><li>Choose any one of the 16 pieces.</li><li>Flip the chosen piece and also all adjacent pieces to the left, to the right, to the top, and to the bottom of the chosen piece (if there are any).</li></ol><p>Consider the following position as an example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bwbw</span><br><span class="line">wwww</span><br><span class="line">bbwb</span><br><span class="line">bwwb</span><br></pre></td></tr></table></figure></p><p>Here &#x201C;b&#x201D; denotes pieces lying their black side up and &#x201C;w&#x201D; denotes pieces lying their white side up. If we choose to flip the 1st piece from the 3rd row (this choice is shown at the picture), then the field will become:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bwbw</span><br><span class="line">bwww</span><br><span class="line">wwwb</span><br><span class="line">wwwb</span><br></pre></td></tr></table></figure></p><p><img src="/posts/a4273118/1753_1.jpg" alt="1753"></p><p>The goal of the game is to flip either all pieces white side up or all pieces black side up. You are to write a program that will search for the minimum number of rounds needed to achieve this goal.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>The input consists of 4 lines with 4 characters &#x201C;w&#x201D; or &#x201C;b&#x201D; each that denote game field position.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>Write to the output file a single integer number - the minimum number of rounds needed to achieve the goal of the game from the given position. If the goal is initially achieved, then write 0. If it&#x2019;s impossible to achieve the goal, then write the word &#x201C;Impossible&#x201D; (without quotes).</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x53CD;&#x8F6C;&#x6E38;&#x620F;&#xFF0C;&#x68CB;&#x76D8;&#x5927;&#x5C0F;&#x4E3A;4*4&#xFF0C;&#x5171;16&#x4E2A;&#x68CB;&#x5B50;&#x3002;&#x6BCF;&#x4E2A;&#x68CB;&#x5B50;&#x6709;&#x9ED1;&#x767D;&#x4E24;&#x9762;&#x3002;&#x53CD;&#x8F6C;&#x4E00;&#x4E2A;&#x68CB;&#x5B50;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8981;&#x628A;&#x8FD9;&#x4E2A;&#x68CB;&#x5B50;&#x548C;&#x5176;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x76F8;&#x8FDE;&#x7684;&#x68CB;&#x5B50;&#x4E5F;&#x4E00;&#x5E76;&#x7FFB;&#x8F6C;&#x3002;&#x6C42;&#x628A;&#x8FD9;16&#x4E2A;&#x68CB;&#x5B50;&#x7FFB;&#x8F6C;&#x5230;&#x7EDF;&#x4E00;&#x989C;&#x8272;&#x6240;&#x9700;&#x7684;&#x6700;&#x5C0F;&#x6B21;&#x6570;&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>4&#x884C;&#x8F93;&#x5165;&#xFF0C;&#x6BCF;&#x884C;4&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x201C;w&#x201D;&#x8868;&#x793A;&#x767D;&#x8272;&#xFF0C;&#x201C;b&#x201D;&#x8868;&#x793A;&#x9ED1;&#x8272;&#x3002;</p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x8F93;&#x51FA;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;16&#x4E2A;&#x68CB;&#x5B50;&#x5168;&#x90E8;&#x7FFB;&#x8F6C;&#x5230;&#x540C;&#x4E00;&#x989C;&#x8272;&#x6240;&#x9700;&#x8981;&#x7684;&#x6700;&#x5C11;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x7FFB;&#x8F6C;&#x6210;&#x540C;&#x4E00;&#x989C;&#x8272;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x201D;Impossible&#x201D;&#xFF08;&#x6CA1;&#x6709;&#x5F15;&#x53F7;&#xFF09;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><p>&#x679A;&#x4E3E;&#x51FA;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x72B6;&#x6001;&#x3002;&#x4F7F;&#x7528;DFS&#x6DF1;&#x641C;&#x3002;&#x8BB0;&#x5F97;&#x7FFB;&#x8FC7;&#x53BB;&#x4E4B;&#x540E;&#xFF0C;&#x518D;&#x7FFB;&#x8FC7;&#x6765;&#x3002;</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>&#x7531;&#x9898;&#x610F;&#xFF0C;&#x6BCF;&#x4E2A;&#x68CB;&#x5B50;&#x7FFB;&#x8F6C;&#x8FC7;&#x53BB;&#x518D;&#x7FFB;&#x8F6C;&#x8FC7;&#x6765;&#xFF0C;&#x7ED3;&#x679C;&#x4E0D;&#x53D8;&#x3002;&#x56E0;&#x6B64;&#x6700;&#x591A;&#x7FFB;&#x8F6C;&#x7684;&#x6B21;&#x6570;&#x4E3A;15&#x6B21;&#x3002;&#xFF08;&#x7FFB;&#x8F6C;16&#x6B21;&#x548C;&#x4E0D;&#x7FFB;&#x8F6C;&#x68CB;&#x9762;&#x4E00;&#x6837;&#xFF09;</p><p>&#x7C7B;&#x4F3C;&#x9898;&#x76EE;POJ-2965&#x3002;</p><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> chess[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> maxn = <span class="number">16</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&apos;w&apos;</span>)</span><br><span class="line">                chess[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                chess[i][j] = <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">turn</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">4</span> &amp;&amp; x &gt;= <span class="number">0</span> &amp;&amp; y &lt; <span class="number">4</span> &amp;&amp; y &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> chess[x][y] = !chess[x][y];<span class="comment">//&#x53D6;&#x975E;</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> cnt)</span><span class="comment">//cnt&#x8868;&#x793A;&#x53CD;&#x8F6C;&#x7684;&#x6B21;&#x6570;</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> x = cnt / <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> y = cnt % <span class="number">4</span>;</span><br><span class="line">    turn(x - <span class="number">1</span>, y);</span><br><span class="line">    turn(x + <span class="number">1</span>, y);</span><br><span class="line">    turn(x, y + <span class="number">1</span>);</span><br><span class="line">    turn(x, y - <span class="number">1</span>);</span><br><span class="line">    turn(x, y);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">finish</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">        {</span><br><span class="line">            res += chess[i][j];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> !(res % <span class="number">16</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> cnt)</span><span class="comment">//i&#x8868;&#x793A;&#x8FED;&#x4EE3;&#x7684;&#x6B21;&#x6570;&#xFF0C;cnt&#x8868;&#x793A;&#x53CD;&#x8F6C;&#x7684;&#x4E2A;&#x6570;</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">if</span> (finish())</span><br><span class="line">    {</span><br><span class="line">        maxn = min(maxn, cnt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    DFS(i + <span class="number">1</span>,cnt);<span class="comment">//&#x5148;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A;</span></span><br><span class="line">    flip(i);</span><br><span class="line">    DFS(i + <span class="number">1</span>, cnt + <span class="number">1</span>);<span class="comment">//&#x5047;&#x8BBE;&#x4ED6;&#x7FFB;&#x8FC7;&#x53BB;&#x7684;&#xFF0C;&#x904D;&#x5386;&#x7ED3;&#x679C;</span></span><br><span class="line">    flip(i);<span class="comment">//&#x518D;&#x7FFB;&#x8FC7;&#x6765;</span></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    build();</span><br><span class="line">    DFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (maxn != <span class="number">16</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; maxn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"></span><br><span class="line">bwwb</span><br><span class="line">bbwb</span><br><span class="line">bwwb</span><br><span class="line">bwww</span><br><span class="line">Sample Output</span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://poj.org/problem?id=1753&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x53CD;&amp;#x8F6C;&amp;#x6E38;&amp;#x620F;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="POJ" scheme="https://www.windsings.com/categories/POJ/"/>
    
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.windsings.com/tags/DFS/"/>
    
      <category term="POJ" scheme="https://www.windsings.com/tags/POJ/"/>
    
      <category term="枚举" scheme="https://www.windsings.com/tags/%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>PAT-A-1115</title>
    <link href="https://www.windsings.com//posts/ecf4bd94/"/>
    <id>https://www.windsings.com//posts/ecf4bd94/</id>
    <published>2018-08-05T13:15:36.000Z</published>
    <updated>2018-09-04T14:24:07.703Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="PAT-A" scheme="https://www.windsings.com/categories/PAT-A/"/>
    
    
      <category term="PAT" scheme="https://www.windsings.com/tags/PAT/"/>
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.windsings.com/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>PAT-A-1114 Family Property（25）</title>
    <link href="https://www.windsings.com//posts/9bf38d02/"/>
    <id>https://www.windsings.com//posts/9bf38d02/</id>
    <published>2018-08-05T13:15:16.000Z</published>
    <updated>2018-09-04T14:23:48.650Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805356599820288" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x5BB6;&#x5EAD;&#x8D22;&#x4EA7;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>This time, you are supposed to help us collect the data for family-owned property. Given each person&#x2019;s family members, and the estate&#xFF08;&#x623F;&#x4EA7;&#xFF09;info under his/her own name, we need to know the size of each family, and the average area and number of sets of their real estate.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>Each input file contains one test case. For each case, the first line gives a positive integer N (&lt;=1000). Then N lines follow, each gives the infomation of a person who owns estate in the format:</p><p>ID Father Mother k Child1 &#x2026; Childk M_estate Area</p><p>where ID is a unique 4-digit identification number for each person; Father and Mother are the ID&#x2019;s of this person&#x2019;s parents (if a parent has passed away, -1 will be given instead); k (0&lt;=k&lt;=5) is the number of children of this person; Childi&#x2019;s are the ID&#x2019;s of his/her children; M_estate is the total number of sets of the real estate under his/her name; and Area is the total area of his/her estate.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>For each case, first print in a line the number of families (all the people that are related directly or indirectly are considered in the same family). Then output the family info in the format:</p><p>ID M AVG_sets AVG_area</p><p>where ID is the smallest ID in the family; M is the total number of family members; AVG_sets is the average number of sets of their real estate; and AVG_area is the average area. The average numbers must be accurate up to 3 decimal places. The families must be given in descending order of their average areas, and in ascending order of the ID&#x2019;s if there is a tie.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">## &#x6D4B;&#x8BD5;&#x6570;&#x636E;</span><br><span class="line">``` cpp</span><br><span class="line">Sample Input:</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">6666</span> <span class="number">5551</span> <span class="number">5552</span> <span class="number">1</span> <span class="number">7777</span> <span class="number">1</span> <span class="number">100</span></span><br><span class="line"><span class="number">1234</span> <span class="number">5678</span> <span class="number">9012</span> <span class="number">1</span> <span class="number">0002</span> <span class="number">2</span> <span class="number">300</span></span><br><span class="line"><span class="number">8888</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1000</span></span><br><span class="line"><span class="number">2468</span> <span class="number">0001</span> <span class="number">0004</span> <span class="number">1</span> <span class="number">2222</span> <span class="number">1</span> <span class="number">500</span></span><br><span class="line"><span class="number">7777</span> <span class="number">6666</span> <span class="number">-1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">300</span></span><br><span class="line"><span class="number">3721</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">1</span> <span class="number">2333</span> <span class="number">2</span> <span class="number">150</span></span><br><span class="line"><span class="number">9012</span> <span class="number">-1</span> <span class="number">-1</span> <span class="number">3</span> <span class="number">1236</span> <span class="number">1235</span> <span class="number">1234</span> <span class="number">1</span> <span class="number">100</span></span><br><span class="line"><span class="number">1235</span> <span class="number">5678</span> <span class="number">9012</span> <span class="number">0</span> <span class="number">1</span> <span class="number">50</span></span><br><span class="line"><span class="number">2222</span> <span class="number">1236</span> <span class="number">2468</span> <span class="number">2</span> <span class="number">6661</span> <span class="number">6662</span> <span class="number">1</span> <span class="number">300</span></span><br><span class="line"><span class="number">2333</span> <span class="number">-1</span> <span class="number">3721</span> <span class="number">3</span> <span class="number">6661</span> <span class="number">6662</span> <span class="number">6663</span> <span class="number">1</span> <span class="number">100</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">8888</span> <span class="number">1</span> <span class="number">1.000</span> <span class="number">1000.000</span></span><br><span class="line"><span class="number">0001</span> <span class="number">15</span> <span class="number">0.600</span> <span class="number">100.000</span></span><br><span class="line"><span class="number">5551</span> <span class="number">4</span> <span class="number">0.750</span> <span class="number">100.000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/problems/994805356599820288&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x5BB6;&amp;#x5EAD;&amp;#x8D22;&amp;#x4EA7;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PAT-A" scheme="https://www.windsings.com/categories/PAT-A/"/>
    
    
      <category term="PAT" scheme="https://www.windsings.com/tags/PAT/"/>
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="并查集" scheme="https://www.windsings.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>PAT-A-1113 Integer Set Partition（25）</title>
    <link href="https://www.windsings.com//posts/59718a1/"/>
    <id>https://www.windsings.com//posts/59718a1/</id>
    <published>2018-08-05T13:14:45.000Z</published>
    <updated>2018-09-04T11:39:03.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="&#x9898;&#x76EE;"><a href="#&#x9898;&#x76EE;" class="headerlink" title="&#x9898;&#x76EE;"></a>&#x9898;&#x76EE;</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems/994805357258326016" target="_blank" rel="noopener">&#x9898;&#x76EE;&#x94FE;&#x63A5;</a><br>&#x5212;&#x5206;&#x6574;&#x6570;&#x96C6;<br><a id="more"></a></p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a set of N (&gt;1) positive integers, you are supposed to partition them into two disjoint sets A<sub>1</sub> and A<sub>2</sub> of n<sub>1</sub> and n<sub>2</sub> numbers, respectively. Let S<sub>1</sub>and S<sub>2</sub> denote the sums of all the numbers in A<sub>1</sub> and A<sub>2</sub>, respectively. You are supposed to make the partition so that &#x2223;n<sub>1</sub>&#x2212;n<sub>2</sub>&#x2223; is minimized first, and then &#x2223;S<sub>1</sub>&#x2212;S<sub>2</sub>&#x2223; is maximized.</p><h2 id="Input-Specification"><a href="#Input-Specification" class="headerlink" title="Input Specification"></a>Input Specification</h2><p>Each input file contains one test case. For each case, the first line gives an integer N (2&#x2264;N&#x2264;10<sup><br>&#x200B;5</sup>), and then N positive integers follow in the next line, separated by spaces. It is guaranteed that all the integers and their sum are less than 2<sup>31</sup>.</p><h2 id="Output-Specification"><a href="#Output-Specification" class="headerlink" title="Output Specification"></a>Output Specification</h2><p>For each case, print in a line two numbers: &#x2223;n<sub>1</sub>&#x2212;n<sub>2</sub>&#x2223; and &#x2223;S<sub>1</sub>&#x2212;S<sub>2</sub>&#x2223;, separated by exactly one space.</p><h2 id="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"><a href="#&#x9898;&#x76EE;&#x63CF;&#x8FF0;" class="headerlink" title="&#x9898;&#x76EE;&#x63CF;&#x8FF0;"></a>&#x9898;&#x76EE;&#x63CF;&#x8FF0;</h2><p>&#x8981;&#x6C42;&#x628A;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E0D;&#x76F8;&#x4EA4;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x4F7F;&#x5F97;&#x8FD9;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#x76F8;&#x5DEE;&#x6700;&#x5C0F;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#xFF0C;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x603B;&#x548C;&#x4E4B;&#x5DEE;&#x6700;&#x5927;&#x3002;</p><h2 id="&#x8F93;&#x5165;"><a href="#&#x8F93;&#x5165;" class="headerlink" title="&#x8F93;&#x5165;"></a>&#x8F93;&#x5165;</h2><p>&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N(2&#x2264;N&#x2264;10<sup>&#xFF0C;&#x7136;&#x540E;&#x5728;&#x4E0B;&#x4E00;&#x884C;&#x7ED9;&#x51FA;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x6570;&#x4E2D;&#x95F4;&#x7531;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7684;&#x6574;&#x6570;&#x53CA;&#x5176;&#x603B;&#x548C;&#x5C0F;&#x4E8E;2<sup>31</sup>&#x3002;</sup></p><h2 id="&#x8F93;&#x51FA;"><a href="#&#x8F93;&#x51FA;" class="headerlink" title="&#x8F93;&#x51FA;"></a>&#x8F93;&#x51FA;</h2><p>&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x6253;&#x5370;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x2223;n<sub>1</sub>&#x2212;n<sub>2</sub>&#x2223; &#x548C; &#x2223;S<sub>1</sub>&#x2212;S<sub>2</sub>&#x2223; &#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;</p><h1 id="&#x89E3;&#x9898;"><a href="#&#x89E3;&#x9898;" class="headerlink" title="&#x89E3;&#x9898;"></a>&#x89E3;&#x9898;</h1><h2 id="&#x601D;&#x8DEF;&#x5206;&#x6790;"><a href="#&#x601D;&#x8DEF;&#x5206;&#x6790;" class="headerlink" title="&#x601D;&#x8DEF;&#x5206;&#x6790;"></a>&#x601D;&#x8DEF;&#x5206;&#x6790;</h2><ol><li>&#x5C06;&#x6240;&#x6709;&#x6570;&#x6392;&#x5E8F;&#x3002;</li><li>&#x8BA1;&#x7B97;&#x524D;n/2&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x603B;&#x548C;&#xFF0C;&#x2223;S<sub>1</sub>&#x2212;S<sub>2</sub>&#x2223;&#x7684;&#x503C;&#x7B49;&#x4E8E;sum-2*&#x524D;n/2&#x5143;&#x7D20;&#x7684;&#x548C;&#x3002;</li><li>&#x2223;n<sub>1</sub>&#x2212;n<sub>2</sub>&#x2223;&#x4E3A;n%2&#xFF0C;&#x5947;&#x6570;&#x4E3A;1&#xFF0C;&#x5076;&#x6570;&#x4E3A;0&#x3002;</li></ol><h2 id="&#x4EE3;&#x7801;"><a href="#&#x4EE3;&#x7801;" class="headerlink" title="&#x4EE3;&#x7801;"></a>&#x4EE3;&#x7801;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, sum1 = <span class="number">0</span>, sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N; v.resize(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; v[i];</span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N/<span class="number">2</span>; i++)</span><br><span class="line">        sum1 += v[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N/<span class="number">2</span>; i &lt; N; i++)</span><br><span class="line">        sum2 += v[i];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; N % <span class="number">2</span> &lt;&lt; <span class="string">&apos; &apos;</span> &lt;&lt;  sum2 - sum1;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    freopen(<span class="string">&quot;2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h2 id="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"><a href="#&#x6D4B;&#x8BD5;&#x6570;&#x636E;" class="headerlink" title="&#x6D4B;&#x8BD5;&#x6570;&#x636E;"></a>&#x6D4B;&#x8BD5;&#x6570;&#x636E;</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span>:</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">23</span> <span class="number">8</span> <span class="number">10</span> <span class="number">99</span> <span class="number">46</span> <span class="number">2333</span> <span class="number">46</span> <span class="number">1</span> <span class="number">666</span> <span class="number">555</span></span><br><span class="line">Sample Output <span class="number">1</span>:</span><br><span class="line"><span class="number">0</span> <span class="number">3611</span></span><br><span class="line">Sample Input <span class="number">2</span>:</span><br><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">110</span> <span class="number">79</span> <span class="number">218</span> <span class="number">69</span> <span class="number">3721</span> <span class="number">100</span> <span class="number">29</span> <span class="number">135</span> <span class="number">2</span> <span class="number">6</span> <span class="number">13</span> <span class="number">5188</span> <span class="number">85</span></span><br><span class="line">Sample Output <span class="number">2</span>:</span><br><span class="line"><span class="number">1</span> <span class="number">9359</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;a href=&quot;#&amp;#x9898;&amp;#x76EE;&quot; class=&quot;headerlink&quot; title=&quot;&amp;#x9898;&amp;#x76EE;&quot;&gt;&lt;/a&gt;&amp;#x9898;&amp;#x76EE;&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://pintia.cn/problem-sets/994805342720868352/problems/994805357258326016&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&amp;#x9898;&amp;#x76EE;&amp;#x94FE;&amp;#x63A5;&lt;/a&gt;&lt;br&gt;&amp;#x5212;&amp;#x5206;&amp;#x6574;&amp;#x6570;&amp;#x96C6;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="PAT-A" scheme="https://www.windsings.com/categories/PAT-A/"/>
    
    
      <category term="PAT" scheme="https://www.windsings.com/tags/PAT/"/>
    
      <category term="算法" scheme="https://www.windsings.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="https://www.windsings.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
