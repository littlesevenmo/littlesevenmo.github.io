<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>PAT-A-1084 Broken Keyboard (20)</title>
      <link href="//posts/1feaae6d/"/>
      <url>//posts/1feaae6d/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems" target="_blank" rel="noopener">题目链接</a><br>坏掉的键盘。<br><a id="more"></a><br>在一个坏掉的键盘上，有一些键坏了，所以当你输入一些句子时，这些坏掉的键对应的字符不会出现在屏幕上。</p><p>现在给出一个应输入的字符串，一个实际输入的字符串，求哪些键是坏掉的。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入包括一个测试用例，第一行是原始字符串，第二行是实际输入的字符串，每个字符串不超过80个英文字母[A-Z]，不区分大小写。数字[0-9]，或者“_”表示空格，确保两个字符串都是非空的。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>在一行中输出坏掉的键，英文字母必须大写，每个坏掉的键只打印一次。保证至少有一个键是坏掉的。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>全部转换为大写后，使用find函数比较，然后开个数组标记是否输出过了。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">转换为大写</span><br><span class="line">transform(a.begin(), a.end(),a.begin(), ::<span class="built_in">toupper</span>);</span><br></pre></td></tr></table></figure><p>查找字母<br>if (b.find(<em>i) == string::npos&amp;&amp;key[</em>i]==false)<br>        {<br>            cout &lt;&lt; <em>i;<br>            key[</em>i] = true;<br>        }<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> key[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="built_in">string</span> a, b;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">    transform(a.begin(), a.end(),a.begin(), ::<span class="built_in">toupper</span>);</span><br><span class="line">    transform(b.begin(), b.end(),b.begin(), ::<span class="built_in">toupper</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = a.begin(); i != a.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b.find(*i) == <span class="built_in">string</span>::npos&amp;&amp;key[*i]==<span class="literal">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; *i;</span><br><span class="line">            key[*i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>_This_is_a_test</span><br><span class="line">_hs_s_a_es</span><br><span class="line">Sample Output:</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>TI</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 字符串处理 </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1083 List Grades (25)</title>
      <link href="//posts/d597c9df/"/>
      <url>//posts/d597c9df/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems" target="_blank" rel="noopener">题目链接</a><br>输出成绩在给定区间的同学信息。<br><a id="more"></a><br>基础题，就是一个cmp函数。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="built_in">string</span> ID;</span><br><span class="line">    <span class="keyword">int</span> g;</span><br><span class="line">&#125;student;</span><br><span class="line"><span class="built_in">vector</span>&lt;student&gt; s;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(student a, student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.g &gt; b.g;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    s.resize(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; s[i].name &gt;&gt; s[i].ID &gt;&gt; s[i].g;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(s.begin(), s.end(), cmp);</span><br><span class="line">    <span class="keyword">int</span> grade1, grade2;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; grade1 &gt;&gt; grade2;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = s.begin(); i != s.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i-&gt;g&gt;=grade1&amp;&amp;i-&gt;g&lt;=grade2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; i-&gt;name &lt;&lt; <span class="string">' '</span> &lt;&lt; i-&gt;ID &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"NONE"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen("2.txt", "r", stdin);</span></span><br><span class="line">    solution();</span><br><span class="line"><span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">4</span></span><br><span class="line">Tom CS000001 <span class="number">59</span></span><br><span class="line">Joe Math990112 <span class="number">89</span></span><br><span class="line">Mike CS991301 <span class="number">100</span></span><br><span class="line">Mary EE990830 <span class="number">95</span></span><br><span class="line"><span class="number">60</span> <span class="number">100</span></span><br><span class="line">Sample Output <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">Mike CS991301</span><br><span class="line">Mary EE990830</span><br><span class="line">Joe Math990112</span><br><span class="line">Sample Input <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Jean AA980920 <span class="number">60</span></span><br><span class="line">Ann CS01 <span class="number">80</span></span><br><span class="line"><span class="number">90</span> <span class="number">95</span></span><br><span class="line">Sample Output <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">NONE</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1081 Rational Sum (20)</title>
      <link href="//posts/3b99a8f3/"/>
      <url>//posts/3b99a8f3/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems" target="_blank" rel="noopener">题目链接</a><br>有理数的和。<br><a id="more"></a><br>小学的数学题，这次用写程序来求解。</p><p>给定“分支/分母”形式的N个有理数，求他们的总和。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入文件都包括一个测试用例。每种情况都已一个正整数N（&lt;= 100）开始，在下一行，有N个有理数。以“分子/分母”的形式给出，所有的分子和分母都在long int的范围内。如果有负数，则符号必须出现在分子之前。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试用例，输出这些数的总和，以带分数的最简形式给出，也即，“整数 分子/分母”的形式，分子和分母没有公因子。如果整数部分为0，即总和小于1，就只输出小数部分。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>辗转相除法。注意，如果是负数，求公约数的时候要注意，返回一个正值。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>求绝对值函数在abs()里，头文件是iostream</p><p>return b == 0 ? abs(a) : gcd(b, a%b);</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> member;<span class="comment">//分子部分</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> deno;<span class="comment">//分母部分</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> inte;<span class="comment">//整数部分</span></span><br><span class="line">&#125;fraction;</span><br><span class="line">fraction num;</span><br><span class="line">fraction res = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> a, <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> b)</span><span class="comment">//最大公约数,abs求绝对值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b == <span class="number">0</span> ? <span class="built_in">abs</span>(a) : gcd(b, a%b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld/%lld"</span>, &amp;num.member,&amp;num.deno);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> gcd_num = gcd(num.member,num.deno);</span><br><span class="line">        num.deno /= gcd_num; num.member /= gcd_num;</span><br><span class="line">        res.member = res.member*num.deno + res.deno*num.member;</span><br><span class="line">        res.deno = res.deno*num.deno;</span><br><span class="line">        gcd_num = gcd(res.deno, res.member);</span><br><span class="line">        res.deno /= gcd_num; res.member /= gcd_num;</span><br><span class="line">    &#125;</span><br><span class="line">    res.inte = res.member / res.deno;</span><br><span class="line">    res.member -= (res.deno*res.inte);</span><br><span class="line">    <span class="keyword">if</span> (res.inte!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res.inte;</span><br><span class="line">        <span class="keyword">if</span> (res.member!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res.member!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res.member &lt;&lt; <span class="string">'/'</span> &lt;&lt; res.deno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (res.inte==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'0'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"3.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">2</span>/<span class="number">5</span> <span class="number">4</span>/<span class="number">15</span> <span class="number">1</span>/<span class="number">30</span> <span class="number">-2</span>/<span class="number">60</span> <span class="number">8</span>/<span class="number">3</span></span><br><span class="line">Sample Output <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="number">1</span>/<span class="number">3</span></span><br><span class="line">Sample Input <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span>/<span class="number">3</span> <span class="number">2</span>/<span class="number">3</span></span><br><span class="line">Sample Output <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Sample Input <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span>/<span class="number">3</span> <span class="number">-1</span>/<span class="number">6</span> <span class="number">1</span>/<span class="number">8</span></span><br><span class="line">Sample Output <span class="number">3</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>/<span class="number">24</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 分数加法 </tag>
            
            <tag> 辗转相除法 </tag>
            
            <tag> 最大公约数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1082 Read Number in Chinese (25)</title>
      <link href="//posts/a290f949/"/>
      <url>//posts/a290f949/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems" target="_blank" rel="noopener">题目链接</a><br>数字的中文读法。<br><a id="more"></a><br>这道题和1081一样，都是小学的数学题。</p><p>给定一个不超过9位数的正数，要求输出他的中文读法。如果这个数是负数，则要首先输出负数。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入包括一个测试样例，给出一个不超过9位数的整数。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试用例，在一行中，输出数字的中文读法。字符之间用空格隔开，行尾不能有多余的空格。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>把9位数分为3个部分，亿，万，个。</p><p>在每一部分中，其读法都是一致的。都是X千X百X十X。</p><p>我认为关键在于0的处理。小学数学没学好，大概写写。</p><ol><li>将所有的数都看作由三部分组成的，即都看作9位数来处理。</li><li>有多个零的情况下，只输出一个零。比如，10024，输出yi Wan ling er Shi si。</li><li>对于最高位非亿的，第一位之前不输出零，即405，输出si Bai ling wu。而不是ling si Bai ling wu。</li><li>如果横跨两个部分，比如100001234，也只输出一个ling，即yi Yi ling yi Qian er Bai san Shi si。</li><li>对于千百十，输出数字之后，还要输出单位。</li><li>每部分结束后，输出这个部分对应的单位（Yi / Wan / ）。</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li>输出ling时，用一个变量标记，在零后遇到的的第一个非零数时，输出ling。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> num[<span class="number">10</span>] = &#123; <span class="string">"ling"</span>,<span class="string">"yi"</span>, <span class="string">"er"</span>, <span class="string">"san"</span>, <span class="string">"si"</span>, <span class="string">"wu"</span>, <span class="string">"liu"</span>, <span class="string">"qi"</span>, <span class="string">"ba"</span>, <span class="string">"jiu"</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> c[<span class="number">6</span>] = &#123; <span class="string">"Ge"</span>,<span class="string">"Shi"</span>, <span class="string">"Bai"</span>, <span class="string">"Qian"</span>, <span class="string">"Yi"</span>, <span class="string">"Wan"</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> J[] = &#123;</span><br><span class="line">    <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span>,</span><br><span class="line">    <span class="number">10000</span>, <span class="number">100000</span>, <span class="number">1000000</span>, <span class="number">10000000</span>,</span><br><span class="line">    <span class="number">100000000</span> &#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">if</span> (n==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"ling"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Fu "</span>;</span><br><span class="line">        n = -n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> part[<span class="number">3</span>];</span><br><span class="line">    part[<span class="number">0</span>]= n / <span class="number">100000000</span>;</span><br><span class="line">    <span class="comment">//int yi =</span></span><br><span class="line">    part[<span class="number">1</span>]= (n % <span class="number">100000000</span>) / <span class="number">10000</span>;</span><br><span class="line">    part[<span class="number">2</span>] = n % <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">bool</span> zero = <span class="literal">false</span>;<span class="comment">//是否在非零数字前输出合适的ling</span></span><br><span class="line">    <span class="keyword">int</span> printCnt = <span class="number">0</span>;<span class="comment">//用于维护单词前没有空格，之后输入的单词都在前面加一个空格。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = part[i];<span class="comment">//三个部分，每部分内部的命名规则都一样，都是X千X百X十X</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">3</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> curPos = <span class="number">8</span> - i * <span class="number">4</span> + j;<span class="comment">//当前数字的位置</span></span><br><span class="line">            <span class="keyword">if</span> (curPos &gt;= <span class="number">9</span>)</span><br><span class="line">                <span class="keyword">continue</span>;<span class="comment">//最多九位数</span></span><br><span class="line">            <span class="keyword">int</span> cur = (temp / J[j]) % <span class="number">10</span>;<span class="comment">//取出当前数字</span></span><br><span class="line">            <span class="keyword">if</span> (cur!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (zero)<span class="comment">//前面有零</span></span><br><span class="line">                &#123;</span><br><span class="line">                     printCnt++ == <span class="number">0</span> ? <span class="built_in">cout</span>&lt;&lt;<span class="string">"ling"</span> : <span class="built_in">cout</span>&lt;&lt;<span class="string">" ling"</span>;</span><br><span class="line">                     zero = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    printCnt++ == <span class="number">0</span> ? <span class="built_in">cout</span> &lt;&lt; num[cur] : <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; num[cur];<span class="comment">//在个位，直接输出</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;<span class="comment">//在其他位，还要输出十百千</span></span><br><span class="line">                    printCnt++ == <span class="number">0</span> ? <span class="built_in">cout</span> &lt;&lt; num[cur] &lt;&lt; <span class="string">' '</span> &lt;&lt; c[j] : <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; num[cur] &lt;&lt; <span class="string">' '</span> &lt;&lt; c[j];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!zero&amp;&amp;j != <span class="number">0</span> &amp;&amp; n / J[curPos] &gt;= <span class="number">10</span>)<span class="comment">//注意100020这样的情况</span></span><br><span class="line">                &#123;</span><br><span class="line">                    zero = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理完每部分之后，最后输出单位，Yi/Wan</span></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">2</span> &amp;&amp; part[i]&gt;<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; c[i + <span class="number">4</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line"><span class="number">100001234</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">yi Yi ling yi Qian er Bai san Shi si</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">-123456789</span></span><br><span class="line">Sample Output <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiu</span><br><span class="line">Sample Input <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">100800</span></span><br><span class="line">Sample Output <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">yi Shi Wan ling ba Bai</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 字符串处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1079 Total Sales of Supply Chain (25)</title>
      <link href="//posts/b2da3c0e/"/>
      <url>//posts/b2da3c0e/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems" target="_blank" rel="noopener">题目链接</a><br>求供应链的销售总额。<br><a id="more"></a><br>一张包括零售商，中间经销商，供应商的一张网络。这张网络里没有环。</p><p>从一个源供应商开始，供应链上每个成员从提供者手里用价格P购买商品，然后以高于P百分之r的价格，加价卖给下家。只有零售商是面向顾客的。</p><p>假设除了源供应商以外，所有的成员都只面向一个供应商。</p><p>现给出一个供应链，要求计算出所有零售商出售所有商品的总额。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入包括一个测试用例，对于每个用例，第一行包括是三个正整数，N，表示供应链上所有成员的个数。ID从0~N-1编号，源供应商的编号为0。P，为源供应商给出的价格，r，为每次加价的百分比。</p><p>接着是N行，每行以如下格式描述了经销商或者零售商的信息：</p><p>Ki ID[1] ID[2] … ID[Ki]</p><p>第i行中。Ki指从ID为i的经销商手中进货的零售商和经销商的总数，接下来的ID就是表明有哪些经销商和零售商。</p><p>若Ki为0，那么代表这个为零售商，直接面对顾客，无下家了。然后产品总数会在Ki之后出给。所有数据之间，由一个空格隔开。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试用例，在一行内输出所有零售商的总销售额，精确到小数点后一位。保证这个数字不会超过10^10。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>DFS，注意保存DFS的层数，最后按幂次乘在P上。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; buy;<span class="comment">//表示零售商卖出去多少</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;G;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">double</span> r, P, res=<span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> end = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[num].size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> v = G[num][i];</span><br><span class="line">        end = <span class="number">0</span>;</span><br><span class="line">        DFS(v, step + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (end)</span><br><span class="line">    &#123;</span><br><span class="line">        res += P*(<span class="built_in">pow</span>((<span class="number">1</span> + r*<span class="number">0.01</span>), step)* buy[num]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; P &gt;&gt; r;</span><br><span class="line">    G.resize(N);</span><br><span class="line">    buy.resize(N);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">            G[i].push_back(b);<span class="comment">//b是a的下家</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">            buy[i] = b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DFS(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> <span class="number">1.80</span> <span class="number">1.00</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">9</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">7</span></span><br><span class="line"><span class="number">0</span> <span class="number">7</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">8</span></span><br><span class="line"><span class="number">0</span> <span class="number">9</span></span><br><span class="line"><span class="number">0</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span></span><br><span class="line">Sample Output:</span><br><span class="line"></span><br><span class="line"><span class="number">42.4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1080 Graduate Admission (30)</title>
      <link href="//posts/f4728b59/"/>
      <url>//posts/f4728b59/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems" target="_blank" rel="noopener">题目链接</a><br>研究生招生录取。<br><a id="more"></a><br>又到了一年研招季。在浙江省，大约有100个研招点和超过40000个申请人。要求你写一个算法，求出哪些人可以考上。</p><p>给出初试成绩Ge和复试成绩Gi，最后的总成绩是（Ge+Gi）/2。</p><p>规则如下：</p><ol><li>考生根据他们的最终成绩排名，由高到低逐一录取。</li><li>如果总成绩相同，则初试成绩Ge高者优先。如果任然相同，则他们的最终排名相同。</li><li>每个考生可以填K个志愿，按先后顺序进行投档。根据名次排名，轮到他投档时，对他的K个志愿按先后依次检测，如果该志愿学校还剩有名额，则投档。如果这名考生被所有的学校都拒绝了，则他落榜。</li><li>对于名次并列，并且都申请同一所学校的考生，若有一个人被录取，则所有的考生都得被录取，即使超过了该学校的配额。</li></ol><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入里有一个测试用例。</p><p>第一行是三个正整数，N（&lt;=40000），表示申请的总人数；M(&lt;=100)，研究生招生点的数量；K（&lt;=5）每个考生最多可以填的志愿数。</p><p>在下一行，有M个正整数，第i个表示第i个研究生招生点的配额。</p><p>随后有N行，每行有K+2个整数，前两个是考生的Ge和Gi，后K个代表志愿。</p><p>为简单起见，假设招生点的编号为0~M-1，考生编号为0~N-1。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出所有研招点的录取结果，每个研招点的成绩占一行，其中包含录取的考生的编号。按升序排列，由空格分隔。</p><p>如果此研招点没有录取任何考生，则相应的输出一个空行。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>排序，然后按照成绩进行投档，录取条件可以简化为：</p><ol><li>所投的单位未招满</li><li>招满了但是和最后一名的总分和Ge分相同</li></ol><p>以上两个条件，任意满足其一即可。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>时间限制很短，输入输出又有很多，要用scanf/printf代替cin/cout。否则会有一个超时</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Ge;</span><br><span class="line">    <span class="keyword">int</span> Gi;</span><br><span class="line">    <span class="keyword">int</span> Total;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; wish;<span class="comment">//志愿集合</span></span><br><span class="line">    <span class="keyword">int</span> ID;</span><br><span class="line">&#125;student;</span><br><span class="line"><span class="built_in">vector</span>&lt;student&gt; S;<span class="comment">//学生集合</span></span><br><span class="line"><span class="keyword">int</span> college[<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(student a, student b)</span><span class="comment">//排序函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.Total != b.Total)</span><br><span class="line">        <span class="keyword">return</span> a.Total &gt; b.Total;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.Ge &gt; b.Ge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K;</span><br><span class="line">    S.resize(N);</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; college[i];<span class="comment">//输入名额数量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d "</span>, &amp;S[i].Ge, &amp;S[i].Gi);</span><br><span class="line">        S[i].Total = S[i].Ge + S[i].Gi;</span><br><span class="line">        S[i].wish.resize(K);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; K; j++)<span class="comment">//输入志愿信息</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;S[i].wish[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        S[i].ID = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;student&gt; S1 = S;<span class="comment">//保存ID信息</span></span><br><span class="line">    sort(S.begin(), S.end(), cmp);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;<span class="comment">//存放结果</span></span><br><span class="line">    res.resize(M);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; S.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; K; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = S[i].wish[j];<span class="comment">//当前志愿</span></span><br><span class="line">            <span class="keyword">if</span> (college[temp] &gt; <span class="number">0</span>||(S1[res[temp].back()].Ge == S[i].Ge&amp;&amp;S1[res[temp].back()].Total == S[i].Total))<span class="comment">//还有名额，或者招满情况，比较报考学校最后一名学生的成绩和当前学生的成绩</span></span><br><span class="line">            &#123;</span><br><span class="line">                res[temp].push_back(S[i].ID);<span class="comment">//投档</span></span><br><span class="line">                college[temp]--;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(res[i].begin(), res[i].end());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; res[i].size(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, res[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (j!= res[i].size()<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"></span><br><span class="line"><span class="number">11</span> <span class="number">6</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">60</span> <span class="number">60</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">100</span> <span class="number">90</span> <span class="number">0</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">90</span> <span class="number">100</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">5</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">80</span> <span class="number">90</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">80</span> <span class="number">80</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">80</span> <span class="number">80</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">80</span> <span class="number">70</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">70</span> <span class="number">80</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">100</span> <span class="number">100</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span></span><br><span class="line">Sample Output:</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">2</span> <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">输入</span><br><span class="line"><span class="number">20</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">9</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">0</span> <span class="number">3</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">5</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">6</span> <span class="number">0</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">4</span> <span class="number">8</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">6</span> <span class="number">2</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">9</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">0</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">7</span> <span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">9</span> <span class="number">7</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line"><span class="number">0</span> <span class="number">4</span> <span class="number">8</span> <span class="number">11</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">7</span> <span class="number">9</span> <span class="number">10</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span></span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1078 Hashing (25)</title>
      <link href="//posts/923495e5/"/>
      <url>//posts/923495e5/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://pintia.cn/problem-sets/994805342720868352/problems" target="_blank" rel="noopener">题目链接</a></p><p>哈希表的平方探查法。<br><a id="more"></a><br>散列函数是H(key) = key % TSize ，其中Tsize是散列表的大小，平方探查法用于解决冲突，只考虑增量。如果表格大小不为素数，则要将其重新定义为大于用户给定大小的最小素数。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行输入两个正数，Msizie（&lt;=10000）和N，用于定义用户的hash表大小和数字的数量。</p><p>然后给出N个正整数，由空格分隔。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出数字相应的位置，从0开始索引，每个数字间由一个空格隔开。若无法插入，则输出”-“。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime</span><span class="params">(<span class="keyword">int</span> num)</span><span class="comment">//判断素数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i *i&lt;= num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (num%i == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> hashTable[<span class="number">10010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tsize, n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; tsize &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span> (!isPrime(tsize))</span><br><span class="line">    &#123;</span><br><span class="line">        tsize++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        <span class="keyword">int</span> j,k;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; tsize; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            k = (temp + j*j) % tsize;<span class="comment">//平方探测</span></span><br><span class="line">            <span class="keyword">if</span> (!hashTable[k])</span><br><span class="line">            &#123;</span><br><span class="line">                hashTable[k] = <span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; k;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (j == tsize)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"-"</span>;</span><br><span class="line">        <span class="keyword">if</span> (i != n - <span class="number">1</span>)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">10</span> <span class="number">6</span> <span class="number">4</span> <span class="number">15</span></span><br><span class="line">Sample Output:</span><br><span class="line"></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">4</span> -</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> Hash </tag>
            
            <tag> 平方探查法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1077 Kuchiguse (20)</title>
      <link href="//posts/6e8a40c3/"/>
      <url>//posts/6e8a40c3/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1077" target="_blank" rel="noopener">题目链接</a></p><p>日语的尾音。<br><a id="more"></a><br>给定N个字符串，求他们的公共后缀。如果不存在公共后缀，输出nai。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入包括一个测试用例。第一行是整N，接下来是N个字符串，每个占一行。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出这N个字符串的公共后缀。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>字符串处理</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>可以将字符串逆置，这样只需要比较前面的字符就可以了。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">string</span> ans,s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//cin &gt;&gt; N;</span></span><br><span class="line">    <span class="comment">//cin.ignore();          //用这两个或者下面的scanf</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d\n"</span>, &amp;N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        getline(<span class="built_in">cin</span>, s);</span><br><span class="line">        <span class="keyword">int</span> length = s.length();</span><br><span class="line">        reverse(s.begin(), s.end());</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = s;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ans_length = ans.length();</span><br><span class="line">            <span class="keyword">int</span> min_length = min(ans_length, length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; min_length; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans[j]!=s[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = ans.substr(<span class="number">0</span>, j);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(ans.begin(), ans.end());</span><br><span class="line">    <span class="keyword">if</span> (ans.length() == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"nai"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line">Itai nyan~</span><br><span class="line">Ninjin wa iyadanyan~</span><br><span class="line">uhhh nyan~</span><br><span class="line">Sample Output <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">nyan~</span><br><span class="line">Sample Input <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br><span class="line">Itai!</span><br><span class="line">Ninjinnwaiyada T_T</span><br><span class="line">T_T</span><br><span class="line">Sample Output <span class="number">2</span>:</span><br><span class="line"></span><br><span class="line">nai</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>已知二叉树的中序和前序序列(或后序)求解树</title>
      <link href="//posts/b3684980/"/>
      <url>//posts/b3684980/</url>
      <content type="html"><![CDATA[<h1 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h1><p>这种题一般有两种形式，共同点是都已知中序序列。如果没有中序序列，是无法唯一确定一棵树的，证明略。<br><a id="more"></a></p><h1 id="已知二叉树的前序序列和中序序列"><a href="#已知二叉树的前序序列和中序序列" class="headerlink" title="已知二叉树的前序序列和中序序列"></a>已知二叉树的前序序列和中序序列</h1><p>方法如下：</p><ol><li>确定树的根节点。<strong>树根是当前树中所有元素在前序遍历中最先出现的元素。</strong></li><li>求解树的子树。找出根节点在中序遍历中的位置，根左边的所有元素就是左子树，根右边的所有元素就是右子树。若根节点左边或右边为空，则该方向子树为空；若根节点左边和右边都为空，则根节点已经为叶子节点。</li><li>递归求解树。将左子树和右子树分别看成一棵二叉树，重复1、2、3步，直到所有的节点完成定位。</li></ol><h1 id="已知二叉树的后序序列和中序序列"><a href="#已知二叉树的后序序列和中序序列" class="headerlink" title="已知二叉树的后序序列和中序序列"></a>已知二叉树的后序序列和中序序列</h1><ol><li>确定树的根。<strong>树根是当前树中所有元素在后序遍历中最后出现的元素。</strong></li><li>求解树的子树。找出根节点在中序遍历中的位置，根左边的所有元素就是左子树，根右边的所有元素就是右子树。若根节点左边或右边为空，则该方向子树为空；若根节点左边和右边都为空，则根节点已经为叶子节点。</li><li>递归求解树。将左子树和右子树分别看成一棵二叉树，重复1、2、3步，直到所有的节点完成定位。</li></ol><h1 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h1><p>举个栗子：</p><p>中序序列 HLDBEKAFCG</p><p>后序序列 LHDKEBFGCA</p><p>1、在后序序列LHDKEBFGCA中最后出现的元素为A，HLDBEK|<font color="#FF0000">A</font>|FCG</p><p>2、在后序序列LHDKEB中最后出现的元素为B，HLD|<font color="#FF0000">B</font>|EK|A|FCG</p><p>3、在后序序列LHD中最后出现的元素为D，HL|<font color="#FF0000">D</font>|B|EK|A|FCG</p><p>4、在后序序列LH中最后出现的元素为H，<font color="#FF0000">H</font>|L|D|B|EK|A|FCG</p><p>5、在后序序列KE中最后出现的元素为E，H|L|D|B|<font color="#FF0000">E</font>|K|A|FCG</p><p>5、在后序序列FGC中最后出现的元素为C，H|L|D|B|E|K|A|F|<font color="#FF0000">C</font>|G</p><p>6、所有元素都已经定位，二叉树求解完成。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">        A</span><br><span class="line">     /     \</span><br><span class="line">    B       C</span><br><span class="line">   / \     /  \</span><br><span class="line">  D  E     F   G</span><br><span class="line"> /    \</span><br><span class="line">H      K                                   </span><br><span class="line"> \                        </span><br><span class="line">  L</span><br></pre></td></tr></table></figure></p><h1 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">功能: 1.利用树的前序和中序序列创建树</span></span><br><span class="line"><span class="comment">2.利用树的后序和中序序列创建树</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> pre[<span class="number">50</span>] = <span class="string">"ABDHLEKCFG"</span>;        <span class="comment">//前序序列</span></span><br><span class="line"><span class="keyword">char</span> mid[<span class="number">50</span>] = <span class="string">"HLDBEKAFCG"</span>;        <span class="comment">//中序序列</span></span><br><span class="line"><span class="keyword">char</span> post[<span class="number">50</span>] = <span class="string">"LHDKEBFGCA"</span>;        <span class="comment">//后序序列</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> *<span class="title">left</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">Node</span> *<span class="title">right</span> = <span class="title">NULL</span>;</span></span><br><span class="line">&#125;Node, *PNode;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTravelTree</span><span class="params">(PNode pn)</span></span>;        <span class="comment">//树的后序递归遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTravelTree</span><span class="params">(PNode pn)</span></span>;        <span class="comment">//树的前序递归遍历</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreMidCreateTree</span><span class="params">(PNode &amp;pn, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> len)</span></span>;        <span class="comment">//利用前序中序序列创建树</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostMidCreateTree</span><span class="params">(PNode &amp;pn, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> len)</span></span>;        <span class="comment">//利用后序中序序列创建树</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Position</span><span class="params">(<span class="keyword">char</span> c)</span></span>;                <span class="comment">//确定c在中序序列mid中的下标,假设树的各个节点的值各不相同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNode root1 = <span class="literal">NULL</span>, root2 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    PreMidCreateTree(root1, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">strlen</span>(mid));</span><br><span class="line">    PostTravelTree(root1); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//后序</span></span><br><span class="line">    PostMidCreateTree(root2, <span class="built_in">strlen</span>(post) - <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">strlen</span>(mid));</span><br><span class="line">    PreTravelTree(root2); <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//先序</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Position</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strchr</span>(mid, c) - mid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*        i: 子树的前序序列字符串的首字符在pre[]中的下标</span></span><br><span class="line"><span class="comment">*        j: 子树的中序序列字符串的首字符在mid[]中的下标</span></span><br><span class="line"><span class="comment">*      len: 子树的字符串序列的长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreMidCreateTree</span><span class="params">(PNode &amp;pn, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    pn = <span class="keyword">new</span> Node;</span><br><span class="line">    pn-&gt;v = pre[i];</span><br><span class="line">    <span class="keyword">int</span> m = Position(pre[i]);</span><br><span class="line">    PreMidCreateTree(pn-&gt;left, i + <span class="number">1</span>, j, m - j);            <span class="comment">//m-j为左子树字符串长度</span></span><br><span class="line">    PreMidCreateTree(pn-&gt;right, i + (m - j) + <span class="number">1</span>, m + <span class="number">1</span>, len - <span class="number">1</span> - (m - j));    <span class="comment">//len-1-(m-j)为右子树字符串长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*  利用后序中序序列创建树</span></span><br><span class="line"><span class="comment">*        i: 子树的后序序列字符串的尾字符在post[]中的下标</span></span><br><span class="line"><span class="comment">*        j: 子树的中序序列字符串的首字符在mid[]中的下标</span></span><br><span class="line"><span class="comment">*      len: 子树的字符串序列的长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostMidCreateTree</span><span class="params">(PNode &amp;pn, <span class="keyword">int</span> i, <span class="keyword">int</span> j, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    pn = <span class="keyword">new</span> Node;</span><br><span class="line">    pn-&gt;v = post[i];</span><br><span class="line">    <span class="keyword">int</span> m = Position(post[i]);</span><br><span class="line">    PostMidCreateTree(pn-&gt;left, i - <span class="number">1</span> - (len - <span class="number">1</span> - (m - j)), j, m - j);<span class="comment">//注意参数:m-j左子树的长度,len-1-(m-j)右子树的长度</span></span><br><span class="line">    PostMidCreateTree(pn-&gt;right, i - <span class="number">1</span>, m + <span class="number">1</span>, len - <span class="number">1</span> - (m - j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostTravelTree</span><span class="params">(PNode pn)</span>        <span class="comment">//后序递归遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pn)</span><br><span class="line">    &#123;</span><br><span class="line">        PostTravelTree(pn-&gt;left);</span><br><span class="line">        PostTravelTree(pn-&gt;right);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; pn-&gt;v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreTravelTree</span><span class="params">(PNode pn)</span>        <span class="comment">//前序递归遍历</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pn)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; pn-&gt;v &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        PreTravelTree(pn-&gt;left);</span><br><span class="line">        PreTravelTree(pn-&gt;right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 重建二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何下载知乎中的短视频</title>
      <link href="//posts/581e27f1/"/>
      <url>//posts/581e27f1/</url>
      <content type="html"><![CDATA[<p>关于知乎里的视频的下载技巧。<br><a id="more"></a></p><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>以<a href="https://www.zhihu.com/question/266137847/answer/317574998" target="_blank" rel="noopener">拥有配音技能是什么样的体验</a>这个回答中的视频为例。</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>我用的是chrome浏览器，不涉及插件。</p><h2 id="获取视频地址"><a href="#获取视频地址" class="headerlink" title="获取视频地址"></a>获取视频地址</h2><p>右键点击视频，检查。找到<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe frameborder=”0″ allowfullscreen=”” src=”https://www.zhihu.com/video/946365677783703552″&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><p>如图所示：</p><p><img src="/posts/581e27f1/如何下载知乎回答中的短视频-插图1.jpg" alt="视频地址"></p><p>复制地址<br><a href="https://www.zhihu.com/video/946365677783703552" target="_blank" rel="noopener">https://www.zhihu.com/video/946365677783703552</a> 在新的标签中打开。</p><h2 id="获取m3u8地址"><a href="#获取m3u8地址" class="headerlink" title="获取m3u8地址"></a>获取m3u8地址</h2><p>按F12，打开NetWork——All，搜索m3u8：</p><p><img src="/posts/581e27f1/如何下载知乎回答中的短视频-插图2.jpg" alt="m3u8地址"></p><p>右键——Copy——Copy link address</p><h2 id="用gohls下载"><a href="#用gohls下载" class="headerlink" title="用gohls下载"></a>用gohls下载</h2><p>下载<a href="https://github.com/kz26/gohls/releases" target="_blank" rel="noopener">gohls</a></p><p>解压后，在终端里，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gohls -l=true “m3u8地址” “保存的文件名.mp4”</span><br></pre></td></tr></table></figure></p><p>其中m3u8的地址就是刚才复制的。</p><p>此方法适用于大部分直播网站（斗鱼视频回放、一直播回放、美拍直播、熊猫、龙珠、AF、战旗、虎牙、YYLive…）</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zhuanlan.zhihu.com/p/30818462" target="_blank" rel="noopener">教大家怎么下载各大平台的m3u8直播录像</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> m3u8 </tag>
            
            <tag> 下载技巧 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>帽子颜色问题</title>
      <link href="//posts/3ffb6ae9/"/>
      <url>//posts/3ffb6ae9/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>学校最近举行一场运动会，共有17名身高不同的学生参加。裁判准备了如下颜色的帽子：3顶红色，4顶黄色，5顶蓝色，7顶绿色。规则如下：让17个人按顺序站成一列，给他们每个人都戴一顶帽子，每个人看不见自己帽子的颜色，却能看到站在前面的那些人的帽子颜色。即， 从队头到队尾，分别标记为1,2,4,5….17。1号啥都看不到，17号能看到1~16号帽子的颜色。这17名学生知道帽子都有什么颜色以及有多少顶。</p><p>现在从队尾开始，即17号，开始依次问，你是否知道自己戴的帽子的颜色，如果他回答不知道，就继续问他前面的人，即16,15,14…依次往前问。问最多问到几号，他就一定能知道自己戴的是什么颜色的帽子。<br><a id="more"></a><br>答案最多是问到4号。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>先看一个这个问题的简化版：</p><p>有3顶黑帽子，2顶白帽子。让三个人从前到后站成一排。从前到后分别标记为1号，2,号，3号。给他们每个人头上戴一顶帽子。每个人都看不见自己戴的帽子的颜色，却只能看见站在前面那些人的帽子颜色。（所以3号可以看见前面两个人头上帽子的颜色，2号看得见1号的帽子颜色但看不见在他后面那个人的帽子颜色，而1号谁的帽子都看不见。现在从3号开始，问他是不是知道自己戴的帽子颜色，如果他回答说不知道，就继续问他前面那个人。现假设这三个人全都戴着黑帽子，那么1号一定知道自己戴的是黑帽子，问为什么？</p><p>答案是，1号听见了2,3号都说了不知道。对于3号，如果他看见了两顶白帽子，那么他就知道自己戴的是黑帽子。但是3号不知道，所以3号看见了至少一顶黑色。那么对于2号，如果2号看见了一顶白色，听见了3号不知道，那么2号就知道自己戴的是黑色的。如果2号也不知道，说明2号也看到了黑色，也即1号戴的是黑色的。</p><p>换个复杂点的：</p><p>3顶红帽子，4顶黑帽子，5顶白帽子，10个人。</p><p>由数量可知，每种颜色的帽子至少出现一次。如果10号看到了4黑5白，那么10号就知道自己是红帽子。如果10号不知道，9号看到了4黑4白，10号不知道，说明算上自己，至少有一个红，因此9号就知道自己是红。</p><p><strong>因此，对于这种类型的题，每种颜色至少出现一次的，从后往前数，第一个看不见全部颜色的，那么他就知道自己戴的是什么颜色的帽子，具体的颜色就是全部颜色-自己看到的颜色。</strong></p><p>于是，引言中说的那个题，最多问到4号。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这个题是一个同学问我的题，好像是阿里的网上笔试题中的一道，简单修改了下。</p>]]></content>
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑推理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>X86与ARM中的原子操作-原理及实现</title>
      <link href="//posts/2a85d31f/"/>
      <url>//posts/2a85d31f/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个是在面试的时候遇到的问题，当时没有答出来。回到家以后查了查，整理记录下来。</p><p>原问题：什么指令集支持原子操作？其原理是什么？<br><a id="more"></a><br>如果考虑到全部的指令集，问题太大了，这里简化下。以X86和ARM为例。</p><p>原子操作是不可分割的操作，在执行完毕时它不会被任何事件中断。在单处理器系统(UniProcessor，简称 UP)中，能够在单条指令中完成的操作都可以认为是原子操作，因为中断只能发生在指令与指令之间。</p><p>比如，C语言代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count++</span><br></pre></td></tr></table></figure></p><p>如果未经优化，有可能生成如下汇编：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,[count]</span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">eax</span></span><br><span class="line"><span class="keyword">mov</span> [count],<span class="built_in">eax</span></span><br></pre></td></tr></table></figure></p><p>这样在有多个进程执行这段代码时，就有可能产生并发问题：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">P1：                                 P2：</span><br><span class="line"></span><br><span class="line"><span class="keyword">mov</span> <span class="built_in">eax</span>,[count]                      wait</span><br><span class="line">wait                                 <span class="keyword">mov</span> <span class="built_in">eax</span>,[count]</span><br><span class="line">wait                                 <span class="keyword">inc</span> <span class="built_in">eax</span></span><br><span class="line">wait                                 <span class="keyword">mov</span> [count],<span class="built_in">eax</span></span><br><span class="line"><span class="keyword">inc</span> <span class="built_in">eax</span>                              wait</span><br><span class="line"><span class="keyword">mov</span> [count],<span class="built_in">eax</span>                      wait</span><br></pre></td></tr></table></figure></p><p>这就会出现问题。</p><p>在单处理器中，解决这个问题的方法是，将count++语句翻译成单指令操作<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">inc</span> [count]</span><br></pre></td></tr></table></figure></p><p>X86指令集支持inc操作，这样count操作可以在一条指内完成。</p><p>进程的上下文切换总是在一条指令执行之后完成，所以不会出现上述的并发问题。对于单处理器来说，一条处理器指令就是一个原子操作。</p><p>同样，ARM里的SWP和X86里的XCHG都是对于单处理器来说，是原子操作。</p><p>但是，在多处理器系统(Symmetric Multi-Processor，简称 SMP)中情况有所不同，由于系统中有多个处理器在独立的运行，即使在能单条指令中完成的操作也可能受到干扰。因为这个时候并发的主题不再是进程，而是处理器。</p><h1 id="X86架构"><a href="#X86架构" class="headerlink" title="X86架构"></a>X86架构</h1><p>Intel X86指令集提供了指令前缀lock用于锁定前端串行总线FSB，保证了指令执行时不会收到其他处理器的干扰。</p><p>比如：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lock</span> <span class="keyword">inc</span> [count]</span><br></pre></td></tr></table></figure></p><p>使用lock指令前缀之后，处理期间对count内存的并发访问（Read/Write）被禁止，从而保证了指令的原子性。</p><p>如图所示：</p><p><img src="/posts/2a85d31f/X86LOCK.png" alt="X86LOCK"></p><p>其原理在<a href="https://software.intel.com/sites/default/files/managed/a4/60/325383-sdm-vol-2abcd.pdf" target="_blank" rel="noopener">Intel开发手册</a>有如下说明：</p><blockquote><p>Description</p><p>Causes the processor’s LOCK# signal to be asserted during execution of the accompanying instruction (turns the instruction into an atomic instruction). In a multiprocessor environment, the LOCK# signal ensures that the processor has exclusive use of any shared memory while the signal is asserted.</p><p>The LOCK prefix can be prepended only to the following instructions and only to those forms of the instructions where the destination operand is a memory operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG. If the LOCK prefix is used with one of these instructions and the source operand is a memory operand, an undefined opcode exception (#UD) may be generated. An undefined opcode exception will also be generated if the LOCK prefix is used with any instruction not in the above list. The XCHG instruction always asserts the LOCK# signal regardless of the presence or absence of the LOCK prefix.</p><p>The LOCK prefix is typically used with the BTS instruction to perform a read-modify-write operation on a memory location in shared memory environment.</p><p>The integrity of the LOCK prefix is not affected by the alignment of the memory field. Memory locking is observed for arbitrarily misaligned fields.</p></blockquote><p>在执行伴随的指令期间使处理器的LOCK＃信号有效（将指令变为原子指令）。 在多处理器环境中，LOCK＃信号确保处理器在信号有效时独占使用任何共享存储器。</p><p>OCK前缀只能附加在下面的指令之前，并且只适用于那些目标操作数是内存操作数的指令格式：ADD，ADC，AND，BTC，BTR，BTS，CMPXCHG，CMPXCH8B，CMPXCHG16B，DEC，INC， NEG，NOT，OR，SBB，SUB，XOR，XADD和XCHG。 如果LOCK前缀与这些指令之一一起使用，并且源操作数是内存操作数，则可能会生成未定义的操作码异常（#UD）。 如果LOCK前缀与任何不在上述列表中的指令一起使用，也会产生未定义的操作码异常。 无论是否存在LOCK前缀，XCHG指令都始终声明LOCK＃信号。</p><p>LOCK前缀通常与BTS指令一起使用，以在共享存储器环境中的存储器位置上执行读取 – 修改 – 写入操作。</p><p>LOCK前缀的完整性不受存储器字段对齐的影响。 内存锁定是针对任意不对齐的字段。</p><h2 id="操作系统中的实现"><a href="#操作系统中的实现" class="headerlink" title="操作系统中的实现"></a>操作系统中的实现</h2><p><a href="https://github.com/torvalds/linux/blob/master/arch/x86/include/asm/atomic.h" target="_blank" rel="noopener">Linux源码</a><br>中对于原子自增一是如下定义的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * atomic_inc - increment atomic variable</span><br><span class="line"> * @v: pointer of type atomic_t</span><br><span class="line"> *</span><br><span class="line"> * Atomically increments @v by 1.</span><br><span class="line"> */</span><br><span class="line">static __always_inline void atomic_inc(atomic_t *v)</span><br><span class="line">&#123;</span><br><span class="line">    asm volatile(LOCK_PREFIX &quot;incl %0&quot;</span><br><span class="line">             : &quot;+m&quot; (v-&gt;counter));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>LOCK_PREFIX的定义如下所示：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SMP</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCK_PREFIX_HERE \</span></span><br><span class="line">        <span class="string">".pushsection .smp_locks,\"a\"\n"</span>   \</span><br><span class="line">        <span class="string">".balign 4\n"</span>               \</span><br><span class="line">        <span class="string">".long 671f - .\n"</span> <span class="comment">/* offset */</span>     \</span><br><span class="line">        <span class="string">".popsection\n"</span>             \</span><br><span class="line">        <span class="string">"671:"</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCK_PREFIX LOCK_PREFIX_HERE <span class="meta-string">"\n\tlock; "</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">/* ! CONFIG_SMP */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCK_PREFIX_HERE <span class="meta-string">""</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOCK_PREFIX <span class="meta-string">""</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>可见：</p><p>在对称多处理器架构的情况下，LOCK_PREFIX被解释为指令前缀lock。而对于单处理器架构，LOCK_PREFIX不包含任何内容。</p><p>另外，对于CAS，有cmpxchg指令进行操作。代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> __<span class="function">always_inline <span class="keyword">int</span> <span class="title">atomic_cmpxchg</span><span class="params">(<span class="keyword">atomic_t</span> *v, <span class="keyword">int</span> old, <span class="keyword">int</span> <span class="keyword">new</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cmpxchg(&amp;v-&gt;counter, old, <span class="keyword">new</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> cmpxchg(ptr, old, new)                      \</span></span><br><span class="line">    __cmpxchg(ptr, old, <span class="keyword">new</span>, <span class="keyword">sizeof</span>(*(ptr)))</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __cmpxchg(ptr, old, new, size)                  \</span></span><br><span class="line">    __raw_cmpxchg((ptr), (old), (<span class="keyword">new</span>), (size), LOCK_PREFIX)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __raw_cmpxchg(ptr, old, new, size, lock)            \</span></span><br><span class="line">(&#123;                                  \</span><br><span class="line">    __typeof__(*(ptr)) __ret;                   \</span><br><span class="line">    __typeof__(*(ptr)) __old = (old);               \</span><br><span class="line">    __typeof__(*(ptr)) __new = (<span class="keyword">new</span>);               \</span><br><span class="line">    <span class="keyword">switch</span> (size) &#123;                         \</span><br><span class="line">    <span class="keyword">case</span> __X86_CASE_B:                      \</span><br><span class="line">    &#123;                               \</span><br><span class="line">        <span class="keyword">volatile</span> u8 *__ptr = (<span class="keyword">volatile</span> u8 *)(ptr);      \</span><br><span class="line">        <span class="keyword">asm</span> <span class="keyword">volatile</span>(lock <span class="string">"cmpxchgb %2,%1"</span>          \</span><br><span class="line">             : <span class="string">"=a"</span> (__ret), <span class="string">"+m"</span> (*__ptr)      \</span><br><span class="line">             : <span class="string">"q"</span> (__new), <span class="string">"0"</span> (__old)         \</span><br><span class="line">             : <span class="string">"memory"</span>);               \</span><br><span class="line">        <span class="keyword">break</span>;                          \</span><br><span class="line">    &#125;                               \</span><br><span class="line">    <span class="keyword">case</span> __X86_CASE_W:                      \</span><br><span class="line">    &#123;                               \</span><br><span class="line">        <span class="keyword">volatile</span> u16 *__ptr = (<span class="keyword">volatile</span> u16 *)(ptr);        \</span><br><span class="line">        <span class="keyword">asm</span> <span class="keyword">volatile</span>(lock <span class="string">"cmpxchgw %2,%1"</span>          \</span><br><span class="line">             : <span class="string">"=a"</span> (__ret), <span class="string">"+m"</span> (*__ptr)      \</span><br><span class="line">             : <span class="string">"r"</span> (__new), <span class="string">"0"</span> (__old)         \</span><br><span class="line">             : <span class="string">"memory"</span>);               \</span><br><span class="line">        <span class="keyword">break</span>;                          \</span><br><span class="line">    &#125;                               \</span><br><span class="line">    <span class="keyword">case</span> __X86_CASE_L:                      \</span><br><span class="line">    &#123;                               \</span><br><span class="line">        <span class="keyword">volatile</span> u32 *__ptr = (<span class="keyword">volatile</span> u32 *)(ptr);        \</span><br><span class="line">        <span class="keyword">asm</span> <span class="keyword">volatile</span>(lock <span class="string">"cmpxchgl %2,%1"</span>          \</span><br><span class="line">             : <span class="string">"=a"</span> (__ret), <span class="string">"+m"</span> (*__ptr)      \</span><br><span class="line">             : <span class="string">"r"</span> (__new), <span class="string">"0"</span> (__old)         \</span><br><span class="line">             : <span class="string">"memory"</span>);               \</span><br><span class="line">        <span class="keyword">break</span>;                          \</span><br><span class="line">    &#125;                               \</span><br><span class="line">    <span class="keyword">case</span> __X86_CASE_Q:                      \</span><br><span class="line">    &#123;                               \</span><br><span class="line">        <span class="keyword">volatile</span> u64 *__ptr = (<span class="keyword">volatile</span> u64 *)(ptr);        \</span><br><span class="line">        <span class="keyword">asm</span> <span class="keyword">volatile</span>(lock <span class="string">"cmpxchgq %2,%1"</span>          \</span><br><span class="line">             : <span class="string">"=a"</span> (__ret), <span class="string">"+m"</span> (*__ptr)      \</span><br><span class="line">             : <span class="string">"r"</span> (__new), <span class="string">"0"</span> (__old)         \</span><br><span class="line">             : <span class="string">"memory"</span>);               \</span><br><span class="line">        <span class="keyword">break</span>;                          \</span><br><span class="line">    &#125;                               \</span><br><span class="line">    <span class="keyword">default</span>:                            \</span><br><span class="line">        __cmpxchg_wrong_size();                 \</span><br><span class="line">    &#125;                               \</span><br><span class="line">    __ret;                              \</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="ARM架构"><a href="#ARM架构" class="headerlink" title="ARM架构"></a>ARM架构</h1><p>在ARM架构下，没有LOCK#指令，其具体实现如下：</p><h2 id="ARMv6之前"><a href="#ARMv6之前" class="headerlink" title="ARMv6之前"></a>ARMv6之前</h2><p>早期的ARM架构是不支持SMP的，这些单核架构的CPU实现原子操作的方式就是通过关闭CPU中断来完成的。</p><p>在<a href="https://github.com/torvalds/linux/blob/master/arch/arm/include/asm/atomic.h" target="_blank" rel="noopener">Linux对于ARM架构的代码</a>下</p><p>有如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ATOMIC_OP_RETURN(op, c_op, asm_op)              \</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> atomic_#<span class="meta">#op##_return(int i, atomic_t *v)      \</span></span><br><span class="line">&#123;                                   \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;                        \</span><br><span class="line">    <span class="keyword">int</span> val;                            \</span><br><span class="line">                                    \</span><br><span class="line">    raw_local_irq_save(flags);                  \<span class="comment">//关本地中断</span></span><br><span class="line">    v-&gt;counter c_op i;                      \</span><br><span class="line">    val = v-&gt;counter;                       \</span><br><span class="line">    raw_local_irq_restore(flags);                   \<span class="comment">//开中断</span></span><br><span class="line">                                    \</span><br><span class="line">    <span class="keyword">return</span> val;                         \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个是好多操作共用的一套代码。</p><p>对于cmpxchg：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">atomic_cmpxchg</span><span class="params">(<span class="keyword">atomic_t</span> *v, <span class="keyword">int</span> old, <span class="keyword">int</span> <span class="keyword">new</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> flags;</span><br><span class="line">    raw_local_irq_save(flags);</span><br><span class="line">    ret = v-&gt;counter;</span><br><span class="line">    <span class="keyword">if</span> (likely(ret == old))</span><br><span class="line">        v-&gt;counter = <span class="keyword">new</span>;</span><br><span class="line">    raw_local_irq_restore(flags);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，对v-&gt;counter的操作是一个临界区，指令的执行不能被打断，内存的访问也需要保持没有干扰。</p><p>ARMv6以前的版本通过关本地中断来保护这块临界区，看起来相当简单，其奥秘就在于ARMv6以前的版本不支持SMP。</p><p>比如经典的read-modify-write问题，其本质是保持一个对内存read和write访问的原子性问题，也就是说内存的读和写的访问不能被打断。对该问题的解决可以通过硬件、软件或者软硬件结合的方法来进行。早期的ARM CPU给出的方案就是依赖硬件：SWP这个汇编指令执行了一次读内存操作、一次写内存操作，但是从程序员的角度看，SWP这条指令就是原子的，读写之间不会被任何的异步事件打断。具体底层的硬件是如何做的呢？这时候，硬件会提供一个lock signal，在进行memory操作的时候设定lock信号，告诉总线这是一个不可被中断的内存访问，直到完成了SWP需要进行的两次内存访问之后再clear lock信号。</p><p>多说一点关于SWP和SWPB的内容，这两个指令是用来同步的，不是用来执行原子操作的。</p><p>在将独占访问引入ARM架构之前，SWP和SWPB指令常用于同步。</p><p>其局限性是：</p><p>如果中断在触发交换操作时触发，则处理器必须在执行中断之前完成指令的加载和存储部分，从而增加中断延迟。 由于独立加载和独占存储是单独的指令，因此在使用新的同步基元时会降低此效果。</p><p>但是在多核系统中，交换指令期间阻止所有处理器访问主存会降低系统性能。在处理器工作在不同频率但是共享相同主存的多核系统中，情况尤其如此。</p><p>所以在ARMv6及以后的版本中，弃用了SWP。</p><p>ARMv6架构引入了独占访问内存为止的概念，提供了更灵活的原子内存更新。</p><p>ARMv6体系结构以Load-Exclusive和Store-Exclusive同步原语LDREX和STREX的形式引入了Load Link和Store Conditional指令。 从ARMv6T2开始，这些指令在ARM和Thumb指令集中可用。 独立加载和专有存储提供了灵活和可扩展的同步，取代了弃用的SWP和SWPB指令。</p><p>后来使用的是LDREX和STREX指令。</p><h2 id="armv7之后"><a href="#armv7之后" class="headerlink" title="armv7之后"></a>armv7之后</h2><p>继续看代码，在armv7之后就用了ldrex和strex</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ATOMIC_OP_RETURN(op, c_op, asm_op)              \</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span> atomic_#<span class="meta">#op##_return_relaxed(int i, atomic_t *v)  \</span></span><br><span class="line">&#123;                                   \</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> tmp;                      \</span><br><span class="line">    <span class="keyword">int</span> result;                         \</span><br><span class="line">                                    \</span><br><span class="line">    prefetchw(&amp;v-&gt;counter);                     \</span><br><span class="line">                                    \</span><br><span class="line">    __asm__ __volatile__(<span class="string">"@ atomic_"</span> #op <span class="string">"_return\n"</span>    \  <span class="comment">/* 优化屏障，防止编译器优化 */</span></span><br><span class="line"><span class="string">"1: ldrex   %0, [%3]\n"</span>                     \<span class="comment">/*【1】独占方式加载v-&gt;counter到result*/</span></span><br><span class="line"><span class="string">"   "</span> #asm_op <span class="string">" %0, %0, %4\n"</span>               \       <span class="comment">/*【2】对result进行操作*/</span></span><br><span class="line"><span class="string">"   strex   %1, %0, [%3]\n"</span>                     \  <span class="comment">/*【3】独占方式将result值写回v-&gt;counter*/</span></span><br><span class="line"><span class="string">"   teq %1, #0\n"</span>                       \         <span class="comment">/*【4】判断strex更新内存是否成*/</span></span><br><span class="line"><span class="string">"   bne 1b"</span>                         \            <span class="comment">/*【5】不成功跳转到1:*/</span></span><br><span class="line">    : <span class="string">"=&amp;r"</span> (result), <span class="string">"=&amp;r"</span> (tmp), <span class="string">"+Qo"</span> (v-&gt;counter)       \<span class="comment">/*输出部*/</span></span><br><span class="line">    : <span class="string">"r"</span> (&amp;v-&gt;counter), <span class="string">"Ir"</span> (i)                   \<span class="comment">/*输入部*/</span></span><br><span class="line">    : <span class="string">"cc"</span>);                            \<span class="comment">/*损坏部*/</span></span><br><span class="line">                                    \</span><br><span class="line">    <span class="keyword">return</span> result;                          \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访存指令LDREX/STREX和普通的LDR/STR访存指令不一样，它是“独占”访存指令。这对指令访存过程由一个称作“exclusive monitor”的部件来监视是否可以进行独占访问。</p><p>先看看这对独占访存指令：</p><p>(1)LDREX R1 ，[R0] 指令是以独占的方式从R0所指的地址中取一个字存放到R0中；</p><p>(2)STREX R2，R1，[R0] 指令是以独占的方式用R1来更新内存，如果独占访问条件允许，则更新成功并返回0到R2，否则失败返回1到R2。</p><p>关于LDREX和STREX的原理，另有一篇<a href="https://blog.csdn.net/Roland_Sun/article/details/47670099" target="_blank" rel="noopener">博客</a>讲的很好，可以去看看。</p><hr><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="http://www.wowotech.net/kernel_synchronization/atomic.html" target="_blank" rel="noopener">Linux内核同步机制之（一）：原子操作</a></p><p><a href="https://www.cnblogs.com/fanzhidongyzby/p/3654855.html" target="_blank" rel="noopener">Linux的原子操作与同步机制</a></p><p><a href="https://software.intel.com/zh-cn/blogs/2010/01/14/cpucpu" target="_blank" rel="noopener">关于单CPU，多CPU上的原子操作</a></p><p><a href="https://blog.csdn.net/adaptiver/article/details/72393528" target="_blank" rel="noopener">原子操作–ARM架构</a></p><p><a href="https://blog.csdn.net/Roland_Sun/article/details/47670099" target="_blank" rel="noopener">ARM平台下独占访问指令LDREX和STREX的原理与使用详解</a></p>]]></content>
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM </tag>
            
            <tag> X86 </tag>
            
            <tag> 原子操作 </tag>
            
            <tag> 操作系统 </tag>
            
            <tag> 汇编语言 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ-1852</title>
      <link href="//posts/1ddc535a/"/>
      <url>//posts/1ddc535a/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=1852" target="_blank" rel="noopener">题目链接</a><br>蚂蚁在杆子上行走，求蚂蚁掉落的最快和最慢时间。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一队蚂蚁在1厘米长的水平杆上行走，每杆以1厘米/秒的速度匀速行进。当一只行走的蚂蚁到达杆的一端时，它会立即掉落。当两只蚂蚁相遇时，他们转过头去开始朝相反的方向行走。只知道蚂蚁在竿子上的原始位置，不知道蚂蚁行走的方向。求所有蚂蚁从端点上掉落所需的最快和最慢的时间。</p><p>第一行是一个正整数，表示测试样例的数量。</p><p>对于每个测试样例，首先给出两个整数，这根杆子的长度，单位cm，和这根杆子上蚂蚁的数量N。第三行是N个整数，给出了每个蚂蚁在杆子上的位置，即从杆子左端开始测量的距离，没有特别的顺序，保证所有的整数都不大于1000000。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试样例，在一行中输出两个数，分别是最早的全掉落的时间和最晚的全掉落的时间。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>把蚂蚁相遇看做交换位置。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    <span class="keyword">int</span> L = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> X;</span><br><span class="line">    <span class="keyword">int</span> minT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> maxT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        minT = <span class="number">0</span>;</span><br><span class="line">        maxT = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; L &gt;&gt; n;</span><br><span class="line">        <span class="comment">//最短的时间就是向其距离最近的端点去走</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; X;</span><br><span class="line">            minT = max(minT, min(L - X, X));</span><br><span class="line">            maxT = max(maxT, max(L - X, X));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; minT &lt;&lt; <span class="string">' '</span> &lt;&lt; maxT &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">10</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">214</span> <span class="number">7</span></span><br><span class="line"><span class="number">11</span> <span class="number">12</span> <span class="number">7</span> <span class="number">13</span> <span class="number">176</span> <span class="number">23</span> <span class="number">191</span></span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">38</span> <span class="number">207</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> POJ </tag>
            
            <tag> 基础题 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>POJ-2386</title>
      <link href="//posts/b1ffa901/"/>
      <url>//posts/b1ffa901/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="http://poj.org/problem?id=2386" target="_blank" rel="noopener">题目链接</a><br>一片地里面有一些积水，要求数清楚一共有几片积水，W表示水，” . “  表示旱地。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是两个整数，N和M</p><p>接下来是N行，每行M个字符，表示这一片田地，W表示水，” . “  表示旱地。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>池塘的数量。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>使用DFS，从任意的W就开始，不停的把临街的部分用 “ . “代替，于是一次DFS之后，与初始的这个W链接的所有W都被替换成了” . “。继续下去，直到图中不再存在W为止。总共进行的DFS次数就是答案。8个方向共对应了8种状态的转义，单个格子作为DFS的参数至多呗调用一次。所以时间复杂度就是O(8×N×M)=O(M×N)。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜园子中的积水，DFS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span>N, M;</span><br><span class="line"><span class="keyword">char</span> field[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    field[x][y] = <span class="string">'.'</span>;<span class="comment">//标记为访问过</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>; dy++)<span class="comment">//周围的区域</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> newX = x + dx;</span><br><span class="line">            <span class="keyword">int</span> newY = y + dy;</span><br><span class="line">            <span class="comment">//判断其周围的区域，1，是否在院子里，2，是否有积水，</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span>&lt;=newX&amp;&amp;newX&lt;N&amp;&amp;<span class="number">0</span>&lt;=newY&amp;&amp;newY&lt;M&amp;&amp;field[newX][newY]==<span class="string">'W'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                DFS(newX, newY);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N&gt;&gt;M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; field[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//全部都输入完，开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (field[i][j]==<span class="string">'W'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                DFS(i, j);</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input</span><br><span class="line"><span class="number">10</span> <span class="number">12</span></span><br><span class="line">W........WW.</span><br><span class="line">.WWW.....WWW</span><br><span class="line">....WW...WW.</span><br><span class="line">.........WW.</span><br><span class="line">.........W..</span><br><span class="line">..W......W..</span><br><span class="line">.W.W.....WW.</span><br><span class="line">W.W.W.....W.</span><br><span class="line">.W.W......W.</span><br><span class="line">..W.......W.</span><br><span class="line"></span><br><span class="line">Sample Output</span><br><span class="line"><span class="number">3</span></span><br><span class="line">有三个池塘，一个在左上角，一个在左下角，一个在右侧。</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> POJ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> DFS </tag>
            
            <tag> POJ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1064 Complete Binary Search Tree (30)</title>
      <link href="//posts/d57071f2/"/>
      <url>//posts/d57071f2/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1064" target="_blank" rel="noopener">题目链接</a><br>给定一串序列，已知这个序列能够成完全二叉搜索树，求出这个二叉搜索树的层次遍历。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是一个正整数N，第二行是N个非负整数。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出这个完全二叉搜索树的层次遍历序列，数字之间由一个空格隔开。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>已知这是一棵完全二叉树，也是一棵二叉搜索树。</li><li>二叉搜索树的中序遍历序列满足：按键值从小到大排列。所以将给定序列从小到大排序即可得到中序遍历。</li><li>在完全二叉树中：用数组表示的话，编号为i节点的做孩子序号为2*i，右孩子为2*i+1。</li><li>通过递归重建二叉树。</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>通过中序重建二叉树的思想如下：</p><ol><li>假设一共有10个节点，最小的那个数一定在最左下角，是二叉搜索树中序遍历的第一个数。</li><li>第二小的是最小的节点的父节点。</li><li>第三小的是第二小的右孩子。</li></ol><p>如果用数组存储这个树。最小节点在数组中是第8个，8是2^N，满足2^N&lt;=10，且N最大。（因为在最左下角）。</p><p>写的比较绕，看代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat_tree</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root&gt;N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lchild = root * <span class="number">2</span>, rchild = root * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    creat_tree(lchild);</span><br><span class="line">    rebuild_tree[root] = node[pos++];</span><br><span class="line">    creat_tree(rchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> node[<span class="number">1001</span>], rebuild_tree[<span class="number">1001</span>];</span><br><span class="line"><span class="keyword">int</span> N, pos = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat_tree</span><span class="params">(<span class="keyword">int</span> root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root&gt;N)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> lchild = root * <span class="number">2</span>, rchild = root * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    creat_tree(lchild);</span><br><span class="line">    rebuild_tree[root] = node[pos++];</span><br><span class="line">    creat_tree(rchild);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; node[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(node, node + N, cmp);</span><br><span class="line">    creat_tree(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; rebuild_tree[i];</span><br><span class="line">        <span class="keyword">if</span> (i&lt;N)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt", "r", stdin);</span></span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">0</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">8</span> <span class="number">1</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">0</span> <span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 完全二叉树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1063 Set Similarity (25)</title>
      <link href="//posts/4b14e451/"/>
      <url>//posts/4b14e451/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1063" target="_blank" rel="noopener">题目链接</a><br>求两个集合的相似度。<br><a id="more"></a><br>给定两组整数，其相似度定义为Nc/Nt*100%，Nc是两组数相同数字的个数 ，Nt是两组数的不同数字总个数。要求计算出任意给定两组数的相似度。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是一个正整数N，表示有多少组。</p><p>在随后的N行中，每行第一个数M表示该组有多少个数，接着是M个整数。</p><p>输入完所有的集合之后，给出正整数K，接着是K行查询，每个查询给出两个数，求这两组的相似度。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个查询，在一行中输出集合的像是对，精确到小数点后一位。</p><p>比如对于样例中的1，2组，一共有4个不同的数字（5,87,99,101）一共有2个数字在两组都有，为（87,101）所以为50%。<br>对于1,3组，一共有（5,18,87,99,101,135）共同的数字为（99,101）所以相似度为2/6=33.3%</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>使用set，在头文件set中。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>set.size() 返回当前set容器中元素的个数。</p><p>set.find() 返回给定制所在的迭代器，如果没有找到则返回set.end()   用法  set.find(1)。</p><p>set.count()  用来查找set中某个键值出现的次数，其实这个函数不是特别实用，因为一个键值只能在set中出现0次或者1次。用法   set.count(1)。</p><p>插入，set.insert(Key_value)   将Key_value插入到set中  。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; num[<span class="number">51</span>];</span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K;</span><br><span class="line">    <span class="keyword">int</span> set1, set2;</span><br><span class="line">    <span class="keyword">int</span> cnt;<span class="comment">//计数有多少个相同的数字</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; set1 &gt;&gt; set2;</span><br><span class="line">        <span class="keyword">if</span> (num[set1].size() &lt; num[set2].size())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it = num[set1].begin(); it != num[set1].end(); it++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[set2].count(*it))</span><br><span class="line">                    cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> it = num[set2].begin(); it != num[set2].end(); it++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (num[set1].count(*it))</span><br><span class="line">                    cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//float temp = cnt*100.0 / (num[set1].size() + num[set2].size() - cnt);</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%.1f%%\n"</span>, cnt*<span class="number">100.0</span> / (num[set1].size() + num[set2].size() - cnt));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">            num[i + <span class="number">1</span>].insert(temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">99</span> <span class="number">87</span> <span class="number">101</span></span><br><span class="line"><span class="number">4</span> <span class="number">87</span> <span class="number">101</span> <span class="number">5</span> <span class="number">87</span></span><br><span class="line"><span class="number">7</span> <span class="number">99</span> <span class="number">101</span> <span class="number">18</span> <span class="number">5</span> <span class="number">135</span> <span class="number">18</span> <span class="number">99</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">50.0</span>%</span><br><span class="line"><span class="number">33.3</span>%</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ STL </tag>
            
            <tag> C++ set </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1049 Counting Ones (30)</title>
      <link href="//posts/7987c544/"/>
      <url>//posts/7987c544/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1049" target="_blank" rel="noopener">题目链接</a><br>给出一个正整数N，求1~N之间的十进制形式的所有数中，1出现的次数。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一个正整数N。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>求1~N之间的十进制形式的所有数中，1出现的次数。</p><p>比如输入12，从1~12有：1,10,11,12。这4个数中一共出现了5个1。因此输出5。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>这个题是用乘法原理和加法原理去做的。<br>为了方便分析，举个例子。这里有一个五位数abcde，现只考虑百位数c。</p><p>分三种情况：</p><ol><li>如果c=0，则1出现的次数为ab*100。即：c前面的数*c对应的系数。以N=12045为例：百位数出现1的有：00100~00199（100个），01100~01199（100个），以此类推，即从001xx~111xx，共12组100个。</li><li>如果c=1，则出现的次数为ab*100+de+1。即：c前面的数*c对应的系数+c后面的数+1。以12145为例：百位数出现1的有001xx~111xx，共12组100个，再加上12100~12145，共45+1=46个。</li><li>如果c&gt;1，则出现的次数为(ab+1)*100，即：(c前面的数+1)*c对应的系数。以12345为例：百位出现1的有001xx~121xx，共13组100个。</li></ol><p>其他位数同理。最后加起来即可得结果。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>,now=<span class="number">0</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; num/i!=<span class="number">0</span>; i=i*<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        left = num / (i * <span class="number">10</span>);</span><br><span class="line">        now = num / i % <span class="number">10</span>;</span><br><span class="line">        right = num%i;</span><br><span class="line">        <span class="keyword">if</span> (now == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res += left*i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (now == <span class="number">1</span>)</span><br><span class="line">            res += left*i + right + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res += (left + <span class="number">1</span>)* i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt", "r", stdin);</span></span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"><span class="number">12</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数学问题 </tag>
            
            <tag> 乘法原理 </tag>
            
            <tag> 加法原理 </tag>
            
            <tag> 分类讨论 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>求最长上升子序列的长度</title>
      <link href="//posts/eacf7b1a/"/>
      <url>//posts/eacf7b1a/</url>
      <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>有一个长为n的数列 a0,a1,a2…an-1 ，求出这个序列中最长的上升子序列的长度，上升子序列指的是对于任意的i&lt;j，都有ai&lt;aj的子序列。<br><a id="more"></a></p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>假设存在一个序列a[1..9] = 2 1 5 3 6 4 8 9 7，可以看出来它的LIS长度为5。</p><h1 id="O（n-2）解法"><a href="#O（n-2）解法" class="headerlink" title="O（n^2）解法"></a>O（n^2）解法</h1><p>递推关系如下：</p><p>定义dp[i]=以ai为末尾的最长上升子序列的长度。</p><p>以ai为结尾的上升至序列是</p><ol><li>只包含ai的子序列。</li><li>在满足j&lt;i并且aj&lt;ai的以aj为结尾的上升子序列末尾，追加上ai后得到的子序列。</li></ol><p>这二者之一。因此能得到如下递推关系：</p><p>dp[i]=max{1,dp[j]+1} (j&lt;i且aj&lt;ai)</p><p>用这个递推公式可以在O(n^2)时间内解决问题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[MAX_N];</span><br><span class="line"><span class="keyword">int</span> dp[MAX_N];<span class="comment">//dp数组</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;<span class="comment">//至少这个数本身是一个LIS</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[j]&lt;a[i])</span><br><span class="line">                dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res = max(res,dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="O-nlogn-解法"><a href="#O-nlogn-解法" class="headerlink" title="O(nlogn)解法"></a>O(nlogn)解法</h1><p>前面我们用DP求得针对最末尾元素的最长子序列，如果子序列的长度相同，那么<strong>最末尾的元素较小</strong>的在之后会更有优势，所以我们反过来用DP针对<strong>长度相同</strong>情况下最小的末尾元素进行求解。</p><p>dp[i]=长度为i+1的上升子序列中末尾元素的最小值（不存在的话就是INF）</p><p>来看如何用DP更新这个数组。</p><p>一开始，全部的dp[i]的值都初始化为INF，然后由前到后逐个考虑数列的元素。对于每个aj，如果i=0，或者dp[i-1]&lt;aj的话，就用dp[i]=min(dp[i],aj)进行更新。最终找出使得dp[i]&lt;INF的最大的i+1就是结果了。</p><p>但是这个方法用DP直接实现的话，还是与前面的方法一样，在O(n^2)的时间内给出结果，但是这一算法还可以进一步优化。</p><p>首先dp数列中，除INF之外都是单调递增的，所以可以知道对于每个aj最多只需要1次更新，对于这次更新应该在什么位置，不必逐个遍历，可以利用二分搜索，这样就可以在O（nlogn）的时间内求出结果。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fill(dp, dp + n, INF);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        * lower_bound(dp, dp + n, a[i]) = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; lower_bound(dp, dp + n, INF) - dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="lower-bound"><a href="#lower-bound" class="headerlink" title="lower_bound"></a>lower_bound</h2><p>lower_bound这个函数从已排好的序列a中利用二分搜索找出指向满足ai&gt;=k的ai的最小的指针。类似的函数还有upper_bound，它的功能是求出指向满足ai&gt;k的最小的指针。</p><p>比如求长度为n的有序数组a中k的个数，可以用</p><p>upper_bound(a, a + n, k) - lower_bound(a, a + n, k);</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>假设存在一个序列d[1..9] = 2 1 5 3 6 4 8 9 7，可以看出来它的LIS长度为5。</p><p>下面一步一步试着找出它。</p><p>我们定义一个序列B，然后令 i = 1 to 9 逐个考察这个序列。此外，我们用一个变量Len来记录现在最长算到多少了。</p><ol><li>把d[1]有序地放到B里，令B[1] = 2，就是说当只有1一个数字2的时候，长度为1的LIS的最小末尾是2。这时Len=1。</li><li>把d[2]有序地放到B里，令B[1] = 1，就是说长度为1的LIS的最小末尾是1，d[1]=2已经没用了。这时Len=1。</li><li>d[3] = 5，d[3]&gt;B[1]，所以令B[1+1]=B[2]=d[3]=5，就是说长度为2的LIS的最小末尾是5。这时候B[1..2] = 1, 5，Len＝2。</li><li>d[4] = 3，它正好加在1,5之间，放在1的位置显然不合适，因为1小于3，长度为1的LIS最小末尾应该是1，这样很容易推知，长度为2的LIS最小末尾是3，于是可以把5淘汰掉，这时候B[1..2] = 1, 3，Len = 2。</li><li>d[5] = 6，它在3后面，因为B[2] = 3, 而6在3后面，于是很容易可以推知B[3] = 6, 这时B[1..3] = 1, 3, 6， Len = 3 。</li><li>d[6] = 4，你看它在3和6之间，于是就可以把6替换掉，得到B[3] = 4。B[1..3] = 1, 3, 4， Len继续等于3。</li><li>d[7] = 8，它很大，比4大。于是B[4] = 8。Len变成4。</li><li>d[8] = 9，得到B[5] = 9。Len=5。</li><li>d[9] = 7，它在B[3] = 4和B[4] = 8之间，所以，最新的B[4] =7，B[1..5] = 1, 3, 4, 7, 9，Len = 5。</li></ol><p>于是知道了LIS的长度为5。</p><p>注意。这个1,3,4,7,9不是LIS，它只是存储的对应长度LIS的最小末尾。有了这个末尾，我们就可以一个一个地插入数据。虽然最后一个d[9] = 7更新进去对于这组数据没有什么意义，但是如果后面再出现两个数字 8 和 9，那么就可以把8更新到d[5], 9更新到d[6]，得出LIS的长度为6。</p><p>然后应该发现一件事情了：在B中插入数据是有序的，而且是进行替换而不需要挪动——也就是说，我们可以使用二分查找，将每一个数字的插入时间优化到O(logn)，于是算法的时间复杂度就降低到了O(nlogn)。</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 最长上升子序列 </tag>
            
            <tag> DP </tag>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1045 Favorite Color Stripe (30)</title>
      <link href="//posts/904123e6/"/>
      <url>//posts/904123e6/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1045" target="_blank" rel="noopener">题目链接</a><br>喜欢的彩条的最大长度。<br><a id="more"></a><br>抽象出来可以理解为求序列的最长上升子序列的长度，但是允许元素重复出现。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是一个正整数，他是涉及到的颜色总数，从1~N编号。</p><p>第二行以一个正整数M开头，后跟M个喜欢的颜色。</p><p>最后，第三行以一个正整数L开头，表示给定条带的长度，后面是L个颜色。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>只需要输出最喜欢的彩条的最大长度。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>这个题其实是一个最长上升子序列的问题。</p><p>关于更多信息，请看<a href="../eacf7b1a/">求最长上升子序列的长度</a></p><p>递推关系如下：</p><p>定义dp[i]=以ai为末尾的最长上升子序列的长度。</p><p>以ai为结尾的上升至序列是</p><ol><li>只包含ai的子序列。</li><li>在满足j&lt;i并且aj&lt;ai的以aj为结尾的上升子序列末尾，追加上ai后得到的子序列。</li></ol><p>这二者之一。因此能得到如下递推关系：</p><p>dp[i]=max{1,dp[j]+1} (j&lt;i且aj&lt;ai)</p><p>用这个递推公式可以在O(n^2)时间内解决问题。</p><p>剩下的关键是确定颜色间的大小关系。即人为的构建后面的颜色的值大于前面颜色的值。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, like[<span class="number">201</span>] = &#123;<span class="number">0</span>&#125;, stripe[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, L;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">int</span> color;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; color;</span><br><span class="line">        like[color] = i;<span class="comment">//人为的构建颜色的大小关系</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> like_num=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; color;</span><br><span class="line">        <span class="keyword">if</span> (like[color])</span><br><span class="line">        &#123;</span><br><span class="line">            stripe[like_num++] = like[color];<span class="comment">//只保存喜欢的，反正不喜欢的也得剪去</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">10001</span>];</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; like_num; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i] = <span class="number">1</span>;<span class="comment">//至少喜欢一个</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(stripe[j] &lt;= stripe[i])<span class="comment">//需要添加了</span></span><br><span class="line">                dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        res = max(res, dp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">12</span> <span class="number">2</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">6</span> <span class="number">3</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">7</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
            <tag> 最长上升子序列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1068 Find More Coins (30)</title>
      <link href="//posts/5c4b01e5/"/>
      <url>//posts/5c4b01e5/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1068" target="_blank" rel="noopener">题目链接</a><br>在一堆硬币中找到总面额为给定值的一些硬币。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行包括两个正整数，N，表示硬币总数。M，表示金额。<br>第二行是N个硬币的面值，均是正整数。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出 V1 &lt;= V2 &lt;= … &lt;= Vk ，使 V1 + V2 + … + Vk = M。 数字之间由一个空格隔开。<br>如果解决方案不唯一，则输出最小的序列（即使每个数尽可能小）。如果没有解决方案，输出No Solution。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>01背包，动态规划去做。</p><p>假设F(N, M)表示不超过面值M, 而且从前面N个硬币中挑选硬币值能得到的最大硬币面值总和, 可以得到如下递归公式:</p><p>F(N, M) = max{ F(N – 1, M), F(N – 1, M – V(N)) + V(N) }</p><p>其中 V(N)表示第N个硬币的面值。如果最后F(N, M) == M。那么就说明我们可以找到这样一组硬币, 使得他们的面值总和恰好等于M。</p><p>剩下的问题是如何记录路径, 也就是怎么记录挑选出哪些硬币?</p><p>另开一块空间，在我的代码里为bool selected[N][M],如果其值为true，则表示从前N个硬币中选出一组得到最多不超过M总面额的硬币中，包括了第N个硬币。</p><p>01背包为了缩减空间复杂度，需要从后往前推。<br>所以代码应该为<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = M; j &gt;= coin[i]; j--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[j] &lt;= dp[j - coin[i]] + coin[i])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[j] = dp[j - coin[i]] + coin[i];</span><br><span class="line">            selected[i][j] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后，题目要求使序列的字典序最小。也就是说对于 2，2，5，和 1，3，5 这样的序列，要求输出 1，3，5。因此需要在之前就把输入的硬币面值降序排列，先把面额大的硬币放进去，这样使最后剩下的空尽可能小，进而使字典序最小。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">101</span>];<span class="comment">//dp是递推数组，表示当前情况下，最大重量为dp[i]的时候，能获得的最大重量。</span></span><br><span class="line"><span class="keyword">int</span> coin[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">bool</span> selected[<span class="number">10001</span>][<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//表示从前面N个硬币中选出一组得到最多不超过M重量里面，是否包括了第N硬币</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, M;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; coin[i];<span class="comment">//输入硬币信息</span></span><br><span class="line">    &#125;</span><br><span class="line">    sort(coin, coin + N, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = M; j &gt;= coin[i]; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[j] &lt;= dp[j - coin[i]] + coin[i])</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j] = dp[j - coin[i]] + coin[i];</span><br><span class="line">                selected[i][j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dp[M] != M)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res;</span><br><span class="line">    <span class="keyword">int</span> weight = M, num = N;<span class="comment">//weight表示当前重量，num表示在前num个硬币中选择</span></span><br><span class="line">    <span class="keyword">while</span> (weight&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (selected[num][weight])<span class="comment">//前num个硬币中，重量不超过weight的组合中，包含了第num个硬币</span></span><br><span class="line">        &#123;</span><br><span class="line">            res.push_back(coin[num]);</span><br><span class="line">            weight -= coin[num];<span class="comment">//如果包含，看weight-coin[num]里的情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        num--;<span class="comment">//第num个硬币访问过了，自减</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; res.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt", "r", stdin);</span></span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span>:</span><br><span class="line"><span class="number">8</span> <span class="number">9</span></span><br><span class="line"><span class="number">5</span> <span class="number">9</span> <span class="number">8</span> <span class="number">7</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line">Sample Output <span class="number">1</span>:</span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">2</span>:</span><br><span class="line"><span class="number">4</span> <span class="number">8</span></span><br><span class="line"><span class="number">7</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line">Sample Output <span class="number">2</span>:</span><br><span class="line">No Solution</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 01背包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1072 Gas Station (30)</title>
      <link href="//posts/67237530/"/>
      <url>//posts/67237530/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1072" target="_blank" rel="noopener">题目链接</a><br>求加油站的位置。<br><a id="more"></a><br>一个加油站必须建立在这样的一个位置，使得该站与任何住宅房屋之间的最小距离，尽可能远，但是还得保证所有的房屋都在其服务范围之内。</p><p>先给出该城市的地图和加油站的几个候选地点，要求你给出建议。如果有多个解决方案，则输出到所有房屋的平均距离最小的解决方案，如果仍然不唯一，则输出索引号最小的解决方案。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行包括4个正整数，N，表示房屋的总数，M，表示加油站候选地点的总数，K，表示连接房屋和加油站的道路的数量。Ds，表示加油站的最大服务范围。假定房屋的编号是[1，N]，所有候选地点的编号是[G1，GM]</p><p>然后是K条线，每条线的描述格式为</p><p>P1 P2 Dist</p><p>P1和P2是道路的两端，可以是门牌号或者加油站的号码，Dist表示道路的长度。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>在第一行输出最佳位置的索引号。在第二行输出解决方案和所有房屋之间的最小距离和平均距离。数字之间空一个空格，保留一位小数。<br>如果解决方案不存在，输出  “No Solution”</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>对M个加油站分别使用Dijkstra算法，，求出最短距离。</li><li>比较，判断，求出最优解。</li><li>按要求输出。</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li>加油站之间也是有道路连接的，所以在计算最短路径的时候，也要把加油站算上。</li><li>对输入进行判断，有可能有 G1 G1 10  这样的输入，注意筛选最小值。</li><li>时间限制是200ms，Floyd是肯定不行的，要用Dijkstra。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_NUM 2147483646</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K, Ds;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">1011</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M &gt;&gt; K &gt;&gt; Ds;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g(N + M + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(N + M + <span class="number">1</span>, MAX_NUM/<span class="number">2</span>));<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N+M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        g[i][i] = <span class="number">0</span>;<span class="comment">//对角线初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> start_string, end_string;</span><br><span class="line">    <span class="keyword">int</span> input_dis;</span><br><span class="line">    <span class="keyword">int</span> start_num, end_num;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; start_string &gt;&gt; end_string &gt;&gt; input_dis;</span><br><span class="line">        <span class="keyword">if</span> (start_string[<span class="number">0</span>]==<span class="string">'G'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            start_string=start_string.substr(<span class="number">1</span>);<span class="comment">//提取后面的数字</span></span><br><span class="line">            start_num = stoi(start_string)+N;<span class="comment">//转为数字</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            start_num = stoi(start_string);<span class="comment">//转为数字</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (end_string[<span class="number">0</span>]==<span class="string">'G'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            end_string = end_string.substr(<span class="number">1</span>);</span><br><span class="line">            end_num = stoi(end_string)+N;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            end_num = stoi(end_string);</span><br><span class="line">        &#125;</span><br><span class="line">        g[end_num][start_num] = g[start_num][end_num] = min(g[start_num][end_num], input_dis);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">-1</span>;<span class="comment">//表示未找到</span></span><br><span class="line">    <span class="keyword">double</span> res_dis = <span class="number">-1</span>, res_aver =MAX_NUM/<span class="number">2</span>;<span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> start_point = N+<span class="number">1</span>; start_point &lt;= N+M; start_point++)<span class="comment">//对每个位置进行Dij求最短路径</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dis = g[start_point];</span><br><span class="line">        fill(visit, visit + <span class="number">1011</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//dis[start_point] = 0;//从i开始</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N+M; i++)<span class="comment">//dij算法</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> u = <span class="number">-1</span>, min_dis = MAX_NUM/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N+M; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visit[j]&amp;&amp;dis[j]&lt;min_dis)</span><br><span class="line">                &#123;</span><br><span class="line">                    u = j;</span><br><span class="line">                    min_dis = dis[j];<span class="comment">//找到一个最近的</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (u == <span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            visit[u] = <span class="literal">true</span>;<span class="comment">//将其标记为访问</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= N+M; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (!visit[k]&amp;&amp;dis[k]&gt;dis[u]+g[u][k])</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[k] = dis[u] + g[u][k];<span class="comment">//更新dis数组</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> min_dis=MAX_NUM/<span class="number">2</span>, min_aver=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (dis[i]&gt;Ds)<span class="comment">//有一个超出最大范围都不行</span></span><br><span class="line">            &#123;</span><br><span class="line">                min_dis = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dis[i]&lt;min_dis)</span><br><span class="line">            &#123;</span><br><span class="line">                min_dis = dis[i];</span><br><span class="line">            &#125;</span><br><span class="line">            min_aver += <span class="number">1.0</span>*dis[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (min_dis==<span class="number">-1</span>)<span class="comment">//没找到</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;  <span class="comment">//下一个加油站</span></span><br><span class="line">        &#125;</span><br><span class="line">        min_aver /= N;</span><br><span class="line">        <span class="keyword">if</span> (min_dis&gt;res_dis)<span class="comment">//如果此加油站距离最近的房屋 大于目前已知的最近距离</span></span><br><span class="line">        &#123;</span><br><span class="line">            res = start_point;<span class="comment">//是这个点</span></span><br><span class="line">            res_dis = min_dis;</span><br><span class="line">            res_aver = min_aver;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (min_dis==res_dis&amp;&amp;min_aver&lt;res_aver)<span class="comment">//距离相同但是平均距离更短</span></span><br><span class="line">        &#123;</span><br><span class="line">            res = start_point;</span><br><span class="line">            res_aver = min_aver;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (res==<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"G%d\n%.1f %.1f"</span>, res - N, res_dis, res_aver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span>:</span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">11</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> G1 <span class="number">4</span></span><br><span class="line"><span class="number">1</span> G2 <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> G2 <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> G3 <span class="number">2</span></span><br><span class="line"><span class="number">4</span> G1 <span class="number">3</span></span><br><span class="line">G2 G1 <span class="number">1</span></span><br><span class="line">G3 G2 <span class="number">2</span></span><br><span class="line">Sample Output <span class="number">1</span>:</span><br><span class="line">G1</span><br><span class="line"><span class="number">2.0</span> <span class="number">3.3</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">2</span>:</span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span> G1 <span class="number">9</span></span><br><span class="line"><span class="number">2</span> G1 <span class="number">20</span></span><br><span class="line">Sample Output <span class="number">2</span>:</span><br><span class="line">No Solution</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1076 Forwards on Weibo (30)</title>
      <link href="//posts/9486a851/"/>
      <url>//posts/9486a851/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1076" target="_blank" rel="noopener">题目链接</a><br>微博的关注者。<br><a id="more"></a></p><p>给定一个社交网络，在只计算L层的间接关注者的情况下，求任一特定用户的最大潜在转发量。</p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是两个正整数N，表示用户数，L，给定的间接关注者的层数。<br>然后是N行，每一行的格式是</p><p>M[i] user_list[i]</p><p>其中M[i]表示用户i的关注数。user_list[i]是具体关注列表， 共M[i]个。</p><p>最后给出K，和K个数字，表示用户ID，要求对每个用户ID进行查询，查询其L层粉丝数。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个ID，输出其L层共多少个粉丝。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>BFS。<br>这道题抽象的概述就是，广度优先搜索K轮，一共访问了多少个节点。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>注意：其中M[i]表示用户i的关注数。user_list[i]是具体关注列表， 共M[i]个。因此i是其关注者的粉丝，所以在构建图的时候，要反着写。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; g;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">int</span> level;</span><br><span class="line">&#125;fans;</span><br><span class="line"><span class="keyword">int</span> N, L;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(fans follow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> visit[<span class="number">1001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">queue</span>&lt;fans&gt; q;</span><br><span class="line">    q.push(follow);</span><br><span class="line">    visit[follow.id] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;<span class="comment">//计数</span></span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        follow = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; g[follow.id].size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> next_id = g[follow.id][i];</span><br><span class="line">            <span class="keyword">if</span> (!visit[next_id]&amp;&amp;follow.level&lt;L)</span><br><span class="line">            &#123;</span><br><span class="line">                q.push(&#123; next_id,follow.level + <span class="number">1</span> &#125;);<span class="comment">//把next_id压入队列中</span></span><br><span class="line">                visit[next_id] = <span class="literal">true</span>;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> M, input_id;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; L;</span><br><span class="line">    g.resize(N+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; input_id;</span><br><span class="line">            g[input_id].push_back(i);<span class="comment">//注意这里要反着写，因为M[i]是关注列表，即用户i是谁的粉丝。</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> K;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; K;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input_id;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;BFS(&#123; input_id,<span class="number">0</span> &#125;)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"><span class="number">7</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">5</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">6</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1075 PAT Judge (25)</title>
      <link href="//posts/73f16db0/"/>
      <url>//posts/73f16db0/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1075" target="_blank" rel="noopener">题目链接</a><br>输出PAT的排名。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是三个正整数，N表示用户的数量，K，问题的总数，M提交的总数。<br>假设用户的ID是5位数字，从00001~N，问题的ID从1~K。<br>下一行包括K个正整数，分别对应第i个问题的满分。然后M行按照以下格式给出提交信息</p><p>user_id　problem_id　partial_score_obtained</p><p>其中partial_score_obtained，如果提交不能通过编译，则为-1，或者是[0~该题满分]范围内的整数，一行中所有数字用空格分开</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>按照</p><p>rank　user_id total_score　s [1] … s [K]</p><p>的格式输出。rank是由total_score来算的，相同总分的用户排名相同，s[i]是第i个问题获得的分数。如果用户从未提交，则必须在该位置打印-，如果提交了多个，输出最高的分数。<br>排名按照第一名在前的顺序，排名相同的用户，按照完全解决的问题的数量以非递增排序（多的在前面），如果还相同，按照ID递增的顺序排序。对于那些没有提交可以编译通过的代码的或者从未提交过的，则不在排行榜上显示。<br>保证至少有一个用户可以先是在排行榜上。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li>不用判断分数是否会超过FullMark</li><li>如果学生A被输出，他曾提交过某题x，但是没通过即输入“A x -1”，x成绩输出为0</li><li>学生A被输出，当且仅当A至少有一道题提交并且通过了编译。可以得0分，但是得通过编译。</li><li>按照总分递减、答对递减、ID递增的顺序排列，仅列出有成绩的学生（0 - - -也算，但是- - - -不算）</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ID;<span class="comment">//注意ID初值的问题，当然，如果在输出的时候写if(user[i].show)则不用在这里添加初值，否则ID默认初值为0，会排在所有0分学生的前面。</span></span><br><span class="line">    <span class="keyword">int</span> score[<span class="number">6</span>] = &#123; <span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-2</span> &#125;;</span><br><span class="line">    <span class="keyword">int</span> solved = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> total_score = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rank;</span><br><span class="line">    <span class="keyword">bool</span> show = <span class="literal">false</span>;</span><br><span class="line">&#125;u;</span><br><span class="line"><span class="built_in">vector</span>&lt;u&gt; user;</span><br><span class="line"><span class="keyword">int</span> N, K, M;</span><br><span class="line"><span class="keyword">int</span> full_mark[<span class="number">6</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(u a, u b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.total_score != b.total_score)</span><br><span class="line">        <span class="keyword">return</span> a.total_score &gt; b.total_score;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.solved != b.solved)</span><br><span class="line">        <span class="keyword">return</span> a.solved &gt; b.solved;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.ID &lt; b.ID;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; K &gt;&gt; M;</span><br><span class="line">    user.resize(N + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; full_mark[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> user_ID, problem_ID, get_score;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; user_ID &gt;&gt; problem_ID &gt;&gt; get_score;</span><br><span class="line">        user[user_ID].ID = user_ID;</span><br><span class="line">        <span class="keyword">if</span> (user[user_ID].score[problem_ID]&lt;get_score)</span><br><span class="line">        &#123;</span><br><span class="line">            user[user_ID].score[problem_ID] = get_score;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= K; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (user[i].score[j] &gt;= <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                user[i].total_score += user[i].score[j];</span><br><span class="line">                user[i].show = <span class="literal">true</span>;<span class="comment">//有一个题得0分及以上就可以输出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (user[i].score[j] == full_mark[j])</span><br><span class="line">            &#123;</span><br><span class="line">                user[i].solved++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(user.begin() + <span class="number">1</span>, user.end(), cmp);</span><br><span class="line">    user[<span class="number">1</span>].rank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        user[i].rank = i;</span><br><span class="line">        <span class="keyword">if</span> (user[i].total_score == user[i - <span class="number">1</span>].total_score)</span><br><span class="line">        &#123;</span><br><span class="line">            user[i].rank = user[i - <span class="number">1</span>].rank;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (user[i].show)<span class="comment">//注意这里必须这么写，如果写for (int i = 1; i &lt;=N&amp;&amp;user[i].show ; i++)则在同样都是0分，这个时候小号在前，大号在后，但是小号不该被输出，则会有问题</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %05d %d"</span>, user[i].rank, user[i].ID, user[i].total_score);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= K; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (user[i].score[j] &gt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">' '</span> &lt;&lt; user[i].score[j];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (user[i].score[j] == <span class="number">-1</span>)</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">" 0"</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; <span class="string">" -"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"3.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">20</span> <span class="number">25</span> <span class="number">25</span> <span class="number">30</span></span><br><span class="line"><span class="number">00002</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">00002</span> <span class="number">2</span> <span class="number">-1</span></span><br><span class="line"><span class="number">00001</span> <span class="number">1</span> <span class="number">-1</span></span><br><span class="line"><span class="number">00001</span> <span class="number">2</span> <span class="number">-1</span></span><br><span class="line">输出应该为</span><br><span class="line"><span class="number">1</span> <span class="number">00002</span> <span class="number">0</span> - <span class="number">0</span> - -</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"><span class="number">7</span> <span class="number">4</span> <span class="number">20</span></span><br><span class="line"><span class="number">20</span> <span class="number">25</span> <span class="number">25</span> <span class="number">30</span></span><br><span class="line"><span class="number">00002</span> <span class="number">2</span> <span class="number">12</span></span><br><span class="line"><span class="number">00007</span> <span class="number">4</span> <span class="number">17</span></span><br><span class="line"><span class="number">00005</span> <span class="number">1</span> <span class="number">19</span></span><br><span class="line"><span class="number">00007</span> <span class="number">2</span> <span class="number">25</span></span><br><span class="line"><span class="number">00005</span> <span class="number">1</span> <span class="number">20</span></span><br><span class="line"><span class="number">00002</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">00005</span> <span class="number">1</span> <span class="number">15</span></span><br><span class="line"><span class="number">00001</span> <span class="number">1</span> <span class="number">18</span></span><br><span class="line"><span class="number">00004</span> <span class="number">3</span> <span class="number">25</span></span><br><span class="line"><span class="number">00002</span> <span class="number">2</span> <span class="number">25</span></span><br><span class="line"><span class="number">00005</span> <span class="number">3</span> <span class="number">22</span></span><br><span class="line"><span class="number">00006</span> <span class="number">4</span> <span class="number">-1</span></span><br><span class="line"><span class="number">00001</span> <span class="number">2</span> <span class="number">18</span></span><br><span class="line"><span class="number">00002</span> <span class="number">1</span> <span class="number">20</span></span><br><span class="line"><span class="number">00004</span> <span class="number">1</span> <span class="number">15</span></span><br><span class="line"><span class="number">00002</span> <span class="number">4</span> <span class="number">18</span></span><br><span class="line"><span class="number">00001</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">00001</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">00005</span> <span class="number">2</span> <span class="number">-1</span></span><br><span class="line"><span class="number">00004</span> <span class="number">2</span> <span class="number">0</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">1</span> <span class="number">00002</span> <span class="number">63</span> <span class="number">20</span> <span class="number">25</span> - <span class="number">18</span></span><br><span class="line"><span class="number">2</span> <span class="number">00005</span> <span class="number">42</span> <span class="number">20</span> <span class="number">0</span> <span class="number">22</span> -</span><br><span class="line"><span class="number">2</span> <span class="number">00007</span> <span class="number">42</span> - <span class="number">25</span> - <span class="number">17</span></span><br><span class="line"><span class="number">2</span> <span class="number">00001</span> <span class="number">42</span> <span class="number">18</span> <span class="number">18</span> <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="number">5</span> <span class="number">00004</span> <span class="number">40</span> <span class="number">15</span> <span class="number">0</span> <span class="number">25</span> -</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1074 Reversing Linked List (25)</title>
      <link href="//posts/892b22de/"/>
      <url>//posts/892b22de/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1074" target="_blank" rel="noopener">题目链接</a><br>链表的逆置。给出一个常数K和一个单链表L。对于链表上每K个节点，将其逆置。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>例如，假设L是1→2→3→4→5→6，如果K = 3，那么你必须输出3→2→1→6→5→4; 如果K = 4，则必须输出4→3→2→1→5→6。</p><p>输入的第一行包括 首节点的地址，一个正整数N，表示节点的总数，K，要求逆转的个数。NULL表示为-1。</p><p>接着是K行，格式为</p><p>地址 数据 下一个节点的地址</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出生成的有序链表，每个节点占一行，格式同上。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>可以采用链表的线性存储，使用vector进行存储和逆置。<br>注意，这类题常有的大坑是，链表的长度不一定是N，虽然有N个节点，但是这些节点并不都在链表上。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> first, k, n;</span><br><span class="line"><span class="keyword">int</span> LinkData[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> LinkNext[<span class="number">100001</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; L;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; first &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> addr, node_data, next_addr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; addr &gt;&gt; node_data &gt;&gt; next_addr;</span><br><span class="line">        LinkData[addr] = node_data;</span><br><span class="line">        LinkNext[addr] = next_addr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = first; i != <span class="number">-1</span>; i = LinkNext[i])</span><br><span class="line">    &#123;</span><br><span class="line">        L.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> length = L.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i*k+k &lt;= length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        reverse(L.begin() + i*k, L.begin() + i*k + k);</span><br><span class="line">    &#125;</span><br><span class="line">    length = L.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>, L[i], LinkData[L[i]], L[i + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%05d %d -1"</span>, L[length], LinkData[L[length]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"><span class="number">00100</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">00000</span> <span class="number">4</span> <span class="number">99999</span></span><br><span class="line"><span class="number">00100</span> <span class="number">1</span> <span class="number">12309</span></span><br><span class="line"><span class="number">68237</span> <span class="number">6</span> <span class="number">-1</span></span><br><span class="line"><span class="number">33218</span> <span class="number">3</span> <span class="number">00000</span></span><br><span class="line"><span class="number">99999</span> <span class="number">5</span> <span class="number">68237</span></span><br><span class="line"><span class="number">12309</span> <span class="number">2</span> <span class="number">33218</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">00000</span> <span class="number">4</span> <span class="number">33218</span></span><br><span class="line"><span class="number">33218</span> <span class="number">3</span> <span class="number">12309</span></span><br><span class="line"><span class="number">12309</span> <span class="number">2</span> <span class="number">00100</span></span><br><span class="line"><span class="number">00100</span> <span class="number">1</span> <span class="number">99999</span></span><br><span class="line"><span class="number">99999</span> <span class="number">5</span> <span class="number">68237</span></span><br><span class="line"><span class="number">68237</span> <span class="number">6</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1073 Scientific Notation (20)</title>
      <link href="//posts/fc7b145c/"/>
      <url>//posts/fc7b145c/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1073" target="_blank" rel="noopener">题目链接</a><br>给出一个数的科学计数法，求这个数的传统计数法。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入一个科学计数法表示的实数，这个数字长度不超过9999字节，指数的绝对值不超过9999。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出这个数的传统计数法，保留所有的有效数字，包括尾随零。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>字符串处理</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li>将输入的数分成三部分，符号，底数，指数。</li><li>使用str.insert()和string.erase()，会更方便。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">    <span class="keyword">int</span> pos_e, pos_exp;</span><br><span class="line">    <span class="keyword">bool</span> isPositive = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (str[<span class="number">0</span>] == <span class="string">'-'</span>)</span><br><span class="line">        isPositive = <span class="literal">false</span>;</span><br><span class="line">    pos_e = str.find(<span class="string">'E'</span>);</span><br><span class="line">    <span class="built_in">string</span> str_num = str.substr(<span class="number">1</span>, pos_e - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">string</span> str_exp = str.substr(pos_e + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span> = stoi(str_exp);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">exp</span> &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str_num.erase(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//去掉小数点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">exp</span> &lt; str_num.size() - <span class="number">1</span>)</span><br><span class="line">            str_num.insert(<span class="built_in">exp</span> + <span class="number">1</span>, <span class="string">"."</span>);<span class="comment">//重新确定小数点</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> pos = <span class="built_in">exp</span> - (str_num.size() - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                str_num += <span class="string">'0'</span>;<span class="comment">//在后面添加0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">exp</span>&lt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        str_num.erase(<span class="number">1</span>, <span class="number">1</span>);<span class="comment">//去掉小数点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (-<span class="built_in">exp</span>); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            str_num.insert(<span class="number">0</span>, <span class="string">"0"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        str_num.insert(<span class="number">1</span>, <span class="string">"."</span>);<span class="comment">//填完0之后再加上小数点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isPositive)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'-'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str_num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Sample Input <span class="number">1</span>:</span><br><span class="line">+<span class="number">1.23400E-03</span></span><br><span class="line">Sample Output <span class="number">1</span>:</span><br><span class="line"><span class="number">0.00123400</span></span><br><span class="line">Sample Input <span class="number">2</span>:</span><br><span class="line"><span class="number">-1.2E+10</span></span><br><span class="line">Sample Output <span class="number">2</span>:</span><br><span class="line"><span class="number">-12000000000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ STL </tag>
            
            <tag> 字符串处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1071 Speech Patterns (25)</title>
      <link href="//posts/e490869c/"/>
      <url>//posts/e490869c/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1071" target="_blank" rel="noopener">题目链接</a><br>统计一行内出现最多次数的单词。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个测试有一行不超过1048576个字符，以回车’\n’结尾，输入至少包含一个数字字母字符，即[0-9 A-Z a-z]中的一个。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>在一行中输出给定文本中最常出现的单词，后跟一个空格和输入中出现的次数，如果有多个这样的单词，输出字典上最小的单词，全部小写。</p><p>单词的定义是：一串字母数字的连续序列，这个序列由非字母数字或者行开始或者行结束分隔开的。</p><p>比如</p><p>Can1: “Can a can can a can?  It can!”</p><p>在这句话中，忽略大小写的话，can一共出现了5次，但是can1就不能算进去。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>其实就是统计单词个数，输出出现最多次数的单词。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>使用Map。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; res;</span><br><span class="line"><span class="built_in">string</span> str, word;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);<span class="comment">//有空格就用getline</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> ((str[i] &gt;= <span class="string">'A'</span>&amp;&amp;str[i] &lt;= <span class="string">'Z'</span>) || (str[i] &gt;= <span class="string">'a'</span>&amp;&amp;str[i] &lt;= <span class="string">'z'</span>) || str[i] &gt;= <span class="string">'0'</span>&amp;&amp;str[i] &lt;= <span class="string">'9'</span>)<span class="comment">//如果是有效的字符</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i] &gt;= <span class="string">'A'</span>&amp;&amp;str[i] &lt;= <span class="string">'Z'</span>)</span><br><span class="line">                str[i] = <span class="string">'a'</span> + str[i] - <span class="string">'A'</span>;</span><br><span class="line">            word += str[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (word.size())</span><br><span class="line">        &#123;</span><br><span class="line">            res[word]++;</span><br><span class="line">            word.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> MaxNum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = res.begin();</span><br><span class="line">    <span class="keyword">auto</span> temp = i;</span><br><span class="line">    <span class="keyword">for</span> (; i != res.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i-&gt;second &gt; MaxNum)</span><br><span class="line">        &#123;</span><br><span class="line">            MaxNum = i-&gt;second;</span><br><span class="line">            temp = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; temp-&gt;first &lt;&lt; <span class="string">' '</span> &lt;&lt; temp-&gt;second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line">Can1: <span class="string">"Can a can can a can?  It can!"</span></span><br><span class="line">Sample Output:</span><br><span class="line">can <span class="number">5</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> C++ STL </tag>
            
            <tag> Map映射 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1070 Mooncake (25)</title>
      <link href="//posts/cb0684aa/"/>
      <url>//posts/cb0684aa/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1048" target="_blank" rel="noopener">题目链接</a><br>给出各种月饼的库存和价格，以及市场的最大需求，求最大利润。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是两个正整数，表示有多少种月饼和最大总需求量。第二行是每种月饼的库存量（不一定是整数），第三行是每种月饼的总价格。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出最大利润，精确到两位小数。<br>比如输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3 200</span><br><span class="line">180 150 100</span><br><span class="line">7.5 7.2 4.5</span><br></pre></td></tr></table></figure></p><p>表示有3种月饼，分别有180 150 100   总价为7.5 7.2 4.5</p><p>因此显然第二种和第三种单价更高。在需要200的情况下:卖出去150的第二种，卖出去50的第三种。<br>因此总利润为7.2 + 4.5 / 2 = 9.45</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>贪心算法，买单价最贵的。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, need;</span><br><span class="line"><span class="keyword">float</span> res = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">float</span> weight;<span class="comment">//每种的重量并不一定都是整数</span></span><br><span class="line">    <span class="keyword">float</span> TotalPrice;</span><br><span class="line">    <span class="keyword">float</span> UnitPrice;</span><br><span class="line">&#125;Mooncake;</span><br><span class="line"><span class="built_in">vector</span>&lt;Mooncake&gt; mooncake;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Mooncake a, Mooncake b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.UnitPrice &gt; b.UnitPrice;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; need;</span><br><span class="line">    mooncake.resize(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; mooncake[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; mooncake[i].TotalPrice;</span><br><span class="line">        mooncake[i].UnitPrice = mooncake[i].TotalPrice / mooncake[i].weight;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(mooncake.begin(), mooncake.end(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;N; i++)<span class="comment">//可能最后全卖完还无法达到需求</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (need&gt;mooncake[i].weight)</span><br><span class="line">        &#123;</span><br><span class="line">            need -= mooncake[i].weight;</span><br><span class="line">            res += mooncake[i].TotalPrice;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            res += mooncake[i].UnitPrice*need;</span><br><span class="line">            need = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//够了就跳出循环</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.2f"</span>, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Sample Input:</span><br><span class="line"><span class="number">3</span> <span class="number">200</span></span><br><span class="line"><span class="number">180</span> <span class="number">150</span> <span class="number">100</span></span><br><span class="line"><span class="number">7.5</span> <span class="number">7.2</span> <span class="number">4.5</span></span><br><span class="line">Sample Output:</span><br><span class="line"><span class="number">9.45</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1069 The Black Hole of Numbers (20)</title>
      <link href="//posts/abc10d4f/"/>
      <url>//posts/abc10d4f/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1069" target="_blank" rel="noopener">题目链接</a><br>数字的黑洞。</p><p>任何一个四位不相同的数字，如果我们先把这4个数字降序排列，减去其升序排列所得的数，依次反复，最后的结果永远都会得到6174.称之为数字黑洞，给定任意一个4位数字，求出这个数字进入黑洞的步骤。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>（0，10000）内的正整数N。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>如果N的所有四位数都相同，则在一行中输出N - N = 0000。否则输出每一步的计算结果直到出现6174.所有的数字必须打印成4位数字。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>reverse(str.begin(),str.end());</li><li>sort(str.start,str.end(),cmp;</li><li>stoi(str)  // 字符串转int</li><li>to_string(int)  //int转字符串</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>注意在to_string(int)  //int转字符串后，要插入0</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> input;</span><br><span class="line"><span class="keyword">int</span> a, b, c=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">char</span> a, <span class="keyword">char</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">    input.insert(<span class="number">0</span>, <span class="number">4</span> - input.length(), <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (c!=<span class="number">6174</span>&amp;&amp;c!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sort(input.begin(), input.end());</span><br><span class="line">        a = stoi(input);<span class="comment">//从小到大</span></span><br><span class="line">        sort(input.begin(), input.end(), cmp);</span><br><span class="line">        b = stoi(input);</span><br><span class="line">        c = b - a;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%04d - %04d = %04d\n"</span>, b, a, c);</span><br><span class="line">        input = to_string(c);</span><br><span class="line">        input.insert(<span class="number">0</span>, <span class="number">4</span> - input.length(), <span class="string">'0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6767</span></span><br><span class="line">输出应为</span><br><span class="line"><span class="number">7766</span> - <span class="number">6677</span> = <span class="number">1089</span></span><br><span class="line"><span class="number">9810</span> - <span class="number">0189</span> = <span class="number">9621</span></span><br><span class="line"><span class="number">9621</span> - <span class="number">1269</span> = <span class="number">8352</span></span><br><span class="line"><span class="number">8532</span> - <span class="number">2358</span> = <span class="number">6174</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2222</span></span><br><span class="line">输出应为</span><br><span class="line"><span class="number">2222</span> - <span class="number">2222</span> = <span class="number">0000</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1067 Sort with Swap(0,*) (25)</title>
      <link href="//posts/4c792048/"/>
      <url>//posts/4c792048/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1067" target="_blank" rel="noopener">题目链接</a><br>使用Swap(0,* )来排序。求对于给定序列，最少的交换次数。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>先给出一个正整数N，随后是N个数，乱序的 0~N-1，由空格隔开。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出使数列排序成增序的最少交换次数。<br>使用Swap（0，* ）的解释如下，第一个数必须是0，第二个数是其他的。<br>比如对{4, 0, 2, 1, 3}进行排序</p><ol><li>交换（0,1）得到{4, 1, 2, 0, 3}</li><li>对{4, 1, 2, 0, 3}交换（0,3） 得到{4, 1, 2, 3, 0}</li><li>对{4, 1, 2, 3, 0}交换（0,4）得到 {0, 1, 2, 3, 4}</li></ol><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Order| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |</span><br><span class="line">     +---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">     | 3 | 5 | 7 | 2 | 6 | 4 | 9 | 0 | 8 | 1 |</span><br><span class="line">     +---+---+---+-—-+---+---+---+---+---+---+</span><br></pre></td></tr></table></figure><p>各回各家，各找各妈。被赶出来的去赶别人。</p><ol><li>a[0] -&gt; a[3]</li><li>a[3] -&gt; a[2]</li><li>a[2] -&gt; a[7]</li><li>a[7] -&gt; a[0]</li></ol><p>第一步交换中有0参与，所以次数为3。分别是（0,7）（0,2）（0,3），<br>这个数正好等于参与交换的数字的个数（4）-1,把这些数字（0,2,3,7）归为第一组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Order| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |</span><br><span class="line">     +---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">     | 0 | 5 | 2 | 3 | 6 | 4 | 9 | 7 | 8 | 1 |</span><br><span class="line">     +-^-+---+-^-+-—-+---+---+---+-^-+---+---+</span><br></pre></td></tr></table></figure></p><ol><li>a[1] -&gt; a[5]</li><li>a[5] -&gt; a[4]</li><li>a[4] -&gt; a[6]</li><li>a[6] -&gt; a[9]</li><li>a[9] -&gt; a[1]</li></ol><p>第二步交换中没有0参与，所以次数为6次，分别是（0,5）（0,1）（0,9）（0,6）（0,4）（0,5）<br>这个数字正好等于参与交换的数字个数+1。说没有0参与是指要交换的数字中没有0，<br>但是0间接参与了交换。把这些数字（1,4,5,6,9）归为第二组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Order| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |</span><br><span class="line">     +---+---+---+---+---+---+---+---+---+---+</span><br><span class="line">     | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |</span><br><span class="line">     +-^-+-^-+-^-+-—-+-^-+-^-+-^-+-^-+---+-^-+</span><br></pre></td></tr></table></figure></p><p>由上分析，推导如下：</p><p>又由于在一次排序中，如果0不在第一个，那么0有且仅有一次直接参与交换。其他的参与（如果有的话）都是间接参与。如果0在第一个，那么0一定是间接参与排序。</p><p>因此可以得：设一共有N组。每组分别有a1,a2,a3…..an数字。<br>若num[0]!=0，则0有且仅有一次直接参与交换。<br>设0在第t组直接参与排序，那么一共交换次数为<br>(a1+1)+(a2+1)+…+(at-1)+…(an+1)=(a1+a2+…at)+N-2.<br>又a1+a2+a3+…+an是所有不在对应位置上的数的个数，可以用num[i]==i是否成立来判断。</p><p>若num[0]==0 则0全部是间接参与交换<br>所以交换次数  =<br>(a1+1)+(a2+1)+…+(an+1)=(a1+a2+…at)+N。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">100001</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> N, group = <span class="number">0</span>, swap_time = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; num[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i] || num[i] == i)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        group++;</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">while</span> (!visit[j])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[j] = <span class="literal">true</span>;</span><br><span class="line">            swap_time++;</span><br><span class="line">            j = num[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num[<span class="number">0</span>] != <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; swap_time + group - <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; swap_time + group;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input</span><br><span class="line"><span class="number">10</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">4</span> <span class="number">9</span> <span class="number">0</span> <span class="number">8</span> <span class="number">1</span></span><br><span class="line">output</span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input</span><br><span class="line"><span class="number">11</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">2</span> <span class="number">6</span> <span class="number">4</span> <span class="number">9</span> <span class="number">0</span> <span class="number">11</span> <span class="number">1</span> <span class="number">8</span></span><br><span class="line">output</span><br><span class="line"><span class="number">14</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1065 A+B and C (64bit) (20)</title>
      <link href="//posts/a2774164/"/>
      <url>//posts/a2774164/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1065" target="_blank" rel="noopener">题目链接</a><br>64位的A+B和C，判断是否A+B&gt;C。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行给出测试样例的数量T。在随后的T行内，每行有3个数字A,B,C，由空格隔开。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>对于每个测试样例，如果A+B&gt;C，则在一行内输出</p><p>Case #X: true</p><p>否则输出</p><p>Case #X: false</p><p>其中X是测试样例的序号，从1开始。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>题目很简单，只需要判断是否上溢即可。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>我感觉这个题有点问题，题目想要表达的意思应该是 [-2^63, 2^63)，即不包括 2^63 的。<br>但是如果还是按照 [-2^63, 2^63]来做的话，我也没想出太好的办法，目前我的思路是大整数加法，用线性容器（数组，string，vrctor）去做。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>（按照[-2^63, 2^63)去做的），能通过PAT测试。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> A, B, C, D;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">    <span class="keyword">bool</span> res;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; A &gt;&gt; B &gt;&gt; C;</span><br><span class="line">        D = A + B;</span><br><span class="line">        <span class="keyword">if</span> (A &gt; <span class="number">0</span> &amp;&amp; B &gt; <span class="number">0</span> &amp;&amp; D &lt; <span class="number">0</span>)</span><br><span class="line">            res = <span class="literal">true</span>;<span class="comment">//上溢一定大于</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (A &lt; <span class="number">0</span> &amp;&amp; B &lt; <span class="number">0</span> &amp;&amp; D&gt;=<span class="number">0</span>)</span><br><span class="line">            res = <span class="literal">false</span>;<span class="comment">//下溢一定小于</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = (D &gt; C);</span><br><span class="line">        <span class="keyword">if</span> (res)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="string">"true"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case #"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="string">"false"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"2.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>回头写一个字符串的。</p><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br><span class="line"><span class="number">9223372036854775807</span> <span class="number">-9223372036854775808</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">9223372036854775808</span> <span class="number">-9223372036854775808</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 判断溢出 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1066 Root of AVL Tree (25)</title>
      <link href="//posts/3b7e10de/"/>
      <url>//posts/3b7e10de/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1066" target="_blank" rel="noopener">题目链接</a><br>求一个AVL树的根。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是一个正整数N(&lt;=20)，表示要插入进AVL树的数字的个数（即AVL树的节点）。然后是N个互不相同的数。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>生成的AVL树的根。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>模拟，因为对于同样的一组数，最后生成的AVL树是由插入的顺序决定的。所以这个题没有简便的思路，只能通过模拟插入，调整操作来最终构建一棵AVL树。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tree</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tree</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;Tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HTree</span><span class="params">(Tree* root)</span><span class="comment">//求树的高度</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> root-&gt;height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Tree* <span class="title">SingleRotateWithLeft</span><span class="params">(Tree* r1)</span><span class="comment">//单左旋</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree* r2;</span><br><span class="line">    r2 = r1-&gt;left;</span><br><span class="line">    r1-&gt;left = r2-&gt;right;</span><br><span class="line">    r2-&gt;right = r1;</span><br><span class="line">    r1-&gt;height = max(HTree(r1-&gt;left), HTree(r1-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    r2-&gt;height = max(HTree(r2-&gt;left), r1-&gt;height) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> r2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Tree* <span class="title">SingleRotateWithRight</span><span class="params">(Tree* r1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree* r2;</span><br><span class="line">    r2 = r1-&gt;right;</span><br><span class="line">    r1-&gt;right = r2-&gt;left;</span><br><span class="line">    r2-&gt;left = r1;</span><br><span class="line">    r1-&gt;height = max(HTree(r1-&gt;left), HTree(r1-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    r2-&gt;height = max(r1-&gt;height, HTree(r2-&gt;right)) + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> r2;<span class="comment">//return the root</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Tree* <span class="title">DoubleRotateWithLeft</span><span class="params">(Tree* root)</span><span class="comment">//对左子树先做单右旋转，再对根做左旋转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root-&gt;left = SingleRotateWithRight(root-&gt;left);</span><br><span class="line">    <span class="keyword">return</span> SingleRotateWithLeft(root);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Tree* <span class="title">DoubleRotateWithRight</span><span class="params">(Tree* root)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    root-&gt;right = SingleRotateWithLeft(root-&gt;right);</span><br><span class="line">    <span class="keyword">return</span> SingleRotateWithRight(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Tree* <span class="title">AVLInsert</span><span class="params">(Tree* root, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        root = (Tree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Tree));</span><br><span class="line">        root-&gt;val = num;</span><br><span class="line">        root-&gt;height = <span class="number">1</span>;</span><br><span class="line">        root-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">        root-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (num &lt; root-&gt;val)<span class="comment">//插入到左子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;left = AVLInsert(root-&gt;left, num);<span class="comment">//插入到左子树中</span></span><br><span class="line">        <span class="keyword">if</span> (HTree(root-&gt;left) - HTree(root-&gt;right) == <span class="number">2</span>)<span class="comment">//高度差为2表示需要调整</span></span><br><span class="line">            <span class="keyword">if</span> (num &lt; root-&gt;left-&gt;val)</span><br><span class="line">                root = SingleRotateWithLeft(root);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                root = DoubleRotateWithLeft(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (num &gt; root-&gt;val)</span><br><span class="line">    &#123;</span><br><span class="line">        root-&gt;right = AVLInsert(root-&gt;right, num);</span><br><span class="line">        <span class="keyword">if</span> (HTree(root-&gt;right) - HTree(root-&gt;left) == <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> (num &gt; root-&gt;right-&gt;val)</span><br><span class="line">                root = SingleRotateWithRight(root);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                root = DoubleRotateWithRight(root);</span><br><span class="line">    &#125;</span><br><span class="line">    root-&gt;height = max(HTree(root-&gt;left), HTree(root-&gt;right))+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tree* root = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        root = AVLInsert(root, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; root-&gt;val;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">88</span> <span class="number">70</span> <span class="number">61</span> <span class="number">96</span> <span class="number">120</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">88</span> <span class="number">70</span> <span class="number">61</span> <span class="number">96</span> <span class="number">120</span> <span class="number">90</span> <span class="number">65</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> AVL Tree </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1062 Talent and Virtue (25)</title>
      <link href="//posts/3c13d4c7/"/>
      <url>//posts/3c13d4c7/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1062" target="_blank" rel="noopener">题目链接</a><br>根据给定规则，对圣人，君子，愚人，小人进行排序。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个测试样例首先给出三个正整数，N，有多少人，L，及格线，只有才能分数和到的分数都不低于此数的人才参加排名。H，优秀线，达到此线的人即可认为该项达标，道德和才能都达到优秀线的人叫圣人，道德分数达标，但是才能分数不达标的叫君子，排在圣人之后，全都不达标，但是道德分数不低于才能分数的叫愚人，排在均值之后，剩下的人，两项分数均达到L及格线的人，排在愚人之后。在每一小项内，按照两项分数总和进行排序。</p><p>然后是N行，给出每个人的信息，以</p><p>ID_Number Virtue_Grade Talent_Grade</p><p>格式。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>首先给出参与排名的人数M，M&lt;=N，然后在接下来的M行内，仍然按照ID_Number Virtue_Grade Talent_Grade 格式，按照排名规则进行排名。如果总分相同，按照道德分数，非递增排序，即道德分数高的人在前面，如果道德分数还相同，则按ID好递增排序，即小号在前面。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>sort进行排序，自定义compare函数</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>对每个人添加一个标签，进行分类。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ID_Number;</span><br><span class="line">    <span class="keyword">int</span> Virtue_Grade;</span><br><span class="line">    <span class="keyword">int</span> Talent_Grade;</span><br><span class="line">    <span class="keyword">int</span> tag;<span class="comment">//0表示圣人，1表示君子，2表示愚人，3表示小人</span></span><br><span class="line">&#125;people;</span><br><span class="line"><span class="built_in">vector</span>&lt;people&gt; p;</span><br><span class="line"><span class="keyword">int</span> N, L, H;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(people a, people b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.tag != b.tag)</span><br><span class="line">        <span class="keyword">return</span> a.tag &lt; b.tag;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ((a.Virtue_Grade + a.Talent_Grade) != (b.Virtue_Grade + b.Talent_Grade))</span><br><span class="line">        <span class="keyword">return</span> (a.Virtue_Grade + a.Talent_Grade) &gt; (b.Virtue_Grade + b.Talent_Grade);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (a.Virtue_Grade != b.Virtue_Grade)</span><br><span class="line">        <span class="keyword">return</span> a.Virtue_Grade &gt; b.Virtue_Grade;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.ID_Number &lt; b.ID_Number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    people input;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; L &gt;&gt; H;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;input.ID_Number, &amp;input.Virtue_Grade, &amp;input.Talent_Grade);</span><br><span class="line">        <span class="comment">//cin &gt;&gt; input.ID_Number &gt;&gt; input.Virtue_Grade &gt;&gt; input.Talent_Grade;</span></span><br><span class="line">        <span class="keyword">if</span> (input.Talent_Grade &gt;= L&amp;&amp;input.Virtue_Grade &gt;= L)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (input.Talent_Grade &gt;= H&amp;&amp;input.Virtue_Grade &gt;= H)</span><br><span class="line">                input.tag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (input.Virtue_Grade &gt;= H)</span><br><span class="line">                input.tag = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (input.Virtue_Grade &gt;= input.Talent_Grade)</span><br><span class="line">                input.tag = <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                input.tag = <span class="number">3</span>;</span><br><span class="line">            p.push_back(input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(p.begin(), p.end(), cmp);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = p.begin(); i != p.end(); i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, i-&gt;ID_Number, i-&gt;Virtue_Grade, i-&gt;Talent_Grade);</span><br><span class="line">        <span class="comment">//cout &lt;&lt; i-&gt;ID_Number &lt;&lt; ' ' &lt;&lt; i-&gt;Virtue_Grade &lt;&lt; ' ' &lt;&lt; i-&gt;Talent_Grade &lt;&lt; endl;</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14</span> <span class="number">60</span> <span class="number">80</span></span><br><span class="line"><span class="number">10000001</span> <span class="number">64</span> <span class="number">90</span></span><br><span class="line"><span class="number">10000002</span> <span class="number">90</span> <span class="number">60</span></span><br><span class="line"><span class="number">10000011</span> <span class="number">85</span> <span class="number">80</span></span><br><span class="line"><span class="number">10000003</span> <span class="number">85</span> <span class="number">80</span></span><br><span class="line"><span class="number">10000004</span> <span class="number">80</span> <span class="number">85</span></span><br><span class="line"><span class="number">10000005</span> <span class="number">82</span> <span class="number">77</span></span><br><span class="line"><span class="number">10000006</span> <span class="number">83</span> <span class="number">76</span></span><br><span class="line"><span class="number">10000007</span> <span class="number">90</span> <span class="number">78</span></span><br><span class="line"><span class="number">10000008</span> <span class="number">75</span> <span class="number">79</span></span><br><span class="line"><span class="number">10000009</span> <span class="number">59</span> <span class="number">90</span></span><br><span class="line"><span class="number">10000010</span> <span class="number">88</span> <span class="number">45</span></span><br><span class="line"><span class="number">10000012</span> <span class="number">80</span> <span class="number">100</span></span><br><span class="line"><span class="number">10000013</span> <span class="number">90</span> <span class="number">99</span></span><br><span class="line"><span class="number">10000014</span> <span class="number">66</span> <span class="number">60</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1061 Dating (20)</title>
      <link href="//posts/a51a857d/"/>
      <url>//posts/a51a857d/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1061" target="_blank" rel="noopener">题目链接</a><br>福尔摩斯破解字符串密码，得到约会时间。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>输入四行字符串。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出你破译过后，得到的约会的时间。<br>前两个字符串，第一个对应位置相同的大写字母  表示周几，如A表示MON（星期一），B表示THU（星期二），前两个字符串第二个相等的字母表示时间，0~9分别表示0~9点，A~N表示10~23点。</p><p>后两个字符串对应位置相同的字母，其位置表示时间，比如，第一个字母相等，在字符串中是0位，表示00分，第二个，表示01分。以此类推。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>这道题是要比较两个字符串对应位置的字符是否相等，直接用string进行比较即可。注意关键字符的范围。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>注意范围，比如第一个代表周几的字符，必须在[A,G]才有效。</p><p>第二个代表小时的字符，必须在[0，9]和[A，N]之间才有效。</p><p>第三个必须是字母，大小写不限，即在[a，z]和[A，Z]之间才有效。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> Week[<span class="number">7</span>] = &#123; <span class="string">"MON "</span>,<span class="string">"TUE "</span>,<span class="string">"WED "</span>,<span class="string">"THU "</span>,<span class="string">"FRI "</span>,<span class="string">"SAT "</span>,<span class="string">"SUN "</span> &#125;;</span><br><span class="line"><span class="built_in">string</span> str1, str2, str3, str4;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;str1.size() &amp;&amp; i&lt;str2.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (str1[i] == str2[i] &amp;&amp; flag == <span class="literal">false</span> &amp;&amp; str1[i] &lt;= <span class="string">'G'</span>&amp;&amp;str1[i] &gt;= <span class="string">'A'</span>)<span class="comment">//注意范围A~G</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; Week[str1[i] - <span class="string">'A'</span>];</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str1[i] == str2[i] &amp;&amp; flag == <span class="literal">true</span> &amp;&amp; ((str1[i] &lt;= <span class="string">'N'</span>&amp;&amp;str1[i] &gt;= <span class="string">'A'</span>) || (str1[i] &lt;= <span class="string">'9'</span>&amp;&amp;str1[i] &gt;= <span class="string">'0'</span>)))<span class="comment">//注意范围A~N</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1[i] &lt;= <span class="string">'9'</span>&amp;&amp;str1[i] &gt;= <span class="string">'0'</span>)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%02d:"</span>, str1[i] - <span class="string">'0'</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="number">10</span> + str1[i] - <span class="string">'A'</span> &lt;&lt; <span class="string">':'</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str3.size() &amp;&amp; i&lt;str4.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str3[i] == str4[i] &amp;&amp; ((str3[i] &lt;= <span class="string">'Z'</span>&amp;&amp;str3[i] &gt;= <span class="string">'A'</span>) || (str3[i] &lt;= <span class="string">'z'</span>&amp;&amp;str3[i] &gt;= <span class="string">'a'</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%02d"</span>, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str1 &gt;&gt; str2 &gt;&gt; str3 &gt;&gt; str4;</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djDkxh4hhGE</span><br><span class="line">2984akDfkkkkggEdsb</span><br><span class="line">s&amp;hgsfdk</span><br><span class="line">d&amp;Hyscvnm</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3485djGkxh4hhG2</span><br><span class="line">2984akGfkkkkgg2dsb</span><br><span class="line">s&amp;hgsfdk</span><br><span class="line">d&amp;hyscvnm</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 字符串处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1059 Prime Factors (25)</title>
      <link href="//posts/80ec5e8c/"/>
      <url>//posts/80ec5e8c/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1059" target="_blank" rel="noopener">题目链接</a><br>分解质因数<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>一个正整数，范围在long int 之间</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>将其质因数分解后的式子，注意如果次数大于等于2，要采用上标的形式，比如2^2</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>使用map标记每个质因数的指数。</p><p>关键代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">while</span> (n%i == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ++res[i];</span><br><span class="line">    n /= i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n != <span class="number">1</span>)res[n] = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">int</span> num;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">int</span>, <span class="keyword">int</span>&gt;res;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prime_factor</span><span class="params">(<span class="keyword">long</span> <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i*i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (n%i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++res[i];</span><br><span class="line">            n /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">1</span>)res[n] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1=1"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Prime_factor(num);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="string">'='</span>;</span><br><span class="line">    <span class="keyword">auto</span> i = res.begin();</span><br><span class="line">    <span class="keyword">if</span> (i-&gt;second &gt;= <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i-&gt;first &lt;&lt; <span class="string">'^'</span> &lt;&lt; i-&gt;second;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i-&gt;first;</span><br><span class="line">    i++;</span><br><span class="line">    <span class="keyword">for</span> (; i != res.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i-&gt;second &gt;= <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;<span class="string">'*'</span>&lt;&lt; i-&gt;first &lt;&lt; <span class="string">'^'</span> &lt;&lt; i-&gt;second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">'*'</span> &lt;&lt; i-&gt;first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num;</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">97532468</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 分解质因数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1058 A+B in Hogwarts (20)</title>
      <link href="//posts/f7eb6e1a/"/>
      <url>//posts/f7eb6e1a/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1058" target="_blank" rel="noopener">题目链接</a><br>霍格沃兹的货币计算。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>两个数，格式是”Galleon.Sickle.Knut”。类似于圆角分。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>两个数相加后的结果，扔然按照”Galleon.Sickle.Knut”的格式输出。</p><p>29Kunt=1Sickle</p><p>17Sickle=1Galleon</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>进制转换</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> Sickle, Knut, Galleon;</span><br><span class="line">&#125;currency;</span><br><span class="line"></span><br><span class="line">currency a, b, sum;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sum.Knut=a.Knut+b.Knut;</span><br><span class="line">    sum.Sickle = sum.Knut / <span class="number">29</span>;</span><br><span class="line">    sum.Knut = sum.Knut % <span class="number">29</span>;</span><br><span class="line">    sum.Sickle = a.Sickle + b.Sickle + sum.Sickle;</span><br><span class="line">    sum.Galleon = sum.Sickle / <span class="number">17</span>;</span><br><span class="line">    sum.Sickle = sum.Sickle % <span class="number">17</span>;</span><br><span class="line">    sum.Galleon = sum.Galleon + a.Galleon + b.Galleon;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum.Galleon &lt;&lt; <span class="string">'.'</span> &lt;&lt; sum.Sickle &lt;&lt; <span class="string">'.'</span> &lt;&lt; sum.Knut;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d.%d.%d %d.%d.%d"</span>,&amp;a.Galleon,&amp;a.Sickle,&amp;a.Knut,&amp;b.Galleon,&amp;b.Sickle,&amp;b.Knut);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.2</span><span class="number">.1</span> <span class="number">10.16</span><span class="number">.27</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 进制转换 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1054 The Dominant Color (20)</title>
      <link href="//posts/fe5d2231/"/>
      <url>//posts/fe5d2231/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1054" target="_blank" rel="noopener">题目链接</a></p><p>求一些数字中出现次数超过一半的数字.<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是两个数 M和N，接下来是N行，每一行有M个数字。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>求上述M*N个数字中，出现次数最多的数字。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>有两种方法：</p><ol><li>使用Map</li><li>实用排序</li></ol><h2 id="Map代码"><a href="#Map代码" class="headerlink" title="Map代码"></a>Map代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; color;</span><br><span class="line"><span class="keyword">int</span> M, N;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> input,half=M*N/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">            color[input]++;</span><br><span class="line">            <span class="keyword">if</span> (color[input]&gt;half)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d"</span>, input);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="排序代码"><a href="#排序代码" class="headerlink" title="排序代码"></a>排序代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; color;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M &gt;&gt; N;</span><br><span class="line">    <span class="keyword">int</span> input;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</span><br><span class="line">            color.push_back(input);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(color.begin(), color.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; color[color.size() / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">255</span> <span class="number">16777215</span> <span class="number">24</span></span><br><span class="line"><span class="number">24</span> <span class="number">24</span> <span class="number">0</span> <span class="number">0</span> <span class="number">24</span></span><br><span class="line"><span class="number">24</span> <span class="number">0</span> <span class="number">24</span> <span class="number">24</span> <span class="number">24</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> map映射 </tag>
            
            <tag> C++ STL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1052 Linked List Sorting (25)</title>
      <link href="//posts/173e8704/"/>
      <url>//posts/173e8704/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1052" target="_blank" rel="noopener">题目链接</a></p><p>给定一个链表，要求按键值升序排序。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入只有一个测试样例。第一行是一个正整数N，表示节点的个数，一个头结点的地址。NULL用-1表示。</p><p>接下来是N行，每行格式为  </p><p>地址　键值　下一个节点地址</p><p>保证键值各不相同，范围在 [-100000, 100000]之间。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>格式上按输入的样式输出，以键值递增序列进行输出。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>自定义规则排序</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><ol><li>有些节点并不在链表中</li><li>可能有多个链表</li><li>如果链表为空，需要输出 0　-1</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> addr;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">    <span class="keyword">int</span> key;</span><br><span class="line">    <span class="keyword">bool</span> isLinked=<span class="literal">false</span>;</span><br><span class="line">&#125;Node;</span><br><span class="line"><span class="keyword">int</span> N, startaddr;</span><br><span class="line"><span class="built_in">vector</span>&lt;Node&gt;LinkList(<span class="number">100001</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Node a, Node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!a.isLinked || !b.isLinked)<span class="comment">//两个全都在的话，判断结果为0，需要进行键值的比较</span></span><br><span class="line">        <span class="keyword">return</span> a.isLinked &gt; b.isLinked;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">        a.key &lt; b.key;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> NodeNumber = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = startaddr; i !=<span class="number">-1</span> ; i=LinkList[i].next)</span><br><span class="line">    &#123;</span><br><span class="line">        LinkList[i].isLinked = <span class="literal">true</span>;</span><br><span class="line">        NodeNumber++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (NodeNumber == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"0 -1"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(LinkList.begin(), LinkList.end(), cmp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %05d\n"</span>, NodeNumber, LinkList[<span class="number">0</span>].addr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NodeNumber<span class="number">-1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%05d %d %05d\n"</span>, LinkList[i].addr, LinkList[i].key, LinkList[i + <span class="number">1</span>].addr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%05d %d -1"</span>, LinkList[NodeNumber - <span class="number">1</span>].addr, LinkList[NodeNumber - <span class="number">1</span>].key);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; startaddr;</span><br><span class="line">    <span class="keyword">int</span> addr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; addr;</span><br><span class="line">        LinkList[addr].addr = addr;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; LinkList[addr].key &gt;&gt; LinkList[addr].next;</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> <span class="number">00001</span></span><br><span class="line"><span class="number">11111</span> <span class="number">100</span> <span class="number">-1</span></span><br><span class="line"><span class="number">00001</span> <span class="number">0</span> <span class="number">22222</span></span><br><span class="line"><span class="number">33333</span> <span class="number">100000</span> <span class="number">11111</span></span><br><span class="line"><span class="number">12345</span> <span class="number">-1</span> <span class="number">33333</span></span><br><span class="line"><span class="number">22222</span> <span class="number">1000</span> <span class="number">12345</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1048 Find Coins (25)</title>
      <link href="//posts/eef05f5b/"/>
      <url>//posts/eef05f5b/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1048" target="_blank" rel="noopener">题目链接</a></p><p>找出两枚硬币，使其和等于给定的值。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个测试点只有一行输入，第一个是一个正数N（&lt;=100000），然后是N个数字，每个数字在[1,10000]之间</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出第一个只出现过一次的数，如果没有的话，输出None。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>有两个解法，一个是用哈希，或者使用查找。</p><h2 id="哈希代码"><a href="#哈希代码" class="headerlink" title="哈希代码"></a>哈希代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> coins[<span class="number">10010</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (coins[i]&amp;&amp;coins[M-i])       <span class="comment">//如果恰好有这两枚硬币</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i!=M-i)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (coins[i]&gt;=<span class="number">2</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == M)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">' '</span> &lt;&lt; M - i;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("2.txt", "r", stdin);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; value;</span><br><span class="line">        coins[value]++;</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找代码"><a href="#查找代码" class="headerlink" title="查找代码"></a>查找代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; coins;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(coins.begin(), coins.end());</span><br><span class="line">    <span class="keyword">int</span> j = N - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;j; )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (coins[i] + coins[j] == M)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; coins[i] &lt;&lt; <span class="string">' '</span> &lt;&lt; coins[j];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (coins[i] + coins[j] &gt; M)</span><br><span class="line">            j--;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"No Solution"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; M;</span><br><span class="line">    coins.resize(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; coins[i];</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> Hash散列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1041 Be Unique (20)</title>
      <link href="//posts/972ce7ff/"/>
      <url>//posts/972ce7ff/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1041" target="_blank" rel="noopener">题目链接</a></p><p>找出一列数字中，第一个只出现过一次的数。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个测试点只有一行输入，第一个是一个正数N（&lt;=100000），然后是N个数字，每个数字在[1,10000]之间</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出第一个只出现过一次的数，如果没有的话，输出None。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>使用哈希。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> input[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">int</span> countNumber[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        countNumber[input[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (countNumber[input[i]] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; input[i];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"None"</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"2.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input[i];</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> Hash散列 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1040 Longest Symmetric String (25)</title>
      <link href="//posts/e02bd769/"/>
      <url>//posts/e02bd769/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1040" target="_blank" rel="noopener">题目链接</a></p><p>给定一个字符串，求其最长的对称子字符串的长度。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入只有一个测试样例，给出一个长度不超过1000的非空字符串。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出其最长的对称子字符串的长度。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>有两种算法，如下：</p><ol><li>动态规划去解。</li><li>以一个点为中心，求其左边和右边相等字符的长度，注意分奇数和偶数两种情况。</li></ol><h2 id="判断左右字符串是否相等的思路"><a href="#判断左右字符串是否相等的思路" class="headerlink" title="判断左右字符串是否相等的思路"></a>判断左右字符串是否相等的思路</h2><p>看代码即可，注意分奇数和偶数两种情况分别讨论。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1, len2, length = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        len1 = len2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i-len1&gt;=<span class="number">0</span>&amp;&amp;i+len1&lt;str.length()&amp;&amp;str[i-len1]==str[i+len1])<span class="comment">//长度为奇数</span></span><br><span class="line">        &#123;</span><br><span class="line">            len1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (i-len2&gt;=<span class="number">0</span>&amp;&amp;i+len2+<span class="number">1</span>&lt;str.length()&amp;&amp;str[i-len2]==str[i+len2+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            len2++;</span><br><span class="line">        &#125;</span><br><span class="line">        length = max(length,max(<span class="number">2</span> * len1 - <span class="number">1</span>, <span class="number">2</span> * len2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态规划的思路"><a href="#动态规划的思路" class="headerlink" title="动态规划的思路"></a>动态规划的思路</h2><p>dp[i][j]表示s[i]到s[j]所表示的字串是否是回文字串。只有0和1</p><p>递推方程：</p><ol><li>当str[i] == str[j] : dp[i][j] = dp[i+1][j-1]</li><li>当str[i] != str[j] : dp[i][j] =0</li><li>边界：dp[i][i] = 1, dp[i][i+1] = (str[i] == str[i+1]) ? 1 : 0</li></ol><p>首先初始化dp[i][i] = 1, dp[i][i+1]，把长度为1和2的都初始化好，然后开始不断递推即可。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">1010</span>][<span class="number">1010</span>];<span class="comment">//str[i]~str[j]是否对称，1是，0不是</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = str.size();</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[i][i] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (i&lt;n<span class="number">-1</span>&amp;&amp;str[i]==str[i+<span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            dp[i][i + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            length = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (str[i]==str[j]&amp;&amp;dp[j+<span class="number">1</span>][i<span class="number">-1</span>]==<span class="literal">true</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[j][i] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (i - j + <span class="number">1</span> &gt; length)</span><br><span class="line">                    length = i - j + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    getline(<span class="built_in">cin</span>, str);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Is PAT&amp;TAP symmetric?</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">tgoqkicaklpnpvj cglvlv vbclejjjh mtpqtspfspgtw bjzsvfjmokqkdikbaqlel utlu wmeihwob wduecohzqmlpntvkkpoandwx ohyzkvhtvppfwrjsqwfkiqmke ouhuo ekmqikfwqsjrwfppvthxeihmbiqgacovhpafhrbvwdscizzwjqoqbdyjoqdknrbjyulioxjpcuc  ggpaknuqctldclgxvyqfkietobbszlhs</span><br><span class="line"></span><br><span class="line">应该输出</span><br><span class="line"><span class="number">45</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1037 Magic Coupon (25)</title>
      <link href="//posts/310ed40d/"/>
      <url>//posts/310ed40d/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1037" target="_blank" rel="noopener">题目链接</a></p><p>来自火星的魔法贴。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是优惠券的数量NC，第二行内有NC个整数。</p><p>第三行是产品的数量NP，第四行内有NP个整数。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出能获得的最大金额。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>贪心算法，分4个部分，NC中正数和负数，NP中正数和负数。</p><p>正数与正数相乘，负数与负数相乘，最后结果求和。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> NC, NP;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;vPnega;<span class="comment">//P中的负数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;vCnega;<span class="comment">//C中的负数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;vPposi;<span class="comment">//P中的正数</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span>&gt;vCposi;<span class="comment">//C中的正数</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(vPposi.begin(), vPposi.end());</span><br><span class="line">    sort(vCposi.begin(), vCposi.end());</span><br><span class="line">    sort(vPnega.begin(), vPnega.end());</span><br><span class="line">    sort(vCnega.begin(), vCnega.end());</span><br><span class="line">    <span class="keyword">int</span> j = vCposi.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = vPposi.size()<span class="number">-1</span>; i &gt;=<span class="number">0</span>&amp;&amp;j&gt;=<span class="number">0</span>; i--,j--)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += vPposi[i] * vCposi[j];</span><br><span class="line">    &#125;</span><br><span class="line">    j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vPnega.size() &amp;&amp; j &lt;vCnega.size(); i++, j++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += vPnega[i] * vCnega[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt", "r", stdin);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; NC;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> input;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NC; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">        <span class="keyword">if</span> (input &gt; <span class="number">0</span>)</span><br><span class="line">            vCposi.push_back(input);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (input &lt; <span class="number">0</span>)</span><br><span class="line">            vCnega.push_back(input);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; NP;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NP; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">        <span class="keyword">if</span> (input &gt; <span class="number">0</span>)</span><br><span class="line">            vPposi.push_back(input);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (input &lt; <span class="number">0</span>)</span><br><span class="line">            vPnega.push_back(input);</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">-1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">7</span> <span class="number">6</span> <span class="number">-2</span> <span class="number">-3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1036 Boys vs Girls (25)</title>
      <link href="//posts/4609e49b/"/>
      <url>//posts/4609e49b/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1036" target="_blank" rel="noopener">题目链接</a></p><p>求成绩最好的女生和成绩最差的男生之间的分数差。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个测试点包括一个输入样例，第一行是一个N，接着是N行学生的信息。</p><p>每行包括 学生姓名，性别（F/M），ID，成绩。</p><p>ID为不超过10个字符且没有空格的字符串。成绩在0~100之间，且保证互不相同。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>每个输出包括三行，第一行为成绩最高的女生(Female)的姓名和ID，第二行是成绩最低的男生（Male）的姓名和ID，第三行是 $grade_F$ - $gende_M$ 。</p><p>如果某种学生信息缺失，在对应行输出Absent，然后在第三行输出NA。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>用sort排序。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">char</span> gender;</span><br><span class="line">    <span class="built_in">string</span> ID;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt; male, female;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Student a, Student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.gender == <span class="string">'M'</span>)</span><br><span class="line">        <span class="keyword">return</span> a.score &lt; b.score;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(male.begin(),male.end(),cmp);</span><br><span class="line">    sort(female.begin(), female.end(), cmp);</span><br><span class="line">    <span class="keyword">if</span> (female.size())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; female[<span class="number">0</span>].name &lt;&lt; <span class="string">' '</span> &lt;&lt; female[<span class="number">0</span>].ID &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Absent"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(male.size())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; male[<span class="number">0</span>].name &lt;&lt; <span class="string">' '</span> &lt;&lt; male[<span class="number">0</span>].ID &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Absent"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span> (female.size() &amp;&amp; male.size())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; female[<span class="number">0</span>].score - male[<span class="number">0</span>].score;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"NA"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("2.txt", "r", stdin);</span></span><br><span class="line">    Student input;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; input.name &gt;&gt; input.gender &gt;&gt; input.ID &gt;&gt; input.score;</span><br><span class="line">        <span class="keyword">if</span> (input.gender == <span class="string">'M'</span>)</span><br><span class="line">            male.push_back(input);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            female.push_back(input);</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line">Joe M Math990112 <span class="number">89</span></span><br><span class="line">Mike M CS991301 <span class="number">100</span></span><br><span class="line">Mary F EE990830 <span class="number">95</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line">Jean M AA980920 <span class="number">60</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1033 To Fill or Not to Fill (25)</title>
      <link href="//posts/36631014/"/>
      <url>//posts/36631014/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1033" target="_blank" rel="noopener">题目链接</a></p><p>车在高速路上跑，由于油箱容量有限，需要判断什么时候加油，加多少。求最省钱的方式。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行有4个整数，分别是油箱的最大容量，距离，平均每单位汽油可以跑的里程数，加油站的数目N。</p><p>然后是N行，每一行包括一对非负数，第一个是汽油价格，第二个是距离出发点的距离。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>假设一开始的时候邮箱是空的。</p><p>输出最低花费金额，保留两位小数。如果不能达到目的地，则输出能跑的最远距离，保留两位小数。</p><h2 id="类似题目"><a href="#类似题目" class="headerlink" title="类似题目"></a>类似题目</h2><p><a href="http://poj.org/problem?id=2431" target="_blank" rel="noopener">POJ2431</a></p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ol><li>由于一开始没油，所以所有的加油站必须得有距离为0的，否则哪也去不了。</li><li>最后油箱不剩油。</li><li>寻找比当前加油站距离远且能够到达的加油站，判断这些加油站的油价，如果找到了更低的价格，就只加刚好到那个加油站的油。</li><li>如果找不到更低的，就找油价尽可能低的加油站，在当前加油站加满油之后跑过去。</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>一般而言，为了方便，往往把终点也设置为加油站.</p><h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><p>PAT上面的测试数据不完善，因此会有一些有bug的代码能AC。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> Cmax, N;</span><br><span class="line"><span class="keyword">double</span> D, avg;</span><br><span class="line"><span class="keyword">int</span> sum, run;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">station</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">double</span> distance;</span><br><span class="line">&#125;Station;</span><br><span class="line"><span class="built_in">vector</span>&lt;Station&gt; sta;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Station a, Station b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.distance &lt; b.distance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(sta.begin(), sta.end(), cmp);  <span class="comment">//按从进到远进行排序</span></span><br><span class="line">    <span class="comment">//两种特殊情况</span></span><br><span class="line">    <span class="keyword">if</span> (sta[<span class="number">0</span>].distance != <span class="number">0</span>)                  </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"The maximum travel distance = 0.00"</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> location = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> arrive = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">double</span> cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> gas = <span class="number">0</span>;             <span class="comment">//表示初始有多少油</span></span><br><span class="line">    <span class="keyword">while</span> (!arrive)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">bool</span> findcheap = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">double</span> cheapest = sta[location].price;</span><br><span class="line">        <span class="keyword">int</span> next=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">double</span> minprice = <span class="number">100000000</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = location+<span class="number">1</span>; i&lt;N&amp;&amp;sta[i].distance&lt;=sta[location].distance + Cmax*avg&amp;&amp;sta[i].distance&lt;=D; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sta[i].price &lt; minprice)</span><br><span class="line">            &#123;</span><br><span class="line">                next = i;</span><br><span class="line">                minprice = sta[i].price;</span><br><span class="line">                <span class="keyword">if</span> (sta[i].price&lt;cheapest)</span><br><span class="line">                &#123;</span><br><span class="line">                    findcheap = <span class="literal">true</span>;</span><br><span class="line">                    next = i;   <span class="comment">//找到便宜的，跑到i这里</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (findcheap)</span><br><span class="line">        &#123;</span><br><span class="line">            cost += ((sta[next].distance - sta[location].distance) / avg-gas) * sta[location].price;</span><br><span class="line">            gas = <span class="number">0</span>;</span><br><span class="line">            location = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (next!=<span class="number">-1</span>|| sta[location].distance + Cmax*avg &gt;= D)<span class="comment">//至少能到一个站，不至于没油</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sta[location].distance+Cmax*avg&gt;=D)<span class="comment">//够了</span></span><br><span class="line">            &#123;</span><br><span class="line">                arrive = <span class="literal">true</span>;</span><br><span class="line">                cost += (D - sta[location].distance) / avg*sta[location].price;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//不够</span></span><br><span class="line">            cost += (Cmax - gas) * sta[location].price;</span><br><span class="line">            gas = Cmax - (sta[next].distance - sta[location].distance) / avg;</span><br><span class="line">            location = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;          <span class="comment">//到不了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (arrive)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; cost;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"The maximum travel distance = "</span> &lt;&lt; fixed &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; sta[location].distance + Cmax*avg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("3.txt", "r", stdin);</span></span><br><span class="line">    <span class="comment">//Cmax表示油箱最大容量，D表示相距距离，avg表示平均每升油跑的距离，N表示加油站的数目</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; Cmax &gt;&gt; D &gt;&gt; avg &gt;&gt; N;</span><br><span class="line">    sta.resize(N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; sta[i].price &gt;&gt; sta[i].distance;</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">30</span> <span class="number">2</span> <span class="number">3</span> <span class="number">10</span></span><br><span class="line"><span class="number">2145174067</span> <span class="number">0</span></span><br><span class="line"><span class="number">35</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">0</span></span><br><span class="line"><span class="number">58</span> <span class="number">1</span></span><br><span class="line"><span class="number">67</span> <span class="number">1</span></span><br><span class="line"><span class="number">56</span> <span class="number">1</span></span><br><span class="line"><span class="number">42</span> <span class="number">1</span></span><br><span class="line"><span class="number">73</span> <span class="number">1</span></span><br><span class="line"><span class="number">19</span> <span class="number">0</span></span><br><span class="line"><span class="number">37</span> <span class="number">0</span></span><br><span class="line">输出应该为</span><br><span class="line"><span class="number">1.33</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">21</span> <span class="number">474</span> <span class="number">15</span> <span class="number">10</span></span><br><span class="line"><span class="number">1239036029</span> <span class="number">0</span></span><br><span class="line"><span class="number">37</span> <span class="number">27</span></span><br><span class="line"><span class="number">93</span> <span class="number">194</span></span><br><span class="line"><span class="number">28</span> <span class="number">27</span></span><br><span class="line"><span class="number">11</span> <span class="number">432</span></span><br><span class="line"><span class="number">29</span> <span class="number">182</span></span><br><span class="line"><span class="number">4</span> <span class="number">469</span></span><br><span class="line"><span class="number">63</span> <span class="number">401</span></span><br><span class="line"><span class="number">38</span> <span class="number">122</span></span><br><span class="line"><span class="number">40</span> <span class="number">136</span></span><br><span class="line">输出应该为</span><br><span class="line"><span class="number">2230265642.67</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1032 Sharing (25)</title>
      <link href="//posts/41642082/"/>
      <url>//posts/41642082/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1032" target="_blank" rel="noopener">题目链接</a></p><p>链表遍历，求最早的公共节点。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行三个整数，分别是第一个链表的开始节点，第二个链表的开始节点，节点的个数。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出两个链表的最早的公共节点，如果没有，输出-1.</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>遍历第一个链表时，为每一个节点设置访问位，如果在遍历第二个链表时，发现某一节点在第一次遍历中被访问过了，则输出该节点的编号，如果到最后都没有，则输出-1。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>每个节点中的字符无任何作用。</p><p>如果地址是00010，则也要输出5位，也得输出00010。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> node[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">100001</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> startPoint1, startPoint2, N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = startPoint1; i != <span class="number">-1</span>; i=node[i])</span><br><span class="line">        visit[i] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = startPoint2; i != <span class="number">-1</span>; i=node[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (visit[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%05d"</span>, i);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        visit[i] = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("2.txt", "r", stdin);</span></span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> addr, next;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; startPoint1 &gt;&gt; startPoint2 &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; addr &gt;&gt; ch &gt;&gt; next;</span><br><span class="line">        node[addr] = next;</span><br><span class="line">    &#125;</span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00001</span> <span class="number">00002</span> <span class="number">4</span></span><br><span class="line"><span class="number">00001</span> a <span class="number">10001</span></span><br><span class="line"><span class="number">10001</span> s <span class="number">-1</span></span><br><span class="line"><span class="number">00002</span> a <span class="number">10002</span></span><br><span class="line"><span class="number">10002</span> t <span class="number">-1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1029 Median (25)</title>
      <link href="//posts/cfadc84b/"/>
      <url>//posts/cfadc84b/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1029" target="_blank" rel="noopener">题目链接</a></p><p>给两个整数的上升序列，要求找到他们的中位数。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>每个输入只有一个测试样例，包括两行，每一行的第一个数是整数N，表示这一个队列的长度。随后是N个整数，保证每个整数都在long int 的范围内。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>输出给定的两行的中位数。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>输入全部数据，用vector<long int="">存储，然后进行sort，随后输出中位数。</long></p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>cin/cout比scanf/printf耗时更长，我第一次用的cin/cout,测试点12超时。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">long</span> <span class="keyword">int</span>&gt;v;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(v.begin(), v.end());</span><br><span class="line">    <span class="keyword">int</span> i = (v.size() - <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//freopen("1.txt", "r", stdin);</span></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    v.resize(N);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%ld"</span>, &amp;temp);</span><br><span class="line">        v[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">    v.resize(N + M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N; i &lt; M+N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%ld"</span>,&amp;temp);</span><br><span class="line">        v[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span></span><br><span class="line"><span class="number">5</span> <span class="number">9</span> <span class="number">10</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 中位数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1028 List Sorting (25)</title>
      <link href="//posts/b8aaf8dd/"/>
      <url>//posts/b8aaf8dd/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1028" target="_blank" rel="noopener">题目链接</a></p><p>按给定要求进行排序。<br><a id="more"></a><br>类似题目：<a href="../c61b8460">PAT1025</a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一行是N和C，N是输入数据的条目数，C是排序规则。</p><p>C=1的时候，按学生注册号递增排序</p><p>C=2的时候，按学生姓名非递减排序。</p><p>C=3的时候，按学生成绩非递减排序。</p><p>在C=2/C=3的时候，如果两个姓名/成绩相同，则按照学号递增排序。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>ID 名字 成绩</p><p>每行一个学生。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>其实这个题很简单，就是排序，通过调用sort函数即可。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>cin/cout比scanf/printf耗时更长。如果用cin/cout，则最后一个测试点会超时。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//#pragma warning(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">&#125;Student;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt; stu;</span><br><span class="line"><span class="keyword">int</span> n, c;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(Student a, Student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.ID&lt;b.ID;<span class="comment">//ID递增排序</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(Student a, Student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="built_in">strcmp</span>(a.name, b.name);</span><br><span class="line">    <span class="keyword">if</span> (temp)</span><br><span class="line">        <span class="keyword">return</span> temp &lt;= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.ID&lt;b.ID;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp3</span><span class="params">(Student a, Student b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.score != b.score)</span><br><span class="line">        <span class="keyword">return</span> a.score &lt; b.score;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.ID&lt;b.ID;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; c;</span><br><span class="line">    stu.resize(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %s %d"</span>, &amp;stu[i].ID, stu[i].name, &amp;stu[i].score);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (c)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        sort(stu.begin(),stu.end(), cmp1);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        sort(stu.begin(), stu.end(), cmp2);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        sort(stu.begin(), stu.end(), cmp3);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i = stu.begin(); i != stu.end(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%06d %s %d\n"</span>, i-&gt;ID, i-&gt;name, i-&gt;score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    <span class="comment">//system("pause");</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">000007</span> James <span class="number">87</span></span><br><span class="line"><span class="number">000001</span> James <span class="number">81</span></span><br><span class="line"><span class="number">000002</span> James <span class="number">82</span></span><br><span class="line"><span class="number">000003</span> James <span class="number">83</span></span><br><span class="line"><span class="number">000004</span> James <span class="number">84</span></span><br><span class="line"><span class="number">000005</span> James <span class="number">85</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1025 PAT Ranking (25)</title>
      <link href="//posts/c61b8460/"/>
      <url>//posts/c61b8460/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1025" target="_blank" rel="noopener">题目链接</a></p><p>PAT考试在好几个地方同时进行，测试后就进行排名，要求你统计排名。<br><a id="more"></a></p><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h2><p>第一个N是测试位置的数量，此后有N（&lt;=100）个列表，每个列表包括正整数K（&lt;=300）表示被测试者的数量，随后K行，每一行有一个13位的注册编号和得分。</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>格式： 注册号，最终排名，考场号，在本考场的排名。考场编号从1~n进行编号。</p><p>要求：按最终排序的非降序列，具有相同成绩的人必须排名相同。如果成绩相同，则按照报名号从小到大排序。</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>排序，局部排序。</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><p>32位C/C++中，int，long int，long long int的取值范围如下：</p><p>unsigned   int   0～4294967295   </p><p>int   2147483648～2147483647</p><p>unsigned long 0～4294967295</p><p>long   2147483648～2147483647</p><p>long long的最大值：9223372036854775807</p><p>long long的最小值：-9223372036854775808</p><p>unsigned long long的最大值：1844674407370955161</p><p>因此13位的报名号是可以用long long int 来进行保存的。其实<a href="https://www.liuchuo.net/archives/2180" target="_blank" rel="noopener">柳婼的博客</a>中也是用的long long int，但是在我这里，不知道为什么，我用long long int ，则测试点3，即最后一个，会报错，但是在牛客网上是能通过的。<br>用string则没有这个问题。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//long long int num;//不知道哪里不对，如果用 long long int 则测试点3会答案错误，但是在牛客网上是全对的</span></span><br><span class="line">    <span class="built_in">string</span> num;</span><br><span class="line">    <span class="keyword">int</span> local_rank;</span><br><span class="line">    <span class="keyword">int</span> score;</span><br><span class="line">    <span class="keyword">int</span> final_rank;</span><br><span class="line">    <span class="keyword">int</span> location;</span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt; stu;</span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">const</span> Student &amp;a, <span class="keyword">const</span> Student &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.score != b.score)</span><br><span class="line">        <span class="keyword">return</span> a.score &gt; b.score;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> a.num &lt; b.num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//int input_num;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; M;</span><br><span class="line">        <span class="keyword">int</span> length = stu.size();<span class="comment">//保存上一次的大小</span></span><br><span class="line">        <span class="keyword">int</span> new_length = length + M;</span><br><span class="line">        stu.resize(length + M);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = length; j &lt; new_length; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; stu[j].num;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; stu[j].score;</span><br><span class="line">            stu[j].location = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(stu.begin() + length, stu.end(), cmp);</span><br><span class="line">        stu[length].local_rank = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = length + <span class="number">1</span>; j &lt; new_length; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (stu[j - <span class="number">1</span>].score == stu[j].score)</span><br><span class="line">                stu[j].local_rank = stu[j - <span class="number">1</span>].local_rank;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                stu[j].local_rank = j - length + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    sort(stu.begin(), stu.end(), cmp);</span><br><span class="line">    stu[<span class="number">0</span>].final_rank = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; stu.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (stu[i - <span class="number">1</span>].score == stu[i].score)</span><br><span class="line">            stu[i].final_rank = stu[i - <span class="number">1</span>].final_rank;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            stu[i].final_rank = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stu.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stu.size(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; stu[i].num &lt;&lt; <span class="string">' '</span> &lt;&lt; stu[i].final_rank &lt;&lt; <span class="string">' '</span> &lt;&lt; stu[i].location &lt;&lt; <span class="string">' '</span> &lt;&lt; stu[i].local_rank &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">"1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    solution();</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1234026808810</span> <span class="number">93</span></span><br><span class="line"><span class="number">1234604135729</span> <span class="number">97</span></span><br><span class="line"><span class="number">1234707202308</span> <span class="number">90</span></span><br><span class="line"><span class="number">1234464735740</span> <span class="number">92</span></span><br><span class="line"><span class="number">1234096866161</span> <span class="number">93</span></span><br><span class="line"><span class="number">1234563439254</span> <span class="number">95</span></span><br><span class="line"><span class="number">1234665517583</span> <span class="number">90</span></span><br><span class="line"><span class="number">1234587155559</span> <span class="number">93</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">1234158282819</span> <span class="number">98</span></span><br><span class="line"><span class="number">1234695464275</span> <span class="number">100</span></span><br><span class="line"><span class="number">1234216099242</span> <span class="number">92</span></span><br><span class="line"><span class="number">1234953874157</span> <span class="number">96</span></span><br><span class="line"><span class="number">1234833082961</span> <span class="number">94</span></span><br><span class="line"><span class="number">1234954741173</span> <span class="number">93</span></span><br><span class="line"><span class="number">1234698042486</span> <span class="number">97</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">1234359915502</span> <span class="number">90</span></span><br><span class="line"><span class="number">1234462299800</span> <span class="number">92</span></span><br><span class="line"><span class="number">1234475059130</span> <span class="number">100</span></span><br><span class="line"><span class="number">1234373450093</span> <span class="number">91</span></span><br><span class="line"><span class="number">1234872093302</span> <span class="number">99</span></span><br><span class="line"><span class="number">1234421607748</span> <span class="number">100</span></span><br><span class="line"><span class="number">1234444203313</span> <span class="number">98</span></span><br><span class="line"><span class="number">1234441487675</span> <span class="number">90</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">1234825487256</span> <span class="number">99</span></span><br><span class="line"><span class="number">1234838520186</span> <span class="number">99</span></span><br><span class="line"><span class="number">1234625359404</span> <span class="number">99</span></span><br><span class="line"><span class="number">1234539728328</span> <span class="number">90</span></span><br><span class="line"><span class="number">1234482393613</span> <span class="number">91</span></span><br><span class="line"><span class="number">1234656113051</span> <span class="number">90</span></span><br><span class="line"><span class="number">1234493672093</span> <span class="number">93</span></span><br><span class="line"><span class="number">1234382973981</span> <span class="number">90</span></span><br><span class="line"><span class="number">1234477404316</span> <span class="number">92</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>PAT-A-1024 Palindromic Number (25)</title>
      <link href="//posts/b11cb4f6/"/>
      <url>//posts/b11cb4f6/</url>
      <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p><a href="https://www.patest.cn/contests/pat-a-practise/1024" target="_blank" rel="noopener">题目链接</a></p><p>求一个数对应的回文数。比如输入67　3。即要求是在3步之内找到回文数。<br><a id="more"></a></p><ol><li>67+76=143</li><li>143+341=484</li></ol><p>484是回文数，所以输出484　2</p><p>输入 69　3</p><ol><li>69+96=165</li><li>165+561=726</li><li>726+627=1353</li></ol><p>达到步数限制要求，但是还是不是回文数，所以输出1353　3</p><h1 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h1><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><p>大数加法，我用的是string，用vector也可。</p><h2 id="判断回文数的方法"><a href="#判断回文数的方法" class="headerlink" title="判断回文数的方法"></a>判断回文数的方法</h2><p>设有string number 。若其逆置和其本身相等，则这个数是回文数。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断回文数的方法，逆置，看逆置前后是否相等</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getsum</span><span class="params">(<span class="built_in">string</span> str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> length = str.length();</span><br><span class="line">    <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        num[i] = num[i] + str[i] + carry - <span class="string">'0'</span>;</span><br><span class="line">        carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (num[i]&gt;<span class="string">'9'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num[i] = num[i] - <span class="number">10</span>;</span><br><span class="line">            carry = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (carry)</span><br><span class="line">    &#123;</span><br><span class="line">        num += <span class="string">'1'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(num.begin(), num.end());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        str = num;</span><br><span class="line">        reverse(str.begin(), str.end());<span class="comment">//str是num的逆置</span></span><br><span class="line">        <span class="keyword">if</span> (str==num)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span> &lt;&lt; i;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        getsum(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span> &lt;&lt; n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    solution();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> PAT-A </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PAT </tag>
            
            <tag> 算法 </tag>
            
            <tag> 回文数 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>并查集</title>
      <link href="//posts/c517589e/"/>
      <url>//posts/c517589e/</url>
      <content type="html"><![CDATA[<h1 id="0X00概述"><a href="#0X00概述" class="headerlink" title="0X00概述"></a>0X00概述</h1><p>我个人觉得并查集更像是树的父母表示法。可以用于判断图是否连通。<br><a id="more"></a></p><h1 id="0x01代码"><a href="#0x01代码" class="headerlink" title="0x01代码"></a>0x01代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//并查集</span></span><br><span class="line"><span class="keyword">int</span> par[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> deep[<span class="number">100</span>];</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        par[i] = i;</span><br><span class="line">        deep[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询树的根，并压缩，递归写法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (par[x] == x)</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> par[x] = find(par[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//非递归实现</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> j,k=x;</span><br><span class="line">    <span class="keyword">while</span> (x!=par[x])</span><br><span class="line">        x = par[x];</span><br><span class="line">    <span class="keyword">while</span> (k!=x)</span><br><span class="line">    &#123;</span><br><span class="line">        j = par[k];</span><br><span class="line">        par[k] = x;</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并x和y所属的集合</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = find(x);</span><br><span class="line">    y = find(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (deep[x] &lt; deep[y])         <span class="comment">//如果y的树更高，则x合并过去</span></span><br><span class="line">    &#123;</span><br><span class="line">        par[x] = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                                     <span class="comment">//x&gt;=y</span></span><br><span class="line">    &#123;</span><br><span class="line">        par[y] = x;</span><br><span class="line">        <span class="keyword">if</span> (deep[x]==deep[y])           <span class="comment">//如果当前两个树等高，合并之后深度+1</span></span><br><span class="line">        &#123;</span><br><span class="line">            deep[x]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断x和y是否在同一个集合内</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">same</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> find(x) == find(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>快排为什么那么快</title>
      <link href="//posts/ae807e52/"/>
      <url>//posts/ae807e52/</url>
      <content type="html"><![CDATA[<h1 id="总述"><a href="#总述" class="headerlink" title="总述"></a>总述</h1><p>　　有许多时间复杂度为O(nlog2n)的排序算法，但只有一个快排，理由如下：</p><p>　　这些算法的基本执行次数的多项式最高次项为X*nlog2n，X为系数，快速排序的X最小。他在同级别的算法中是最好的，因此叫快排。</p><h1 id="为什么X是最小的"><a href="#为什么X是最小的" class="headerlink" title="为什么X是最小的"></a>为什么X是最小的</h1><p>　　其实上面那句话，说了和没说没什么两样。本质在于，为什么X是最小的。<br><a id="more"></a></p><p>　　排序的本质可以这样来表述：一组未排序的N个数字，它们一共有N!种重排，其中只有一种排列是满足题意的（譬如从大到小排列）。换句话说，排序问题的可能性一共有N!种。任何基于比较的排序的基本操作单元都是“比较a和b”，这就相当于猜数字游戏里面的一个问句，显然这个问句的答案只能是“是”或“否”，一个只有两种输出的问题最多只能将可能性空间切成两半，根据上面的思路，最佳切法就是切成1/2和1/2。也就是说，我们希望在比较了a和b的大小关系之后，如果发现a&lt;b的话剩下的排列可能性就变成N!/2，如果发现a&gt;b也是剩下N!/2种可能性。由于假设每种排列的概率是均等的，所以这也就意味着支持a&lt;b的排列一共有N!/2个，支持a&gt;b的也是N!/2个，换言之，a&lt;b的概率等于a&gt;b的概率。</p><p>　　我们希望每次在比较a和b的时候，a&lt;b和a&gt;b的概率是均等的，这样我们就能保证无论如何都能将可能性缩小为原来的一半了，这就是最优下界。</p><p>　　一个直接的推论是，如果每次都像上面这样的完美比较，那么N个元素的N!种可能排列只需要log2(N!)就排查完了，而log2(N!)近似于Nlog2N。这正是快排的复杂度。</p><h1 id="为什么堆排比快排慢"><a href="#为什么堆排比快排慢" class="headerlink" title="为什么堆排比快排慢"></a>为什么堆排比快排慢</h1><p>回顾一下堆排的过程：</p><p>1.建立最大堆。（堆顶的元素大于其两个儿子，两个儿子又分别大于它们各自下属的两个儿子… 以此类推）</p><p>2.将堆顶的元素和最后一个元素对调（相当于将堆顶元素（最大值）拿走，然后将堆底的那个元素补上它的空缺），然后让那最后一个元素从顶上往下滑到恰当的位置（重新使堆最大化）。</p><p>3.重复第2步。</p><p>这里的关键问题就在于第2步，堆底的元素肯定很小，将它拿到堆顶和原本属于最大元素的两个子节点比较，它比它们大的可能性是微乎其微的。实际上它肯定小于其中的一个儿子。而大于另一个儿子的可能性非常小。于是，这一次比较的结果就是概率不均等的，根据前面的分析，概率不均等的比较是不明智的，因为它并不能保证在糟糕情况下也能将问题的可能性削减到原本的1/2。可以想像一种极端情况，如果a肯定小于b，那么比较a和b就会什么信息也得不到——原本剩下多少可能性还是剩下多少可能性。</p><p>在堆排里面有大量这种近乎无效的比较，因为被拿到堆顶的那个元素几乎肯定是很小的，而靠近堆顶的元素又几乎肯定是很大的，将一个很小的数和一个很大的数比较，结果几乎肯定是“小于”的，这就意味着问题的可能性只被排除掉了很小一部分。</p><p>这就是为什么堆排比较慢（堆排虽然和快排一样复杂度都是O(Nlog2N)但堆排复杂度的常系数更大）。</p><p>MacKay也提供了一个修改版的堆排：每次不是将堆底的元素拿到上面去，而是直接比较堆顶（最大）元素的两个儿子，即选出次大的元素。由于这两个儿子之间的大小关系是很不确定的，两者都很大，说不好哪个更大哪个更小，所以这次比较的两个结果就是概率均等的了。</p><p>MacKay也提供了一个修改版的堆排：每次不是将堆底的元素拿到上面去，而是直接比较堆顶（最大）元素的两个儿子，即选出次大的元素。由于这两个儿子之间的大小关系是很不确定的，两者都很大，说不好哪个更大哪个更小，所以这次比较的两个结果就是概率均等的了。</p><h1 id="为什么快排其实也不是那么快"><a href="#为什么快排其实也不是那么快" class="headerlink" title="为什么快排其实也不是那么快"></a>为什么快排其实也不是那么快</h1><p>我们考虑快排的过程：随机选择一个元素做“轴元素”，将所有大于轴元素的移到左边，其余移到右边。根据这个过程，快排的第一次比较就是将一个元素和轴元素比较，这个时候显而易见的是，“大于”和“小于”的可能性各占一半。这是一次漂亮的比较。</p><p>然而，快排的第二次比较就不那么高明了：我们不妨令轴元素为pivot，第一次比较结果是a1&lt;pivot，那么可以证明第二次比较a2也小于pivot的可能性是2/3！这容易证明：如果a2&gt;pivot的话，那么a1，a2，pivot这三个元素之间的关系就完全确定了——a1&lt;pivot&lt;a2，剩下来的元素排列的可能性我们不妨记为P（不需要具体算出来）。而如果a2&lt;pivot呢？那么a1和a2的关系就仍然是不确定的，也就是说，这个分支里面含有两种情况：a1&lt;a2&lt;pivot，以及a2&lt;a1&lt;pivot。对于其中任一种情况，剩下的元素排列的可能性都是P，于是这个分支里面剩下的排列可能性就是2P。所以当a2&lt;pivot的时候，还剩下2/3的可能性需要排查。</p><p>再进一步，如果第二步比较果真发现a2&lt;pivot的话，第三步比较就更不妙了，模仿上面的推理，a3&lt;pivot的概率将会是3/4！</p><p>这就是快排也不那么快的原因，因为它也没有做到每次比较都能将剩下的可能性砍掉一半。</p><h1 id="基数排序为什么比较快"><a href="#基数排序为什么比较快" class="headerlink" title="基数排序为什么比较快"></a>基数排序为什么比较快</h1><p>传统的解释是：基排不是基于比较的，所以不具有后者的局限性。话是没错，但其实还可以将它和基于比较的排序做一个类比。</p><p>基排的过程也许是源于我们理顺一副牌的过程：如果你有N（N&lt;=13）张牌，乱序，如何理顺呢？我们假象桌上有十三个位置，然后我们将手里的牌一张一张放出去，如果是3，就放在位置3上，如果是J，就放在位置11上，放完了之后从位置1到位置13收集所有的牌（没有牌的位置上不收集任何牌）。</p><p>我们可以这样来理解基排高效的本质原因：假设前i张牌都已经放到了它们对应的位置上，第i+1张牌放出去的时候，实际上就相当于“一下子”就确立了它和前i张牌的大小关系，用O(1)的操作就将这张牌正确地插入到了前i张牌中的正确位置上，这个效果就相当于插入排序的第i轮原本需要比较O(i)次的，现在只需要O(1)了。</p><p>但是，为什么基排能够达到这个效果呢？上面只是解释了过程，解释了过程不代表解释了本质。</p><p>当i张牌放到位之后，放置第i+1张牌的时候有多少种可能性？大约i+1种，因为前i张牌将13个位置分割成了i+1个区间——第i+1张牌可以落在任意一个区间。所以放置第i+1张牌就好比是询问这样一个问题：“这张牌落在哪个区间呢？”而这个问题的答案有i+1种可能性？所以它就将剩下来的可能性均分成了i+1份（换句话说，砍掉了i/i+1的可能性！）。再看看基于比较的排序吧：由于每次比较只有两种结果，所以最多只能将剩下的可能性砍掉一半。</p><p>这就是为什么基排要快得多。而所有基于比较的排序都逃脱不了Nlog2N的宿命。</p><hr><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p><a href="http://blog.csdn.net/a236209186/article/details/52012823" target="_blank" rel="noopener">快排为什么那么快</a></p><p>2018版数据结构高分笔记，率辉 主编</p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 快速排序 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
