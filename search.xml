<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019旷世-循环小数的循环体]]></title>
    <url>%2F%2Fposts%2Fa12ff16d%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x6982;&#x8FF0; &#x4ECA;&#x5929;&#x4E0A;&#x5348;&#x9762;&#x65F7;&#x4E16;&#x7684;&#x9762;&#x8BD5;&#x9898;&#x3002; &#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x6570;p&#x548C;q&#xFF0C;&#x5982;&#x679C;p/q&#x662F;&#x4E00;&#x4E2A;&#x65E0;&#x9650;&#x5FAA;&#x73AF;&#x5C0F;&#x6570;&#xFF0C;&#x5219;&#x6C42;&#x8FD9;&#x4E2A;&#x65E0;&#x9650;&#x5FAA;&#x73AF;&#x5C0F;&#x6570;&#x7684;&#x5FAA;&#x73AF;&#x4F53;&#x3002;&#x4E0D;&#x9650;&#x5B9A;p&#x548C;q&#x7684;&#x5927;&#x5C0F;&#x3002; &#x8FD9;&#x9053;&#x9898;&#x770B;&#x4F3C;&#x7B80;&#x5355;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x6BD4;&#x8F83;&#x96BE;&#x3002; &#x601D;&#x8DEF;&#x4E00;&#xFF1A;&#x6A21;&#x62DF; &#x5982;&#x679C;&#x6709;&#x9650;&#x5B9A;q&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x5F00;&#x4E00;&#x4E2A;&#x5F88;&#x5927;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x6765;&#x5B58;&#x50A8;&#x6BCF;&#x4E00;&#x6B65;&#x4E2D;&#x66FE;&#x7ECF;&#x51FA;&#x73B0;&#x8FC7;&#x7684;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x66FE;&#x7ECF;&#x51FA;&#x73B0;&#xFF0C;&#x5219;&#x8868;&#x793A;&#x6709;&#x5FAA;&#x73AF;&#x3002; &#x4EE3;&#x7801;&#x5982;&#x4E0B; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;cfloat&gt;#include &lt;climits&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;queue&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;sstream&gt;#include &lt;ctime&gt;#pragma warning(disable:4996)using namespace std;#define Windint m[1000], n[1000];void solution(){ ios::sync_with_stdio(false); int p, q; memset(m, -1, sizeof(m)); memset(n, -1, sizeof(n)); cin &gt;&gt; p &gt;&gt; q; cout &lt;&lt; p / q; p = p % q; cout &lt;&lt; &apos;.&apos;; int cnt = 0, r = p; while (r != 0 &amp;&amp; m[r] == -1) //&#x4F59;&#x6570;&#x4E0D;&#x4E3A;0&#xFF0C;&#x4E14;&#x8FD9;&#x4E2A;&#x6570;&#x4E4B;&#x524D;&#x672A;&#x66FE;&#x51FA;&#x73B0;&#x8FC7; { m[r] = cnt++; //&#x8BB0;&#x5F55;&#x5E8F;&#x53F7; r *= 10; n[cnt] = r / q; r = r % q; } if (r != 0) //&#x8868;&#x793A;&#x6709;&#x5FAA;&#x73AF; { for (int i = 1; i &lt;= m[r]; i++) //&#x524D;&#x9762;&#x975E;&#x5FAA;&#x73AF;&#x7684;&#x90E8;&#x5206; cout &lt;&lt; n[i]; cout &lt;&lt; &apos;(&apos;; //&#x5FAA;&#x73AF;&#x4F53;&#x90E8;&#x5206; for (int i = m[r]+1; i &lt;= cnt; i++) cout &lt;&lt; n[i]; cout &lt;&lt; &apos;)&apos;; } else { for (int i = 1; i &lt;= cnt; i++) cout &lt;&lt; n[i]; } cout &lt;&lt; endl; return ;}int main(){#ifdef Wind freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin);#endif solution(); system(&quot;pause&quot;); return 0;} &#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x6709;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x7A7A;&#x95F4;&#x5F00;&#x9500;&#x5927;&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(q)&#xFF0C;&#x5F53;&#x7136;&#x5B9E;&#x9645;&#x4E0A;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x7EA6;&#x5206;&#x6765;&#x964D;&#x4F4E;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x3002; &#x6240;&#x4EE5;&#x5982;&#x679C;&#x5728;&#x4E0D;&#x9650;&#x5236;p&#x548C;q&#x5927;&#x5C0F;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x8FD9;&#x79CD;&#x505A;&#x6CD5;&#x662F;&#x4E0D;&#x884C;&#x7684;&#x3002; &#x601D;&#x8DEF;&#x4E8C;&#xFF1A;&#x6B27;&#x62C9;&#x5B9A;&#x7406; &#x6B27;&#x62C9;&#x5B9A;&#x7406; &#x6B27;&#x62C9;&#x5B9A;&#x7406;&#x662F;&#x4E00;&#x4E2A;&#x5173;&#x4E8E;&#x540C;&#x4F59;&#x7684;&#x6027;&#x8D28;&#x3002; &#x6B27;&#x62C9;&#x5B9A;&#x7406;&#x8868;&#x660E;&#xFF0C;&#x82E5;\(n,a\)&#x4E3A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x4E14;\(n,a\)&#x4E92;&#x8D28;&#xFF0C;&#x5219;&#x6709; \[a^{\varphi (n)} \equiv 1 \ \ (mod \ \ n)\] &#x5176;&#x4E2D;\(\varphi (n)\)&#x8868;&#x793A;&#x6B27;&#x62C9;&#x51FD;&#x6570;&#xFF0C;\(\equiv\)&#x8868;&#x793A;&#x540C;&#x4F59;&#x3002; &#x6B27;&#x62C9;&#x5B9A;&#x7406;&#x8868;&#x660E;&#xFF0C;\(a^{\varphi (n)}\)&#x4E0E;\(1\)&#x5728;&#x6A21;\(n\)&#x4E0B;&#x540C;&#x4F59;&#x3002;&#x6B27;&#x62C9;&#x5B9A;&#x7406;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x8D39;&#x9A6C;&#x5C0F;&#x5B9A;&#x7406;&#x7684;&#x63A8;&#x5E7F;&#x3002; &#x6B27;&#x62C9;&#x51FD;&#x6570; &#x5BF9;&#x4E8E;&#x6B63;&#x6574;&#x6570;\(n\)&#xFF0C;&#x6B27;&#x62C9;&#x51FD;&#x6570; \(\varphi (n)\)&#x7684;&#x503C;&#x662F;&#x5C0F;&#x4E8E;&#x6216;&#x7B49;&#x4E8E;\(n\)&#x7684;&#x6B63;&#x6574;&#x6570;&#x4E2D;&#xFF0C;&#x4E0E;\(n\)&#x4E92;&#x8D28;&#x7684;&#x6570;&#x7684;&#x6570;&#x76EE;&#x3002; &#x5728;C++&#x4E2D;&#xFF0C;&#x53EF;&#x4EE5;&#x7531;&#x5982;&#x4E0B;&#x51FD;&#x6570;&#x76F4;&#x63A5;&#x8BA1;&#x7B97;&#xFF1A; 12345678910111213141516int Eular(int x){ int res = x; for (int i = 2; i*i &lt;= x; i++) { if (x%i == 0) { res = (res / i)*(i - 1); while (x%i == 0) x = x / i; } } if (x &gt; 1) res = (res / x)*(x - 1); return res;} &#x63A8;&#x5BFC; &#x4EE5;4/33=0.1212121212......&#x4E3A;&#x4F8B;&#x3002; &#x5C06;&#x5206;&#x5B50;*10&#xFF0C;&#x518D;&#x6C42;&#x6A21;&#xFF0C;&#x6709;&#xFF1A; \[\frac 4 {33}\ \frac 7 {33}\ \frac 4 {33}\ \frac 7 {33}\ \frac 4 {33}\ \frac 7 {33}\ \frac 4 {33}...\] &#x53EF;&#x77E5;&#xFF1A;&#x7B2C;&#x4E09;&#x6B21;&#x4E0E;&#x7B2C;&#x4E00;&#x6B21;&#x91CD;&#x590D;&#xFF0C;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;2&#x7684;&#x5FAA;&#x73AF;&#x8282;&#x3002; &#x5BF9;&#x4E8E;&#x6574;&#x6570;&#x90E8;&#x5206;&#x548C;&#x80FD;&#x7EA6;&#x5206;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x7EA6;&#x5206;&#x5373;&#x53EF;&#xFF0C;&#x4E0E;&#x540E;&#x9762;&#x7684;&#x5FAA;&#x73AF;&#x5C0F;&#x6570;&#x6CA1;&#x6709;&#x5173;&#x7CFB;&#xFF0C;&#x56E0;&#x6B64;&#x53EA;&#x8003;&#x8651;&#x771F;&#x5206;&#x6570;\(\frac p q\)&#xFF08;\(p\)&#x548C;\(q\)&#x90FD;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x7EA6;&#x5206;&#x4E86;&#xFF09;&#xFF1A; &#x8BB0;&#x7B2C;\(k\)&#x4E2A;&#x5206;&#x6570;&#x4E3A; \[\frac {p*10^k\ mod\ q} q\] &#x5047;&#x8BBE;&#x7B2C;\(i\)&#x4E2A;&#x548C;&#x7B2C;\(j\)&#x4E2A;&#x5206;&#x6570;&#x76F8;&#x7B49;&#xFF0C;&#x4E8E;&#x662F;&#x6709; \[\frac{p*10^i mod\ q}{q} = \frac{p*10^j mod\ q}{q}\] &#x5219;&#x540C;&#x4F59;&#x5173;&#x7CFB;&#x4E3A;i \[p * 10^j \equiv p * 10^i (mod \ q) \quad (i &lt; j)\] &#x540C;&#x4F59;&#x5173;&#x7CFB;&#x53EF;&#x5199;&#x4E3A; \[p*10^j = p*10^i + q*k\] &#x5373; \[p(10^j-10^i) = q*k \ &#x2192;\ p*10^i(10^{j - i} - 1) = q*k\] &#x7531;&#x4E8E;\(k \neq 0\) &#x6240;&#x4EE5;&#x6709;&#xFF08;\(|\)&#x8868;&#x793A;&#x6574;&#x9664;&#xFF0C;&#x5373;&#x7B2C;&#x4E8C;&#x9879;\(\div\)&#x7B2C;&#x4E00;&#x9879;&#xFF0C;&#x4F59;&#x6570;&#x4E3A;0&#xFF09;&#xFF1A; \[q|10^i(10^{j - i} - 1)p\] &#x7531;&#x4E8E;\(p\)&#x548C;\(q\)&#x4E92;&#x8D28;&#xFF0C;&#x6240;&#x4EE5;&#x6709;&#xFF1A; \[q|10^i(10^{j - i} - 1) \tag{*}\] &#x7531;&#x4E8E;\(10^i\)&#x662F;&#x5076;&#x6570;&#xFF0C;\(10^{j-i}-1\)&#x662F;&#x5947;&#x6570;&#x3002; &#x90A3;&#x4E48;\(i\)&#x5C06;&#x7531;\(10^i\)&#x548C;\(q\)&#x6765;&#x51B3;&#x5B9A;&#xFF0C;&#x5C06;\(q\)&#x5206;&#x6210;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x4E00;&#x90E8;&#x5206;&#x7531;&#x56E0;&#x5B50;\(2\)&#x548C;\(5\)&#x7EC4;&#x6210;&#xFF0C;&#x53E6;&#x4E00;&#x90E8;&#x5206;&#x7531;&#x5176;&#x4ED6;&#x56E0;&#x5B50;&#x7EC4;&#x6210;&#x3002; &#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x4E48;&#x5206;&#xFF0C;&#x56E0;&#x4E3A;&#x662F;\(10\)&#x8FDB;&#x5236;&#xFF0C;\(10=2*5\)&#x3002; &#x5219;&#x56E0;&#x5B50;\(2\)&#x548C;&#x56E0;&#x5B50;\(5\)&#x5C06;&#x7531;\(10^i\)&#x6765;&#x62B5;&#x6D88;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x5728;\(10^{j-i}-1\)&#x4E2D;&#x3002; &#x56E0;&#x6B64;\(i = max(n,m)\)&#xFF0C;&#x5176;&#x4E2D;\(n\)&#x4E3A;\(q\)&#x4E2D;&#x56E0;&#x5B50;\(2\)&#x7684;&#x4E2A;&#x6570;&#xFF0C;\(m\)&#x4E3A;\(q\)&#x4E2D;&#x56E0;&#x5B50;\(5\)&#x7684;&#x4E2A;&#x6570;&#x3002; \(i\)&#x662F;&#x5FAA;&#x73AF;&#x7684;&#x8D77;&#x59CB;&#x70B9;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x6C42;\(i\)&#x7684;&#x51FD;&#x6570;&#x4E3A; 123456789101112131415161718int get_i(int &amp;n){ //&#x8FD9;&#x91CC;&#x7684;n&#x5BF9;&#x5E94;&#x7684;&#x662F;&#x63A8;&#x5230;&#x91CC;&#x9762;&#x7684;q //&#x540C;&#x65F6;&#xFF0C;&#x8981;&#x628A;q&#x8F6C;&#x4E3A;q&apos;&#x6240;&#x4EE5;&#x8981;&#x7528;&#x5F15;&#x7528; int res1 = 0, res2 = 0; while (n % 2 == 0) { n = n / 2; res1++; } while (n % 5 == 0) { n = n / 5; res2++; } //&#x8FD9;&#x91CC;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x5BF9;&#x5E94;&#x63A8;&#x5BFC;&#x91CC;&#x7684;i return max(res1, res2);} &#x73B0;&#x5728;&#x63A8;&#x5BFC;&#x4EE3;&#x7801;&#x4E2D;&#x7684;\(q&apos;\)&#x548C;&#x5FAA;&#x73AF;&#x8282;&#x7684;&#x957F;&#x5EA6;\(length=j-i\) &#x8BBE;\(q&apos; = \frac{q}{2^n*5^m}\)&#xFF0C;&#x5219;\((*)\)&#x5F0F;&#x53EF;&#x4EE5;&#x5199;&#x4F5C; \[q|2^n5^m(10^{j - i} - 1)*\frac{10^i}{2^n5^m}\] &#x5373; \[q&apos;|(10^{j - i} - 1)*\frac{10^i}{2^n5^m}\] &#x53C8;&#x56E0;&#x4E3A;\(q&apos; = \frac{q}{2^n*5^m}\)&#x4E0E;\(\frac{10^i}{2^n5^m}\)&#x4E92;&#x8D28;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x5C06;&#x4E0A;&#x5F0F;&#x5199;&#x4E3A; \[q&apos;|(10^{j - i} - 1)\] &#x5230;&#x8FD9;&#x91CC;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x6C42;&#x51FA;\(j-i\)&#x5C31;&#x662F;&#x5FAA;&#x73AF;&#x5C0F;&#x6570;&#x7684;&#x5FAA;&#x73AF;&#x8282;&#x7684;&#x957F;&#x5EA6;&#x4E86;&#x3002; &#x53D8;&#x53D8;&#x5F62;&#xFF0C;&#x6709; \[10^{j - i}&#x2261;1\ (mod\ q&apos;)\] &#x8BB0;\(j-i\)&#x4E3A;&#x4E00;&#x4E2A;\(x\)&#xFF0C;&#x5C31;&#x53D8;&#x6210;&#x6C42;&#x89E3; \[10^x&#x2261;1\ (mod\ q&apos;)\] &#x7531;&#x524D;&#x6587;&#x4E2D;&#x7684;&#x6B27;&#x62C9;&#x5B9A;&#x7406;&#xFF08;&#x73B0;&#x5728;&#x660E;&#x767D;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x5C3D;&#x53EF;&#x80FD;&#x7684;&#x628A;&#x56E0;&#x5B50;\(2\)&#x548C;&#x56E0;&#x5B50;\(5\)&#x7EA6;&#x53BB;&#x4E86;&#x5427;&#xFF0C;&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x521B;&#x9020;&#x6B27;&#x62C9;&#x5B9A;&#x7406;&#x91CC;&#x7684;&#x4E92;&#x8D28;&#x6761;&#x4EF6;&#xFF09;&#x53EF;&#x77E5;&#xFF1A; &#x5B58;&#x5728;&#x6700;&#x5C0F;&#x7684;\(10^x&#x2261;1\ (mod\ q&#x2019;)\)&#xFF0C;&#x5F53;\(x\)&#x662F;\(\varphi(q&#x2019;)\)&#x7684;&#x4E00;&#x4E2A;&#x56E0;&#x5B50;&#x3002;&#xFF08;&#x6211;&#x6CA1;&#x60F3;&#x8D77;&#x6765;&#x600E;&#x4E48;&#x8BC1;&#x660E;&#xFF09; &#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x53BB;&#x679A;&#x4E3E;&#x6240;&#x6709;\(\varphi(q&#x2019;)\)&#x7684;&#x56E0;&#x5B50;&#xFF0C;&#x4ECE;&#x800C;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x6700;&#x5C0F;&#x7684;\(x\)&#xFF0C;&#x6EE1;&#x8DB3;\(10^x&#x2261;1\ (mod\ q&#x2019;)\)&#x5373;&#x53EF;&#x6C42;&#x51FA;&#x5FAA;&#x73AF;&#x8282;&#x7684;&#x957F;&#x5EA6;\(length\)&#x3002; &#x6700;&#x540E;&#x6309;&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x5373;&#x53EF;&#x3002; &#x4EE3;&#x7801; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;cfloat&gt;#include &lt;climits&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;queue&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;sstream&gt;#include &lt;ctime&gt;#pragma warning(disable:4996)using namespace std;#define Wind//&#x76F4;&#x63A5;&#x5B9E;&#x73B0;&#x6B27;&#x62C9;&#x51FD;&#x6570;int Eular(int x){ int res = x; for (int i = 2; i*i &lt;= x; i++) { if (x%i == 0) { res = (res / i)*(i - 1); while (x%i == 0) x = x / i; } } if (x &gt; 1) res = (res / x)*(x - 1); return res;}int gcd(int a, int b){ return b == 0 ? a : gcd(b, a%b);}int get_i(int &amp;n){ //&#x8FD9;&#x91CC;&#x7684;n&#x5BF9;&#x5E94;&#x7684;&#x662F;&#x63A8;&#x5230;&#x91CC;&#x9762;&#x7684;p //&#x540C;&#x65F6;&#xFF0C;&#x8981;&#x628A;p&#x8F6C;&#x4E3A;p&apos;&#x6240;&#x4EE5;&#x8981;&#x7528;&#x5F15;&#x7528; int res1 = 0, res2 = 0; while (n % 2 == 0) { n = n / 2; res1++; } while (n % 5 == 0) { n = n / 5; res2++; } //&#x8FD9;&#x91CC;&#x7684;&#x8FD4;&#x56DE;&#x503C;&#x5BF9;&#x5E94;&#x63A8;&#x5230;&#x91CC;&#x7684;i return max(res1, res2);}int power(int a, int b, int mod){ //&#x5FEB;&#x901F;&#x5E42;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x6C42;&#x4E86;mod int res = 1; while (b!=0) { if (b &amp; 1) res = (res*a) % mod; a = (a*a) % mod; b &gt;&gt;= 1; } return res;}int get_length(int phi, int mod){ //phi&#x662F;&#x6B27;&#x62C9;&#x51FD;&#x6570;&#x8BA1;&#x7B97;&#x51FA;&#x6765;&#x7684;&#x503C; //&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x503C;&#x662F;&#x63A8;&#x5230;&#x91CC;&#x7684;x&#xFF0C;&#x8868;&#x793A;j-i&#xFF0C;&#x4E3A;&#x957F;&#x5EA6; int minn = 0x7FFFFFFF; for (int i = 1; i*i &lt;= phi; i++) { if (phi%i == 0) { if (power(10, i, mod) == 1) { minn = min(minn, i); break; } if (power(10, phi / i, mod) == 1) { minn = min(minn, phi / i); //break; //&#x56E0;&#x4E3A;&#x6709;&#x53EF;&#x80FD;&#x8FD8;&#x6709;&#x66F4;&#x5C0F;&#x7684; } } } return minn;}void solution(){ ios::sync_with_stdio(false); int p, q, a, b, g; cin &gt;&gt; p &gt;&gt; q; //&#x8F93;&#x5165;p&#x548C;q g = gcd(p, q); //&#x6C42;&#x6700;&#x5927;&#x516C;&#x7EA6;&#x6570; p = p / g; q = q / g; a = p; b = q; int s = get_i(q); int phi = Eular(q); int length = get_length(phi, q); if (length == 0x7FFFFFFF) s = length; //-----------Print---------------- cout &lt;&lt; a / b &lt;&lt; &apos;.&apos;; a = a - b * (a / b); for (int i = 0; i &lt; s+length; i++) { if (i == s) cout &lt;&lt; &quot;(&quot;; a *= 10; cout &lt;&lt; a / b; a = a - b * (a / b); if (a == 0) break; if (i == s + length - 1) cout &lt;&lt; &quot;)&quot;; } cout &lt;&lt; endl; return;}int main(){#ifdef Wind freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin);#endif solution(); system(&quot;pause&quot;); return 0;} &#x7C7B;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;POJ 3358&#xFF0C;&#x8BA1;&#x849C;&#x5BA2;&#x5206;&#x6570;&#x5316;&#x5C0F;&#x6570; &#x6CE8;&#xFF1A;&#x8BA1;&#x849C;&#x5BA2;&#x7684;&#x8BDD;&#xFF0C;&#x8981;&#x7528;long long &#xFF0C;&#x800C;&#x4E0D;&#x80FD;&#x7528; int &#x3002; PS&#xFF1A;&#x65F7;&#x4E16;&#x7684;&#x5DE5;&#x7A0B;&#x5E08;&#x6839;&#x672C;&#x6CA1;&#x542C;&#x8BF4;&#x8FC7;&#x6B27;&#x62C9;&#x5B9A;&#x7406;&#xFF0C;&#x8FD9;&#x573A;&#x9762;&#x8BD5;&#x7ED9;&#x6211;&#x7684;&#x611F;&#x89C9;&#x662F;&#x975E;&#x5E38;&#x4E0D;&#x4E13;&#x4E1A;&#x3002;]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>找实习</tag>
        <tag>旷世</tag>
        <tag>面试</tag>
        <tag>数论</tag>
        <tag>欧拉定理</tag>
        <tag>欧拉函数</tag>
        <tag>循环小数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[视觉SLAM脑图]]></title>
    <url>%2F%2Fposts%2F28186654%2F</url>
    <content type="text"><![CDATA[&#x6CA1;&#x5199;&#x5B8C;&#xFF0C;v0.2&#x7248;&#x3002;]]></content>
      <categories>
        <category>SLAM</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>智能机器人</tag>
        <tag>SLAM</tag>
        <tag>计算机视觉</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[找实习的经验教训总结]]></title>
    <url>%2F%2Fposts%2Fe8bcf6f0%2F</url>
    <content type="text"><![CDATA[&#x4ECE;5.4&#x6B63;&#x5F0F;&#x5F00;&#x59CB;&#x627E;&#x5B9E;&#x4E60;&#x5230;&#x73B0;&#x5728;&#x5DF2;&#x7ECF;&#x8FC7;&#x4E86;10&#x5929;&#x4E86;&#xFF0C;&#x628A;&#x5FC3;&#x5F97;&#x4F53;&#x4F1A;&#xFF0C;&#x7ECF;&#x9A8C;&#x6559;&#x8BAD;&#xFF0C;&#x6240;&#x601D;&#x6240;&#x611F;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;&#x3002; &#x7ECF;&#x9A8C;&#x603B;&#x7ED3; &#x5927;&#x516C;&#x53F8;or&#x5C0F;&#x516C;&#x53F8; &#x8FD9;&#x4E00;&#x6B21;&#x627E;&#x5B9E;&#x4E60;&#xFF0C;&#x6211;&#x53EA;&#x9762;&#x4E86;&#x516C;&#x53F8;&#xFF0C;&#x6CA1;&#x6709;&#x9762;&#x79D1;&#x7814;&#x9662;&#x6240;&#xFF08;&#x4E2D;&#x79D1;&#x9662;**&#x6240;or**&#x5B9E;&#x9A8C;&#x5BA4;&#xFF09;&#x3002;&#x6240;&#x4EE5;&#x5BF9;&#x4E8E;&#x79D1;&#x7814;&#x9662;&#x6240;&#x7684;&#x9762;&#x8BD5;&#x6211;&#x6CA1;&#x6709;&#x592A;&#x591A;&#x7684;&#x4F53;&#x4F1A;&#x3002; &#x6211;&#x9762;&#x4E86;&#x5927;&#x6982;&#x6709;10+&#x516C;&#x53F8;&#xFF0C;&#x540E;&#x9762;&#x6536;&#x5230;&#x4E00;&#x4E9B;offer&#x4E4B;&#x540E;&#xFF0C;&#x4E0D;&#x60F3;&#x9762;&#x7684;&#x3001;&#x4E0D;&#x60F3;&#x53BB;&#x7684;&#x516C;&#x53F8;&#xFF0C;&#x6211;&#x5C31;&#x6CA1;&#x518D;&#x53C2;&#x52A0;&#x4ED6;&#x4EEC;&#x7684;&#x7B14;&#x8BD5;/&#x4E8C;&#x9762;&#x3002;&#x603B;&#x4F53;&#x4E0A;&#x800C;&#x8A00;&#xFF0C;&#x5927;&#x516C;&#x53F8;&#x7684;&#x9762;&#x8BD5;&#x66F4;&#x770B;&#x91CD;&#x201C;&#x4F60;&#x73B0;&#x5728;&#x7684;&#x57FA;&#x7840;&#x600E;&#x4E48;&#x6837;&#xFF0C;&#x7ECF;&#x8FC7;&#x6211;&#x4EEC;&#x7684;&#x57F9;&#x8BAD;&#xFF0C;&#x4F60;&#x5B66;&#x5F97;&#x80FD;&#x6709;&#x591A;&#x5FEB;&#xFF0C;&#x57F9;&#x8BAD;&#x7ED3;&#x675F;&#x540E;&#x4F60;&#x80FD;&#x5E72;&#x4EC0;&#x4E48;&#x201D;&#x3002;&#x5BF9;&#x4E8E;&#x4E00;&#x4E9B;&#x5C0F;&#x516C;&#x53F8;&#xFF0C;&#x4ED6;&#x4EEC;&#x66F4;&#x770B;&#x91CD;&#x201C;&#x4F60;&#x73B0;&#x5728;&#x7684;&#x4E13;&#x4E1A;&#x6280;&#x80FD;&#x548C;&#x5C97;&#x4F4D;&#x5339;&#x914D;&#x7A0B;&#x5EA6;&#x5982;&#x4F55;&#xFF0C;&#x76F4;&#x767D;&#x4E00;&#x70B9;&#x7684;&#x8BF4;&#xFF0C;&#x4F60;&#x80FD;&#x9876;&#x5F97;&#x4E0A;&#x51E0;&#x4E2A;&#x6B63;&#x5F0F;&#x5458;&#x5DE5;&#x201D;&#x3002; &#x5BF9;&#x4E8E;&#x6211;&#xFF0C;&#x5B9E;&#x4E60;&#x7684;&#x6700;&#x5927;&#x610F;&#x4E49;&#x662F;&#x7ED9;&#x6211;&#x4E00;&#x4E2A;&#x673A;&#x4F1A;&#x53BB;&#x6DF1;&#x5165;&#x4F53;&#x9A8C;&#xFF0C;&#x601D;&#x8003;&#xFF0C;&#x8BD5;&#x9519;&#x3002;&#x800C;&#x4E14;&#x6211;&#x6295;&#x7684;&#x5C97;&#x4F4D;&#x5927;&#x591A;&#x6570;&#x662F;&#x505A;&#x4E00;&#x4E9B;&#x975E;&#x5E38;&#x65B0;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x90A3;&#x4E48;&#x4E5F;&#x5C31;&#x4E0D;&#x592A;&#x53EF;&#x80FD;&#x8BA9;&#x6211;&#x53BB;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x8001;&#x65E7;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x505A;&#x4E00;&#x4E9B;&#x5F88;&#x65E0;&#x804A;&#x7684;&#x4E8B;&#x4E86;&#x3002; &#x56E0;&#x6B64;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x4E5F;&#x53EA;&#x6709;&#x5927;&#x516C;&#x53F8;&#x4F1A;&#x6709;&#x8F83;&#x5145;&#x8DB3;&#x7684;&#x4EBA;&#x529B;&#x7269;&#x529B;&#x53BB;&#x57F9;&#x8BAD;&#x4E00;&#x4E2A;&#x5B9E;&#x4E60;&#x751F;&#xFF0C;&#x8BA9;&#x4ED6;&#x5B66;&#x4E60;&#x4F01;&#x4E1A;&#x6587;&#x5316;&#xFF0C;&#x9879;&#x76EE;&#x6D41;&#x7A0B;&#xFF0C;&#x6307;&#x6D3E;&#x4E00;&#x4E2A;mentor&#x6765;&#x5E26;&#x3002;&#x521D;&#x521B;&#x56E2;&#x961F;&#x66F4;&#x591A;&#x7684;&#x8FD8;&#x662F;&#x5173;&#x6CE8;&#x8FD9;&#x4E2A;&#x5B9E;&#x4E60;&#x751F;&#x80FD;&#x4EA7;&#x51FA;&#x591A;&#x5C11;&#xFF0C;&#x662F;&#x5426;&#x503C;&#x7ED9;&#x4ED6;&#x5F00;&#x51FA;&#x7684;&#x85AA;&#x6C34;&#x3002; PS&#xFF1A;&#x771F;&#x60F3;&#x5E72;&#x6D3B;&#x8D5A;&#x94B1;&#x7684;&#x8BDD;&#xFF0C;&#x53BB;&#x63A5;&#x5355;&#x505A;&#x79C1;&#x6D3B;&#x66F4;&#x8D5A;&#xFF0C;&#x6211;&#x6709;&#x4E2A;&#x540C;&#x5B66;&#x5728;&#x7814;&#x7A76;&#x751F;&#x5165;&#x5B66;&#x4E4B;&#x524D;&#x63A5;&#x79C1;&#x6D3B;&#xFF0C;&#x6708;&#x5165;1.5W&#x3002; &#x6CE8;&#xFF1A;&#x8FD9;&#x91CC;&#x7684;&#x5927;&#x516C;&#x53F8;&#x662F;&#x6307;&#x5177;&#x6709;&#x4E00;&#x5B9A;&#x884C;&#x4E1A;&#x5F71;&#x54CD;&#x529B;&#x7684;&#x516C;&#x53F8;&#xFF0C;&#x89C4;&#x6A21;&#x5728;&#x72EC;&#x89D2;&#x517D;&#x53CA;&#x4EE5;&#x4E0A;&#x3002;&#x5F88;&#x591A;&#x72EC;&#x89D2;&#x517D;&#x516C;&#x53F8;&#x5BF9;&#x4E8E;&#x65B0;&#x4EBA;&#x7684;&#x57F9;&#x517B;&#x505A;&#x5F97;&#x975E;&#x5E38;&#x975E;&#x5E38;&#x5389;&#x5BB3;&#x3002;&#x5C11;&#x90E8;&#x5206;&#x5C0F;&#x516C;&#x53F8;&#x4E5F;&#x5F88;&#x770B;&#x91CD;&#x5BF9;&#x65B0;&#x4EBA;&#x7684;&#x57F9;&#x517B;&#x3002; &#x591A;&#x53BB;&#x6295;&#xFF0C;&#x591A;&#x53BB;&#x9762; &#x5982;&#x540E;&#x6587;&#x6240;&#x8FF0;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x6211;&#x662F;&#x6CA1;&#x60F3;&#x597D;&#x81EA;&#x5DF1;&#x8981;&#x505A;&#x4EC0;&#x4E48;&#x7684;&#xFF0C;&#x5728;&#x548C;&#x4E00;&#x4E9B;&#x9762;&#x8BD5;&#x5B98;&#x8FDB;&#x884C;&#x6C9F;&#x901A;&#x4EA4;&#x6D41;&#x4E4B;&#x540E;&#xFF0C;&#x624D;&#x6E10;&#x6E10;&#x660E;&#x767D;&#x81EA;&#x5DF1;&#x60F3;&#x8981;&#x505A;&#x4EC0;&#x4E48;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5EFA;&#x8BAE;&#x591A;&#x53BB;&#x6295;&#x7B80;&#x5386;&#xFF0C;&#x591A;&#x53BB;&#x9762;&#x3002;&#x8138;&#x76AE;&#x8981;&#x539A;&#xFF0C;&#x5FC3;&#x6001;&#x8981;&#x597D;&#xFF0C;&#x62FF;&#x4E86;offer&#x56FA;&#x7136;&#x9AD8;&#x5174;&#xFF0C;&#x88AB;&#x62D2;&#x4E5F;&#x4E0D;&#x8981;&#x6C14;&#x9981;&#xFF0C;&#x6BD5;&#x7ADF;&#x4E5F;&#x957F;&#x4E86;&#x89C1;&#x8BC6;&#xFF0C;&#x600E;&#x4E48;&#x7B97;&#x90FD;&#x662F;&#x4E0D;&#x4E8F;&#x7684;&#x3002; &#x8BF4;&#x4E00;&#x4E2A;&#x6211;&#x88AB;&#x62D2;&#x7684;&#x4E8B;&#xFF0C;&#x5F88;&#x591A;&#x4EBA;&#x90FD;&#x8BF4;&#x5E73;&#x5B89;&#x79D1;&#x6280;&#x597D;&#x6295;&#xFF0C;&#x90FD;&#x5237;&#x4E00;&#x4E2A;&#x5E73;&#x5B89;&#x4FDD;&#x5E95;&#xFF0C;&#x4F46;&#x5B9E;&#x9645;&#x4E0A;&#xFF0C;&#x6211;&#x6295;&#x5E73;&#x5B89;&#x79D1;&#x6280;&#xFF0C;&#x5728;&#x7B80;&#x5386;&#x7B5B;&#x9009;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x88AB;&#x62D2;&#x4E86;&#xFF0C;&#x5F53;&#x65F6;&#x6211;&#x4E5F;&#x7279;&#x522B;&#x90C1;&#x95F7;&#xFF0C;&#x6211;&#x5FC3;&#x60F3;&#xFF0C;&#x6211;TM&#x518D;&#x600E;&#x4E48;&#x83DC;&#xFF0C;&#x4E5F;&#x4E0D;&#x81F3;&#x4E8E;&#x5728;&#x7B80;&#x5386;&#x4E0A;&#x5C31;&#x88AB;&#x6302;&#x4E86;&#x5427;&#xFF1F;&#x540E;&#x6765;&#x4E5F;&#x6162;&#x6162;&#x60F3;&#x5F00;&#x4E86;&#xFF0C;&#x5509;&#xFF0C;&#x88AB;&#x62D2;&#x5C31;&#x88AB;&#x62D2;&#x5427;&#xFF0C;&#x968F;&#x4ED6;&#x53BB;&#x5427;&#xFF0C;&#x5FC3;&#x6001;&#x653E;&#x5E73;&#x3002; &#x8138;&#x76AE;&#x8981;&#x539A;&#xFF0C;&#x4E3B;&#x52A8;&#x4E89;&#x53D6;&#x673A;&#x4F1A; &#x9762;&#x534E;&#x4E3A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x662F;&#x5206;&#x4E24;&#x5929;&#x8FDB;&#x884C;&#xFF0C;&#x6211;&#x662F;&#x7B2C;&#x4E00;&#x5929;&#xFF0C;&#x9762;&#x6211;&#x7684;&#x9762;&#x8BD5;&#x5B98;&#x662F;WLAN&#x7EC4;&#x7684;&#xFF0C;&#x4E5F;&#x628A;&#x6211;&#x5206;&#x5230;&#x4E86;WLAN&#x7EC4;&#xFF0C;&#x6211;&#x4E0D;&#x592A;&#x60F3;&#x505A;&#x3002;&#x7B2C;&#x4E8C;&#x5929;&#x6709;&#x4E2D;&#x592E;&#x7814;&#x7A76;&#x9662;&#x7684;&#x81EA;&#x52A8;&#x9A7E;&#x9A76;&#x7EC4;&#x6765;&#x9762;&#xFF0C;&#x6211;&#x542C;&#x8BF4;&#x4E86;&#x6D88;&#x606F;&#xFF0C;&#x6211;&#x5C31;&#x53BB;&#x7533;&#x8BF7;&#x9738;&#x9762;&#x4E86;&#xFF0C;HR&#x770B;&#x4E86;&#x770B;&#x6211;&#x7684;&#x9762;&#x8BD5;&#x8BB0;&#x5F55;&#xFF0C;&#x4E5F;&#x4E0E;&#x81EA;&#x52A8;&#x9A7E;&#x9A76;&#x5173;&#x7CFB;&#x6BD4;&#x8F83;&#x5927;&#xFF0C;&#x5C31;&#x540C;&#x610F;&#x4E86;&#x3002;&#x540E;&#x6765;&#x4E5F;&#x662F;&#x9762;&#x5F97;&#x633A;&#x597D;&#x7684;&#x3002; Intel&#x4E00;&#x5F00;&#x59CB;&#x53D1;&#x7ED9;&#x6211;&#x7684;&#x662F;&#x7F16;&#x8BD1;&#x5668;&#x7EC4;&#x7684;offer&#xFF0C;&#x6211;&#x4E5F;&#x4E0D;&#x592A;&#x60F3;&#x53BB;&#xFF0C;&#x591A;&#x65B9;&#x6253;&#x542C;&#xFF0C;&#x8054;&#x7CFB;&#x5230;&#x4E86;&#x81EA;&#x52A8;&#x9A7E;&#x9A76;&#x7EC4;&#x7684;&#x8D1F;&#x8D23;&#x4EBA;&#xFF0C;&#x53C8;&#x5411;&#x4ED6;&#x6BDB;&#x9042;&#x81EA;&#x8350;&#xFF0C;&#x6700;&#x540E;&#x4E5F;&#x8F6C;&#x5C97;&#x6210;&#x529F;&#x3002; &#x8FD8;&#x662F;&#x90A3;&#x53E5;&#x8001;&#x8BDD;&#xFF0C;&#x673A;&#x4F1A;&#x662F;&#x81EA;&#x5DF1;&#x4E89;&#x53D6;&#x6765;&#x7684;&#xFF0C;&#x627E;&#x5DE5;&#x4F5C;&#x5C31;&#x662F;&#x628A;&#x81EA;&#x5DF1;&#x5F80;&#x5916;&#x63A8;&#x9500;&#x7684;&#x8FC7;&#x7A0B;&#x3002;&#x8138;&#x76AE;&#x8981;&#x539A;&#x3002; &#x535A;&#x5BA2;&#x5E2E;&#x52A9;&#x5F88;&#x5927; &#x6709;&#x5F88;&#x591A;&#x4F53;&#x9A8C;&#x4E0D;&#x9519;&#x7684;&#x9762;&#x8BD5;&#xFF0C;&#x9762;&#x8BD5;&#x5B98;&#x90FD;&#x7531;&#x8BE6;&#x7EC6;&#x7684;&#x6D4F;&#x89C8;&#x6211;&#x7684;&#x535A;&#x5BA2;&#xFF0C;&#x76F8;&#x5BF9;&#x4E8E;&#x6211;&#x5199;&#x7684;&#x5F88;&#x632B;&#x7684;&#x7B80;&#x5386;&#xFF0C;&#x535A;&#x5BA2;&#x6551;&#x4E86;&#x6211;&#x4E00;&#x547D;&#x3002; &#x6240;&#x4EE5;&#xFF0C;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#x7684;&#x8BDD;&#xFF0C;&#x5199;&#x4E00;&#x4E2A;&#x535A;&#x5BA2;&#xFF0C;&#x4F5C;&#x4E3A;&#x81EA;&#x5DF1;&#x7684;&#x79EF;&#x7D2F;&#x548C;&#x6C89;&#x6DC0;&#x5427;&#x3002; &#x5B89;&#x6392;&#x597D;&#x9762;&#x8BD5;&#x65F6;&#x95F4; &#x8FD9;&#x4E00;&#x5468;&#x6211;&#x9762;&#x4E86;&#x5F88;&#x591A;&#x5BB6;&#x516C;&#x53F8;&#xFF0C;&#x5E38;&#x5E38;&#x662F;&#x4E00;&#x5929;&#x8981;&#x51C6;&#x5907;&#x597D;&#x51E0;&#x573A;&#x9762;&#x8BD5;&#xFF0C;&#x6211;&#x90FD;&#x628A;&#x9762;&#x8BD5;&#x5B89;&#x6392;&#x8BB0;&#x5230;&#x4E00;&#x4E2A;&#x5C0F;&#x672C;&#x5B50;&#x4E0A;&#xFF0C;&#x6211;&#x4F1A;&#x5728;&#x9762;&#x8BD5;&#x524D;&#x534A;&#x5C0F;&#x65F6;&#x5C31;&#x51C6;&#x5907;&#x597D;&#xFF0C;&#x540C;&#x65F6;&#x4E5F;&#x5E0C;&#x671B;&#x5BF9;&#x65B9;&#x80FD;&#x9075;&#x5B88;&#x65F6;&#x95F4;&#x3002; &#x8FD9;&#x4E00;&#x5468;&#x6211;&#x88AB;&#x4E00;&#x5BB6;&#x4E91;&#x8BA1;&#x7B97;&#x516C;&#x53F8;&#x62D6;&#x8FC7;&#x9762;&#x8BD5;&#x65F6;&#x95F4;&#xFF08;&#x7EA6;&#x5B9A;&#x4E0B;&#x5348;2&#x70B9;&#x5F00;&#x59CB;&#xFF0C;5&#x70B9;&#x90FD;&#x6CA1;&#x9762;&#x5B8C;&#xFF09;&#xFF0C;&#x4E5F;&#x8FDF;&#x5230;&#x8FC7;&#x4E24;&#x573A;&#x9762;&#x8BD5;&#xFF08;&#x6709;&#x4E00;&#x5929;&#x7279;&#x522B;&#x60F3;&#x5BB6;&#xFF0C;&#x5FC3;&#x60C5;&#x7279;&#x522B;&#x4F4E;&#x843D;&#xFF09;&#xFF0C;&#x5F15;&#x4EE5;&#x4E3A;&#x6212;&#xFF0C;&#x6DF1;&#x611F;&#x6B49;&#x610F;&#x3002; &#x6559;&#x8BAD;&#x603B;&#x7ED3; &#x65B9;&#x5411;&#x5B9A;&#x7684;&#x665A; &#x6211;&#x4E00;&#x5F00;&#x59CB;&#x6839;&#x672C;&#x6CA1;&#x60F3;&#x597D;&#x6211;&#x8981;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x6211;&#x60F3;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x751A;&#x81F3;&#x8FDE;&#x6211;&#x80FD;&#x505A;&#x4EC0;&#x4E48;&#x90FD;&#x4E0D;&#x77E5;&#x9053;&#x3002;&#x6240;&#x4EE5;&#x6295;&#x7B80;&#x5386;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x90FD;&#x662F;&#x778E;&#x6295;&#x7684;&#xFF0C;&#x51E1;&#x662F;&#x5C97;&#x4F4D;&#x63CF;&#x8FF0;&#x4E0E;&#x6211;&#x7B80;&#x5386;&#x6CBE;&#x70B9;&#x8FB9;&#x7684;&#x6211;&#x90FD;&#x6295;&#x4E86;&#xFF0C;&#x90A3;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x7684;&#x7B80;&#x5386;&#x6CA1;&#x6709;&#x91CD;&#x70B9;&#xFF0C;&#x5B8C;&#x5168;&#x770B;&#x4E0D;&#x51FA;&#x6211;&#x7684;&#x5DE5;&#x4F5C;&#x610F;&#x5411;&#x3002;&#x8FD9;&#x4E2A;&#x9636;&#x6BB5;&#x662F;&#x6211;&#x7684;&#x8BD5;&#x9519;&#x8FC7;&#x7A0B;&#x3002;&#x7ADF;&#x7136;&#x8FD8;&#x6536;&#x5230;&#x4E86;&#x51E0;&#x4E2A;offer&#x3002; &#x540E;&#x6765;&#x6211;&#x60F3;&#x6E05;&#x695A;&#x4E86;&#x6211;&#x8981;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x624D;&#x5F00;&#x59CB;&#x66F4;&#x6709;&#x9488;&#x5BF9;&#x6027;&#x7684;&#x6295;&#x3002; &#x7B80;&#x5386;&#x6295;&#x5F97;&#x665A; &#x57FA;&#x672C;&#x4E0A;&#x8FC7;&#x5B8C;&#x5E74;&#xFF0C;&#x6625;&#x62DB;&#x5C31;&#x5F00;&#x59CB;&#x4E86;&#x3002;&#x8D8A;&#x65E9;&#x6295;&#x7B80;&#x5386;&#xFF0C;&#x673A;&#x4F1A;&#x8D8A;&#x5927;&#x3002;&#x6211;&#x5C31;&#x662F;&#x6295;&#x7684;&#x592A;&#x665A;&#x4E86;&#xFF0C; &#x50CF;&#x4E00;&#x4E9B;&#x5916;&#x4F01;&#xFF08;&#x601D;&#x79D1;&#x7B49;&#xFF09;&#x548C;&#x817E;&#x8BAF;&#x548C;&#x963F;&#x91CC;&#x57FA;&#x672C;&#x4E0A;&#x5DF2;&#x7ECF;&#x7ED3;&#x675F;&#x4E86;&#x6625;&#x62DB;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x7684;&#x7B80;&#x5386;&#x8FDE;&#x88AB;&#x635E;&#x7684;&#x673A;&#x4F1A;&#x90FD;&#x6CA1;&#x4E86;&#xFF0C;&#x53EA;&#x80FD;&#x7B49;&#x79CB;&#x62DB;&#x3002; &#x8BB0;&#x4F4F;&#x51E0;&#x4E2A;&#x65F6;&#x95F4;&#x70B9;&#xFF0C;&#x6625;&#x62DB;&#xFF1A;&#x91D1;&#x4E09;&#x94F6;&#x56DB;&#xFF0C;3&#x6708;&#x5C31;&#x5F00;&#x59CB;&#x4E86;&#x3002;&#x79CB;&#x62DB;&#xFF1A;7&#x6708;&#x4E2D;&#x63D0;&#x524D;&#x6279;&#x5F00;&#x59CB;&#xFF0C;&#x91D1;&#x4E5D;&#x94F6;&#x5341;&#x3002; &#x51C6;&#x5907;&#x4E0D;&#x5145;&#x5206; &#x9762;&#x8BD5;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x53CD;&#x6620;&#x51FA;&#x6765;&#x4E86;&#x5F88;&#x591A;&#x95EE;&#x9898;&#xFF0C;&#x6BD4;&#x5982;&#x66FE;&#x7ECF;&#x5B66;&#x8FC7;&#x7684;&#x4E1C;&#x897F;&#x90FD;&#x5FD8;&#x4E86;&#xFF0C;&#x590D;&#x4E60;&#x5F97;&#x4E0D;&#x591F;&#x3002;&#x671F;&#x4E2D;&#x8003;&#x5B8C;&#x7ACB;&#x9A6C;&#x5C31;&#x8981;&#x627E;&#x5B9E;&#x4E60;&#x4E86;&#xFF0C;&#x4E5F;&#x5C31;&#x4E94;&#x4E00;&#x671F;&#x95F4;&#x5237;&#x4E86;&#x4E00;&#x4E9B;&#x7B97;&#x6CD5;&#x9898;&#xFF0C;&#x627E;&#x4E86;&#x627E;&#x624B;&#x611F;&#xFF0C;&#x6211;&#x7684;&#x9762;&#x8BD5;&#x57FA;&#x672C;&#x4E0A;&#x7C7B;&#x4F3C;&#x4E8E;&#x88F8;&#x9762;&#x3002;&#x5982;&#x679C;&#x518D;&#x7ED9;&#x6211;&#x4E00;&#x4E2A;&#x6708;&#x7684;&#x65F6;&#x95F4;&#x53BB;&#x51C6;&#x5907;&#x590D;&#x4E60;&#x7684;&#x8BDD;&#xFF0C;&#x6211;&#x5E94;&#x8BE5;&#x80FD;&#x8868;&#x73B0;&#x5F97;&#x66F4;&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x4F30;&#x8BA1;&#x5230;&#x65F6;&#x5019;&#x9EC4;&#x82B1;&#x83DC;&#x90FD;&#x51C9;&#x4E86;&#x3002; &#x8BF4;&#x767D;&#x4E86;&#x5C31;&#x662F;&#x83DC;&#xFF0C;&#x6CA1;&#x6709;&#x522B;&#x7684;&#x7406;&#x7531;&#xFF0C;&#x552F;&#x4E00;&#x7684;&#x539F;&#x56E0;&#x5C31;&#x662F;&#x6211;&#x592A;&#x83DC;&#x3002; &#x5176;&#x4ED6;&#x5FC3;&#x5F97;&#x4F53;&#x4F1A; &#x7B97;&#x6CD5;or&#x5F00;&#x53D1;&#xFF1F; &#x5C31;&#x6211;&#x627E;&#x5B9E;&#x4E60;&#x7684;&#x4F53;&#x9A8C;&#x6765;&#x770B;&#xFF0C;&#x7B97;&#x6CD5;&#x5C97;&#x4ECD;&#x7136;&#x6BD4;&#x5F00;&#x53D1;&#x5C97;&#x96BE;&#x627E;&#x3002;&#x7EAF;&#x7B97;&#x6CD5;&#x7814;&#x7A76;&#xFF08;research&#xFF09;&#x66F4;&#x662F;&#x96BE;&#x4E0A;&#x52A0;&#x96BE;&#x3002;&#x867D;&#x7136;&#x5F88;&#x591A;&#x516C;&#x53F8;&#x7ED9;&#x4E86;&#x9762;&#x8BD5;&#x673A;&#x4F1A;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x7B80;&#x5386;&#x7B5B;&#x9009;&#x4E0A;&#x5C31;&#x628A;&#x6211;&#x62D2;&#x4E86;&#x7684;&#x4ECD;&#x4E0D;&#x5728;&#x5C11;&#x6570;&#x3002; &#x5EFA;&#x8BAE;&#x627E;&#x7B97;&#x6CD5;&#x5C97;&#x7684;&#x540C;&#x5B66;&#x6700;&#x597D;&#x80FD;&#x540C;&#x65F6;&#x6709;&#x4E00;&#x7BC7;B&#x4F1A;+&#x8FC7;&#x786C;&#x7684;&#x9879;&#x76EE;/&#x6BD4;&#x8D5B;&#x7ECF;&#x5386;+&#x624E;&#x5B9E;&#x7684;&#x7F16;&#x7A0B;/&#x7B97;&#x6CD5;&#x529F;&#x5E95;+&#x4E00;&#x4EFD;&#x5927;&#x5382;&#x6709;&#x4EF7;&#x503C;&#x7684;&#x5B9E;&#x4E60;&#x7ECF;&#x5386;&#x3002;&#x6211;&#x89C9;&#x5F97;&#x53EA;&#x6709;&#x540C;&#x65F6;&#x6EE1;&#x8DB3;&#x4EE5;&#x4E0A;4&#x4E2A;&#x6761;&#x4EF6;&#xFF0C;&#x627E;&#x5DE5;&#x4F5C;&#x7684;&#x65F6;&#x5019;&#x624D;&#x80FD;&#x505A;&#x5230;&#x6709;&#x8F83;&#x5927;&#x628A;&#x63E1;&#x3002; &#x9009;&#x62E9;&#x6743;&#x7684;&#x95EE;&#x9898; &#x4E4B;&#x524D;&#x770B;&#x8FC7;&#x8FD9;&#x4E48;&#x4E00;&#x53E5;&#x8BDD;&#xFF1A;&#x201C;&#x80FD;&#x591F;&#x5728;&#x4E00;&#x8D77;&#x6109;&#x5FEB;&#x73A9;&#x800D;&#x7684;&#x57FA;&#x7840;&#xFF0C;&#x662F;&#x53CC;&#x65B9;&#x90FD;&#x6709;&#x6380;&#x684C;&#x5B50;&#x7684;&#x80FD;&#x529B;&#x548C;&#x4E0D;&#x6380;&#x684C;&#x5B50;&#x7684;&#x4FEE;&#x517B;&#x3002;&#x751F;&#x610F;&#x5982;&#x6B64;&#xFF0C;&#x5A5A;&#x59FB;&#x4EA6;&#x5982;&#x6B64;&#x3002;&#x201D; &#x6211;&#x5BF9;&#x4E8E;&#x8FD9;&#x53E5;&#x8BDD;&#x7684;&#x7406;&#x89E3;&#x662F;&#xFF0C;&#x65E2;&#x8981;&#x6709;&#x5951;&#x7EA6;&#x7CBE;&#x795E;&#xFF0C;&#x4E5F;&#x8981;&#x5728;&#x5BF9;&#x65B9;&#x4F5C;&#x51FA;&#x51FA;&#x683C;&#x4E3E;&#x52A8;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6709;&#x4FDD;&#x62A4;&#x81EA;&#x5DF1;&#x7684;&#x80FD;&#x529B;&#x3002; &#x65B0;&#x95FB;&#x4E0A;&#x4E5F;&#x62A5;&#x5230;&#x51FA;&#x5F88;&#x591A;&#x65E0;&#x826F;&#x5BFC;&#x5E08;&#x7684;&#x4E8B;&#x8FF9;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x5728;&#x4EFB;&#x4F55;&#x65F6;&#x5019;&#x628A;&#x9009;&#x62E9;&#x6743;&#x7559;&#x5728;&#x81EA;&#x5DF1;&#x624B;&#x91CC;&#xFF0C;&#x8FD9;&#x4E00;&#x70B9;&#x975E;&#x5E38;&#x91CD;&#x8981;&#x3002;]]></content>
      <categories>
        <category>经验教训</category>
      </categories>
      <tags>
        <tag>经验教训</tag>
        <tag>总结</tag>
        <tag>找实习</tag>
        <tag>实习周</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-Advanced-Level题解]]></title>
    <url>%2F%2Fposts%2F79c0eafd%2F</url>
    <content type="text"><![CDATA[&#x4EE3;&#x7801;&#x8BF7;&#x70B9;&#x8FD9;&#x91CC; &#x9898;&#x89E3;&#x4F1A;&#x5728;&#x4E0D;&#x5FD9;&#x7684;&#x65F6;&#x5019;&#x66F4;&#x65B0;&#x3002;]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[乱七八糟的算法题]]></title>
    <url>%2F%2Fposts%2F3bb23225%2F</url>
    <content type="text"><![CDATA[&#x672A;&#x5F52;&#x6863;&#x7684;&#x7B97;&#x6CD5;&#x9898; 2019&#x534E;&#x4E3A;-&#x5C0F;&#x738B;&#x7684;&#x5BC6;&#x7801; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x5C0F;&#x738B;&#x7684;&#x4FDD;&#x9669;&#x7BB1;&#x5BC6;&#x7801;&#x662F;&#x4E00;&#x4E2A;&#x5347;&#x5E8F;&#x6392;&#x5217;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x4F46;&#x662F;&#x5C0F;&#x738B;&#x603B;&#x662F;&#x8BB0;&#x4E0D;&#x4F4F;&#x4ED6;&#x7684;&#x5BC6;&#x7801;&#xFF0C;&#x4E8E;&#x662F;&#x5C0F;&#x738B;&#x5C06;&#x4ED6;&#x7684;&#x5BC6;&#x7801;&#x52A0;&#x5BC6;&#x540E;&#x4FDD;&#x5B58;&#x5728;&#x4E86;&#x4E00;&#x4E2A;&#x6587;&#x672C;&#x6587;&#x4EF6;&#x91CC;&#xFF0C;&#x52A0;&#x5BC6;&#x7684;&#x6D41;&#x7A0B;&#x5982;&#x4E0B;&#xFF1A; &#x7528;&#x6570;&#x5B57;&#x7684;&#x82F1;&#x6587;&#x5355;&#x8BCD;&#x6765;&#x4EE3;&#x66FF;&#x6570;&#x5B57;&#x672C;&#x8EAB;&#x3002;&#x6BD4;&#x5982;1234699&#x53D8;&#x6210;onethreefoursixninenine &#x5C06;&#x4E0A;&#x8FF0;&#x5B57;&#x7B26;&#x4E32;&#x4F7F;&#x7528;&#x201C;&#x5C0F;&#x738B;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x201D;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002;&#x8BE5;&#x7B97;&#x6CD5;&#x4F1A;&#x6309;&#x7167;&#x67D0;&#x79CD;&#x89C4;&#x5219;&#x6765;&#x6539;&#x53D8;&#x539F;&#x5B57;&#x7B26;&#x4E32;&#x5B57;&#x7B26;&#x7684;&#x6392;&#x5217;&#x987A;&#x5E8F;&#xFF0C;&#x540C;&#x65F6;&#x8FD8;&#x4F1A;&#x6539;&#x53D8;&#x67D0;&#x4E9B;&#x5B57;&#x6BCD;&#x7684;&#x5927;&#x5C0F;&#x5199;&#x3002;&#x6BD4;&#x5982;onethreefoursixninenine&#x7ECF;&#x8FC7;&#x52A0;&#x5BC6;&#x540E;&#x5C31;&#x53D8;&#x6210;&#x4E86;NeNohuiroNNiNeteefersix&#x3002; &#x7531;&#x4E8E;&#x201C;&#x5C0F;&#x738B;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x201D;&#x662F;&#x5C0F;&#x738B;&#x81EA;&#x5DF1;&#x8BBE;&#x8BA1;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5C0F;&#x738B;&#x8BA4;&#x4E3A;&#x53EA;&#x6709;&#x4ED6;&#x81EA;&#x5DF1;&#x80FD;&#x5C06;&#x52A0;&#x5BC6;&#x540E;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x8FD8;&#x539F;&#x3002; &#x5B9E;&#x9645;&#x4E0A;&#x5C0F;&#x738B;&#x7684;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x5B58;&#x5728;&#x6F0F;&#x6D1E;&#x3002;&#x5373;&#x4F7F;&#x4E0D;&#x77E5;&#x9053;&#x201C;&#x5C0F;&#x738B;&#x52A0;&#x5BC6;&#x7B97;&#x6CD5;&#x201D;&#x7684;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#xFF0C;&#x4E5F;&#x662F;&#x53EF;&#x4EE5;&#x8FD8;&#x539F;&#x51FA;&#x539F;&#x59CB;&#x7684;&#x5BC6;&#x7801;&#x7684;&#x3002;&#x8BF7;&#x4F60;&#x5199;&#x4E00;&#x6BB5;&#x7A0B;&#x5E8F;&#x6765;&#x7834;&#x89E3;&#x5C0F;&#x738B;&#x7684;&#x5BC6;&#x7801;&#x3002; 2019&#x534E;&#x4E3A;&#x6625;&#x62DB;&#x673A;&#x8BD5;&#x9898; &#x793A;&#x4F8B;1 &#x8F93;&#x5165; 1oNEthrEEfoursixNiNENiEN &#x8F93;&#x51FA; 1134699 &#x6211;&#x7684;&#x7B54;&#x6848; &#x601D;&#x8DEF;&#x5206;&#x6790; &#x5C0F;&#x738B;&#x7684;&#x4FDD;&#x9669;&#x7BB1;&#x5BC6;&#x7801;&#x662F;&#x5347;&#x5E8F;&#x6392;&#x5217;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002; &#x6570;&#x5B57;&#x7528;&#x5B57;&#x6BCD;&#x6765;&#x4EE3;&#x66FF;&#x3002; &#x53EA;&#x6539;&#x53D8;&#x5B57;&#x6BCD;&#x7684;&#x6392;&#x5217;&#x987A;&#x5E8F;&#xFF0C;&#x4E0D;&#x505A;&#x66FF;&#x6362;&#xFF08;&#x5373;&#x7528;&#x522B;&#x7684;&#x5B57;&#x6BCD;&#x4EE3;&#x66FF;&#xFF09;&#x3002; &#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x5B57;&#x4E0E;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x6BCD;&#x5217;&#x51FA; &#x6570;&#x5B57; &#x5B57;&#x6BCD; &#x72EC;&#x6709;&#x7684;&#x5B57;&#x7B26; 0 zero z 1 one o-0-2-4 2 two w 3 three h-8 4 four u 5 five f-4 6 six x 7 seven s-6 8 eight g 9 nine i-5-6-8 &#x89E3;&#x91CA;&#x4E00;&#x4E0B;&#xFF1A;&#x5728;&#x8FD9;10&#x4E2A;&#x6570;&#x5B57;&#x4E2D;&#xFF0C;&#x5BF9;&#x4E8E;&#x5B57;&#x6BCD;&#x201D;z&#x201C;&#xFF0C;&#x53EA;&#x5728;zero&#x4E2D;&#x51FA;&#x73B0;&#x3002;&#x5176;&#x4ED6;&#x7684;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x3002; &#x5BF9;&#x4E8E;&#x5B57;&#x6BCD;&#x201C;h&#x201D;&#xFF0C;&#x53EA;&#x5728;3&#x548C;8&#x7684;&#x82F1;&#x6587;&#x4E2D;&#x51FA;&#x73B0;&#xFF0C;&#x5176;&#x4ED6;&#x5730;&#x65B9;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x3002; &#x56E0;&#x6B64;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x5B57;&#x6BCD;&#x8FDB;&#x884C;&#x7EDF;&#x8BA1;&#x51FA;&#x73B0;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x5047;&#x5982;z&#x51FA;&#x73B0;3&#x6B21;&#xFF0C;&#x5219;&#x8868;&#x793A;&#x6570;&#x5B57;0&#x51FA;&#x73B0;&#x4E86;3&#x6B21;&#xFF0C;&#x540C;&#x65F6;&#x5C06;&#x201C;zero&#x201D;&#x56DB;&#x4E2A;&#x5B57;&#x6BCD;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x540C;&#x65F6;&#x51CF;3&#x3002;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x3002; &#x4EE3;&#x7801; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;cfloat&gt;#include &lt;climits&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;queue&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;sstream&gt;#include &lt;ctime&gt;#pragma warning(disable:4996)using namespace std;#define Wind/*0----z zero2----w two4----u four6----x six8----g eight3----h-8 three5----f-4 five7----s-6 seven9----i-5-6-8 nine1----o-0-2-4 one*/void solution(){ string input; cin &gt;&gt; input; transform(input.begin(), input.end(), input.begin(), ::tolower); //cout &lt;&lt; input &lt;&lt; endl; //&#x53D8;&#x5C0F;&#x5199; vector&lt;int&gt;res; map&lt;char, int&gt; m; for (int i = 0; i &lt; input.length(); i++) { if (!m.count(input[i])) m[input[i]] = 1; else m[input[i]] = m[input[i]] + 1; } //&#x5148;&#x5904;&#x7406;0 int num[11] = { 0 }; if (m.count(&apos;z&apos;)) //&#x8868;&#x793A;&#x6709;0 { num[0] = m[&apos;z&apos;]; m[&apos;z&apos;] -= num[0]; m[&apos;e&apos;] -= num[0]; m[&apos;r&apos;] -= num[0]; m[&apos;o&apos;] -= num[0]; } if (m.count(&apos;w&apos;)) //&#x8868;&#x793A;&#x6709;2 { num[2] = m[&apos;w&apos;]; m[&apos;t&apos;] -= num[2]; m[&apos;w&apos;] -= num[2]; m[&apos;o&apos;] -= num[2]; } if (m.count(&apos;u&apos;)) //&#x8868;&#x793A;&#x6709;4 { num[4] = m[&apos;u&apos;]; m[&apos;f&apos;] -= num[4]; m[&apos;o&apos;] -= num[4]; m[&apos;u&apos;] -= num[4]; m[&apos;r&apos;] -= num[4]; } if (m.count(&apos;x&apos;)) //&#x8868;&#x793A;&#x6709;6 { num[6] = m[&apos;x&apos;]; m[&apos;s&apos;] -= num[6]; m[&apos;i&apos;] -= num[6]; m[&apos;x&apos;] -= num[6]; } if (m.count(&apos;g&apos;)) //&#x8868;&#x793A;&#x6709;8 { num[8] = m[&apos;g&apos;]; m[&apos;e&apos;] -= num[8]; m[&apos;i&apos;] -= num[8]; m[&apos;g&apos;] -= num[8]; m[&apos;h&apos;] -= num[8]; m[&apos;t&apos;] -= num[8]; } if (m.count(&apos;h&apos;)) //&#x8868;&#x793A;&#x6709;3 { num[3] = m[&apos;h&apos;]; m[&apos;t&apos;] -= num[3]; m[&apos;h&apos;] -= num[3]; m[&apos;r&apos;] -= num[3]; m[&apos;e&apos;] -= num[3]; m[&apos;e&apos;] -= num[3]; } if (m.count(&apos;f&apos;)) //&#x8868;&#x793A;&#x6709;5 { num[5] = m[&apos;f&apos;]; m[&apos;f&apos;] -= num[5]; m[&apos;i&apos;] -= num[5]; m[&apos;v&apos;] -= num[5]; m[&apos;e&apos;] -= num[5]; } if (m.count(&apos;s&apos;)) //&#x8868;&#x793A;&#x6709;7 { num[7] = m[&apos;s&apos;]; m[&apos;s&apos;] -= num[7]; m[&apos;e&apos;] -= num[7]; m[&apos;v&apos;] -= num[7]; m[&apos;e&apos;] -= num[7]; m[&apos;n&apos;] -= num[7]; } if (m.count(&apos;i&apos;)) //&#x8868;&#x793A;&#x6709;9 { num[9] = m[&apos;i&apos;]; m[&apos;n&apos;] -= num[9]; m[&apos;i&apos;] -= num[9]; m[&apos;n&apos;] -= num[9]; m[&apos;e&apos;] -= num[9]; } if (m.count(&apos;o&apos;)) //&#x8868;&#x793A;&#x6709;16 { num[1] = m[&apos;o&apos;]; m[&apos;o&apos;] -= num[1]; m[&apos;n&apos;] -= num[1]; m[&apos;e&apos;] -= num[1]; } for (int i = 0; i &lt; 11; i++) { for (int j = 0; j &lt; num[i]; j++) { cout &lt;&lt; i; } } cout &lt;&lt; endl; return;}int main(){#ifdef Wind freopen(&quot;3.txt&quot;, &quot;r&quot;, stdin);#endif solution(); system(&quot;pause&quot;); return 0;} 2019&#x534E;&#x4E3A;-&#x65CB;&#x8F6C;&#x77E9;&#x9635; &#x9898;&#x76EE;&#x5927;&#x610F; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;N*N&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x6C42;&#x5176;&#x5411;&#x53F3;&#x65CB;&#x8F6C;m&#x6B21;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x6BCF;&#x6B21;&#x65CB;&#x8F6C;90&#xB0;&#x3002; &#x601D;&#x8DEF;&#x53CA;&#x4EE3;&#x7801; &#x8003;&#x5BDF;&#x5FAA;&#x73AF;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;cfloat&gt;#include &lt;climits&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;queue&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;sstream&gt;#include &lt;ctime&gt;#pragma warning(disable:4996)using namespace std;#define Windvoid solution(){ ios::sync_with_stdio(false); int n,m; cin &gt;&gt; n; vector&lt;vector&lt;int&gt;&gt;v(n); for (int i = 0; i &lt; n; i++) { v[i].resize(n); } for (int i = 0; i &lt; n; i++) { for (int j = 0; j &lt; n; j++) { cin &gt;&gt; v[i][j]; } } cin &gt;&gt; m; m = m % 4; if (m == 1) { bool flag = false; for (int i = 0; i &lt; n; i++) { for (int j = n - 1; j &gt;= 0; j--) { cout &lt;&lt; v[j][i]; flag = true; if (flag) cout &lt;&lt; &apos; &apos;; } cout &lt;&lt; endl; } } if (m == 2) { bool flag = false; for (int i = n-1; i &gt;= 0; i--) { for (int j = n-1; j &gt;= 0; j--) { cout &lt;&lt; v[i][j]; flag = true; if (flag) cout &lt;&lt; &apos; &apos;; } cout &lt;&lt; endl; } } if (m == 3) { bool flag = false; for (int i = n-1; i &gt;= 0; i--) { for (int j = 0; j &lt; n ; j++) { cout &lt;&lt; v[j][i]&lt;&lt;&apos; &apos;; } cout &lt;&lt; endl; } } if (m == 0) { for (int i = 0; i &lt; n; i++) { bool flag = false; for (int j = 0; j &lt; n; j++) { cout &lt;&lt; v[i][j]; flag = true; if (flag) cout &lt;&lt; &apos; &apos;; } cout &lt;&lt; endl; } } return;}int main(){#ifdef Wind freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin);#endif solution(); system(&quot;pause&quot;); return 0;} 2019&#x534E;&#x4E3A;-&#x5C0F;&#x670B;&#x53CB;&#x7684;&#x793C;&#x7269; &#x9898;&#x76EE;&#x5927;&#x610F; &#x6709;N&#x4E2A;&#x793C;&#x7269;&#x548C;k&#x4E2A;&#x5C0F;&#x670B;&#x53CB;&#xFF0C;&#x8BF7;&#x95EE;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x5206;&#x793C;&#x7269;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x5E76;&#x628A;&#x5B83;&#x4EEC;&#x5168;&#x90FD;&#x663E;&#x793A;&#x51FA;&#x6765;&#xFF0C;&#x7528;*&#x8868;&#x793A;&#x793C;&#x7269;&#xFF0C;&#x7528;|&#x6765;&#x5206;&#x5272;&#x5C0F;&#x670B;&#x53CB;&#x3002; &#x601D;&#x8DEF;&#x53CA;&#x4EE3;&#x7801; &#x8003;&#x5BDF;DFS 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;cfloat&gt;#include &lt;climits&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;queue&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;sstream&gt;#include &lt;ctime&gt;#pragma warning(disable:4996)using namespace std;#define Windint n, k;vector&lt;vector&lt;int&gt;&gt; res;void display(){ cout &lt;&lt; res.size() &lt;&lt; endl; for (vector&lt;int&gt; temp :res) { //cout &lt;&lt; res.size() &lt;&lt; endl; for (int i = 0; i &lt; temp[0]; i++) { cout &lt;&lt; &apos;*&apos;; } for (int i = 1; i &lt; k; i++) { cout &lt;&lt; &apos;|&apos;; for (int j = 0; j &lt; temp[i]; j++) { cout &lt;&lt; &apos;*&apos;; } } cout &lt;&lt; endl; } return;}void dfs(int gift, int curChild,vector&lt;int&gt;temp){ if (curChild == k - 1) //&#x662F;&#x6700;&#x540E;&#x4E00;&#x4E2A; { temp[curChild] = gift; res.push_back(temp); return; } if (gift == 0) { res.push_back(temp); return; } for (int i = gift; i &gt;= 0; i--) { temp[curChild] = i; dfs(gift - i, curChild + 1, temp); }}void solution(){ ios::sync_with_stdio(false); cin &gt;&gt; n &gt;&gt; k; vector&lt;int&gt;temp(k, 0); dfs(n, 0, temp); display(); return;}int main(){#ifdef Wind freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin);#endif solution(); system(&quot;pause&quot;); return 0;} 2019&#x534E;&#x4E3A;-&#x6C42;&#x7F16;&#x8F91;&#x8DDD;&#x79BB; &#x9898;&#x76EE;&#x5927;&#x610F; &#x7ED9;&#x5B9A;&#x4E00;&#x7247;&#x6587;&#x7AE0;&#xFF0C;&#x6709;n&#x884C;&#xFF0C;&#x5BF9;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x6309;&#x884C;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x7ED9;&#x5B9A;&#x4E00;&#x7247;&#x4FEE;&#x6539;&#x597D;&#x7684;&#x6587;&#x7AE0;&#x3002; &#x6C42;&#x9700;&#x8981;&#x591A;&#x5C11;&#x6B21;&#x64CD;&#x4F5C;&#xFF08;&#x5220;&#x9664;&#x3001;&#x4FEE;&#x6539;&#x3001;&#x6DFB;&#x52A0;&#xFF09;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x8FD9;&#x7BC7;&#x4FEE;&#x6539;&#x597D;&#x7684;&#x6587;&#x7AE0;&#x3002; &#x601D;&#x8DEF;&#x53CA;&#x4EE3;&#x7801; &#x7F16;&#x8F91;&#x8DDD;&#x79BB;&#xFF0C;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x53BB;&#x505A;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;cfloat&gt;#include &lt;climits&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;queue&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;sstream&gt;#include &lt;ctime&gt;#pragma warning(disable:4996)using namespace std;#define Windint dp[10010][10010] = { 0 };int check(string a, string b){ for (int i = 0; i &lt;= a.length(); i++) { dp[i][0] = i; } for (int i = 0; i &lt;= b.length(); i++) { dp[0][i] = i; } for (int i = 1; i &lt;= a.length(); i++) { for (int j = 1; j &lt;= b.length(); j++) { if (a[i - 1] == b[j - 1]) { dp[i][j] = dp[i - 1][j - 1]; } else { int edIns = dp[i][j - 1] + 1; int edDel = dp[i - 1][j] + 1; int edRep = dp[i - 1][j - 1] + 1; dp[i][j] = min(edIns, min(edDel, edRep)); } } } return dp[a.length()][b.length()];}void solution(){ ios::sync_with_stdio(false); string input; int n, res = 0; cin &gt;&gt; n; vector&lt;string&gt;yuanlai(n), xinde(n); for (int i = 0; i &lt; n; i++) { cin &gt;&gt; yuanlai[i]; } for (int i = 0; i &lt; n; i++) { cin &gt;&gt; xinde[i]; } for (int i = 0; i &lt; n; i++) { //cout &lt;&lt; yuanlai[i] &lt;&lt; endl; //cout &lt;&lt; xinde[i] &lt;&lt; endl; res += check(yuanlai[i], xinde[i]); //cout &lt;&lt; res; } cout &lt;&lt; res &lt;&lt; endl; return;}int main(){#ifdef Wind freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin);#endif solution(); system(&quot;pause&quot;); return 0;}]]></content>
      <categories>
        <category>算法题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>ACM</tag>
        <tag>未归档的</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[剑指offer题解]]></title>
    <url>%2F%2Fposts%2Fc812c7f8%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x8D85;&#x8D8A;&#x4FDD;&#x4F51;&#xFF0C;offer++ &#x66FF;&#x6362;&#x7A7A;&#x683C; &#x6211;&#x81EA;&#x5DF1;&#x4E00;&#x5F00;&#x59CB;&#x5199;&#x7684;&#xFF0C;&#x975E;&#x5E38;&#x7B28;&#x7684;&#x65B9;&#x6CD5;&#x3002; 1234567891011121314151617181920class Solution {public: void replaceSpace(char *str, int length) { for (int i = 0; i &lt; length; i++) { if (str[i]==&apos; &apos;) { for (int j = length+1; j &gt; i+2; j--) { str[j] = str[j - 2]; } length += 2; str[i++] = &apos;%&apos;; str[i++] = &apos;2&apos;; str[i] = &apos;0&apos;; } } }}; &#x7136;&#x540E;&#x70B9;&#x5F00;&#x8BA8;&#x8BBA;&#x533A;&#xFF0C;&#x5927;&#x4F6C;&#x4EEC;&#x5F00;&#x59CB;&#x79C0;&#x81EA;&#x5DF1;&#x7684;&#x725B;&#x903C;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x83DC;&#x9E21;&#x745F;&#x745F;&#x53D1;&#x6296;&#x3002; &#x5927;&#x6982;&#x601D;&#x8DEF;&#x5982;&#x4E0B;&#xFF1A; 1. &#x5148;&#x904D;&#x5386;&#x4E00;&#x904D;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x627E;&#x51FA;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x7A7A;&#x683C;&#x3002; 2. &#x8BA1;&#x7B97;&#x66FF;&#x6362;&#x540E;&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x3002; 3. &#x4ECE;&#x540E;&#x5F80;&#x524D;&#xFF0C;&#x653E;&#x5165;&#x5B57;&#x7B26;&#xFF0C;&#x5982;&#x679C;&#x9047;&#x5230;&#x4E86;&#x7A7A;&#x683C;&#xFF0C;&#x5219;&#x7528;&quot;%20&quot;&#x6765;&#x66FF;&#x4EE3;&#x3002; &#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 1234567891011121314151617181920212223242526272829303132333435363738394041424344class Solution{public: void replaceSpace(char *str, int length) { //&#x904D;&#x5386;&#x4E00;&#x8FB9;&#x5B57;&#x7B26;&#x4E32;&#x627E;&#x51FA;&#x7A7A;&#x683C;&#x7684;&#x6570;&#x91CF; if (str == NULL || length &lt; 0) return; int i = 0; int oldnumber = 0;//&#x8BB0;&#x5F55;&#x4EE5;&#x524D;&#x7684;&#x957F;&#x5EA6; int replacenumber = 0;//&#x8BB0;&#x5F55;&#x7A7A;&#x683C;&#x7684;&#x6570;&#x91CF; while (str[i] != &apos;\0&apos;) { oldnumber++; if (str[i] == &apos; &apos;) { replacenumber++; } i++; } int newlength = oldnumber + replacenumber * 2;//&#x63D2;&#x5165;&#x540E;&#x7684;&#x957F;&#x5EA6; if (newlength &gt; length)//&#x5982;&#x679C;&#x8BA1;&#x7B97;&#x540E;&#x7684;&#x957F;&#x5EA6;&#x5927;&#x4E8E;&#x603B;&#x957F;&#x5EA6;&#x5C31;&#x65E0;&#x6CD5;&#x63D2;&#x5165; return; int pOldlength = oldnumber; //&#x6CE8;&#x610F;&#x4E0D;&#x8981;&#x51CF;&#x4E00;&#x56E0;&#x4E3A;&#x9690;&#x85CF;&#x4E2A;&#x2018;\0&#x2019;&#x4E5F;&#x8981;&#x7B97;&#x91CC; int pNewlength = newlength; while (pOldlength &gt;= 0 &amp;&amp; pNewlength &gt; pOldlength)//&#x653E;&#x5B57;&#x7B26; { if (str[pOldlength] == &apos; &apos;) //&#x78B0;&#x5230;&#x7A7A;&#x683C;&#x5C31;&#x66FF;&#x6362; { str[pNewlength--] = &apos;0&apos;; str[pNewlength--] = &apos;2&apos;; str[pNewlength--] = &apos;%&apos;; } else //&#x4E0D;&#x662F;&#x7A7A;&#x683C;&#x5C31;&#x628A;pOldlength&#x6307;&#x5411;&#x7684;&#x5B57;&#x7B26;&#x88C5;&#x5165;pNewlength&#x6307;&#x5411;&#x7684;&#x4F4D;&#x7F6E; { str[pNewlength--] = str[pOldlength]; } pOldlength--; //&#x4E0D;&#x7BA1;&#x662F;if&#x8FD8;&#x662F;elsr&#x90FD;&#x8981;&#x628A;pOldlength&#x524D;&#x79FB; } }}; &#x4ECE;&#x5C3E;&#x5230;&#x5934;&#x6253;&#x5370;&#x94FE;&#x8868; &#x4F7F;&#x7528;&#x5934;&#x63D2;&#x6CD5;&#xFF0C;&#x5C06;&#x94FE;&#x8868;&#x9006;&#x7F6E;&#x4E4B;&#x540E;&#xFF0C;&#x538B;&#x5165;vector&#x4E2D;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include&lt;iostream&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;struct ListNode{ int val; struct ListNode *next; ListNode(int x) : val(x), next(NULL) { }};ListNode L(0);void init(){ int n, temp; ListNode *ptr = &amp;L; cin &gt;&gt; n; L.val = n; for (int i = 0; i &lt; n; i++) { ptr-&gt;next = (ListNode*)malloc(sizeof(ListNode)); cin &gt;&gt; ptr-&gt;next-&gt;val; ptr-&gt;next-&gt;next = NULL; ptr = ptr-&gt;next; }}class Solution {public: vector&lt;int&gt; printListFromTailToHead(ListNode* head) { vector&lt;int&gt; V; if (head==NULL) return V; ListNode* pre=head; head = head-&gt;next; pre-&gt;next = NULL; ListNode* p = NULL; while (head!=NULL) { p = head; head = head-&gt;next; p-&gt;next = pre; pre = p; } while (pre != NULL) { V.push_back(pre-&gt;val); cout &lt;&lt; pre-&gt;val &lt;&lt; &apos; &apos;; pre = pre-&gt;next; } return V; }};int main(){ freopen(&quot;3.txt&quot;, &quot;r&quot;, stdin); init(); Solution a; a.printListFromTailToHead(L.next); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E; 12345678910Test1&#xFF1A;71 2 6 3 4 5 6Test2&#xFF1A;467 0 24 58Test3&#xFF1A;0 &#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x67E5;&#x627E; &#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x66B4;&#x529B;&#x641C;&#x7D22;&#xFF0C;&#x4F46;&#x662F;&#x8981;&#x6CE8;&#x610F;&#x526A;&#x679D;&#x3002; &#x7559;&#x610F;&#x5230;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x884C;&#xFF0C;&#x90FD;&#x662F;&#x6309;&#x7167;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x5217;&#xFF0C;&#x4E5F;&#x662F;&#x6309;&#x7167;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x9012;&#x589E;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x4ECE;&#x6700;&#x5DE6;&#x4E0B;&#x8FDB;&#x884C;&#x641C;&#x7D22;&#xFF1A;&#x82E5;&#x5F53;&#x524D;&#x6570;&gt;target&#xFF0C;&#x5411;&#x4E0A;&#x3002;&#x53CD;&#x4E4B;&#xFF0C;&#x82E5;&#x5F53;&#x524D;&#x6570;&lt;target&#xFF0C;&#x5411;&#x53F3;&#x3002; &#x66B4;&#x529B;&#x641C;&#x7D22;+&#x526A;&#x679D; &#x8FD9;&#x91CC;&#x6CA1;&#x7528;&#x5230;&#x6BCF;&#x5217;&#x90FD;&#x662F;&#x6309;&#x7167;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x7684;&#x6761;&#x4EF6;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x5F00;&#x59CB;&#x5199;&#x7684;&#xFF0C;&#x5199;&#x7684;&#x4E0D;&#x597D;&#x3002; 1234567891011121314151617181920class Solution{public: bool Find(int target, vector&lt;vector&lt;int&gt;&gt; array) { int hang = array.size(); int lie = array[0].size(); for (int i = 0; i &lt; hang; i++) { for (int j = 0; j &lt; lie; j++) { if (array[i][j] == target) return true; else if (array[i][j] &gt; target) break; } } return false; }}; &#x66F4;&#x597D;&#x7684;&#x4EE3;&#x7801;&#xFF1A;&#x4ECE;&#x5DE6;&#x4E0B;&#x5F00;&#x59CB;&#x641C;&#x7D22; 123456789101112131415161718class Solution {public: bool Find(int target, vector&lt;vector&lt;int&gt; &gt; array) { // array&#x662F;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#xFF0C;&#x8FD9;&#x91CC;&#x6CA1;&#x505A;&#x5224;&#x7A7A;&#x64CD;&#x4F5C; int rows = array.size(); int cols = array[0].size(); int i=rows-1,j=0;//&#x5DE6;&#x4E0B;&#x89D2;&#x5143;&#x7D20;&#x5750;&#x6807; while(i&gt;=0 &amp;&amp; j&lt;cols){//&#x4F7F;&#x5176;&#x4E0D;&#x8D85;&#x51FA;&#x6570;&#x7EC4;&#x8303;&#x56F4; if(target&lt;array[i][j]) i--;//&#x67E5;&#x627E;&#x7684;&#x5143;&#x7D20;&#x8F83;&#x5C11;&#xFF0C;&#x5F80;&#x4E0A;&#x627E; else if(target&gt;array[i][j]) j++;//&#x67E5;&#x627E;&#x5143;&#x7D20;&#x8F83;&#x5927;&#xFF0C;&#x5F80;&#x53F3;&#x627E; else return true;//&#x627E;&#x5230; } return false; }}; &#x7528;&#x4E24;&#x4E2A;&#x6808;&#x5B9E;&#x73B0;&#x961F;&#x5217; &#x57FA;&#x7840;&#x9898;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x4E24;&#x4E2A;&#x6808;&#x7684;&#x7A7A;&#x95F4;&#x90FD;&#x4E0D;&#x4F1A;&#x7206;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839class Solution{public: void push(int node) { stack1.push(node); } int pop() { if (!stack2.empty()) { int temp = stack2.top(); stack2.pop(); return temp; } else { while (!stack1.empty()) { int temp = stack1.top(); stack1.pop(); stack2.push(temp); } if (true) { int temp = stack2.top(); stack2.pop(); return temp; } else return -1; } }private: stack&lt;int&gt; stack1; stack&lt;int&gt; stack2;}; &#x65CB;&#x8F6C;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x5C0F;&#x6570;&#x5B57; &#x627E;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x524D;&#x4E00;&#x4E2A;&#x3010;&gt;&#x3011;&#x540E;&#x4E00;&#x4E2A;&#x7684;&#x6570;&#x3002; 12345678910111213141516class Solution {public: int minNumberInRotateArray(vector&lt;int&gt; rotateArray) { if (rotateArray.size()==0) { return 0; } for (int i = 0; i &lt; rotateArray.size()-1; i++) { if (rotateArray[i] &gt; rotateArray[i + 1]) return rotateArray[i + 1]; } return 0; }}; &#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217; &#x6590;&#x6CE2;&#x90A3;&#x5951;&#x6570;&#x5217;&#xFF1A;0 1 1 2 3.... 123456789101112131415class Solution {public: int Fibonacci(int n) { int res_pre = 0, res = 1; if (n == 0) return 0; for (int i = 1; i &lt; n; i++) { res = res + res_pre; res_pre = res - res_pre; } return res; }}; &#x8DF3;&#x53F0;&#x9636; &#x7EC4;&#x5408; &#x5229;&#x7528;&#x7EC4;&#x5408;&#x53BB;&#x505A; 123456789101112131415161718192021222324252627282930class Solution {public: int zuhe(int a, int b) { long long int res = 1; for (int i = 0; i &lt; b; i++) { res *= (a - i); } for (int i = 2; i &lt;= b; i++) { res /= i; } return res; } int jumpFloor(int number) { int min = number / 2; if (number % 2 == 1) min++; //&#x6700;&#x5C11;&#x7684;&#x6B65;&#x6570; int res = 0; for (int i = min; i &lt; number; i++) { res += zuhe(i, number-i); } res ++; return res; }}; Fib&#x5E8F;&#x5217; 1234567891011121314public int JumpFloor(int n) { if (n &lt;= 2) return n; int pre2 = 1, pre1 = 2; int result = 1; for (int i = 2; i &lt; n; i++) { result = pre2 + pre1; pre2 = pre1; pre1 = result; } return result;} &#x53D8;&#x6001;&#x8DF3;&#x53F0;&#x9636; &#x7EC4;&#x5408; &#x7EC4;&#x5408;&#xFF0C;&#x6839;&#x636E;1~number-1&#x53F0;&#x9636;&#x4E2D;&#xFF0C;&#x843D;&#x811A;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x6765;&#x9009;&#x62E9;&#x7EC4;&#x5408; 1234567891011121314151617181920212223242526class Solution {public: int zuhe(int a, int b) { long long int res = 1; //&#x5FC5;&#x987B;&#x7528; long long&#xFF0C;&#x5426;&#x5219;&#x4F1A;&#x6EA2;&#x51FA; for (int i = 0; i &lt; b; i++) { res *= (a - i); } for (int i = 2; i &lt;= b; i++) { res /= i; } return res; } int jumpFloorII(int number) { int res=0; for (int i = 0; i &lt; number-1; i++) { res += zuhe(number-1, i); } res++; return res; }}; &#x52A8;&#x6001;&#x89C4;&#x5212; &#x6570;&#x5B66;&#x63A8;&#x5BFC; &#x8DF3;&#x4E0A; n-1 &#x7EA7;&#x53F0;&#x9636;&#xFF0C;&#x53EF;&#x4EE5;&#x4ECE; n-2 &#x7EA7;&#x8DF3; 1 &#x7EA7;&#x4E0A;&#x53BB;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4ECE; n-3 &#x7EA7;&#x8DF3; 2 &#x7EA7;&#x4E0A;&#x53BB;...&#xFF0C;&#x90A3;&#x4E48; 1f(n-1) = f(n-2) + f(n-3) + ... + f(0) &#x540C;&#x6837;&#xFF0C;&#x8DF3;&#x4E0A; n &#x7EA7;&#x53F0;&#x9636;&#xFF0C;&#x53EF;&#x4EE5;&#x4ECE; n-1 &#x7EA7;&#x8DF3; 1 &#x7EA7;&#x4E0A;&#x53BB;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x4ECE; n-2 &#x7EA7;&#x8DF3; 2 &#x7EA7;&#x4E0A;&#x53BB;... &#xFF0C;&#x90A3;&#x4E48; 1f(n) = f(n-1) + f(n-2) + ... + f(0) &#x7EFC;&#x4E0A;&#x53EF;&#x5F97; 1f(n) - f(n-1) = f(n-1) &#x5373; 1f(n) = 2*f(n-1) &#x6240;&#x4EE5; f(n) &#x662F;&#x4E00;&#x4E2A;&#x7B49;&#x6BD4;&#x6570;&#x5217;&#x3002; 1234public int JumpFloorII(int target){ return (int) Math.pow(2, target - 1);} &#x77E9;&#x5F62;&#x8986;&#x76D6; &#x7EC4;&#x5408; &#x548C;&#x8DF3;&#x683C;&#x5B50;&#x7C7B;&#x4F3C;&#xFF0C;&#x6839;&#x636E;&#x6A2A;&#x7740;&#x7684;&#x7EC4;&#x5408;&#x6765;&#x6C42;&#x3002; 1234567891011121314151617181920212223242526272829class Solution {public: int zuhe(int a, int b) { long long int res = 1; for (int i = 0; i &lt; b; i++) { res *= (a - i); } for (int i = 2; i &lt;= b; i++) { res /= i; } return res; } int rectCover(int number) { if (number == 0) return 0; //&#x548C;&#x8DF3;&#x53F0;&#x9636;&#x7C7B;&#x4F3C;&#xFF1F; int temp = number / 2; //&#x6700;&#x591A;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x6A2A;&#x7740;&#x7684;&#x3002; int res = 0; for (int i = 0; i &lt;= temp; i++) { res += zuhe(number-i, i); } return res; }}; Fib&#x5E8F;&#x5217; 123456789101112public int RectCover(int n) { if (n &lt;= 2) return n; int pre2 = 1, pre1 = 2; int result = 0; for (int i = 3; i &lt;= n; i++) { result = pre2 + pre1; pre2 = pre1; pre1 = result; } return result;} &#x4E8C;&#x8FDB;&#x5236;&#x4E2D;1&#x7684;&#x4E2A;&#x6570; 123456789101112131415161718class Solution {public: int NumberOf1(int n) { int res = 0; if (n&lt;0) { n = n &amp; 0x7FFFFFFF; //&#x90E8;&#x5206;&#x7F16;&#x8BD1;&#x5668;&#xFF0C;&#x5BF9;&#x4E8E;&#x590D;&#x6570;&#x7684;&#x53F3;&#x79FB;&#xFF0C;&#x662F;&#x8865;1&#x7684;&#x3002; res++; } while (n!=0) { res += (n &amp; 1); n = n &gt;&gt; 1; } return res; }}; &#x6570;&#x503C;&#x7684;&#x6574;&#x6570;&#x6B21;&#x65B9; 1234567891011121314151617181920212223class Solution {public: double Power(double base, int exponent) { double res=1; if (exponent&gt;=0) { for (int i = 0; i &lt; exponent; i++) { res *= base; } } if (exponent &lt; 0) { exponent = -exponent; for (int i = 0; i &lt; exponent; i++) { res /= base; } } return res; }}; &#x8C03;&#x6574;&#x6570;&#x7EC4;&#x987A;&#x5E8F;&#x4F7F;&#x5947;&#x6570;&#x4F4D;&#x4E8E;&#x5076;&#x6570;&#x524D;&#x9762; &#x89E3;&#x6CD5;&#x4E00;&#xFF1A;&#x7C7B;&#x4F3C;&#x4E8E;&#x5192;&#x6CE1;&#x6392;&#x5E8F; 1234567891011121314 class Solution { public: void reOrderArray(vector&lt;int&gt; &amp;array) { for (int i = 0; i &lt; array.size(); i++) { for (int j = array.size()-1; j &gt; i; j--) { if (array[j-1] % 2 == 0 &amp;&amp; array[j] % 2 == 1) swap(array[j-1], array[j]); } } }}; &#x89E3;&#x6CD5;&#x4E8C;&#xFF1A;&#x5148;&#x4FDD;&#x5B58;&#x5947;&#x6570;&#xFF0C;&#x518D;&#x4FDD;&#x5B58;&#x5076;&#x6570; 123456789101112131415161718 class Solution { public: void reOrderArray(vector&lt;int&gt; &amp;array) { vector&lt;int&gt; temp; for (int i = 0; i &lt; array.size(); i++) { if (array[i] % 2 == 1) temp.push_back(array[i]); } for (int i = 0; i &lt; array.size(); i++) { if (array[i] % 2 == 0) temp.push_back(array[i]); } array = temp; }}; &#x94FE;&#x8868;&#x4E2D;&#x5012;&#x6570;&#x7B2C;k&#x4E2A;&#x7ED3;&#x70B9; &#x5FEB;&#x6162;&#x6307;&#x9488; 1234567891011121314151617181920class Solution {public: ListNode* FindKthToTail(ListNode* pListHead, unsigned int k) { //&#x4E24;&#x4E2A;&#x6307;&#x9488; ListNode* p1 = pListHead, *p2 = NULL; for (int i = 0; i &lt; k; i++) if (p1 != NULL) p1 = p1-&gt;next; else return NULL; p2 = pListHead; while (p1!=NULL) { p1 = p1-&gt;next; p2 = p2-&gt;next; } return p2; }}; &#x53CD;&#x8F6C;&#x94FE;&#x8868; &#x8FD9;&#x91CC;&#xFF0C;pre&#x76F8;&#x5F53;&#x4E8E;&#x8F85;&#x52A9;&#x7528;&#x7684;&#x5934;&#x7ED3;&#x70B9;&#x3002; &#x4F7F;&#x7528;&#x5934;&#x63D2;&#x6CD5;&#x53CD;&#x8F6C;&#x94FE;&#x8868;&#x3002; 1234567891011121314151617class Solution { //&#x6CE8;&#x610F;&#xFF0C;&#x8FD9;&#x4E2A;&#x9898;&#x662F;&#x6CA1;&#x6709;&#x94FE;&#x8868;&#x7684;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x3002;&#x5373;&#x662F;&#x6574;&#x4E2A;&#x94FE;&#x8868;&#x90FD;&#x8981;&#x9006;&#x7F6E;&#x3002; //&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x94FE;&#x8868;&#xFF0C;&#x5934;&#x7ED3;&#x70B9;&#x5F80;&#x5F80;&#x5B58;&#x50A8;&#x94FE;&#x8868;&#x7684;&#x957F;&#x5EA6;&#x6216;&#x8005;&#x5176;&#x4ED6;&#x4FE1;&#x606F;&#x3002;&#x5E26;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x94FE;&#x8868;&#x9006;&#x7F6E;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5934;&#x7ED3;&#x70B9;&#x4E0D;&#x52A8;&#x3002;public: ListNode* ReverseList(ListNode* pHead) { ListNode *pre = NULL, *next = NULL; while (pHead!=NULL) //&#x5934;&#x63D2;&#x6CD5; { next = pHead-&gt;next; pHead-&gt;next = pre; pre = pHead; pHead = next; } return pre; }}; &#x5408;&#x5E76;&#x4E24;&#x4E2A;&#x6392;&#x5E8F;&#x7684;&#x94FE;&#x8868; &#x975E;&#x9012;&#x5F52;&#xFF0C;&#x5FAA;&#x73AF;&#x7248;&#x672C; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051class Solution {public: ListNode* Merge(ListNode* pHead1, ListNode* pHead2) { ListNode *res = NULL, *p = NULL; if (pHead1 != NULL &amp;&amp; pHead2 != NULL) //&#x786E;&#x5B9A;&#x5934; if (pHead1-&gt;val &lt; pHead2-&gt;val) { res = pHead1; pHead1 = pHead1-&gt;next; } else { res = pHead2; pHead2 = pHead2-&gt;next; } else if (pHead1 != NULL) { res = pHead1; pHead1 = pHead1-&gt;next; } else if (pHead2 != NULL) { res = pHead2; pHead2 = pHead2-&gt;next; } p = res; while (pHead1!=NULL&amp;&amp;pHead2!=NULL) { if (pHead1-&gt;val &gt; pHead2-&gt;val) { p-&gt;next = pHead2; pHead2 = pHead2-&gt;next; p = p-&gt;next; } else { p-&gt;next = pHead1; pHead1 = pHead1-&gt;next; p = p-&gt;next; } } if (pHead1 != NULL) p-&gt;next = pHead1; else if (pHead2 != NULL) p-&gt;next = pHead2; return res; }}; &#x9012;&#x5F52;&#x65B9;&#x6CD5; 123456789101112131415161718192021ListNode* Merge2(ListNode* pHead1, ListNode* pHead2){ if (pHead1==NULL) { return pHead2; } if (pHead2==NULL) { return pHead1; } if (pHead1-&gt;val &lt; pHead2-&gt;val) { pHead1-&gt;next = Merge2(pHead1-&gt;next, pHead2); return pHead1; } else { pHead2-&gt;next = Merge2(pHead1, pHead2-&gt;next); return pHead2; }} &#x6DFB;&#x52A0;&#x8F85;&#x52A9;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x65B9;&#x6CD5; 1234567891011121314151617181920212223242526272829303132class Solution2 {public: ListNode* Merge(ListNode* pHead1, ListNode* pHead2) { ListNode L(0); //&#x6DFB;&#x52A0;&#x8F85;&#x52A9;&#x7684;&#x5934;&#x7ED3;&#x70B9; ListNode *p = &amp;L; if (pHead1 == NULL) return pHead2; if (pHead2 == NULL) return pHead1; while (pHead1!=NULL&amp;&amp;pHead2!=NULL) { if (pHead1-&gt;val &lt;= pHead2-&gt;val) { p-&gt;next = pHead1; pHead1 = pHead1-&gt;next; p = p-&gt;next; } else { p-&gt;next = pHead2; pHead2 = pHead2-&gt;next; p = p-&gt;next; } } if (pHead1 == NULL) p-&gt;next=pHead2; if (pHead2 == NULL) p-&gt;next = pHead1; return L.next; }}; &#x6811;&#x7684;&#x5B50;&#x7ED3;&#x6784; 123456789101112131415161718192021222324252627 class Solution { public: bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2) { bool res = false; if (pRoot1 == NULL || pRoot2 == NULL) return false; if (pRoot1-&gt;val == pRoot2-&gt;val) res = judge(pRoot1, pRoot2); if (!res) res = HasSubtree(pRoot1-&gt;left, pRoot2); //&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x641C;&#x5DE6;&#x5B50;&#x6811; if (!res) res = HasSubtree(pRoot1-&gt;right, pRoot2); //&#x627E;&#x4E0D;&#x5230;&#xFF0C;&#x641C;&#x53F3;&#x5B50;&#x6811; return res; } bool judge(TreeNode* p1, TreeNode* p2) { if (p2 == NULL) return true; //T2&#x5DF2;&#x7ECF;&#x904D;&#x5386;&#x5B8C;&#x5E76;&#x4E14;&#x90FD;&#x80FD;&#x5BF9;&#x7684;&#x4E0A;&#xFF0C;&#x8FD4;&#x56DE;true if (p1 == NULL) return false; //T2&#x8FD8;&#x6CA1;&#x6709;&#x904D;&#x5386;&#x5B8C;&#xFF0C;&#x4F46;&#x662F;T1&#x5DF2;&#x7ECF;&#x6CA1;&#x4E86;&#xFF0C;&#x8FD4;&#x56DE;false if (p1-&gt;val != p2-&gt;val) return false; //&#x503C;&#x5BF9;&#x4E0D;&#x4E0A;&#xFF0C;&#x8FD4;&#x56DE;false&#x3002; return judge(p1-&gt;left, p2-&gt;left) &amp;&amp; judge(p1-&gt;right, p2-&gt;right); }}; &#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x6D4B;&#x8BD5;&#xFF0C;&#x6211;&#x7684;&#x6784;&#x5EFA;&#x6811;&#x7684;&#x4EE3;&#x7801;&#x4E3A;&#xFF1A; 1234567891011121314151617181920212223242526272829303132333435363738394041424344 struct TreeNode { int val; struct TreeNode *left; struct TreeNode *right; TreeNode(int x) : val(x), left(NULL), right(NULL) { } }; TreeNode* T; queue&lt;TreeNode **&gt;q; void init(TreeNode*&amp; T) { int n; string temp; cin &gt;&gt; n; if (n == 0) T = NULL; TreeNode **ptr; q.push(&amp;T); for (int i = 0; i &lt; n; i++) { ptr = q.front(); q.pop(); cin &gt;&gt; temp; if (temp != &quot;null&quot;) { TreeNode *node = (TreeNode*)malloc(sizeof(TreeNode)); node-&gt;val = stoi(temp); node-&gt;left = NULL; node-&gt;right = NULL; *ptr = node; } q.push(&amp;(*ptr)-&gt;left); q.push(&amp;(*ptr)-&gt;right); } while (!q.empty()) { q.pop(); } return;} &#x8F93;&#x5165;&#x7684;&#x65F6;&#x5019;&#x6309;&#x5C42;&#x8F93;&#x5165;&#xFF0C;&#x6CE8;&#x610F;&#xFF0C;&#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x662F;&#x6709;bug&#x7684;&#xFF0C;&#x4E0D;&#x80FD;&#x751F;&#x6210;&#x4EFB;&#x610F;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#xFF01;&#x60F3;&#x8981;&#x5B8C;&#x5168;&#x5E8F;&#x5217;&#x5316;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x8BF7;&#x770B;&#x540E;&#x9762;&#x7684;&#x5E8F;&#x5217;&#x4E8C;&#x53C9;&#x6811;&#x3002; &#x4E8C;&#x53C9;&#x6811;&#x7684;&#x955C;&#x50CF; &#x6811;&#x7684;&#x904D;&#x5386;&#xFF0C;&#x9012;&#x5F52;&#x5373;&#x53EF; 123456789101112class Solution {public: void Mirror(TreeNode *pRoot) { if (pRoot == NULL) return; Mirror(pRoot-&gt;left); Mirror(pRoot-&gt;right); swap(pRoot-&gt;left, pRoot-&gt;right); return; }}; &#x5305;&#x542B;min&#x51FD;&#x6570;&#x7684;&#x6808; &#x89E3;&#x6CD5;&#x4E00;&#xFF08;&#x5F88;&#x632B;&#x7684;&#x89E3;&#x6CD5;&#xFF09; &#x601D;&#x8DEF;&#xFF1A;&#x5229;&#x7528;Map&#x7684;&#x81EA;&#x52A8;&#x6392;&#x5E8F;&#x7279;&#x6027;&#xFF0C;&#x5F88;&#x632B; 1234567891011121314151617181920212223242526272829class Solution {public: stack&lt;int&gt; s; map&lt;int, int&gt;m; //int minn=0x7FFFFFFF; void push(int value) { s.push(value); if (!m.count(value)) m[value] = 1; else m[value]++; } void pop() { int k = s.top(); s.pop(); if (--m[k] == 0) m.erase(k); } int top() { return s.top(); } int min() { return m.begin()-&gt;first; }}; &#x5229;&#x7528;&#x6700;&#x5C0F;&#x5143;&#x7D20;&#x6808; 1234567891011121314151617181920212223242526272829303132333435363738394041class Solution2 { //&#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x6CD5;&#x3002;&#x5229;&#x7528;&#x8F85;&#x52A9;&#x6808; /* &#x538B;&#x6808;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;A&#x6808;&#x7684;&#x538B;&#x5165;&#x6BD4;B&#x6808;&#x7684;&#x5927;&#xFF0C; &#x5219;B&#x6808;&#x4E0D;&#x538B;&#xFF0C;&#x5982;&#x679C;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;&#xFF0C;&#x5219;AB&#x6808;&#x540C;&#x65F6;&#x538B;&#x5165;/ &#x5728;&#x51FA;&#x6808;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;AB&#x6808;&#x9876;&#x5143;&#x7D20;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x5219;A&#x51FA;B&#x4E0D;&#x51FA;&#x3002; */public: stack&lt;int&gt; s1, s2; void push(int value) { int t; s1.push(value); if (s2.empty()) s2.push(value); else { t = s2.top(); if (value &lt;= t) s2.push(value); } } void pop() { int t1 = s1.top(), t2 = s2.top(); if (t1 == t2) { s1.pop(); s2.pop(); } else s1.pop(); } int top() { return s1.top(); } int min() { return s2.top(); }}; &#x987A;&#x65F6;&#x9488;&#x6253;&#x5370;&#x77E9;&#x9635; &#x89E3;&#x6CD5;&#x4E00; &#x4E0D;&#x662F;&#x7279;&#x522B;&#x597D;&#xFF0C;&#x5229;&#x7528;&#x6A21;&#x62DF;&#x6765;&#x505A;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Solution {public: vector&lt;int&gt; printMatrix(vector&lt;vector&lt;int&gt; &gt; matrix) { int i = 0, j = 0, a = 0, cnt = 0, total = 1; vector&lt;int&gt;res; total *= matrix.size(); if (total != 0) total *= matrix[0].size(); while (cnt&lt;total) { for (; j&lt; matrix[i].size()-a; j++) { res.push_back(matrix[i][j]); cnt++; if (cnt &gt;= total) return res; } j--, i++; for (; i &lt; matrix.size()-a; i++) { res.push_back(matrix[i][j]); cnt++; if (cnt &gt;= total) return res; } i--; j--; for (; j &gt;=a; j--) { res.push_back(matrix[i][j]); cnt++; if (cnt &gt;= total) return res; } j++; i--; a++; for ( ; i &gt;a ; i--) { res.push_back(matrix[i][j]); cnt++; if (cnt &gt;= total) return res; } } return res; }}; &#x89E3;&#x6CD5;&#x4E8C; 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution2 { /*&#x89E3;&#x9898;&#x601D;&#x8DEF;&#xFF1A;&#x987A;&#x65F6;&#x9488;&#x6253;&#x5370;&#x5C31;&#x662F;&#x6309;&#x5708;&#x6570;&#x5FAA;&#x73AF;&#x6253;&#x5370;&#xFF0C;&#x4E00;&#x5708;&#x5305;&#x542B;&#x4E24;&#x884C;&#x6216;&#x8005;&#x4E24;&#x5217;&#xFF0C; &#x5728;&#x6253;&#x5370;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x51FA;&#x73B0;&#x67D0;&#x4E00;&#x5708;&#x4E2D;&#x53EA;&#x5305;&#x542B;&#x4E00;&#x884C;&#xFF0C; &#x8981;&#x5224;&#x65AD;&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x6253;&#x5370;&#x548C;&#x4ECE;&#x53F3;&#x5411;&#x5DE6;&#x6253;&#x5370;&#x7684;&#x65F6;&#x5019;&#x662F;&#x5426;&#x4F1A;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x6253;&#x5370;&#xFF0C; &#x540C;&#x6837;&#x53EA;&#x5305;&#x542B;&#x4E00;&#x5217;&#x65F6;&#xFF0C;&#x8981;&#x5224;&#x65AD;&#x4ECE;&#x4E0A;&#x5411;&#x4E0B;&#x6253;&#x5370;&#x548C;&#x4ECE;&#x4E0B;&#x5411;&#x4E0A;&#x6253;&#x5370;&#x7684;&#x65F6;&#x5019;&#x662F;&#x5426;&#x4F1A;&#x51FA;&#x73B0;&#x91CD;&#x590D;&#x6253;&#x5370;&#x7684;&#x60C5;&#x51B5;*/public: vector&lt;int&gt; printMatrix(vector&lt;vector&lt;int&gt; &gt; matrix) { vector&lt;int&gt;res; int row = matrix.size(); if (row == 0) return res; int collor = matrix[0].size(); int circle = ((row &lt; collor ? row : collor) - 1) / 2 + 1;//&#x5708;&#x6570; for (int i = 0; i &lt; circle; i++) { //&#x4ECE;&#x5DE6;&#x5411;&#x53F3;&#x6253;&#x5370; for (int j = i; j &lt; collor-i; j++) { res.push_back(matrix[i][j]); } //&#x4ECE;&#x4E0A;&#x5F80;&#x4E0B;&#x7684;&#x6570;&#x636E; for (int k = i+1; k &lt; row- i; k++) { res.push_back(matrix[k][collor - 1 - i]); } //&#x5224;&#x65AD;&#x662F;&#x5426;&#x4F1A;&#x91CD;&#x590D;&#x6253;&#x5370;(&#x4ECE;&#x53F3;&#x5411;&#x5DE6;&#x6253;&#x5370;&#xFF09; //row-i-1!=i&#x662F;&#x9632;&#x6B62;&#x67D0;&#x4E00;&#x884C;&#x66FE;&#x7ECF;&#x4ECE;&#x5DE6; //&#x5230;&#x53F3;&#x88AB;&#x8F93;&#x51FA;&#xFF0C;&#x53C8;&#x5728;&#x4ECE;&#x53F3;&#x5230;&#x5DE6;&#x65F6;&#x88AB;&#x8F93;&#x51FA; for (int m = collor-i-2; (m&gt;=i)&amp;&amp;(row-i-1!=i); m--) { res.push_back(matrix[row - i - 1][m]); } for (int n = row-i-2; (n&gt;i)&amp;&amp;(collor-i-1!=i); n--) { res.push_back(matrix[n][i]); } } return res; }}; &#x6808;&#x7684;&#x538B;&#x5165;&#x3001;&#x5F39;&#x51FA;&#x5E8F;&#x5217; &#x6DFB;&#x52A0;&#x8F85;&#x52A9;&#x6808; 1234567891011121314151617181920class Solution {public: bool IsPopOrder(vector&lt;int&gt; pushV, vector&lt;int&gt; popV) { if (pushV.size() == 0) return false; stack&lt;int&gt;s; int j = 0; for (int i = 0; i &lt; pushV.size(); i++) { s.push(pushV[i]); while (!s.empty()&amp;&amp;s.top() == popV[j]) { s.pop(); j++; } } return s.empty(); }}; &#x4ECE;&#x4E0A;&#x5F80;&#x4E0B;&#x6253;&#x5370;&#x4E8C;&#x53C9;&#x6811; &#x5C42;&#x6B21;&#x904D;&#x5386; 12345678910111213141516171819202122class Solution {public: vector&lt;int&gt; PrintFromTopToBottom(TreeNode* root) { queue&lt;TreeNode*&gt; q; TreeNode* p; vector&lt;int&gt; v; if (root == NULL) return v; q.push(root); while (!q.empty()) { p = q.front(); q.pop(); if (p-&gt;left != NULL) q.push(p-&gt;left); if (p-&gt;right != NULL) q.push(p-&gt;right); v.push_back(p-&gt;val); } return v; }}; &#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#x548C;&#x4E3A;&#x67D0;&#x4E00;&#x503C;&#x7684;&#x8DEF;&#x5F84; 12345678910111213141516171819202122232425class Solution {public: vector&lt;int&gt; temp; vector&lt;vector&lt;int&gt;&gt; res; void dfs(TreeNode *root,int expectNumber) { temp.push_back(root-&gt;val); if ((expectNumber == root-&gt;val)&amp;&amp;root-&gt;left == NULL &amp;&amp; root-&gt;right == NULL) res.push_back(temp); if (root-&gt;left != NULL) dfs(root-&gt;left, (expectNumber - root-&gt;val)); if (root-&gt;right != NULL) dfs(root-&gt;right, expectNumber - root-&gt;val); temp.pop_back(); return; } vector&lt;vector&lt;int&gt;&gt; FindPath(TreeNode* root, int expectNumber) { if (root == NULL) return res; //&#x8FB9;&#x754C;&#x6761;&#x4EF6; dfs(root, expectNumber); return res; }}; &#x590D;&#x6742;&#x94FE;&#x8868;&#x7684;&#x590D;&#x5236; &#x505A;&#x6CD5;&#xFF1A; &#x590D;&#x5236;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5982;&#xFF1A;&#x590D;&#x5236;&#x8282;&#x70B9;A&#x5F97;&#x5230;A1&#xFF0C;&#x5C06;A1&#x63D2;&#x5165;&#x8282;&#x70B9;A&#x540E;&#x9762; &#x904D;&#x5386;&#x94FE;&#x8868;&#xFF0C;A1-&gt;random = A-&gt;random-&gt;next;&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x662F;&#x7ED9;&#x590D;&#x5236;&#x8282;&#x70B9;&#x7684;random&#x8D4B;&#x503C;&#xFF0C;&#x6574;&#x4E2A;&#x590D;&#x5236;&#x94FE;&#x8868;&#x91CC;&#xFF0C;&#x4E0D;&#x80FD;&#x51FA;&#x73B0;&#x539F;&#x6765;&#x94FE;&#x8868;&#x7684;&#x8282;&#x70B9;&#x3002; &#x5C06;&#x94FE;&#x8868;&#x62C6;&#x5206;&#x6210;&#x539F;&#x94FE;&#x8868;&#x548C;&#x590D;&#x5236;&#x540E;&#x7684;&#x94FE;&#x8868;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution {public: RandomListNode* Clone(RandomListNode* pHead) { if (!pHead) //&#x82E5;&#x4E3A;&#x7A7A;,&#x8FD4;&#x56DE;NULL return NULL; RandomListNode* currNode=pHead,* newNode; //&#x8868;&#x793A;&#x5F53;&#x524D;&#x7684;&#x8282;&#x70B9; while (currNode!=NULL) { newNode= (RandomListNode *)malloc(sizeof(RandomListNode)); //&#x590D;&#x5236;&#x8282;&#x70B9;&#x4FE1;&#x606F; newNode-&gt;label = currNode-&gt;label; newNode-&gt;next = currNode-&gt;next; newNode-&gt;random = currNode-&gt;random; //&#x63D2;&#x5230;&#x540E;&#x9762; currNode-&gt;next = newNode; currNode = newNode-&gt;next; } currNode = pHead; //&#x7B2C;&#x4E8C;&#x6B21;&#x904D;&#x5386; while (currNode!=NULL) { newNode = currNode-&gt;next; if(currNode-&gt;random!=NULL) newNode-&gt;random = currNode-&gt;random-&gt;next; currNode = currNode-&gt;next-&gt;next; } //&#x62C6;&#x5206; RandomListNode* pCloneHead = pHead-&gt;next,* temp; currNode = pHead; while (currNode-&gt;next!=NULL) { temp = currNode-&gt;next; currNode-&gt;next = temp-&gt;next; currNode = temp; } return pCloneHead; }}; &#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x4E0E;&#x53CC;&#x5411;&#x94FE;&#x8868; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8F93;&#x5165;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#xFF0C;&#x5C06;&#x8BE5;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x7684;&#x53CC;&#x5411;&#x94FE;&#x8868;&#x3002;&#x8981;&#x6C42;&#x4E0D;&#x80FD;&#x521B;&#x5EFA;&#x4EFB;&#x4F55;&#x65B0;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x53EA;&#x80FD;&#x8C03;&#x6574;&#x6811;&#x4E2D;&#x7ED3;&#x70B9;&#x6307;&#x9488;&#x7684;&#x6307;&#x5411;&#x3002; &#x611F;&#x89C9;&#x50CF;&#x662F;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x7EBF;&#x7D22;&#x5316;&#x3002; &#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x4E0E;&#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6811;&#x610F;&#x601D;&#x76F8;&#x540C;&#xFF0C;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A; &#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6811;/&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#xFF08;Binary Search Tree&#xFF09;&#xFF0C;&#x6216;&#x8005;&#x662F;&#x4E00;&#x68F5;&#x7A7A;&#x6811;&#xFF0C;&#x6216;&#x8005;&#x662F;&#x5177;&#x6709;&#x4E0B;&#x5217;&#x6027;&#x8D28;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#xFF1A; &#x82E5;&#x5B83;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x4E0D;&#x7A7A;&#xFF0C;&#x5219;&#x5DE6;&#x5B50;&#x6811;&#x4E0A;&#x6240;&#x6709;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x5747;&#x5C0F;&#x4E8E;&#x5B83;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#xFF1B; &#x82E5;&#x5B83;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x4E0D;&#x7A7A;&#xFF0C;&#x5219;&#x53F3;&#x5B50;&#x6811;&#x4E0A;&#x6240;&#x6709;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x5747;&#x5927;&#x4E8E;&#x5B83;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#xFF1B; &#x5B83;&#x7684;&#x5DE6;&#x3001;&#x53F3;&#x5B50;&#x6811;&#x4E5F;&#x5206;&#x522B;&#x4E3A;&#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6811;&#x3002; &#x89E3;&#x6CD5;&#x4E00; 1234567891011121314151617181920212223242526272829303132333435class Solution //&#x5FAA;&#x73AF;&#x5199;&#x6CD5;{public: TreeNode* Convert(TreeNode* pRootOfTree) { if (pRootOfTree == NULL) return NULL; //&#x82E5;&#x4E3A;&#x7A7A;&#xFF0C;&#x8FD4;&#x56DE;&#x7A7A; stack&lt;TreeNode*&gt; s; TreeNode* p = pRootOfTree, *pre = NULL; bool isFirst = true; while (p!=NULL||!s.empty()) { while (p!=NULL) { s.push(p); p = p-&gt;left; } p = s.top(); s.pop(); if (isFirst) { pRootOfTree = p; //&#x5C06;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x8BB0;&#x4E3A;root pre = pRootOfTree; isFirst = false; } else { //&#x8FDE;&#x63A5;&#x524D;&#x540E;&#x5173;&#x7CFB; pre-&gt;right = p; p-&gt;left = pre; pre = p; } p = p-&gt;right; //&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#xFF0C;&#x5DE6;&#x4E2D;&#x53F3;&#xFF0C;&#x8FD9;&#x4E2A;&#x5730;&#x65B9;&#x662F;&#x5904;&#x7406;&#x53F3;&#x8FB9;&#x7684;&#x90E8;&#x5206; } return pRootOfTree; }}; &#x89E3;&#x6CD5;&#x4E8C; 123456789101112131415161718192021222324252627282930class Solution2 {public: TreeNode* Convert(TreeNode* pRootOfTree) { if (pRootOfTree == NULL) return NULL; TreeNode * pre = NULL; trans(pRootOfTree, pre); TreeNode* res = pRootOfTree; while (res-&gt;left!=NULL) { res = res-&gt;left; } return res; } void trans(TreeNode * cur, TreeNode *&amp;pre) //&#x7C7B;&#x4F3C;&#x4E8E;&#x6811;&#x7684;&#x5DE6;&#x4E2D;&#x53F3;&#x904D;&#x5386; { if (cur == NULL) return; trans(cur-&gt;left, pre); cur-&gt;left = pre; if (pre != NULL) pre-&gt;right = cur; pre = cur; trans(cur-&gt;right, pre); }}; &#x5B57;&#x7B26;&#x4E32;&#x7684;&#x6392;&#x5217; &#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;,&#x6309;&#x5B57;&#x5178;&#x5E8F;&#x6253;&#x5370;&#x51FA;&#x8BE5;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5B57;&#x7B26;&#x7684;&#x6240;&#x6709;&#x6392;&#x5217;&#x3002;&#x4F8B;&#x5982;&#x8F93;&#x5165;&#x5B57;&#x7B26;&#x4E32;abc,&#x5219;&#x6253;&#x5370;&#x51FA;&#x7531;&#x5B57;&#x7B26;a,b,c&#x6240;&#x80FD;&#x6392;&#x5217;&#x51FA;&#x6765;&#x7684;&#x6240;&#x6709;&#x5B57;&#x7B26;&#x4E32;abc,acb,bac,bca,cab&#x548C;cba&#x3002; &#x8F93;&#x5165;&#x63CF;&#x8FF0;: &#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;,&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7;9(&#x53EF;&#x80FD;&#x6709;&#x5B57;&#x7B26;&#x91CD;&#x590D;),&#x5B57;&#x7B26;&#x53EA;&#x5305;&#x62EC;&#x5927;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#x3002; 1234567891011121314151617181920212223242526class Solution {public: vector&lt;string&gt; res; vector&lt;string&gt; Permutation(string str) { if (str != &quot;&quot;) dfs(str, 0); //&#x4ECE;0&#x5F00;&#x59CB;DFS return res; } void dfs(string str, int start) { int size = str.size(); if (start == size) //&#x8FBE;&#x5230;&#x4E86;&#x538B;&#x5165;vector&#x7684;&#x6761;&#x4EF6; { res.push_back(str); return; } for (int i = start; i &lt; size; i++) { if (i != start &amp;&amp; str[i] == str[start]) continue; //&#x9632;&#x6B62;abb&#x8FD9;&#x79CD;&#x4E24;&#x4E2A;&#x4E00;&#x6837;&#x7684; swap(str[i], str[start]); dfs(str, start + 1); } }}; &#x6570;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x8D85;&#x8FC7;&#x4E00;&#x534A;&#x7684;&#x6570;&#x5B57; &#x6570;&#x7EC4;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x8D85;&#x8FC7;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x7684;&#x4E00;&#x534A;&#xFF0C;&#x8BF7;&#x627E;&#x51FA;&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x3002;&#x4F8B;&#x5982;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;9&#x7684;&#x6570;&#x7EC4;{1,2,3,2,2,2,5,4,2}&#x3002;&#x7531;&#x4E8E;&#x6570;&#x5B57;2&#x5728;&#x6570;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x4E86;5&#x6B21;&#xFF0C;&#x8D85;&#x8FC7;&#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x7684;&#x4E00;&#x534A;&#xFF0C;&#x56E0;&#x6B64;&#x8F93;&#x51FA;2&#x3002;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#x5219;&#x8F93;&#x51FA;0&#x3002; &#x4E0D;&#x80FD;&#x7B80;&#x5355;&#x7684;&#x7528;&#x6392;&#x5E8F;&#xFF0C;&#x56E0;&#x4E3A;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x4E0D;&#x8D85;&#x8FC7;&#x4E00;&#x534A;&#xFF0C;&#x8981;&#x8F93;&#x51FA;0. &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O&#xFF08;n&#xFF09; 12345678910111213141516171819202122232425262728293031323334class Solution {public: int MoreThanHalfNum_Solution(vector&lt;int&gt; numbers) { int n = numbers.size(); if (n == 0) return 0; int num = numbers[0], cnt = 1; for (int i = 1; i &lt; n; i++) { if (numbers[i] == num) cnt++; else cnt--; if (cnt == 0) //&#x5982;&#x679C;cnt&#x4E3A;0&#x4E86;&#xFF0C;&#x91CD;&#x65B0;&#x9009;&#x62E9;&#x4E3A;&#x5F53;&#x524D;&#x6570;&#x5B57;&#xFF0C;&#x91CD;&#x65B0;&#x8FDB;&#x884C;&#x8BA1;&#x6570; { num = numbers[i]; cnt = 1; } } cnt = 0; for (int i = 0; i &lt; n; i++) { if (numbers[i] == num) cnt++; } if (cnt * 2 &gt; n) return num; else return 0; }}; &#x6700;&#x5C0F;&#x7684;K&#x4E2A;&#x6570; &#x89E3;&#x6CD5;&#x4E00; &#x5077;&#x61D2;&#x7684;&#x5199;&#x6CD5;&#xFF08;&#x8FD9;&#x6837;&#x4E5F;&#x80FD;&#x8FC7;&#xFF09;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O&#xFF08;n*lg n&#xFF09; 12345678910111213141516class Solution {public: vector&lt;int&gt; GetLeastNumbers_Solution(vector&lt;int&gt; input, int k) { vector&lt;int&gt;res; if (k &gt; input.size()) return res; res.resize(k); sort(input.begin(), input.end()); for (int i = 0; i &lt; k; i++) { res[i] = input[i]; } return res; }}; &#x89E3;&#x6CD5;&#x4E8C; &#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x53C2;&#x8003;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x601D;&#x60F3; 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution {public: //&#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x53C2;&#x8003;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;&#x601D;&#x60F3; vector&lt;int&gt; GetLeastNumbers_Solution(vector&lt;int&gt; input, int k) { vector&lt;int&gt;res; if (k &gt; input.size() || k &lt;= 0) return res; res.resize(k); int low = 0, high = input.size() - 1; while (low &lt; high) { int temp = partition(input, low, high); if (temp == k) break; else if (high &gt; k) //&#x5F53;&#x524D;&#x533A;&#x95F4;&#x5927;&#x4E8E;k high = temp - 1; else low = temp + 1; } for (int i = 0; i &lt; k; i++) { res[i] = input[i]; } return res; } int partition(vector&lt;int&gt;&amp;input, int low, int high) { int cur = input[low], i = low, j = high; while (i&lt;j) { while (j &gt;i &amp;&amp; input[j] &gt;= cur) j--; while (i &lt; j&amp;&amp;input[i] &lt;= cur) i++; swap(input[i], input[j]); } swap(input[low], input[i]); return i; } }; &#x8FDE;&#x7EED;&#x5B50;&#x6570;&#x7EC4;&#x7684;&#x6700;&#x5927;&#x548C; &#x9898;&#x76EE;&#x63CF;&#x8FF0; HZ&#x5076;&#x5C14;&#x4F1A;&#x62FF;&#x4E9B;&#x4E13;&#x4E1A;&#x95EE;&#x9898;&#x6765;&#x5FFD;&#x60A0;&#x90A3;&#x4E9B;&#x975E;&#x8BA1;&#x7B97;&#x673A;&#x4E13;&#x4E1A;&#x7684;&#x540C;&#x5B66;&#x3002;&#x4ECA;&#x5929;&#x6D4B;&#x8BD5;&#x7EC4;&#x5F00;&#x5B8C;&#x4F1A;&#x540E;,&#x4ED6;&#x53C8;&#x53D1;&#x8BDD;&#x4E86;:&#x5728;&#x53E4;&#x8001;&#x7684;&#x4E00;&#x7EF4;&#x6A21;&#x5F0F;&#x8BC6;&#x522B;&#x4E2D;,&#x5E38;&#x5E38;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x8FDE;&#x7EED;&#x5B50;&#x5411;&#x91CF;&#x7684;&#x6700;&#x5927;&#x548C;,&#x5F53;&#x5411;&#x91CF;&#x5168;&#x4E3A;&#x6B63;&#x6570;&#x7684;&#x65F6;&#x5019;,&#x95EE;&#x9898;&#x5F88;&#x597D;&#x89E3;&#x51B3;&#x3002;&#x4F46;&#x662F;,&#x5982;&#x679C;&#x5411;&#x91CF;&#x4E2D;&#x5305;&#x542B;&#x8D1F;&#x6570;,&#x662F;&#x5426;&#x5E94;&#x8BE5;&#x5305;&#x542B;&#x67D0;&#x4E2A;&#x8D1F;&#x6570;,&#x5E76;&#x671F;&#x671B;&#x65C1;&#x8FB9;&#x7684;&#x6B63;&#x6570;&#x4F1A;&#x5F25;&#x8865;&#x5B83;&#x5462;&#xFF1F;&#x4F8B;&#x5982;:{6,-3,-2,7,-15,1,2,2},&#x8FDE;&#x7EED;&#x5B50;&#x5411;&#x91CF;&#x7684;&#x6700;&#x5927;&#x548C;&#x4E3A;8(&#x4ECE;&#x7B2C;0&#x4E2A;&#x5F00;&#x59CB;,&#x5230;&#x7B2C;3&#x4E2A;&#x4E3A;&#x6B62;)&#x3002;&#x7ED9;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x8FD4;&#x56DE;&#x5B83;&#x7684;&#x6700;&#x5927;&#x8FDE;&#x7EED;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x548C;&#xFF0C;&#x4F60;&#x4F1A;&#x4E0D;&#x4F1A;&#x88AB;&#x4ED6;&#x5FFD;&#x60A0;&#x4F4F;&#xFF1F;(&#x5B50;&#x5411;&#x91CF;&#x7684;&#x957F;&#x5EA6;&#x81F3;&#x5C11;&#x662F;1) &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;O&#xFF08;n&#xFF09; 1234567891011121314151617181920212223242526272829class Solution {public: int FindGreatestSumOfSubArray(vector&lt;int&gt; array) { int start, end, maxsum = 0xFFFFFFFF, tempsum = 0xFFFFFFFF, n = array.size(), tempstart; if (n==0) return 0; for (int i = 0; i &lt; n; i++) { if (tempsum &lt; 0) { tempsum = array[i]; tempstart = i; } else tempsum += array[i]; if (tempsum &gt; maxsum) { maxsum = tempsum; start = tempstart; end = i; } } return maxsum; }}; &#x6574;&#x6570;&#x4E2D;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF08;&#x4ECE;1&#x5230;n&#x6574;&#x6570;&#x4E2D;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF09; &#x6C42;&#x51FA;1~13&#x7684;&#x6574;&#x6570;&#x4E2D;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;,&#x5E76;&#x7B97;&#x51FA;100~1300&#x7684;&#x6574;&#x6570;&#x4E2D;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF1F;&#x4E3A;&#x6B64;&#x4ED6;&#x7279;&#x522B;&#x6570;&#x4E86;&#x4E00;&#x4E0B;1~13&#x4E2D;&#x5305;&#x542B;1&#x7684;&#x6570;&#x5B57;&#x6709;1&#x3001;10&#x3001;11&#x3001;12&#x3001;13&#x56E0;&#x6B64;&#x5171;&#x51FA;&#x73B0;6&#x6B21;,&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x540E;&#x9762;&#x95EE;&#x9898;&#x4ED6;&#x5C31;&#x6CA1;&#x8F99;&#x4E86;&#x3002;ACMer&#x5E0C;&#x671B;&#x4F60;&#x4EEC;&#x5E2E;&#x5E2E;&#x4ED6;,&#x5E76;&#x628A;&#x95EE;&#x9898;&#x66F4;&#x52A0;&#x666E;&#x904D;&#x5316;,&#x53EF;&#x4EE5;&#x5F88;&#x5FEB;&#x7684;&#x6C42;&#x51FA;&#x4EFB;&#x610F;&#x975E;&#x8D1F;&#x6574;&#x6570;&#x533A;&#x95F4;&#x4E2D;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF08;&#x4ECE;1 &#x5230; n &#x4E2D;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF09;&#x3002; &#x601D;&#x8DEF;&#x5206;&#x6790;&#xFF1A; &#x8BBE;N = abcde ,&#x5176;&#x4E2D;abcde&#x5206;&#x522B;&#x4E3A;&#x5341;&#x8FDB;&#x5236;&#x4E2D;&#x5404;&#x4F4D;&#x4E0A;&#x7684;&#x6570;&#x5B57;&#x3002; &#x5982;&#x679C;&#x8981;&#x8BA1;&#x7B97;&#x767E;&#x4F4D;&#x4E0A;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x5B83;&#x8981;&#x53D7;&#x5230;3&#x65B9;&#x9762;&#x7684;&#x5F71;&#x54CD;&#xFF1A;&#x767E;&#x4F4D;&#x4E0A;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x767E;&#x4F4D;&#x4EE5;&#x4E0B;&#xFF08;&#x4F4E;&#x4F4D;&#xFF09;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x767E;&#x4F4D;&#x4EE5;&#x4E0A;&#xFF08;&#x9AD8;&#x4F4D;&#xFF09;&#x7684;&#x6570;&#x5B57;&#x3002; &#x2460; &#x5982;&#x679C;&#x767E;&#x4F4D;&#x4E0A;&#x6570;&#x5B57;&#x4E3A;0&#xFF0C;&#x767E;&#x4F4D;&#x4E0A;&#x53EF;&#x80FD;&#x51FA;&#x73B0;1&#x7684;&#x6B21;&#x6570;&#x7531;&#x66F4;&#x9AD8;&#x4F4D;&#x51B3;&#x5B9A;&#x3002;&#x6BD4;&#x5982;&#xFF1A;12013&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x767E;&#x4F4D;&#x51FA;&#x73B0;1&#x7684;&#x60C5;&#x51B5;&#x53EF;&#x80FD;&#x662F;&#xFF1A;100~199&#xFF0C;1100~1199,2100~2199&#xFF0C;&#xFF0C;...&#xFF0C;11100~11199&#xFF0C;&#x4E00;&#x5171;1200&#x4E2A;&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x662F;&#x7531;&#x66F4;&#x9AD8;&#x4F4D;&#x6570;&#x5B57;&#xFF08;12&#xFF09;&#x51B3;&#x5B9A;&#xFF0C;&#x5E76;&#x4E14;&#x7B49;&#x4E8E;&#x66F4;&#x9AD8;&#x4F4D;&#x6570;&#x5B57;&#xFF08;12&#xFF09;&#x4E58;&#x4EE5; &#x5F53;&#x524D;&#x4F4D;&#x6570;&#xFF08;100&#xFF09;&#x3002; &#x2461; &#x5982;&#x679C;&#x767E;&#x4F4D;&#x4E0A;&#x6570;&#x5B57;&#x4E3A;1&#xFF0C;&#x767E;&#x4F4D;&#x4E0A;&#x53EF;&#x80FD;&#x51FA;&#x73B0;1&#x7684;&#x6B21;&#x6570;&#x4E0D;&#x4EC5;&#x53D7;&#x66F4;&#x9AD8;&#x4F4D;&#x5F71;&#x54CD;&#x8FD8;&#x53D7;&#x4F4E;&#x4F4D;&#x5F71;&#x54CD;&#x3002;&#x6BD4;&#x5982;&#xFF1A;12113&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x767E;&#x4F4D;&#x53D7;&#x9AD8;&#x4F4D;&#x5F71;&#x54CD;&#x51FA;&#x73B0;&#x7684;&#x60C5;&#x51B5;&#x662F;&#xFF1A;100~199&#xFF0C;1100~1199,2100~2199&#xFF0C;&#xFF0C;....&#xFF0C;11100~11199&#xFF0C;&#x4E00;&#x5171;1200&#x4E2A;&#x3002;&#x548C;&#x4E0A;&#x9762;&#x60C5;&#x51B5;&#x4E00;&#x6837;&#xFF0C;&#x5E76;&#x4E14;&#x7B49;&#x4E8E;&#x66F4;&#x9AD8;&#x4F4D;&#x6570;&#x5B57;&#xFF08;12&#xFF09;&#x4E58;&#x4EE5; &#x5F53;&#x524D;&#x4F4D;&#x6570;&#xFF08;100&#xFF09;&#x3002;&#x4F46;&#x540C;&#x65F6;&#x5B83;&#x8FD8;&#x53D7;&#x4F4E;&#x4F4D;&#x5F71;&#x54CD;&#xFF0C;&#x767E;&#x4F4D;&#x51FA;&#x73B0;1&#x7684;&#x60C5;&#x51B5;&#x662F;&#xFF1A;12100~12113,&#x4E00;&#x5171;114&#x4E2A;&#xFF0C;&#x7B49;&#x4E8E;&#x4F4E;&#x4F4D;&#x6570;&#x5B57;&#xFF08;113&#xFF09;+1&#x3002; &#x2462; &#x5982;&#x679C;&#x767E;&#x4F4D;&#x4E0A;&#x6570;&#x5B57;&#x5927;&#x4E8E;1&#xFF08;2~9&#xFF09;&#xFF0C;&#x5219;&#x767E;&#x4F4D;&#x4E0A;&#x51FA;&#x73B0;1&#x7684;&#x60C5;&#x51B5;&#x4EC5;&#x7531;&#x66F4;&#x9AD8;&#x4F4D;&#x51B3;&#x5B9A;&#xFF0C;&#x6BD4;&#x5982;12213&#xFF0C;&#x5219;&#x767E;&#x4F4D;&#x51FA;&#x73B0;1&#x7684;&#x60C5;&#x51B5;&#x662F;&#xFF1A;100~199,1100~1199&#xFF0C;2100~2199&#xFF0C;...&#xFF0C;11100~11199,12100~12199,&#x4E00;&#x5171;&#x6709;1300&#x4E2A;&#xFF0C;&#x5E76;&#x4E14;&#x7B49;&#x4E8E;&#x66F4;&#x9AD8;&#x4F4D;&#x6570;&#x5B57;+1&#xFF08;12+1&#xFF09;&#x4E58;&#x4EE5;&#x5F53;&#x524D;&#x4F4D;&#x6570;&#xFF08;100&#xFF09;&#x3002; 1234567891011121314151617class Solution {public: int NumberOf1Between1AndN_Solution(int n) { int cnt = 0; for (int i = 1; i &lt;= n; i*=10) { int a = n / i; int b = n % i; cnt += (a + 8) / 10 * i; if (a % 10 == 1) cnt += (b + 1); } return cnt; }}; &#x628A;&#x6570;&#x7EC4;&#x6392;&#x6210;&#x6700;&#x5C0F;&#x7684;&#x6570; &#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#x6570;&#x7EC4;&#xFF0C;&#x628A;&#x6570;&#x7EC4;&#x91CC;&#x6240;&#x6709;&#x6570;&#x5B57;&#x62FC;&#x63A5;&#x8D77;&#x6765;&#x6392;&#x6210;&#x4E00;&#x4E2A;&#x6570;&#xFF0C;&#x6253;&#x5370;&#x80FD;&#x62FC;&#x63A5;&#x51FA;&#x7684;&#x6240;&#x6709;&#x6570;&#x5B57;&#x4E2D;&#x6700;&#x5C0F;&#x7684;&#x4E00;&#x4E2A;&#x3002;&#x4F8B;&#x5982;&#x8F93;&#x5165;&#x6570;&#x7EC4;{3&#xFF0C;32&#xFF0C;321}&#xFF0C;&#x5219;&#x6253;&#x5370;&#x51FA;&#x8FD9;&#x4E09;&#x4E2A;&#x6570;&#x5B57;&#x80FD;&#x6392;&#x6210;&#x7684;&#x6700;&#x5C0F;&#x6570;&#x5B57;&#x4E3A;321323&#x3002; &#x53EF;&#x4EE5;&#x770B;&#x6210;&#x662F;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x95EE;&#x9898;&#xFF0C;&#x5728;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32; S1 &#x548C; S2 &#x7684;&#x5927;&#x5C0F;&#x65F6;&#xFF0C;&#x5E94;&#x8BE5;&#x6BD4;&#x8F83;&#x7684;&#x662F; S1+S2 &#x548C; S2+S1 &#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x5982;&#x679C; S1+S2 &lt; S2+S1&#xFF0C;&#x90A3;&#x4E48;&#x5E94;&#x8BE5;&#x628A; S1 &#x6392;&#x5728;&#x524D;&#x9762;&#xFF0C;&#x5426;&#x5219;&#x5E94;&#x8BE5;&#x628A; S2 &#x6392;&#x5728;&#x524D;&#x9762;&#x3002; 123456789101112131415161718192021222324class Solution {public: static bool cmp(int a, int b) { string s1 = to_string(a), s2 = to_string(b); string s3 = s1 + s2, s4 = s2 + s1; if (s3 &lt; s4) return true; else return false; } string PrintMinNumber(vector&lt;int&gt; numbers) { if (numbers.size() == 0) return &quot;&quot;; sort(numbers.begin(), numbers.end(),cmp); string res; for (auto i = numbers.begin(); i != numbers.end(); i++) { res += to_string(*i); } return res; }}; &#x4E11;&#x6570; &#x628A;&#x53EA;&#x5305;&#x542B;&#x8D28;&#x56E0;&#x5B50;2&#x3001;3&#x548C;5&#x7684;&#x6570;&#x79F0;&#x4F5C;&#x4E11;&#x6570;&#xFF08;Ugly Number&#xFF09;&#x3002;&#x4F8B;&#x5982;6&#x3001;8&#x90FD;&#x662F;&#x4E11;&#x6570;&#xFF0C;&#x4F46;14&#x4E0D;&#x662F;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5305;&#x542B;&#x8D28;&#x56E0;&#x5B50;7&#x3002; &#x4E60;&#x60EF;&#x4E0A;&#x6211;&#x4EEC;&#x628A;1&#x5F53;&#x505A;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x4E11;&#x6570;&#x3002;&#x6C42;&#x6309;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x7684;&#x987A;&#x5E8F;&#x7684;&#x7B2C;N&#x4E2A;&#x4E11;&#x6570;&#x3002; 123456789101112131415161718192021222324class Solution {public: int GetUglyNumber_Solution(int index) { if (index &lt; 7) return index; int p2 = 0, p3 = 0, p5 = 0, num = 1; vector&lt;int&gt; res; res.push_back(num); while (res.size()&lt;index) { num = min(res[p2] * 2, min(res[p3] * 3, res[p5] * 5)); if (res[p2] * 2 == num) p2++; if (res[p3] * 3 == num) p3++; if (res[p5] * 5 == num) //&#x4E3A;&#x4E86;&#x9632;&#x6B62;&#x91CD;&#x590D;&#xFF0C;&#x8FD9;&#x91CC;&#x5FC5;&#x987B;&#x662F;&#x4E09;&#x4E2A;if p5++; res.push_back(num); } return num; }}; &#x7B2C;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x5B57;&#x7B26; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x5728;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;(0&lt;=&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&lt;=10000&#xFF0C;&#x5168;&#x90E8;&#x7531;&#x5B57;&#x6BCD;&#x7EC4;&#x6210;)&#x4E2D;&#x627E;&#x5230;&#x7B2C;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x5B57;&#x7B26;,&#x5E76;&#x8FD4;&#x56DE;&#x5B83;&#x7684;&#x4F4D;&#x7F6E;, &#x5982;&#x679C;&#x6CA1;&#x6709;&#x5219;&#x8FD4;&#x56DE; -1&#xFF08;&#x9700;&#x8981;&#x533A;&#x5206;&#x5927;&#x5C0F;&#x5199;&#xFF09;. &#x4E24;&#x6B21;&#x904D;&#x5386; 123456789101112131415161718class Solution {public: int FirstNotRepeatingChar(string str) { char s[256] = { 0 }; int n = str.length(); for (int i = 0; i &lt; n; i++) { s[str[i]]++; } for (int i = 0; i &lt; n; i++) { if (s[str[i]] == 1) return i; } return -1; }}; &#x4E24;&#x4E2A;&#x94FE;&#x8868;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x516C;&#x5171;&#x7ED3;&#x70B9; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x94FE;&#x8868;&#xFF0C;&#x627E;&#x51FA;&#x5B83;&#x4EEC;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x516C;&#x5171;&#x7ED3;&#x70B9;&#x3002; &#x4E24;&#x6B21;&#x904D;&#x5386; 1234567891011121314151617181920212223class Solution {public: ListNode* FindFirstCommonNode(ListNode* pHead1, ListNode* pHead2) { ListNode* p1 = pHead1; ListNode* p2 = pHead2; if (p1 == NULL || p2 == NULL) return NULL; while (p1!=p2) { if (p1 == NULL) p1 = pHead2; else p1 = p1-&gt;next; if (p2 == NULL) p2 = pHead1; else p2 = p2-&gt;next; } return p2; }}; &#x6570;&#x5B57;&#x5728;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x7EDF;&#x8BA1;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x5728;&#x6392;&#x5E8F;&#x6570;&#x7EC4;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x3002; &#x4E8C;&#x5206;&#x6CD5;&#x67E5;&#x627E;&#xFF0C;&#x56E0;&#x4E3A;&#x6570;&#x7EC4;&#x4E2D;&#x90FD;&#x662F;&#x6574;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x8003;&#x8651;&#x641C;&#x7D22;num-0.5&#x548C;num+0.5&#x3002; 12345678910111213141516171819202122232425class Solution {public: int GetNumberOfK(vector&lt;int&gt; data, int k) { double temp1 = k - 0.5, temp2 = k + 0.5; int res = binSearch(data, temp2) - binSearch(data, temp1); return res; } int binSearch(vector&lt;int&gt; data, double num) { int start = 0, end = data.size() - 1; int mid; while (start&lt;=end) { mid = (end - start) / 2 + start; if (data[mid] &lt; num) start = mid + 1; else if (data[mid] &gt; num) end = mid - 1; } return start; }}; &#x4E8C;&#x53C9;&#x6811;&#x7684;&#x6DF1;&#x5EA6; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8F93;&#x5165;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x6C42;&#x8BE5;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x3002;&#x4ECE;&#x6839;&#x7ED3;&#x70B9;&#x5230;&#x53F6;&#x7ED3;&#x70B9;&#x4F9D;&#x6B21;&#x7ECF;&#x8FC7;&#x7684;&#x7ED3;&#x70B9;&#xFF08;&#x542B;&#x6839;&#x3001;&#x53F6;&#x7ED3;&#x70B9;&#xFF09;&#x5F62;&#x6210;&#x6811;&#x7684;&#x4E00;&#x6761;&#x8DEF;&#x5F84;&#xFF0C;&#x6700;&#x957F;&#x8DEF;&#x5F84;&#x7684;&#x957F;&#x5EA6;&#x4E3A;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x3002; &#x7ECF;&#x5178;&#x7684;&#x9012;&#x5F52;&#x3002; 1234567891011class Solution{public: int TreeDepth(TreeNode* pRoot) { if (pRoot == NULL) return 0; else return max(TreeDepth(pRoot-&gt;left) + 1, TreeDepth(pRoot-&gt;right) + 1); }}; &#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8F93;&#x5165;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x5224;&#x65AD;&#x8BE5;&#x4E8C;&#x53C9;&#x6811;&#x662F;&#x5426;&#x662F;&#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811;&#x3002; &#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#xFF08;Self-balancing binary search tree&#xFF09;&#x53C8;&#x88AB;&#x79F0;&#x4E3A;AVL&#x6811;&#xFF08;&#x6709;&#x522B;&#x4E8E;AVL&#x7B97;&#x6CD5;&#xFF09;&#xFF0C;&#x4E14;&#x5177;&#x6709;&#x4EE5;&#x4E0B;&#x6027;&#x8D28;&#xFF1A;&#x5B83;&#x662F;&#x4E00;&#x68F5;&#x7A7A;&#x6811;&#x6216;&#x5B83;&#x7684;&#x5DE6;&#x53F3;&#x4E24;&#x4E2A;&#x5B50;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#x5DEE;&#x7684;&#x7EDD;&#x5BF9;&#x503C;&#x4E0D;&#x8D85;&#x8FC7;1&#xFF0C;&#x5E76;&#x4E14;&#x5DE6;&#x53F3;&#x4E24;&#x4E2A;&#x5B50;&#x6811;&#x90FD;&#x662F;&#x4E00;&#x68F5;&#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811;&#x3002; &#x7B2C;&#x4E00;&#x7248;&#x4EE3;&#x7801;&#xFF08;&#x80FD;AC&#xFF0C;&#x6CA1;&#x6709;&#x526A;&#x679D;&#xFF0C;&#x501F;&#x7528;&#x4E0A;&#x4E00;&#x9898;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x7684;&#x4EE3;&#x7801;&#x3002; 1234567891011121314151617181920212223242526class Solution {public: bool IsBalanced_Solution(TreeNode* pRoot) { if (pRoot == NULL) return true; if (IsBalanced_Solution(pRoot-&gt;left) == false) return false; if (IsBalanced_Solution(pRoot-&gt;right) == false) return false; int leftDepth = TreeDepth(pRoot-&gt;left); int rightDepth = TreeDepth(pRoot-&gt;right); if (abs(leftDepth - rightDepth) &gt; 1) return false; return true; } static int TreeDepth(TreeNode* pRoot) { if (pRoot == NULL) return 0; else return max(TreeDepth(pRoot-&gt;left) + 1, TreeDepth(pRoot-&gt;right) + 1); }}; &#x7B2C;&#x4E8C;&#x7248;&#x4EE3;&#x7801;&#xFF0C;&#x6709;&#x526A;&#x679D; 12345678910111213141516171819202122232425class Solution {public: bool IsBalanced_Solution(TreeNode* pRoot) { if (pRoot == NULL) return true; if (TreeDepth(pRoot) == -1) return false; return true; } static int TreeDepth(TreeNode* pRoot) { if (pRoot == NULL) return 0; int leftDepth = TreeDepth(pRoot-&gt;left); if (leftDepth == -1)return -1; int rightDepth = TreeDepth(pRoot-&gt;right); if (rightDepth == -1) return -1; if (abs(rightDepth - leftDepth) &gt; 1) return -1; else return max(rightDepth, leftDepth) + 1; }}; &#x6570;&#x7EC4;&#x4E2D;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x5B57; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x4E00;&#x4E2A;&#x6574;&#x578B;&#x6570;&#x7EC4;&#x91CC;&#x9664;&#x4E86;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#x4E4B;&#x5916;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x6570;&#x5B57;&#x90FD;&#x51FA;&#x73B0;&#x4E86;&#x4E24;&#x6B21;&#x3002;&#x8BF7;&#x5199;&#x7A0B;&#x5E8F;&#x627E;&#x51FA;&#x8FD9;&#x4E24;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x5B57;&#x3002; &#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x9898;&#x6539;&#x6210;&#xFF0C;&#x4E00;&#x4E2A;&#x6574;&#x5F62;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x6B21;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5F02;&#x6216;&#x6765;&#x505A;&#xFF0C;&#x628A;&#x8FD9;&#x4E2A;&#x6570;&#x7EC4;&#x91CC;&#x7684;&#x6240;&#x6709;&#x6570;&#x5B57;&#x8FDB;&#x884C;&#x5F02;&#x6216;&#x3002; &#x539F;&#x56E0;&#x662F;&#xFF0C;&#x76F8;&#x540C;&#x7684;&#x6570;&#x5F02;&#x6216;&#x7ED3;&#x679C;&#x4E3A;0&#x3002; &#x9996;&#x5148;&#x6211;&#x4EEC;&#x8003;&#x8651;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7248;&#x672C;&#xFF1A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x91CC;&#x9664;&#x4E86;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x4E4B;&#x5916;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x6570;&#x5B57;&#x90FD;&#x51FA;&#x73B0;&#x4E86;&#x4E24;&#x6B21;&#x3002;&#x8BF7;&#x5199;&#x7A0B;&#x5E8F;&#x627E;&#x51FA;&#x8FD9;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x5B57;&#x3002; &#x8FD9;&#x4E2A;&#x9898;&#x76EE;&#x7684;&#x7A81;&#x7834;&#x53E3;&#x5728;&#x54EA;&#x91CC;&#xFF1F;&#x9898;&#x76EE;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x5F3A;&#x8C03;&#x6709;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#xFF0C;&#x5176;&#x4ED6;&#x7684;&#x51FA;&#x73B0;&#x4E24;&#x6B21;&#xFF1F;&#x6211;&#x4EEC;&#x60F3;&#x5230;&#x4E86;&#x5F02;&#x6216;&#x8FD0;&#x7B97;&#x7684;&#x6027;&#x8D28;&#xFF1A;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x5F02;&#x6216;&#x5B83;&#x81EA;&#x5DF1;&#x90FD;&#x7B49;&#x4E8E;0 &#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4ECE;&#x5934;&#x5230;&#x5C3E;&#x4F9D;&#x6B21;&#x5F02;&#x6216;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x90A3;&#x4E48;&#x6700;&#x7EC8;&#x7684;&#x7ED3;&#x679C;&#x521A;&#x597D;&#x662F;&#x90A3;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x56E0;&#x4E3A;&#x90A3;&#x4E9B;&#x51FA;&#x73B0;&#x4E24;&#x6B21;&#x7684;&#x6570;&#x5B57;&#x5168;&#x90E8;&#x5728;&#x5F02;&#x6216;&#x4E2D;&#x62B5;&#x6D88;&#x6389;&#x4E86;&#x3002; &#x6709;&#x4E86;&#x4E0A;&#x9762;&#x7B80;&#x5355;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x4E4B;&#x540E;&#xFF0C;&#x6211;&#x4EEC;&#x56DE;&#x5230;&#x539F;&#x59CB;&#x7684;&#x95EE;&#x9898;&#x3002;&#x5982;&#x679C;&#x80FD;&#x591F;&#x628A;&#x539F;&#x6570;&#x7EC4;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#x3002;&#x5728;&#x6BCF;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#x4E2D;&#xFF0C;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x800C;&#x5176;&#x5B83;&#x6570;&#x5B57;&#x90FD;&#x51FA;&#x73B0;&#x4E24;&#x6B21;&#x3002;&#x5982;&#x679C;&#x80FD;&#x591F;&#x8FD9;&#x6837;&#x62C6;&#x5206;&#x539F;&#x6570;&#x7EC4;&#xFF0C;&#x6309;&#x7167;&#x524D;&#x9762;&#x7684;&#x529E;&#x6CD5;&#x5C31;&#x662F;&#x5206;&#x522B;&#x6C42;&#x51FA;&#x8FD9;&#x4E24;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x5B57;&#x4E86;&#x3002; &#x6211;&#x4EEC;&#x8FD8;&#x662F;&#x4ECE;&#x5934;&#x5230;&#x5C3E;&#x4F9D;&#x6B21;&#x5F02;&#x6216;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x90A3;&#x4E48;&#x6700;&#x7EC8;&#x5F97;&#x5230;&#x7684;&#x7ED3;&#x679C;&#x5C31;&#x662F;&#x4E24;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x5B57;&#x7684;&#x5F02;&#x6216;&#x7ED3;&#x679C;&#x3002;&#x56E0;&#x4E3A;&#x5176;&#x5B83;&#x6570;&#x5B57;&#x90FD;&#x51FA;&#x73B0;&#x4E86;&#x4E24;&#x6B21;&#xFF0C;&#x5728;&#x5F02;&#x6216;&#x4E2D;&#x5168;&#x90E8;&#x62B5;&#x6D88;&#x6389;&#x4E86;&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#x80AF;&#x5B9A;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x5F02;&#x6216;&#x7ED3;&#x679C;&#x80AF;&#x5B9A;&#x4E0D;&#x4E3A;0 &#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5728;&#x8FD9;&#x4E2A;&#x7ED3;&#x679C;&#x6570;&#x5B57;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x793A;&#x4E2D;&#x81F3;&#x5C11;&#x5C31;&#x6709;&#x4E00;&#x4F4D;&#x4E3A;1 &#x3002;&#x6211;&#x4EEC;&#x5728;&#x7ED3;&#x679C;&#x6570;&#x5B57;&#x4E2D;&#x627E;&#x5230;&#x7B2C;&#x4E00;&#x4E2A;&#x4E3A;1 &#x7684;&#x4F4D;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x8BB0;&#x4E3A;&#x7B2C;N &#x4F4D;&#x3002;&#x73B0;&#x5728;&#x6211;&#x4EEC;&#x4EE5;&#x7B2C;N &#x4F4D;&#x662F;&#x4E0D;&#x662F;1 &#x4E3A;&#x6807;&#x51C6;&#x628A;&#x539F;&#x6570;&#x7EC4;&#x4E2D;&#x7684;&#x6570;&#x5B57;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#x4E2D;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x7B2C;N &#x4F4D;&#x90FD;&#x4E3A;1 &#xFF0C;&#x800C;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#x7684;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x7B2C;N &#x4F4D;&#x90FD;&#x4E3A;0 &#x3002; &#x73B0;&#x5728;&#x6211;&#x4EEC;&#x5DF2;&#x7ECF;&#x628A;&#x539F;&#x6570;&#x7EC4;&#x5206;&#x6210;&#x4E86;&#x4E24;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B50;&#x6570;&#x7EC4;&#x90FD;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x800C;&#x5176;&#x5B83;&#x6570;&#x5B57;&#x90FD;&#x51FA;&#x73B0;&#x4E86;&#x4E24;&#x6B21;&#x3002;&#x56E0;&#x6B64;&#x5230;&#x6B64;&#x4E3A;&#x6B62;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x95EE;&#x9898;&#x6211;&#x4EEC;&#x90FD;&#x5DF2;&#x7ECF;&#x89E3;&#x51B3;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738class Solution {public: void FindNumsAppearOnce(vector&lt;int&gt; data, int* num1, int *num2) { if (data.size() &lt; 2) //&#x5F02;&#x5E38;&#x60C5;&#x51B5; return; int temp = 0,n=data.size(); for (int i = 0; i &lt; n; i++) //&#x6240;&#x6709;&#x7684;&#x6570;&#xFF0C;&#x5168;&#x90E8;&#x76F8;&#x4E92;&#x5F02;&#x6216; { temp = temp ^ data[i]; } if (temp == 0) return; //&#x5F02;&#x5E38;&#x60C5;&#x51B5;&#x3002; int first = 0; while ((temp&amp;1)==0) //&#x627E;&#x51FA;&#x7B2C;&#x4E00;&#x4F4D;&#xFF0C;&#x6570;&#x503C;&#x4E0D;&#x4E3A;0&#x7684; { temp = temp &gt;&gt; 1; //&#x53F3;&#x79FB;&#x4E00;&#x4F4D; first++; } *num1 = 0; *num2 = 0; for (int i = 0; i &lt; n; i++) { if (isBit(data[i], first)) *num1 = *num1^data[i]; else *num2 = *num2^data[i]; } } //&#x5224;&#x65AD;&#x67D0;&#x4E00;&#x4F4D;&#x662F;&#x4E0D;&#x662F;1&#x7684;&#x51FD;&#x6570; bool isBit(int num, int index) { num = num &gt;&gt; index; return (num &amp; 1); }}; &#x548C;&#x4E3A;S&#x7684;&#x8FDE;&#x7EED;&#x6B63;&#x6570;&#x5E8F;&#x5217; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x5C0F;&#x660E;&#x5F88;&#x559C;&#x6B22;&#x6570;&#x5B66;,&#x6709;&#x4E00;&#x5929;&#x4ED6;&#x5728;&#x505A;&#x6570;&#x5B66;&#x4F5C;&#x4E1A;&#x65F6;,&#x8981;&#x6C42;&#x8BA1;&#x7B97;&#x51FA;9~16&#x7684;&#x548C;,&#x4ED6;&#x9A6C;&#x4E0A;&#x5C31;&#x5199;&#x51FA;&#x4E86;&#x6B63;&#x786E;&#x7B54;&#x6848;&#x662F;100&#x3002;&#x4F46;&#x662F;&#x4ED6;&#x5E76;&#x4E0D;&#x6EE1;&#x8DB3;&#x4E8E;&#x6B64;,&#x4ED6;&#x5728;&#x60F3;&#x7A76;&#x7ADF;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x8FDE;&#x7EED;&#x7684;&#x6B63;&#x6570;&#x5E8F;&#x5217;&#x7684;&#x548C;&#x4E3A;100(&#x81F3;&#x5C11;&#x5305;&#x62EC;&#x4E24;&#x4E2A;&#x6570;)&#x3002;&#x6CA1;&#x591A;&#x4E45;,&#x4ED6;&#x5C31;&#x5F97;&#x5230;&#x53E6;&#x4E00;&#x7EC4;&#x8FDE;&#x7EED;&#x6B63;&#x6570;&#x548C;&#x4E3A;100&#x7684;&#x5E8F;&#x5217;:18,19,20,21,22&#x3002;&#x73B0;&#x5728;&#x628A;&#x95EE;&#x9898;&#x4EA4;&#x7ED9;&#x4F60;,&#x4F60;&#x80FD;&#x4E0D;&#x80FD;&#x4E5F;&#x5F88;&#x5FEB;&#x7684;&#x627E;&#x51FA;&#x6240;&#x6709;&#x548C;&#x4E3A;S&#x7684;&#x8FDE;&#x7EED;&#x6B63;&#x6570;&#x5E8F;&#x5217;? Good Luck! &#x8F93;&#x51FA;&#x63CF;&#x8FF0;: &#x8F93;&#x51FA;&#x6240;&#x6709;&#x548C;&#x4E3A;S&#x7684;&#x8FDE;&#x7EED;&#x6B63;&#x6570;&#x5E8F;&#x5217;&#x3002;&#x5E8F;&#x5217;&#x5185;&#x6309;&#x7167;&#x4ECE;&#x5C0F;&#x81F3;&#x5927;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x5E8F;&#x5217;&#x95F4;&#x6309;&#x7167;&#x5F00;&#x59CB;&#x6570;&#x5B57;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x7684;&#x987A;&#x5E8F;&#x3002; &#x8FD9;&#x4E2A;&#x9898;&#x4E0E; &#x548C;&#x4E3A;S&#x7684;&#x4E24;&#x4E2A;&#x6570;&#x5B57; &#x7C7B;&#x4F3C;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003; &#x65B9;&#x6CD5;&#x662F;&#x7528;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x53BB;&#x505A;&#x3002; 123456789101112131415161718192021222324252627282930class Solution {public: vector&lt;vector&lt;int&gt; &gt; FindContinuousSequence(int sum) { int start = 1, end = 2; int cur; vector&lt;int&gt;temp; vector&lt;vector&lt;int&gt;&gt;res; while (start &lt; end) { cur = (start + end)*(end - start + 1) / 2; if (cur &gt; sum) start++; if (cur &lt; sum) end++; if (cur == sum) { temp.clear(); for (int i = start; i &lt;= end; i++) { temp.push_back(i); } start++; res.push_back(temp); } } return res; }}; &#x548C;&#x4E3A;S&#x7684;&#x4E24;&#x4E2A;&#x6570;&#x5B57; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x9012;&#x589E;&#x6392;&#x5E8F;&#x7684;&#x6570;&#x7EC4;&#x548C;&#x4E00;&#x4E2A;&#x6570;&#x5B57;S&#xFF0C;&#x5728;&#x6570;&#x7EC4;&#x4E2D;&#x67E5;&#x627E;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x4F7F;&#x5F97;&#x4ED6;&#x4EEC;&#x7684;&#x548C;&#x6B63;&#x597D;&#x662F;S&#xFF0C;&#x5982;&#x679C;&#x6709;&#x591A;&#x5BF9;&#x6570;&#x5B57;&#x7684;&#x548C;&#x7B49;&#x4E8E;S&#xFF0C;&#x8F93;&#x51FA;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x4E58;&#x79EF;&#x6700;&#x5C0F;&#x7684;&#x3002; &#x8F93;&#x51FA;&#x63CF;&#x8FF0;: &#x5BF9;&#x5E94;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x6848;&#x4F8B;&#xFF0C;&#x8F93;&#x51FA;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x5C0F;&#x7684;&#x5148;&#x8F93;&#x51FA;&#x3002; 123456789101112131415161718192021222324class Solution {public: vector&lt;int&gt; FindNumbersWithSum(vector&lt;int&gt; array, int sum) { int n = array.size(); vector&lt;int&gt;res; int num1, num2 = n - 1; for (num1=0; num1 &lt; n; ) { if (array[num1] + array[num2] &gt; sum) num2--; if (array[num1] + array[num2] &lt; sum) num1++; if(array[num1] + array[num2] == sum) { res.push_back(array[num1]); res.push_back(array[num2]); return res; } } return res; }}; &#x5DE6;&#x65CB;&#x8F6C;&#x5B57;&#x7B26;&#x4E32; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x6C47;&#x7F16;&#x8BED;&#x8A00;&#x4E2D;&#x6709;&#x4E00;&#x79CD;&#x79FB;&#x4F4D;&#x6307;&#x4EE4;&#x53EB;&#x505A;&#x5FAA;&#x73AF;&#x5DE6;&#x79FB;&#xFF08;ROL&#xFF09;&#xFF0C;&#x73B0;&#x5728;&#x6709;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x5C31;&#x662F;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x6A21;&#x62DF;&#x8FD9;&#x4E2A;&#x6307;&#x4EE4;&#x7684;&#x8FD0;&#x7B97;&#x7ED3;&#x679C;&#x3002;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x7ED9;&#x5B9A;&#x7684;&#x5B57;&#x7B26;&#x5E8F;&#x5217;S&#xFF0C;&#x8BF7;&#x4F60;&#x628A;&#x5176;&#x5FAA;&#x73AF;&#x5DE6;&#x79FB;K&#x4F4D;&#x540E;&#x7684;&#x5E8F;&#x5217;&#x8F93;&#x51FA;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5B57;&#x7B26;&#x5E8F;&#x5217;S=&#x201D;abcXYZdef&#x201D;,&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x5FAA;&#x73AF;&#x5DE6;&#x79FB;3&#x4F4D;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x5373;&#x201C;XYZdefabc&#x201D;&#x3002;&#x662F;&#x4E0D;&#x662F;&#x5F88;&#x7B80;&#x5355;&#xFF1F;OK&#xFF0C;&#x641E;&#x5B9A;&#x5B83;&#xFF01; 123456789101112131415class Solution {public: string LeftRotateString(string str, int n) { int size = str.size(); if (size == 0) return str; n = n % size; string res; res += str.substr(n, size); res += str.substr(0, n); return res; }}; &#x7FFB;&#x8F6C;&#x5355;&#x8BCD;&#x987A;&#x5E8F;&#x5217; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x725B;&#x5BA2;&#x6700;&#x8FD1;&#x6765;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x5458;&#x5DE5;Fish&#xFF0C;&#x6BCF;&#x5929;&#x65E9;&#x6668;&#x603B;&#x662F;&#x4F1A;&#x62FF;&#x7740;&#x4E00;&#x672C;&#x82F1;&#x6587;&#x6742;&#x5FD7;&#xFF0C;&#x5199;&#x4E9B;&#x53E5;&#x5B50;&#x5728;&#x672C;&#x5B50;&#x4E0A;&#x3002;&#x540C;&#x4E8B;Cat&#x5BF9;Fish&#x5199;&#x7684;&#x5185;&#x5BB9;&#x9887;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x6709;&#x4E00;&#x5929;&#x4ED6;&#x5411;Fish&#x501F;&#x6765;&#x7FFB;&#x770B;&#xFF0C;&#x4F46;&#x5374;&#x8BFB;&#x4E0D;&#x61C2;&#x5B83;&#x7684;&#x610F;&#x601D;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x201C;student. a am I&#x201D;&#x3002;&#x540E;&#x6765;&#x624D;&#x610F;&#x8BC6;&#x5230;&#xFF0C;&#x8FD9;&#x5BB6;&#x4F19;&#x539F;&#x6765;&#x628A;&#x53E5;&#x5B50;&#x5355;&#x8BCD;&#x7684;&#x987A;&#x5E8F;&#x7FFB;&#x8F6C;&#x4E86;&#xFF0C;&#x6B63;&#x786E;&#x7684;&#x53E5;&#x5B50;&#x5E94;&#x8BE5;&#x662F;&#x201C;I am a student.&#x201D;&#x3002;Cat&#x5BF9;&#x4E00;&#x4E00;&#x7684;&#x7FFB;&#x8F6C;&#x8FD9;&#x4E9B;&#x5355;&#x8BCD;&#x987A;&#x5E8F;&#x53EF;&#x4E0D;&#x5728;&#x884C;&#xFF0C;&#x4F60;&#x80FD;&#x5E2E;&#x52A9;&#x4ED6;&#x4E48;&#xFF1F; 123456789101112131415161718192021222324252627282930313233class Solution {public: string ReverseSentence(string str) { if (str.size() == 0) return str; string temp, res; vector&lt;string&gt; v; int end = str.size(); int i; for (i = str.size()-1; i &gt;= 0; i--) { if (str[i] == &apos; &apos;) { temp.clear(); temp = str.substr(i + 1, end - i - 1); temp += &quot; &quot;; v.push_back(temp); end = i; } } temp = str.substr(0, end); v.push_back(temp); for (int j = 0; j &lt; v.size(); j++) { res += v[j]; //cout &lt;&lt; v[j]; } return res; }}; &#x6251;&#x514B;&#x724C;&#x987A;&#x5B50; &#x9898;&#x76EE;&#x63CF;&#x8FF0; LL&#x4ECA;&#x5929;&#x5FC3;&#x60C5;&#x7279;&#x522B;&#x597D;,&#x56E0;&#x4E3A;&#x4ED6;&#x53BB;&#x4E70;&#x4E86;&#x4E00;&#x526F;&#x6251;&#x514B;&#x724C;,&#x53D1;&#x73B0;&#x91CC;&#x9762;&#x5C45;&#x7136;&#x6709;2&#x4E2A;&#x5927;&#x738B;,2&#x4E2A;&#x5C0F;&#x738B;(&#x4E00;&#x526F;&#x724C;&#x539F;&#x672C;&#x662F;54&#x5F20;^_^)...&#x4ED6;&#x968F;&#x673A;&#x4ECE;&#x4E2D;&#x62BD;&#x51FA;&#x4E86;5&#x5F20;&#x724C;,&#x60F3;&#x6D4B;&#x6D4B;&#x81EA;&#x5DF1;&#x7684;&#x624B;&#x6C14;,&#x770B;&#x770B;&#x80FD;&#x4E0D;&#x80FD;&#x62BD;&#x5230;&#x987A;&#x5B50;,&#x5982;&#x679C;&#x62BD;&#x5230;&#x7684;&#x8BDD;,&#x4ED6;&#x51B3;&#x5B9A;&#x53BB;&#x4E70;&#x4F53;&#x80B2;&#x5F69;&#x7968;,&#x563F;&#x563F;&#xFF01;&#xFF01;&#x201C;&#x7EA2;&#x5FC3;A,&#x9ED1;&#x6843;3,&#x5C0F;&#x738B;,&#x5927;&#x738B;,&#x65B9;&#x7247;5&#x201D;,&#x201C;Oh My God!&#x201D;&#x4E0D;&#x662F;&#x987A;&#x5B50;.....LL&#x4E0D;&#x9AD8;&#x5174;&#x4E86;,&#x4ED6;&#x60F3;&#x4E86;&#x60F3;,&#x51B3;&#x5B9A;&#x5927;&#x738B;&#x53EF;&#x4EE5;&#x770B;&#x6210;&#x4EFB;&#x4F55;&#x6570;&#x5B57;,&#x5E76;&#x4E14;A&#x770B;&#x4F5C;1,J&#x4E3A;11,Q&#x4E3A;12,K&#x4E3A;13&#x3002;&#x4E0A;&#x9762;&#x7684;5&#x5F20;&#x724C;&#x5C31;&#x53EF;&#x4EE5;&#x53D8;&#x6210;&#x201C;1,2,3,4,5&#x201D;(&#x5927;&#x5C0F;&#x738B;&#x5206;&#x522B;&#x770B;&#x4F5C;2&#x548C;4),&#x201C;So Lucky!&#x201D;&#x3002;LL&#x51B3;&#x5B9A;&#x53BB;&#x4E70;&#x4F53;&#x80B2;&#x5F69;&#x7968;&#x5566;&#x3002; &#x73B0;&#x5728;,&#x8981;&#x6C42;&#x4F60;&#x4F7F;&#x7528;&#x8FD9;&#x5E45;&#x724C;&#x6A21;&#x62DF;&#x4E0A;&#x9762;&#x7684;&#x8FC7;&#x7A0B;,&#x7136;&#x540E;&#x544A;&#x8BC9;&#x6211;&#x4EEC;LL&#x7684;&#x8FD0;&#x6C14;&#x5982;&#x4F55;&#xFF0C; &#x5982;&#x679C;&#x724C;&#x80FD;&#x7EC4;&#x6210;&#x987A;&#x5B50;&#x5C31;&#x8F93;&#x51FA;true&#xFF0C;&#x5426;&#x5219;&#x5C31;&#x8F93;&#x51FA;false&#x3002;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x8D77;&#x89C1;,&#x4F60;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x5927;&#x5C0F;&#x738B;&#x662F;0&#x3002; &#x4E09;&#x4E2A;&#x6761;&#x4EF6; &#x6700;&#x5927;-&#x6700;&#x5C0F;(&#x4E0D;&#x8BA1;0)&lt;5; &#x6CA1;&#x6709;&#x91CD;&#x590D; &#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x4E3A;5 123456789101112131415161718192021222324252627282930313233343536class Solution{ public: /*&#x4E09;&#x4E2A;&#x6761;&#x4EF6;&#xFF1A; 1. &#x6700;&#x5927;-&#x6700;&#x5C0F;(&#x4E0D;&#x8BA1;0)&lt;5; 2. &#x6CA1;&#x6709;&#x91CD;&#x590D; 3. &#x6570;&#x7EC4;&#x957F;&#x5EA6;&#x4E3A;5 */ bool IsContinuous(vector&lt;int&gt; numbers) { if (numbers.size() != 5) return false; int maxn, minn; sort(numbers.begin(), numbers.end()); maxn = numbers[4]; for (int i = 0; i &lt; 5; i++) { if (numbers[i] != 0) { minn = numbers[i]; break; } } for (int i = 0; i &lt; 4; i++) { if (numbers[i] == 0) continue; if (numbers[i] == numbers[i + 1]) return false; } if ((maxn - minn) &gt;= 5) return false; return true; }}; &#x6C42;1+2+3+...+n &#x6C42;1+2+3+...+n&#xFF0C;&#x8981;&#x6C42;&#x4E0D;&#x80FD;&#x4F7F;&#x7528;&#x4E58;&#x9664;&#x6CD5;&#x3001;for&#x3001;while&#x3001;if&#x3001;else&#x3001;switch&#x3001;case&#x7B49;&#x5173;&#x952E;&#x5B57;&#x53CA;&#x6761;&#x4EF6;&#x5224;&#x65AD;&#x8BED;&#x53E5;&#xFF08;A?B:C&#xFF09;&#x3002; &#x89E3;&#x6CD5;&#x4E00; 12345678910class Solution {public: int Sum_Solution(int n) { int ans = n; ans &amp;&amp; (ans += Sum_Solution(n - 1)); //&#x5F53;ans=0&#x65F6;&#x53D1;&#x751F;&#x77ED;&#x8DEF; return ans; }}; &#x89E3;&#x6CD5;&#x4E8C; &#x5229;&#x7528;pow 1234567891011class Solution2 {public: int Sum_Solution(int n) { int a = pow(n,2); a += n; a=a &gt;&gt; 1; return a; }}; &#x628A;&#x4E8C;&#x53C9;&#x6811;&#x6253;&#x5370;&#x6210;&#x591A;&#x884C; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x6309;&#x5C42;&#x6253;&#x5370;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x540C;&#x4E00;&#x5C42;&#x7ED3;&#x70B9;&#x4ECE;&#x5DE6;&#x81F3;&#x53F3;&#x8F93;&#x51FA;&#x3002;&#x6BCF;&#x4E00;&#x5C42;&#x8F93;&#x51FA;&#x4E00;&#x884C;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Solution {public: vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) { vector&lt;vector&lt;int&gt;&gt;res; vector&lt;int&gt;temp; TreeNode* p; if (pRoot == NULL) return res; queue&lt;TreeNode*&gt;q1, q2; q1.push(pRoot); bool flag = false; while ((!q1.empty()) || (!q2.empty())) { temp.clear(); flag = false; while (!q1.empty()) { p = q1.front(); q1.pop(); temp.push_back(p-&gt;val); flag = true; if (p-&gt;left != NULL) q2.push(p-&gt;left); if (p-&gt;right != NULL) q2.push(p-&gt;right); } if(flag) res.push_back(temp); temp.clear(); flag = false; while (!q2.empty()) { p = q2.front(); q2.pop(); temp.push_back(p-&gt;val); flag = true; if (p-&gt;left != NULL) q1.push(p-&gt;left); if (p-&gt;right != NULL) q1.push(p-&gt;right); } if (flag) res.push_back(temp); } return res; }}; &#x5220;&#x9664;&#x94FE;&#x8868;&#x4E2D;&#x91CD;&#x590D;&#x7684;&#x7ED3;&#x70B9; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x5728;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x7684;&#x94FE;&#x8868;&#x4E2D;&#xFF0C;&#x5B58;&#x5728;&#x91CD;&#x590D;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x8BF7;&#x5220;&#x9664;&#x8BE5;&#x94FE;&#x8868;&#x4E2D;&#x91CD;&#x590D;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x91CD;&#x590D;&#x7684;&#x7ED3;&#x70B9;&#x4E0D;&#x4FDD;&#x7559;&#xFF0C;&#x8FD4;&#x56DE;&#x94FE;&#x8868;&#x5934;&#x6307;&#x9488;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x94FE;&#x8868;1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 &#x5904;&#x7406;&#x540E;&#x4E3A; 1-&gt;2-&gt;5 1234567891011121314151617181920212223242526272829class Solution {public: ListNode* deleteDuplication(ListNode* pHead) { if (pHead == NULL) return NULL; ListNode* T = new ListNode(-1); T-&gt;next = pHead; ListNode* pre = T, *cur=pHead, *next; while (cur!=NULL&amp;&amp;cur-&gt;next!=NULL) { next = cur-&gt;next; if (cur-&gt;val==next-&gt;val) { while (next != NULL &amp;&amp; cur-&gt;val == next-&gt;val) //&#x4E00;&#x76F4;&#x5F80;&#x4E0B;&#x627E; next = next-&gt;next; pre-&gt;next = next; cur = next; } else { pre = cur; cur = next; } } return T-&gt;next; }}; &#x4E8C;&#x53C9;&#x6811;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x4E8C;&#x53C9;&#x6811;&#x548C;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#xFF0C;&#x8BF7;&#x627E;&#x51FA;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x987A;&#x5E8F;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x5E76;&#x4E14;&#x8FD4;&#x56DE;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x6811;&#x4E2D;&#x7684;&#x7ED3;&#x70B9;&#x4E0D;&#x4EC5;&#x5305;&#x542B;&#x5DE6;&#x53F3;&#x5B50;&#x7ED3;&#x70B9;&#xFF0C;&#x540C;&#x65F6;&#x5305;&#x542B;&#x6307;&#x5411;&#x7236;&#x7ED3;&#x70B9;&#x7684;&#x6307;&#x9488;&#x3002; 12345678910111213141516171819202122232425class Solution {public: TreeLinkNode* GetNext(TreeLinkNode* pNode) { if (pNode == NULL) return NULL; TreeLinkNode *res = pNode; if (pNode-&gt;right!=NULL) { res = pNode-&gt;right; while (res-&gt;left != NULL) res = res-&gt;left; return res; } while (res-&gt;next!=NULL) { if (res == res-&gt;next-&gt;left) //&#x5982;&#x679C;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x662F;&#x5176;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50; return res-&gt;next; if (res == res-&gt;next-&gt;right) res = res-&gt;next; } return NULL; }}; &#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x7B2C;k&#x4E2A;&#x7ED3;&#x70B9; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x7ED9;&#x5B9A;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#xFF0C;&#x8BF7;&#x627E;&#x51FA;&#x5176;&#x4E2D;&#x7684;&#x7B2C;k&#x5C0F;&#x7684;&#x7ED3;&#x70B9;&#x3002;&#x4F8B;&#x5982;&#xFF0C; &#xFF08;5&#xFF0C;3&#xFF0C;7&#xFF0C;2&#xFF0C;4&#xFF0C;6&#xFF0C;8&#xFF09; &#x4E2D;&#xFF0C;&#x6309;&#x7ED3;&#x70B9;&#x6570;&#x503C;&#x5927;&#x5C0F;&#x987A;&#x5E8F;&#x7B2C;&#x4E09;&#x5C0F;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x4E3A;4&#x3002; 123456789101112131415161718192021class Solution{public: TreeNode* KthNode(TreeNode* pRoot, int k) { TreeNode*res = NULL; if (pRoot == NULL) return NULL; res = KthNode(pRoot-&gt;left, k); if (res != NULL) return res; cnt++; if (this-&gt;cnt == k) return pRoot; res = KthNode(pRoot-&gt;right, k); if (res != NULL) return res; return NULL; } int cnt = 0;}; &#x6570;&#x636E;&#x6D41;&#x4E2D;&#x7684;&#x4E2D;&#x4F4D;&#x6570; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x5982;&#x4F55;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x6D41;&#x4E2D;&#x7684;&#x4E2D;&#x4F4D;&#x6570;&#xFF1F;&#x5982;&#x679C;&#x4ECE;&#x6570;&#x636E;&#x6D41;&#x4E2D;&#x8BFB;&#x51FA;&#x5947;&#x6570;&#x4E2A;&#x6570;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x4E2D;&#x4F4D;&#x6570;&#x5C31;&#x662F;&#x6240;&#x6709;&#x6570;&#x503C;&#x6392;&#x5E8F;&#x4E4B;&#x540E;&#x4F4D;&#x4E8E;&#x4E2D;&#x95F4;&#x7684;&#x6570;&#x503C;&#x3002;&#x5982;&#x679C;&#x4ECE;&#x6570;&#x636E;&#x6D41;&#x4E2D;&#x8BFB;&#x51FA;&#x5076;&#x6570;&#x4E2A;&#x6570;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x4E2D;&#x4F4D;&#x6570;&#x5C31;&#x662F;&#x6240;&#x6709;&#x6570;&#x503C;&#x6392;&#x5E8F;&#x4E4B;&#x540E;&#x4E2D;&#x95F4;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002;&#x6211;&#x4EEC;&#x4F7F;&#x7528;Insert()&#x65B9;&#x6CD5;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#x6D41;&#xFF0C;&#x4F7F;&#x7528;GetMedian()&#x65B9;&#x6CD5;&#x83B7;&#x53D6;&#x5F53;&#x524D;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#x7684;&#x4E2D;&#x4F4D;&#x6570;&#x3002; &#x7C7B;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;PAT-A-1057 &#x4F7F;&#x7528;multiset&#x7EF4;&#x62A4;&#x4E24;&#x4E2A;multiset upper&#x548C;lower&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738class Solution {public: void Insert(int num) { if (num &gt; mid) upper.insert(num); else lower.insert(num); adjust(); } double GetMedian() { if (upper.size() == lower.size()) return(((*upper.begin()) + (*lower.begin())) / 2.0); else return *lower.begin(); } void adjust() { if (upper.size() &gt; lower.size()) { lower.insert(*upper.begin()); upper.erase(upper.begin()); } else if (lower.size()&gt;upper.size()+1) { upper.insert(*lower.begin()); lower.erase(*lower.begin()); } mid = *lower.begin(); }private: multiset&lt;int&gt; upper; multiset&lt;int, greater&lt;int&gt;&gt;lower; int mid = 0;}; &#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x6700;&#x5927;&#x503C; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x548C;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x627E;&#x51FA;&#x6240;&#x6709;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x91CC;&#x6570;&#x503C;&#x7684;&#x6700;&#x5927;&#x503C;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5982;&#x679C;&#x8F93;&#x5165;&#x6570;&#x7EC4;{2,3,4,2,6,2,5,1}&#x53CA;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x5927;&#x5C0F;3&#xFF0C;&#x90A3;&#x4E48;&#x4E00;&#x5171;&#x5B58;&#x5728;6&#x4E2A;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x6700;&#x5927;&#x503C;&#x5206;&#x522B;&#x4E3A;{4,4,6,6,6,5}&#xFF1B; &#x9488;&#x5BF9;&#x6570;&#x7EC4;{2,3,4,2,6,2,5,1}&#x7684;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x6709;&#x4EE5;&#x4E0B;6&#x4E2A;&#xFF1A; {[2,3,4],2,6,2,5,1}&#xFF0C; {2,[3,4,2],6,2,5,1}&#xFF0C; {2,3,[4,2,6],2,5,1}&#xFF0C; {2,3,4,[2,6,2],5,1}&#xFF0C; {2,3,4,2,[6,2,5],1}&#xFF0C; {2,3,4,2,6,[2,5,1]}&#x3002; &#x89E3;&#x6CD5;&#x4E00; &#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x503C; 1234567891011121314151617181920212223242526272829303132class Solution {public: //&#x7B2C;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#xFF1A;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;max vector&lt;int&gt; maxInWindows(const vector&lt;int&gt;&amp; num, unsigned int size) { int maxID = 0; vector&lt;int&gt;res; if (size == 0 || size &gt; num.size()) return res; for (int i = 0; i &lt; size; i++) if (num[maxID] &lt; num[i]) maxID = i; res.push_back(num[maxID]); //&#x7B2C;&#x4E00;&#x4E2A; for (int i = 1; i &lt; num.size()-size+1; i++) { if (num[i + size - 1] &gt; num[maxID]) maxID = i + size - 1; if (i &gt; maxID) //&#x8D85;&#x8FC7;&#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x7684;&#x8303;&#x56F4;&#x4E86; { maxID = i; for (int j = 0; j &lt; size; j++) { if (num[j + i] &gt; num[maxID]) maxID = j + i; } } res.push_back(num[maxID]); } return res; }}; &#x89E3;&#x6CD5;&#x4E8C; &#x4F7F;&#x7528;&#x53CC;&#x8FB9;&#x961F;&#x5217; 1234567891011121314151617181920class Solution {public: vector&lt;int&gt; maxInWindows(const vector&lt;int&gt;&amp; num, unsigned int size) { vector&lt;int&gt;res; deque&lt;int&gt;q; //&#x53CC;&#x8FB9;&#x961F;&#x5217; for (int i = 0; i &lt; num.size(); i++) { while (q.size() != 0 &amp;&amp; num[q.back()] &lt;= num[i]) q.pop_back(); if (q.size() != 0 &amp;&amp; i - q.front() + 1 &gt; size) q.pop_front(); q.push_back(i); if (size != 0 &amp;&amp; i + 1 &gt;= size) res.push_back(num[q.front()]); } return res; }}; &#x6570;&#x7EC4;&#x4E2D;&#x91CD;&#x590D;&#x7684;&#x6570;&#x5B57; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x5728;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;n&#x7684;&#x6570;&#x7EC4;&#x91CC;&#x7684;&#x6240;&#x6709;&#x6570;&#x5B57;&#x90FD;&#x5728;0&#x5230;n-1&#x7684;&#x8303;&#x56F4;&#x5185;&#x3002; &#x6570;&#x7EC4;&#x4E2D;&#x67D0;&#x4E9B;&#x6570;&#x5B57;&#x662F;&#x91CD;&#x590D;&#x7684;&#xFF0C;&#x4F46;&#x4E0D;&#x77E5;&#x9053;&#x6709;&#x51E0;&#x4E2A;&#x6570;&#x5B57;&#x662F;&#x91CD;&#x590D;&#x7684;&#x3002;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x91CD;&#x590D;&#x51E0;&#x6B21;&#x3002;&#x8BF7;&#x627E;&#x51FA;&#x6570;&#x7EC4;&#x4E2D;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x91CD;&#x590D;&#x7684;&#x6570;&#x5B57;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x5982;&#x679C;&#x8F93;&#x5165;&#x957F;&#x5EA6;&#x4E3A;7&#x7684;&#x6570;&#x7EC4;{2,3,1,0,2,5,3}&#xFF0C;&#x90A3;&#x4E48;&#x5BF9;&#x5E94;&#x7684;&#x8F93;&#x51FA;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x91CD;&#x590D;&#x7684;&#x6570;&#x5B57;2&#x3002; &#x5F00;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E3A;n&#x7684;&#x6570;&#x7EC4; 1234567891011121314151617181920212223class Solution {public: // Parameters: // numbers: an array of integers // length: the length of array numbers // duplication: (Output) the duplicated number in the array number // Return value: true if the input is valid, and there are some duplications in the array number // otherwise false bool duplicate(int numbers[], int length, int* duplication) { vector&lt;int&gt;v(length); for (int i = 0; i &lt; length; i++) { if (v[numbers[i]]++ != 0) { *duplication = numbers[i]; return true; } } return false; }}; &#x6784;&#x5EFA;&#x4E58;&#x79EF;&#x6570;&#x7EC4; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;A[0,1,...,n-1],&#x8BF7;&#x6784;&#x5EFA;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;B[0,1,...,n-1],&#x5176;&#x4E2D;B&#x4E2D;&#x7684;&#x5143;&#x7D20;B[i]=A[0]A[1]...A[i-1]A[i+1]...A[n-1]&#x3002;&#x4E0D;&#x80FD;&#x4F7F;&#x7528;&#x9664;&#x6CD5;&#x3002; &#x601D;&#x8DEF;&#x5206;&#x6790;&#xFF1A; &#xFF1A; &#x89E3;&#x91CA;&#x4E0B;&#x4EE3;&#x7801;&#xFF0C;&#x8BBE;&#x6709;&#x6570;&#x7EC4;&#x5927;&#x5C0F;&#x4E3A;5&#x3002; &#x5BF9;&#x4E8E;&#x7B2C;&#x4E00;&#x4E2A;for&#x5FAA;&#x73AF; &#x7B2C;&#x4E00;&#x6B65;&#xFF1A;b[0] = 1; &#x7B2C;&#x4E8C;&#x6B65;&#xFF1A;b[1] = b[0] * a[0] = a[0] &#x7B2C;&#x4E09;&#x6B65;&#xFF1A;b[2] = b[1] * a[1] = a[0] * a[1]; &#x7B2C;&#x56DB;&#x6B65;&#xFF1A;b[3] = b[2] * a[2] = a[0] * a[1] * a[2]; &#x7B2C;&#x4E94;&#x6B65;&#xFF1A;b[4] = b[3] * a[3] = a[0] * a[1] * a[2] * a[3]; &#x7136;&#x540E;&#x5BF9;&#x4E8E;&#x7B2C;&#x4E8C;&#x4E2A;for&#x5FAA;&#x73AF; &#x7B2C;&#x4E00;&#x6B65; temp *= a[4] = a[4]; b[3] = b[3] * temp = a[0] * a[1] * a[2] * a[4]; &#x7B2C;&#x4E8C;&#x6B65; temp = a[3] = a[4] a[3]; b[2] = b[2] * temp = a[0] * a[1] * a[4] * a[3]; &#x7B2C;&#x4E09;&#x6B65; temp = a[2] = a[4] a[3] * a[2]; b[1] = b[1] * temp = a[0] * a[4] * a[3] * a[2]; &#x7B2C;&#x56DB;&#x6B65; temp = a[1] = a[4] a[3] * a[2] * a[1]; b[0] = b[0] * temp = a[4] * a[3] * a[2] * a[1]; &#x7531;&#x6B64;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x4ECE;b[4]&#x5230;b[0]&#x5747;&#x5DF2;&#x7ECF;&#x5F97;&#x5230;&#x6B63;&#x786E;&#x8BA1;&#x7B97;&#x3002; 1234567891011121314151617181920class Solution {public: vector&lt;int&gt; multiply(const vector&lt;int&gt;&amp; A) { vector&lt;int&gt;b(A.size()); if (A.size() == 0) return b; b[0] = 1; for (int i = 0; i &lt; A.size()-1; i++) b[i + 1] = b[i]*A[i]; int temp = 1; for (int i = A.size()-1; i &gt;= 0; i--) { b[i] = b[i] * temp; temp *= A[i]; } return b; }}; &#x5B57;&#x7B26;&#x6D41;&#x4E2D;&#x7B2C;&#x4E00;&#x4E2A;&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x5B57;&#x7B26; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8BF7;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x7528;&#x6765;&#x627E;&#x51FA;&#x5B57;&#x7B26;&#x6D41;&#x4E2D;&#x7B2C;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x5B57;&#x7B26;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5F53;&#x4ECE;&#x5B57;&#x7B26;&#x6D41;&#x4E2D;&#x53EA;&#x8BFB;&#x51FA;&#x524D;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&quot;go&quot;&#x65F6;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x5B57;&#x7B26;&#x662F;&quot;g&quot;&#x3002;&#x5F53;&#x4ECE;&#x8BE5;&#x5B57;&#x7B26;&#x6D41;&#x4E2D;&#x8BFB;&#x51FA;&#x524D;&#x516D;&#x4E2A;&#x5B57;&#x7B26;&#x201C;google&quot;&#x65F6;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x5B57;&#x7B26;&#x662F;&quot;l&quot;&#x3002; &#x8F93;&#x51FA;&#x63CF;&#x8FF0;: &#x5982;&#x679C;&#x5F53;&#x524D;&#x5B57;&#x7B26;&#x6D41;&#x6CA1;&#x6709;&#x5B58;&#x5728;&#x51FA;&#x73B0;&#x4E00;&#x6B21;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x8FD4;&#x56DE;#&#x5B57;&#x7B26;&#x3002; &#x89E3;&#x6CD5;&#x4E00; 123456789101112131415161718192021222324//&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(n)&#x7684;&#x89E3;&#x6CD5;class Solution{public: //Insert one char from stringstream void Insert(char ch) { s += ch; cnt[ch]++; } //return the first appearence once char in current stringstream char FirstAppearingOnce() { for (int i = 0; i &lt; s.size(); i++) { if (cnt[s[i]] == 1) return s[i]; } return &apos;#&apos;; }private: char cnt[260] = { 0 }; string s;}; &#x89E3;&#x6CD5;&#x4E8C; &#x73B0;&#x8BF4;&#x660E;&#x4E3A;&#x4EC0;&#x4E48;&#x662F;O(1)&#xFF0C;&#x5176;&#x5B9E;&#x5224;&#x65AD;&#x90E8;&#x5206;&#x5728;Insert&#x90E8;&#x5206;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x3002; &#x7531;&#x4E8E;&#x6700;&#x591A;&#x662F;&#x6709;128&#x4E2A;ascii&#x7801;&#xFF0C;&#x6240;&#x4EE5;&#x961F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x6700;&#x5927;&#x4E3A;128.&#x6545;&#x9650;&#x5B9A;&#x5728;&#x4E86;O(1)&#x7684;&#x65F6;&#x95F4;&#x8303;&#x56F4;&#x5185;&#x3002; 123456789101112131415161718192021222324//&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(1)&#x7684;&#x89E3;&#x6CD5;class Solution2{public: //Insert one char from stringstream void Insert(char ch) { cnt[ch]++; if (cnt[ch] == 1) q.push(ch); } //return the first appearence once char in current stringstream char FirstAppearingOnce() { while (!q.empty() &amp;&amp; cnt[q.front()] != 1) q.pop(); if (!q.empty()) return q.front(); return &apos;#&apos;; }private: char cnt[260] = { 0 }; queue&lt;char&gt; q;}; &#x94FE;&#x8868;&#x4E2D;&#x73AF;&#x7684;&#x5165;&#x53E3;&#x7ED3;&#x70B9; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x7ED9;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#xFF0C;&#x82E5;&#x5176;&#x4E2D;&#x5305;&#x542B;&#x73AF;&#xFF0C;&#x8BF7;&#x627E;&#x51FA;&#x8BE5;&#x94FE;&#x8868;&#x7684;&#x73AF;&#x7684;&#x5165;&#x53E3;&#x7ED3;&#x70B9;&#xFF0C;&#x5426;&#x5219;&#xFF0C;&#x8F93;&#x51FA;null&#x3002; &#x8FD9;&#x4E2A;&#x9898;&#x4E0D;&#x4EC5;&#x4EC5;&#x662F;&#x8981;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;&#x73AF;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x73AF;&#xFF0C;&#x627E;&#x51FA;&#x73AF;&#x7684;&#x5165;&#x53E3;&#x70B9;&#x3002; &#x5224;&#x65AD;&#x6709;&#x6CA1;&#x6709;&#x73AF;&#x53EF;&#x4EE5;&#x7528;&#x5FEB;&#x6162;&#x6307;&#x9488;&#x3002; &#x5206;&#x6790;&#xFF1A; 1557257019018 &#x5047;&#x8BBE;x&#x4E3A;&#x73AF;&#x524D;&#x9762;&#x7684;&#x8DEF;&#x7A0B;&#xFF08;&#x9ED1;&#x8272;&#x8DEF;&#x7A0B;&#xFF09;&#xFF0C;a&#x4E3A;&#x73AF;&#x5165;&#x53E3;&#x5230;&#x76F8;&#x9047;&#x70B9;&#x7684;&#x8DEF;&#x7A0B;&#xFF08;&#x84DD;&#x8272;&#x8DEF;&#x7A0B;&#xFF0C;&#x5047;&#x8BBE;&#x987A;&#x65F6;&#x9488;&#x8D70;&#xFF09;&#xFF0C; c&#x4E3A;&#x73AF;&#x7684;&#x957F;&#x5EA6;&#xFF08;&#x84DD;&#x8272;+&#x6A59;&#x8272;&#x8DEF;&#x7A0B;&#xFF09; &#x5F53;&#x5FEB;&#x6162;&#x6307;&#x9488;&#x76F8;&#x9047;&#x7684;&#x65F6;&#x5019;&#xFF1A; &#x6B64;&#x65F6;&#x6162;&#x6307;&#x9488;&#x8D70;&#x7684;&#x8DEF;&#x7A0B;&#x4E3A;Sslow = x + m * c + a &#x5FEB;&#x6307;&#x9488;&#x8D70;&#x7684;&#x8DEF;&#x7A0B;&#x4E3A;Sfast = x + n * c + a 2 *slow = fast 2 * ( x + m*c + a ) = (x + n *c + a) &#x4ECE;&#x800C;&#x53EF;&#x4EE5;&#x63A8;&#x5BFC;&#x51FA;&#xFF1A; x = (n - 2 * m )*c - a = (n - 2 *m -1 )*c + c - a &#x5373;&#x73AF;&#x524D;&#x9762;&#x7684;&#x8DEF;&#x7A0B; = &#x6570;&#x4E2A;&#x73AF;&#x7684;&#x957F;&#x5EA6;&#xFF08;&#x4E3A;&#x53EF;&#x80FD;&#x4E3A;0&#xFF09; + c - a &#x4EC0;&#x4E48;&#x662F;c - a&#xFF1F;&#x8FD9;&#x662F;&#x76F8;&#x9047;&#x70B9;&#x540E;&#xFF0C;&#x73AF;&#x540E;&#x9762;&#x90E8;&#x5206;&#x7684;&#x8DEF;&#x7A0B;&#x3002;&#xFF08;&#x6A59;&#x8272;&#x8DEF;&#x7A0B;&#xFF09; &#x6240;&#x4EE5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BA9;&#x4E00;&#x4E2A;&#x6307;&#x9488;&#x4ECE;&#x8D77;&#x70B9;A&#x5F00;&#x59CB;&#x8D70;&#xFF0C;&#x8BA9;&#x4E00;&#x4E2A;&#x6307;&#x9488;&#x4ECE;&#x76F8;&#x9047;&#x70B9;B&#x5F00;&#x59CB;&#x7EE7;&#x7EED;&#x5F80;&#x540E;&#x8D70;&#xFF0C; 2&#x4E2A;&#x6307;&#x9488;&#x901F;&#x5EA6;&#x4E00;&#x6837;&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;&#x5F53;&#x4ECE;&#x539F;&#x70B9;&#x7684;&#x6307;&#x9488;&#x8D70;&#x5230;&#x73AF;&#x5165;&#x53E3;&#x70B9;&#x7684;&#x65F6;&#x5019;&#xFF08;&#x6B64;&#x65F6;&#x521A;&#x597D;&#x8D70;&#x4E86;x&#xFF09; &#x4ECE;&#x76F8;&#x9047;&#x70B9;&#x5F00;&#x59CB;&#x8D70;&#x7684;&#x90A3;&#x4E2A;&#x6307;&#x9488;&#x4E5F;&#x4E00;&#x5B9A;&#x521A;&#x597D;&#x5230;&#x8FBE;&#x73AF;&#x5165;&#x53E3;&#x70B9;&#x3002; &#x6240;&#x4EE5;2&#x8005;&#x4F1A;&#x76F8;&#x9047;&#xFF0C;&#x4E14;&#x6070;&#x597D;&#x76F8;&#x9047;&#x5728;&#x73AF;&#x7684;&#x5165;&#x53E3;&#x70B9;&#x3002; &#x6700;&#x540E;&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;&#x6709;&#x73AF;&#xFF0C;&#x4E14;&#x627E;&#x73AF;&#x7684;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#x5EA6;&#x4E3A;&#xFF1A; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;O(n) &#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF1A;O(1) &#x4E00;&#x5171;&#x4E09;&#x79CD;&#x65B9;&#x6CD5;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x662F;&#x524D;&#x6587;&#x6240;&#x8FF0;&#x3002; &#x7B2C;&#x4E8C;&#x4E2A;&#x662F;&#x65AD;&#x94FE;&#x6CD5;&#xFF0C;&#x53EA;&#x6709;&#x5728;&#x6709;&#x73AF;&#x7684;&#x65F6;&#x5019;&#x624D;&#x6210;&#x7ACB;&#xFF0C;&#x6CA1;&#x6709;&#x73AF;&#x5219;&#x6709;&#x9519;&#x8BEF;&#x3002; &#x7B2C;&#x4E09;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x5B58;&#x50A8;&#x5730;&#x5740;&#x6CD5;&#xFF0C;&#x4F7F;&#x7528;set&#x5B58;&#x50A8;&#x5730;&#x5740;&#x3002;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x66FE;&#x7ECF;&#x51FA;&#x73B0;&#x8FC7;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x8868;&#x793A;&#x6709;&#x73AF;&#xFF0C;&#x4E14;&#x662F;&#x73AF;&#x7684;&#x8D77;&#x59CB;&#x70B9;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061class Solution {public: ListNode* EntryNodeOfLoop(ListNode* pHead) { if (pHead == NULL || pHead-&gt;next == NULL || pHead-&gt;next-&gt;next == NULL) return NULL; //&#x5148;&#x5224;&#x65AD;&#x6709;&#x6CA1;&#x6709;&#x73AF; ListNode* fast = pHead-&gt;next-&gt;next, *slow = pHead-&gt;next; while (fast!=slow) { if (fast-&gt;next != NULL &amp;&amp; fast-&gt;next-&gt;next != NULL) { fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; } else return NULL; //&#x8868;&#x793A;&#x6CA1;&#x6709;&#x73AF;&#xFF0C;&#x8FD4;&#x56DE; } //&#x5FAA;&#x73AF;&#x8DF3;&#x51FA;&#xFF0C;&#x5C31;&#x8868;&#x793A;&#x6709;&#x73AF;&#xFF0C;&#x4E14;&#x6B64;&#x65F6;&#xFF0C;fast=slow fast = pHead; while (fast != slow) { fast = fast-&gt;next; slow = slow-&gt;next; } //&#x5FAA;&#x73AF;&#x8DF3;&#x51FA;&#x8868;&#x793A;&#x5728;&#x73AF;&#x7684;&#x8D77;&#x59CB;&#x70B9;&#x4E86;&#xFF0C;&#x4E14;&#x6B64;&#x65F6;fast=slow return fast; } //&#x65AD;&#x94FE;&#x6CD5;&#x3002;&#x9002;&#x7528;&#x4E8E;&#x4E00;&#x5B9A;&#x6709;&#x73AF;&#x7684;&#x60C5;&#x51B5;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x73AF;&#xFF0C;&#x5219;&#x4F1A;&#x6709;&#x9519;&#x8BEF;&#x3002;&#x725B;&#x5BA2;&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4E0D;&#x4E25;&#x8C28;&#xFF0C;&#x8FD9;&#x4E2A;&#x662F;&#x80FD;AC&#x7684; ListNode* EntryNodeOfLoop2(ListNode* pHead) { if (pHead == NULL || pHead-&gt;next == NULL) return NULL; ListNode* fast = pHead-&gt;next, *slow = pHead; while (fast!=NULL) { slow-&gt;next = NULL; //&#x65AD;&#x5F00; slow = fast; fast = fast-&gt;next; } return slow; } //&#x5B58;&#x5730;&#x5740;&#x6CD5;&#xFF0C;&#x628A;&#x66FE;&#x7ECF;&#x51FA;&#x73B0;&#x8FC7;&#x7684;&#x5730;&#x5740;&#x7528;set&#x5B58;&#x50A8;&#xFF0C;&#x5982;&#x679C;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x66FE;&#x7ECF;&#x51FA;&#x73B0;&#x8FC7;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x8868;&#x793A;&#x6709;&#x73AF;&#xFF0C;&#x4E14;&#x662F;&#x73AF;&#x7684;&#x8D77;&#x59CB;&#x70B9; ListNode* EntryNodeOfLoop3(ListNode* pHead) { set&lt;ListNode*&gt; s; while (pHead != NULL &amp;&amp; (!s.count(pHead))) //&#x5224;&#x65AD;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x662F;&#x5426;&#x66FE;&#x51FA;&#x73B0;&#x8FC7; { s.insert(pHead); pHead = pHead-&gt;next; } if (pHead == NULL) return NULL; else return pHead; }}; &#x6309;&#x4E4B;&#x5B57;&#x5F62;&#x987A;&#x5E8F;&#x6253;&#x5370;&#x4E8C;&#x53C9;&#x6811; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8BF7;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#x6309;&#x7167;&#x4E4B;&#x5B57;&#x5F62;&#x6253;&#x5370;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x5373;&#x7B2C;&#x4E00;&#x884C;&#x6309;&#x7167;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x7684;&#x987A;&#x5E8F;&#x6253;&#x5370;&#xFF0C;&#x7B2C;&#x4E8C;&#x5C42;&#x6309;&#x7167;&#x4ECE;&#x53F3;&#x81F3;&#x5DE6;&#x7684;&#x987A;&#x5E8F;&#x6253;&#x5370;&#xFF0C;&#x7B2C;&#x4E09;&#x884C;&#x6309;&#x7167;&#x4ECE;&#x5DE6;&#x5230;&#x53F3;&#x7684;&#x987A;&#x5E8F;&#x6253;&#x5370;&#xFF0C;&#x5176;&#x4ED6;&#x884C;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x3002; &#x89E3;&#x6CD5;&#x4E00; &#x7528;&#x4E24;&#x4E2A;&#x961F;&#x5217;&#xFF0C;&#x672C;&#x8D28;&#x4E0A;&#x662F;&#x5C42;&#x6B21;&#x904D;&#x5386;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x5728;&#x5076;&#x6570;&#x5C42;&#x90E8;&#x5206;&#xFF0C;reverse&#x4E4B;&#x540E;&#x518D;&#x5B58;&#x5165;&#x3002;&#x8FD9;&#x4E2A;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x597D;&#x7406;&#x89E3;&#x7684; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Solution{public: vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) { vector&lt;vector&lt;int&gt;&gt;res; vector&lt;int&gt; v; if (pRoot == NULL) return res; TreeNode* cur=pRoot; q1.push(cur); while (!q1.empty()||!q2.empty()) { while (!q1.empty()) { cur = q1.front(); q1.pop(); v.push_back(cur-&gt;val); if (cur-&gt;left != NULL) q2.push(cur-&gt;left); if (cur-&gt;right != NULL) q2.push(cur-&gt;right); } res.push_back(v); v.clear(); while (!q2.empty()) { cur = q2.front(); q2.pop(); v.push_back(cur-&gt;val); if (cur-&gt;left != NULL) q1.push(cur-&gt;left); if (cur-&gt;right != NULL) q1.push(cur-&gt;right); } if (v.size() != 0) { reverse(v.begin(), v.end()); res.push_back(v); v.clear(); } } return res; }private: //q1&#x4ECE;&#x5DE6;&#x5F80;&#x53F3;&#xFF0C;q2&#x4ECE;&#x53F3;&#x5411;&#x5DE6; queue&lt;TreeNode*&gt; q1, q2;}; &#x89E3;&#x6CD5;&#x4E8C; &#xFF08;&#x6211;&#x611F;&#x89C9;&#x6BD4;&#x8F83;&#x96BE;&#x7406;&#x89E3;&#xFF0C;&#x8FD9;&#x4E2A;&#x662F;&#x6211;&#x9762;&#x963F;&#x91CC;&#x7684;&#x65F6;&#x5019;&#x505A;&#x51FA;&#x6765;&#x7684;&#xFF0C;&#x5F88;&#x96BE;&#x7406;&#x89E3;&#xFF0C;&#x7528;&#x4E00;&#x4E2A;stack&#x548C;&#x4E00;&#x4E2A;queue&#xFF0C;stack&#x7528;&#x4E8E;&#x7FFB;&#x8F6C;&#xFF09; &#x597D;&#x5904;&#x662F;&#x7701;&#x53BB;&#x4E86;reverse&#x73AF;&#x8282;&#xFF0C;&#x4E0D;&#x8FC7;&#x4E00;&#x4E2A;reverse&#x4E5F;&#x6CA1;&#x591A;&#x5C11;&#x65F6;&#x95F4;&#xFF0C;&#x5199;&#x7684;&#x662F;&#x771F;TM&#x96BE;&#x61C2;&#xFF0C;&#x6211;&#x81EA;&#x5DF1;&#x56DE;&#x8FC7;&#x5934;&#x6765;&#x770B;&#x81EA;&#x5DF1;&#x90FD;&#x770B;&#x4E0D;&#x660E;&#x767D;&#x4E86;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class Solution2 {public: vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) { vector&lt;vector&lt;int&gt;&gt;res; vector&lt;int&gt; v; if (pRoot == NULL) return res; que.push(pRoot); L1: while (!que.empty()) { p = que.front(); que.pop(); sta.push(p); v.push_back(p-&gt;val); //cout &lt;&lt; p-&gt;val; //&#x8BBF;&#x95EE;&#x4E86; } res.push_back(v); v.clear(); flag = !flag; while (!sta.empty()) { p = sta.top(); sta.pop(); if (flag == 0) { if (p-&gt;right != NULL) que.push(p-&gt;right); if (p-&gt;left != NULL) que.push(p-&gt;left); } else { if (p-&gt;left != NULL) que.push(p-&gt;left); if (p-&gt;right != NULL) que.push(p-&gt;right); } } if (sta.empty() &amp;&amp; que.empty()) return res; else goto L1; }private: bool flag = 1; //1&#x8868;&#x793A;&#x4ECE;&#x5DE6;&#x5F80;&#x53F3; queue&lt;TreeNode*&gt;que; stack&lt;TreeNode*&gt;sta; TreeNode* p;}; &#x89E3;&#x6CD5;&#x4E09; &#x4F7F;&#x7528;&#x6808;&#xFF0C;&#x53EF;&#x4EE5;&#x4E0D;&#x7528;reverse 123456789101112131415161718192021222324252627282930313233343536373839404142434445class Solution3 {public: vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) { vector&lt;vector&lt;int&gt;&gt;res; vector&lt;int&gt; v; if (pRoot == NULL) return res; TreeNode* cur = pRoot; s1.push(cur); while (!s1.empty()||!s2.empty()) { while (!s1.empty()) { cur = s1.top(); s1.pop(); v.push_back(cur-&gt;val); if (cur-&gt;left != NULL) s2.push(cur-&gt;left); if (cur-&gt;right != NULL) s2.push(cur-&gt;right); } res.push_back(v); v.clear(); while (!s2.empty()) { cur = s2.top(); s2.pop(); v.push_back(cur-&gt;val); if (cur-&gt;right != NULL) s1.push(cur-&gt;right); if (cur-&gt;left != NULL) s1.push(cur-&gt;left); } if (v.size() != 0) { res.push_back(v); v.clear(); } } return res; }private: stack&lt;TreeNode*&gt;s1, s2;}; &#x89E3;&#x6CD5;&#x56DB; &#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x961F;&#x5217;&#xFF0C;&#x4F7F;&#x7528;reverse 12345678910111213141516171819202122232425262728293031323334353637//&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x961F;&#x5217;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x4F7F;&#x7528;reverseclass Solution4 {public: vector&lt;vector&lt;int&gt; &gt; Print(TreeNode* pRoot) { vector&lt;vector&lt;int&gt;&gt;res; vector&lt;int&gt; v; if (pRoot == NULL) return res; TreeNode* cur = pRoot; q.push(cur); int size; while (!q.empty()) { v.clear(); size = q.size(); for (int i = 0; i &lt; size; i++) { cur = q.front(); q.pop(); v.push_back(cur-&gt;val); if (cur-&gt;left != NULL) q.push(cur-&gt;left); if (cur-&gt;right != NULL) q.push(cur-&gt;right); } if (flag) reverse(v.begin(), v.end()); res.push_back(v); flag = !flag; } return res; }private: queue&lt;TreeNode*&gt; q; bool flag = false;}; &#x5BF9;&#x79F0;&#x7684;&#x4E8C;&#x53C9;&#x6811; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8BF7;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x7528;&#x6765;&#x5224;&#x65AD;&#x4E00;&#x9897;&#x4E8C;&#x53C9;&#x6811;&#x662F;&#x4E0D;&#x662F;&#x5BF9;&#x79F0;&#x7684;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x4E8C;&#x53C9;&#x6811;&#x540C;&#x6B64;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x955C;&#x50CF;&#x662F;&#x540C;&#x6837;&#x7684;&#xFF0C;&#x5B9A;&#x4E49;&#x5176;&#x4E3A;&#x5BF9;&#x79F0;&#x7684;&#x3002; &#x9012;&#x5F52;&#x7B97;&#x6CD5;&#xFF1A; &#x5DE6;&#x53F3;&#x5B69;&#x5B50;&#x7684;&#x503C;&#x76F8;&#x7B49;&#x3002;&#x4E14;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x5FC5;&#x987B;&#x540C;&#x65F6;&#x4E3A;&#x7A7A;&#x3002; &#x7531;&#x4E8E;&#x53EA;&#x662F;&#x8FD9;&#x68F5;&#x6811;&#x7684;&#x5BF9;&#x79F0;&#xFF0C;&#x6240;&#x4EE5;&#x5DE6;&#x5B69;&#x5B50;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x540C;&#x53F3;&#x5B69;&#x5B50;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x6210;&#x955C;&#x50CF;&#x3002; &#x5DE6;&#x5B69;&#x5B50;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x540C;&#x53F3;&#x5B69;&#x5B50;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x6210;&#x955C;&#x50CF;&#x3002; 123456789101112131415161718192021class Solution {public: bool isSymmetrical(TreeNode* pRoot) { if (pRoot == NULL) return true; return check(pRoot-&gt;left, pRoot-&gt;right); } bool check(TreeNode* left, TreeNode* right) { if (left == NULL) //&#x5DE6;&#x5B69;&#x5B50;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x53F3;&#x5B69;&#x5B50;&#x4E5F;&#x8981;&#x4E3A;&#x7A7A; return right == NULL; if (right == NULL) return false; if (left-&gt;val != right-&gt;val) return false; return check(left-&gt;right, right-&gt;left) &amp;&amp; check(left-&gt;left, right-&gt;right); }}; &#x5E8F;&#x5217;&#x5316;&#x4E8C;&#x53C9;&#x6811; &#x9898;&#x76EE;&#x63CF;&#x8FF0; &#x8BF7;&#x5B9E;&#x73B0;&#x4E24;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x7528;&#x6765;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x4E8C;&#x53C9;&#x6811; &#x5E8F;&#x5217;&#x5316;&#x4E8C;&#x53C9;&#x6811;&#x5C31;&#x662F;&#x628A;&#x4E8C;&#x53C9;&#x6811;&#x4EE5;&#x67D0;&#x79CD;&#x987A;&#x5E8F;&#x5B58;&#x8D77;&#x6765;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x524D;&#x5E8F;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x4E2D;&#x5E8F;&#xFF0C;&#x540E;&#x7EED;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x662F;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x3002; &#x9898;&#x76EE;&#x4E2D;&#x7ED9;&#x7684;&#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x662F;char*&#x7C7B;&#x578B;&#xFF0C;&#x4E0D;&#x6EE1;&#x8DB3;&#x6211;&#x4EEC;&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x4E00;&#x4E0B;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution {public: vector&lt;int&gt;buf; void encode(TreeNode* cur) { if (cur == NULL) buf.push_back(0xFFFFF); else { buf.push_back(cur-&gt;val); encode(cur-&gt;left); encode(cur-&gt;right); } } TreeNode* decode(int* &amp;p) { if (*p==0xFFFFF) { ++p; return NULL; } TreeNode* res = new TreeNode(*p); p++; res-&gt;left = decode(p); res-&gt;right = decode(p); return res; } char* Serialize(TreeNode *root) { buf.clear(); encode(root); int *res = new int[buf.size()]; for (int i = 0; i &lt; buf.size(); i++) res[i] = buf[i]; return (char*)res; } TreeNode* Deserialize(char *str) { int *p = (int*)str; return decode(p); }}; &#x552F;&#x4E00;&#x786E;&#x5B9A;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5FC5;&#x987B;&#x8981;&#x77E5;&#x9053;&#x524D;&#x5E8F;/&#x540E;&#x7EED;+&#x4E2D;&#x5E8F;&#xFF0C;&#x53EA;&#x77E5;&#x9053;&#x524D;&#x5E8F;+&#x540E;&#x5E8F;&#x662F;&#x4E0D;&#x53EF;&#x4EE5;&#x7684;&#x3002; &#x4F46;&#x662F;&#x5728;&#x5E8F;&#x5217;&#x5316;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x7ED9;&#x51FA;&#x4E86;&#x7A7A;&#x8282;&#x70B9;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x524D;&#x5E8F;&#x6765;&#x552F;&#x4E00;&#x786E;&#x5B9A;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#x3002; &#x5F69;&#x86CB; 123456789101112typedef TreeNode* pnode;class Solution { pnode hehe;public: char* Serialize(TreeNode *root) { hehe = root; return &quot;(*^_^*)&quot;; } TreeNode* Deserialize(char *str) { return hehe; }}; &#x4E0D;&#x7528;&#x52A0;&#x51CF;&#x4E58;&#x9664;&#x505A;&#x52A0;&#x6CD5; &#x4E24;&#x4E2A;&#x6570;&#x5F02;&#x6216;&#xFF1A;&#x76F8;&#x5F53;&#x4E8E;&#x6BCF;&#x4E00;&#x4F4D;&#x76F8;&#x52A0;&#xFF0C;&#x800C;&#x4E0D;&#x8003;&#x8651;&#x8FDB;&#x4F4D;&#xFF1B; &#x4E24;&#x4E2A;&#x6570;&#x76F8;&#x4E0E;&#xFF0C;&#x5E76;&#x5DE6;&#x79FB;&#x4E00;&#x4F4D;&#xFF1A;&#x76F8;&#x5F53;&#x4E8E;&#x6C42;&#x5F97;&#x8FDB;&#x4F4D;&#xFF1B; &#x5C06;&#x4E0A;&#x8FF0;&#x4E24;&#x6B65;&#x7684;&#x7ED3;&#x679C;&#x76F8;&#x52A0; 123456789101112131415class Solution{public: int Add(int num1, int num2) { while (num2 != 0) { int sum = num1 ^ num2; int carray = (num1 &amp; num2) &lt;&lt; 1; num1 = sum; num2 = carray; } return num1; }}; &#x5F69;&#x86CB; 123456789101112131415class Solution{public: int add(int a, int b) { _asm { MOV EAX, a MOV ECX, b ADD EAX, ECX MOV a, EAX } return a; }}; ![&#x8BA1;&#x7B97;&#x673A;&#x751F;&#x6210;&#x4E86;&#x53EF;&#x9009;&#x6587;&#x5B57;: &#x4E0D;&#x52A0;&#x51CF;&#x4E56;&#x9664;&#x505A;&#x529B;Lli&#x53BB; MOVECX&#xFF0C; ADDEAX (&#x5251;&#x6307;offer&#x9898;&#x89E3;/clip_image001.png) 21 24 30 36 37 39 40 41 46 EclassSolution public: intadd(inta, asm MOV EAX intb) b ECX D:]]></content>
      <categories>
        <category>剑指Offer</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>剑指Offer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[分布式与云计算复习笔记]]></title>
    <url>%2F%2Fposts%2F64e8389b%2F</url>
    <content type="text"><![CDATA[&#x8FD9;&#x4E2A;&#x592A;&#x96BE;&#x4E86;&#x6211;&#x4EEC;&#x4E0D;&#x8BB2;&#xFF1B;&#x8FD9;&#x4E2A;&#x592A;&#x7B80;&#x5355;&#x4E86;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x4E0D;&#x8BB2;&#xFF1B;&#x8FD9;&#x4E2A;.....&#xFF08;&#x559D;&#x53E3;&#x6C34;&#xFF0C;&#x70B9;&#x51FB;&#x9875;PPT&#xFF09;&#x4E5F;&#x4E0D;&#x8BB2;&#x3002; &#x7B2C;&#x4E00;&#x7AE0; &#x7EEA;&#x8BBA; &#x7B2C;&#x4E03;&#x7AE0; &#x4E00;&#x81F4;&#x6027;&#x548C;&#x590D;&#x5236; &#x7B2C;&#x516B;&#x7AE0; &#x5BB9;&#x9519; &#x4E91;&#x8BA1;&#x7B97;&#x7B2C;&#x4E00;&#x7AE0; &#x4E91;&#x8BA1;&#x7B97;&#x7B2C;&#x4E8C;&#x7AE0; &#x590D;&#x4E60;&#x8D44;&#x6599;&#x8865;&#x5145; &#x5206;&#x5E03;&#x5F0F;&#x590D;&#x4E60;&#x8D44;&#x6599;&#x8865;&#x5145; &#x81F4;&#x8C22; &#x611F;&#x8C22;Alan Ke&#x3001;&#x82CF;&#x7490;&#x5CA9;&#x3001;&#x6C6A;&#x5B87;&#x3001;&#x738B;&#x8BD7;&#x8BD7;&#x3001;&#x4ECE;&#x5609;&#x7B49;&#x540C;&#x5B66;&#x7684;&#x652F;&#x6301;&#x3002;]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>分布式</tag>
        <tag>云计算</tag>
        <tag>复习笔记</tag>
        <tag>丁菁</tag>
        <tag>随机授课</tag>
        <tag>多喝水</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018校招真题编程练习题解]]></title>
    <url>%2F%2Fposts%2F7da4f75a%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x6700;&#x5927;&#x4E58;&#x79EF;&#x6CE8;&#x610F;&#x8FD9;&#x9053;&#x9898;&#x7684;&#x6D4B;&#x8BD5;&#x6709;&#x95EE;&#x9898;&#xFF0C;&#x662F;&#x5148;&#x7ED9;&#x51FA;&#x6570;&#x5B57;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x518D;&#x7ED9;&#x51FA;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x3002; &#x6700;&#x5927;&#x503C;&#x53EA;&#x53EF;&#x80FD;&#x5728;(max1*max2*max3, max1*min1*min2)&#x4E2D;&#x5F97;&#x51FA;&#xFF0C;&#x8BA1;&#x7B97;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x5373;&#x53EF;&#x3002; &#x6CE8;&#x610F;&#x4F7F;&#x7528;long long &#x9632;&#x6B62;&#x6EA2;&#x51FA;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;cfloat&gt;#include &lt;climits&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;queue&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;sstream&gt;#include &lt;ctime&gt;#pragma warning(disable:4996)using namespace std;#define Windlong long temp, max1 = INT32_MIN, max2 = INT32_MIN, max3 = INT32_MIN, min1 = INT32_MAX, min2 = INT32_MAX;void solution(){ ios::sync_with_stdio(false); int n; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; temp; max3 = max(temp, max3); if (max3 &gt; max2) swap(max2, max3); if (max2 &gt; max1) swap(max2, max1); min2 = min(min2, temp); if (min1 &gt; min2) swap(min1, min2); } cout &lt;&lt; max(max1*max2*max3, max1*min1*min2);}int main(){#ifdef Wind freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin);#endif solution(); system(&quot;pause&quot;); return 0;} &#x5927;&#x6574;&#x6570;&#x76F8;&#x4E58;&#x7C7B;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;POJ 1001]]></content>
      <categories>
        <category>校招真题</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>校招真题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[华为2019软件挑战赛经验教训总结]]></title>
    <url>%2F%2Fposts%2Fa1353cd8%2F</url>
    <content type="text"><![CDATA[&#x4E0E;&#x4EBA;&#x5171;&#x4E8B;&#xFF0C;&#x4EBA;&#x662F;&#x5173;&#x952E;&#x3002; &#x7B80;&#x8FF0;&#x8FD9;&#x6B21;&#x6BD4;&#x8D5B;&#xFF0C;&#x6211;&#x4EEC;&#x961F;&#x662F;&#x7531;&#x4E09;&#x4EBA;&#x7EC4;&#x6210;&#xFF0C;&#x6211;&#xFF0C;&#x5F90;&#x540C;&#x5B66;&#xFF0C;&#x738B;&#x540C;&#x5B66;&#x3002;&#x5F90;&#x540C;&#x5B66;&#x62C5;&#x4EFB;&#x961F;&#x957F;&#xFF0C;&#x738B;&#x540C;&#x5B66;&#x5199;&#x4E86;&#x5927;&#x91CF;&#x7684;&#x4EE3;&#x7801;&#x3002; &#x4E3A;&#x65B9;&#x4FBF;&#x63CF;&#x8FF0;&#xFF0C;&#x540E;&#x6587;&#x7528;&#x201C;&#x961F;&#x957F;&#x201D;&#x6765;&#x6307;&#x4EE3;&#x5F90;&#x540C;&#x5B66;&#xFF0C;&#x7528;&#x201C;&#x4E3B;&#x7A0B;&#x201D;&#x6765;&#x4EE3;&#x6307;&#x738B;&#x540C;&#x5B66;&#x3002; &#x5728;3.10&#x5DE6;&#x53F3;&#xFF0C;&#x961F;&#x957F;&#x6765;&#x8054;&#x7CFB;&#x6211;&#x548C;&#x4E3B;&#x7A0B;&#x65F6;&#xFF0C;&#x961F;&#x957F;&#x8BF4;&#x4ED6;&#x4E0D;&#x4F1A;&#x7F16;&#x7A0B;&#xFF0C;&#x4ED6;&#x6765;&#x63D0;&#x4F9B;&#x7B97;&#x6CD5;&#xFF0C;&#x8BA9;&#x6211;&#x548C;&#x4E3B;&#x7A0B;&#x6765;&#x5B9E;&#x73B0;&#x3002;&#x5F53;&#x65F6;&#x8003;&#x8651;&#x5230;&#x961F;&#x957F;&#x7684;&#x5C65;&#x5386;&#x8FD8;&#x4E0D;&#x9519;&#xFF08;&#x672C;&#x79D1;&#x53A6;&#x95E8;&#x5927;&#x5B66;&#x6570;&#x5B66;&#x7CFB;&#xFF09;&#xFF0C;&#x6211;&#x548C;&#x4E3B;&#x7A0B;&#x5C31;&#x7B54;&#x5E94;&#x4E86;&#x3002; &#x6240;&#x4EE5;&#x6700;&#x5F00;&#x59CB;&#x7684;&#x5DE5;&#x4F5C;&#x5206;&#x914D;&#x662F;&#xFF0C;&#x961F;&#x957F;&#x8D1F;&#x8D23;&#x7B97;&#x6CD5;&#xFF0C;&#x4E3B;&#x7A0B;&#x8D1F;&#x8D23;&#x4E3B;&#x8981;&#x7684;&#x7A0B;&#x5E8F;&#x7F16;&#x5199;&#xFF0C;&#x6211;&#x8D1F;&#x8D23;&#x5C11;&#x90E8;&#x5199;&#x5206;&#x4EE3;&#x7801;&#x3001;&#x7248;&#x672C;&#x63A7;&#x5236;&#x3001;&#x7F16;&#x8BD1;+&#x6D4B;&#x8BD5;&#x3001;&#x628A;&#x4E3B;&#x7A0B;&#x7684;&#x4EE3;&#x7801;&#x4FEE;&#x6539;&#x6210;&#x7B26;&#x5408;&#x9898;&#x76EE;&#x8981;&#x6C42;&#x7684;&#x4EE3;&#x7801;&#x3002; &#x6700;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x662F;&#xFF0C;&#x6211;&#x4EEC;&#x505A;&#x51FA;&#x6765;&#x4E00;&#x4E2A;&#x6709;&#x6210;&#x7EE9;&#x7684;&#x7248;&#x672C;&#xFF0C;&#x7136;&#x800C;&#x7531;&#x4E8E;&#x961F;&#x957F;&#x6CA1;&#x6709;&#x505A;&#x7248;&#x672C;&#x63A7;&#x5236;&#xFF0C;&#x628A;&#x8FD9;&#x4E00;&#x7248;&#x672C;&#x8986;&#x76D6;&#x6389;&#x4E86;&#xFF0C;&#x5BFC;&#x81F4;&#x6700;&#x540E;&#x6211;&#x4EEC;&#x8FDE;&#x4EFB;&#x4F55;&#x6210;&#x7EE9;&#x90FD;&#x6CA1;&#x6709;&#x3002;&#x6211;&#x548C;&#x4E3B;&#x7A0B;&#x5FC3;&#x6001;&#x5D29;&#x76D8;&#x3002; &#x6559;&#x8BAD;&#x4E00;&#xFF1A;&#x7B97;&#x6CD5;&#x8981;&#x4F18;&#x5148;&#x4E8E;&#x4EE3;&#x7801;&#x5982;&#x524D;&#x6587;&#x6240;&#x8FF0;&#xFF0C;&#x521A;&#x5F00;&#x59CB;&#x8BA8;&#x8BBA;&#x5177;&#x4F53;&#x600E;&#x4E48;&#x505A;&#x65F6;&#xFF0C;&#x961F;&#x957F;&#x5C31;&#x8981;&#x6C42;&#x6211;&#x4EEC;&#x5148;&#x628A;&#x57FA;&#x7840;&#x7684;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#xFF0C;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x6162;&#x6162;&#x8C03;&#x4F18;&#x3002;&#x800C;&#x6211;&#x548C;&#x4E3B;&#x7A0B;&#x7684;&#x8BA4;&#x4E3A;&#xFF0C;&#x8981;&#x5148;&#x6709;&#x5927;&#x6982;&#x7B97;&#x6CD5;&#xFF0C;&#x518D;&#x8003;&#x8651;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x3002; &#x4E0D;&#x8FC7;&#x7531;&#x4E8E;&#x961F;&#x957F;&#x4E00;&#x76F4;&#x6CA1;&#x6709;&#x62FF;&#x51FA;&#x6765;&#x9AD8;&#x6548;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x6211;&#x548C;&#x4E3B;&#x7A0B;&#x5148;&#x5199;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x76F4;&#x5230;&#x6700;&#x540E;&#x6BD4;&#x8D5B;&#x7ED3;&#x675F;&#xFF0C;&#x961F;&#x957F;&#x4ECD;&#x7136;&#x6CA1;&#x6709;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x5207;&#x5B9E;&#x53EF;&#x884C;&#x7684;&#x7B97;&#x6CD5;&#x3002; &#x6240;&#x4EE5;&#x4EE5;&#x540E;&#x518D;&#x505A;&#x9879;&#x76EE;&#x65F6;&#xFF0C;&#x6211;&#x5B66;&#x5230;&#x7684;&#x6559;&#x8BAD;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x4EE5;&#x7ED3;&#x679C;&#x4E3A;&#x5BFC;&#x5411;&#xFF0C;&#x6301;&#x6709;&#x4E00;&#x79CD;&#x6210;&#x738B;&#x8D25;&#x5BC7;&#x89C2;&#x70B9;&#x7684;&#x8BDD;&#xFF0C;&#x7B97;&#x6CD5;&#x8981;&#x4F18;&#x5148;&#x4E8E;&#x4EE3;&#x7801;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x597D;&#x7684;&#x7B97;&#x6CD5;&#xFF0C;&#x5EFA;&#x8BAE;&#x4ECE;&#x4E00;&#x5F00;&#x59CB;&#x5C31;&#x653E;&#x5F03;&#x3002; &#x6559;&#x8BAD;&#x4E8C;&#xFF1A;&#x4EBA;&#x5458;&#x9009;&#x62E9;&#x5F88;&#x5173;&#x952E;&#x6559;&#x8BAD;&#x4E09;&#xFF1A;&#x9879;&#x76EE;&#x7BA1;&#x7406;&#x662F;&#x5B66;&#x95EE;&#x6559;&#x8BAD;&#x56DB;&#xFF1A;&#x63D0;&#x524D;&#x60F3;&#x597D;&#x4EE3;&#x7801;&#x67B6;&#x6784;&#x8FD9;&#x90E8;&#x5206;&#x6211;&#x6765;&#x80CC;&#x9505;&#xFF0C;&#x4E00;&#x5F00;&#x59CB;&#x6CA1;&#x6709;&#x7406;&#x89E3;&#x6BD4;&#x8D5B; &#x6559;&#x8BAD;&#x4E94;&#xFF1A;&#x6D4B;&#x8BD5;&#x5F88;&#x91CD;&#x8981;&#x6559;&#x8BAD;&#x516D;&#xFF1A;&#x6CE8;&#x610F;&#x7248;&#x672C;&#x63A7;&#x5236;&#x6559;&#x8BAD;&#x4E03;&#xFF1A;&#x5FC3;&#x6001;&#x8981;&#x653E;&#x5E73;&#x6559;&#x8BAD;&#x516B;&#xFF1A;&#x8C03;&#x53C2;&#x4E0D;&#x9760;&#x8C31;&#x6559;&#x8BAD;&#x4E5D;&#xFF1A;&#x540E;&#x8BB0;&#x6211;&#x6587;&#x7B14;&#x4E0D;&#x597D;&#xFF0C;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x4E5F;&#x662F;&#x53CD;&#x590D;&#x6539;&#x4E86;&#x5F88;&#x591A;&#x6B21;&#x624D;&#x6700;&#x7EC8;&#x53D1;&#x5E03;&#x51FA;&#x53BB;&#x3002;&#x4E00;&#x5F00;&#x59CB;&#x5728;&#x5199;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6709;&#x5F88;&#x591A;&#x5E26;&#x6709;&#x60C5;&#x7EEA;&#x7684;&#x8BDD;&#xFF0C;&#x540E;&#x6765;&#x81EA;&#x5DF1;&#x4E0D;&#x65AD;&#x53CD;&#x601D;&#xFF0C;&#x6709;&#x6210;&#x7EE9;&#x56FA;&#x7136;&#x9AD8;&#x5174;&#xFF0C;&#x4F46;&#x662F;&#x5931;&#x8D25;&#x4E86;&#x4E5F;&#x8981;&#x5FC3;&#x6001;&#x653E;&#x5E73;&#x3002;&#x4E0D;&#x8981;&#x7528;&#x8FC7;&#x53BB;&#x7684;&#x4E8B;&#x6765;&#x5F71;&#x54CD;&#x5C06;&#x6765;&#x7684;&#x5FC3;&#x60C5;&#x3002;&#x6240;&#x4EE5;&#x6211;&#x9009;&#x62E9;&#x5F7B;&#x5E95;&#x51B7;&#x9759;&#x4E0B;&#x6765;&#x4E4B;&#x540E;&#x518D;&#x53D1;&#x5E03;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#x3002;]]></content>
      <categories>
        <category>经验教训</category>
      </categories>
      <tags>
        <tag>经验教训</tag>
        <tag>总结</tag>
        <tag>竞赛</tag>
        <tag>猪队友坑死人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级图像处理-Lab8图像金字塔]]></title>
    <url>%2F%2Fposts%2F4898d2ed%2F</url>
    <content type="text"><![CDATA[&#x6211;&#x7684;OpenCV&#x7248;&#x672C;&#x662F;4.0.1&#x3002;IDE&#x662F;VS2017&#x3002;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x662F;Win10&#x3002; &#x5B9E;&#x9A8C;&#x8981;&#x6C42;&#xFF1A;&#x53C2;&#x8003;&#x300A;01_&#x79D1;&#x8F6F;&#x9AD8;&#x56FE;&#x5B9E;&#x9A8C;_&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7ECF;&#x5178;&#x7B97;&#x6CD5;&#x53CA;OpenCV&#x7A0B;&#x5E8F;&#x300B;&#x6587;&#x6863;&#xFF0C;&#x5B8C;&#x6210;3&#x4E2A;&#x6269;&#x5C55;&#x5B9E;&#x9A8C;&#x3002; &#x6211;&#x7684;&#x4EE3;&#x7801; &#x56FE;&#x50CF;&#x91D1;&#x5B57;&#x5854;]]></content>
      <categories>
        <category>高级图像处理</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>计算机视觉</tag>
        <tag>高级图像处理</tag>
        <tag>中科大</tag>
        <tag>实验笔记</tag>
        <tag>赵振刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级图像处理-Lab7皮肤检测]]></title>
    <url>%2F%2Fposts%2Fb148748%2F</url>
    <content type="text"><![CDATA[&#x6211;&#x7684;OpenCV&#x7248;&#x672C;&#x662F;4.0.1&#x3002;IDE&#x662F;VS2017&#x3002;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x662F;Win10&#x3002; &#x5B9E;&#x9A8C;&#x8981;&#x6C42;&#xFF1A;&#x53C2;&#x8003;&#x300A;01_&#x79D1;&#x8F6F;&#x9AD8;&#x56FE;&#x5B9E;&#x9A8C;_&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7ECF;&#x5178;&#x7B97;&#x6CD5;&#x53CA;OpenCV&#x7A0B;&#x5E8F;&#x300B;&#x6587;&#x6863;&#xFF0C;&#x5B8C;&#x6210;3&#x4E2A;&#x6269;&#x5C55;&#x5B9E;&#x9A8C;&#x3002; &#x6211;&#x7684;&#x4EE3;&#x7801; &#x76AE;&#x80A4;&#x68C0;&#x6D4B;]]></content>
      <categories>
        <category>高级图像处理</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>计算机视觉</tag>
        <tag>高级图像处理</tag>
        <tag>中科大</tag>
        <tag>实验笔记</tag>
        <tag>赵振刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级图像处理-Lab6图形学变换]]></title>
    <url>%2F%2Fposts%2F5c4cf636%2F</url>
    <content type="text"><![CDATA[&#x6211;&#x7684;OpenCV&#x7248;&#x672C;&#x662F;4.0.1&#x3002;IDE&#x662F;VS2017&#x3002;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x662F;Win10&#x3002; &#x5B9E;&#x9A8C;&#x8981;&#x6C42;&#xFF1A;&#x53C2;&#x8003;&#x300A;01_&#x79D1;&#x8F6F;&#x9AD8;&#x56FE;&#x5B9E;&#x9A8C;_&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7ECF;&#x5178;&#x7B97;&#x6CD5;&#x53CA;OpenCV&#x7A0B;&#x5E8F;&#x300B;&#x6587;&#x6863;&#xFF0C;&#x5B8C;&#x6210;3&#x4E2A;&#x6269;&#x5C55;&#x5B9E;&#x9A8C;&#x3002; &#x6211;&#x7684;&#x4EE3;&#x7801; &#x81A8;&#x80C0;]]></content>
      <categories>
        <category>高级图像处理</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>计算机视觉</tag>
        <tag>高级图像处理</tag>
        <tag>中科大</tag>
        <tag>实验笔记</tag>
        <tag>赵振刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级图像处理-Lab5频域滤波]]></title>
    <url>%2F%2Fposts%2F6e84f7a7%2F</url>
    <content type="text"><![CDATA[&#x6211;&#x7684;OpenCV&#x7248;&#x672C;&#x662F;4.0.1&#x3002;IDE&#x662F;VS2017&#x3002;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x662F;Win10&#x3002; &#x5B9E;&#x9A8C;&#x8981;&#x6C42; &#x6211;&#x7684;&#x4EE3;&#x7801; &#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x7684; DFT &#x548C; IDFT]]></content>
      <categories>
        <category>高级图像处理</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>计算机视觉</tag>
        <tag>高级图像处理</tag>
        <tag>中科大</tag>
        <tag>实验笔记</tag>
        <tag>赵振刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级图像处理-Lab4图像去噪]]></title>
    <url>%2F%2Fposts%2F1983c731%2F</url>
    <content type="text"><![CDATA[&#x6211;&#x7684;OpenCV&#x7248;&#x672C;&#x662F;4.0.1&#x3002;IDE&#x662F;VS2017&#x3002;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x662F;Win10&#x3002; &#x5B9E;&#x9A8C;&#x8981;&#x6C42; &#x6211;&#x7684;&#x4EE3;&#x7801; &#x5747;&#x503C;&#x6EE4;&#x6CE2;]]></content>
      <categories>
        <category>高级图像处理</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>计算机视觉</tag>
        <tag>高级图像处理</tag>
        <tag>中科大</tag>
        <tag>实验笔记</tag>
        <tag>赵振刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级图像处理-Lab3空域滤波]]></title>
    <url>%2F%2Fposts%2F87e75292%2F</url>
    <content type="text"><![CDATA[&#x6211;&#x7684;OpenCV&#x7248;&#x672C;&#x662F;4.0.1&#x3002;IDE&#x662F;VS2017&#x3002;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x662F;Win10&#x3002; &#x5B9E;&#x9A8C;&#x8981;&#x6C42; &#x6211;&#x7684;&#x4EE3;&#x7801; &#x5229;&#x7528;&#x5747;&#x503C;&#x6A21;&#x677F;&#x5E73;&#x6ED1;&#x7070;&#x5EA6;&#x56FE;&#x50CF; &#x5177;&#x4F53;&#x5185;&#x5BB9;&#xFF1A; &#x5229;&#x7528; OpenCV &#x5BF9;&#x56FE;&#x50CF;&#x50CF;&#x7D20;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C; &#x5206;&#x522B;&#x5229;&#x7528; 3*3&#x3001; 5*5 &#x548C; 9*9 &#x5C3A;&#x5BF8;&#x7684;&#x5747;&#x503C;&#x6A21;&#x677F;&#x5E73;&#x6ED1;&#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x3002;]]></content>
      <categories>
        <category>高级图像处理</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>计算机视觉</tag>
        <tag>高级图像处理</tag>
        <tag>中科大</tag>
        <tag>实验笔记</tag>
        <tag>赵振刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级图像处理-Lab2直方图均衡]]></title>
    <url>%2F%2Fposts%2Ff0e06204%2F</url>
    <content type="text"><![CDATA[&#x6211;&#x7684;OpenCV&#x7248;&#x672C;&#x662F;4.0.1&#x3002;IDE&#x662F;VS2017&#x3002;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x662F;Win10&#x3002; &#x5B9E;&#x9A8C;&#x8981;&#x6C42; &#x6211;&#x7684;&#x4EE3;&#x7801; &#x8BA1;&#x7B97;&#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x7684;&#x5F52;&#x4E00;&#x5316;&#x76F4;&#x65B9;&#x56FE; &#x53CD;&#x6B63;&#x4E5F;&#x6CA1;&#x4EBA;&#x770B;&#xFF0C;&#x90FD;&#x60F3;&#x76F4;&#x63A5;&#x8981;&#x4EE3;&#x7801;&#xFF0C;&#x6211;&#x5077;&#x61D2;&#x4EE5;&#x540E;&#x518D;&#x5199;&#x3002;]]></content>
      <categories>
        <category>高级图像处理</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>计算机视觉</tag>
        <tag>高级图像处理</tag>
        <tag>中科大</tag>
        <tag>实验笔记</tag>
        <tag>赵振刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[高级图像处理-Lab1图像灰度变换]]></title>
    <url>%2F%2Fposts%2F3b2efaf5%2F</url>
    <content type="text"><![CDATA[&#x9AD8;&#x7EA7;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7B2C;&#x4E00;&#x6B21;&#x8BD5;&#x9A8C;&#xFF0C;&#x73AF;&#x5883;&#x914D;&#x7F6E;&#x53CA;&#x4EE3;&#x7801;&#x3002; &#x5B9E;&#x9A8C;&#x8981;&#x6C42; &#x6211;&#x7684;&#x4EE3;&#x7801; &#x73AF;&#x5883;&#x914D;&#x7F6E; &#x6211;&#x7684;OpenCV&#x7248;&#x672C;&#x662F;4.0.1&#x3002;IDE&#x662F;VS2017&#x3002;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x662F;Win10&#x3002; OpenCV&#x666E;&#x901A;&#x7248;&#xFF08;&#x6CA1;&#x6709;contrib&#x7684;&#xFF09;&#x8FD8;&#x662F;&#x6BD4;&#x8F83;&#x597D;&#x914D;&#x7F6E;&#x7684;&#xFF0C;&#x5177;&#x4F53;&#x5982;&#x4F55;&#x914D;&#x7F6E;&#x4E0D;&#x518D;&#x5570;&#x55E6;&#x4E86;&#x3002;&#x4E0D;&#x8FC7;&#x5728;&#x6211;&#x5199;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#xFF08;2019.3.22&#xFF09;&#x65F6;&#xFF0C;OpenCV4&#x7684;&#x8D44;&#x6599;&#x8FD8;&#x662F;&#x5F88;&#x5C11;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x592A;&#x5EFA;&#x8BAE;&#x8FD9;&#x4E48;&#x65E9;&#x7684;&#x7528;&#x6700;&#x65B0;&#x7248;&#x3002; &#x5728;OpenCV4&#x4E2D;&#xFF0C;&#x79FB;&#x9664;&#x4E86;&#x597D;&#x591A;&#x8001;&#x65E7;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5176;&#x548C;OpenCV2&#x517C;&#x5BB9;&#x6027;&#x4E0D;&#x662F;&#x7279;&#x522B;&#x597D;&#x3002; &#x5229;&#x7528; OpenCV &#x8BFB;&#x53D6;&#x56FE;&#x50CF; &#x5177;&#x4F53;&#x5185;&#x5BB9;&#xFF1A;&#x7528;OpenCV&#x6253;&#x5F00;&#x56FE;&#x50CF;&#xFF0C;&#x5E76;&#x5728;&#x7A97;&#x53E3;&#x663E;&#x793A;&#x3002; &#x5728;OpenCV4&#x4E2D;&#xFF0C;&#x6211;&#x6CA1;&#x6709;&#x627E;&#x5230;cvLoadImage&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x5EFA;&#x8BAE;&#x4F7F;&#x7528;imread&#x51FD;&#x6570;&#x8FDB;&#x884C;&#x8BFB;&#x53D6;&#x3002;&#x53E6;&#x5916;&#xFF0C;&#x5728;VS2017&#x4E0B;&#xFF0C;waitKey&#x4E4B;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x52A0;destroyAllWindows()&#xFF0C;&#x4F1A;&#x62A5;&#x9519;&#x3002; &#x6240;&#x4EE5;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 12345678910int loadimage(){ Mat image; image = imread(&quot;lena.jpg&quot;, IMREAD_COLOR); // Read the file namedWindow(&quot;Display window&quot;, WINDOW_AUTOSIZE); // Create a window for display. imshow(&quot;Display window&quot;, image); // Show our image insid e it. waitKey(0); // Wait for a keystroke in the window destroyAllWindows(); return 0;} &#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x4E8C;&#x503C;&#x5316;&#x5904;&#x7406; &#x5177;&#x4F53;&#x5185;&#x5BB9;&#xFF1A;&#x8BBE;&#x7F6E;&#x5E76;&#x8C03;&#x6574;&#x9608;&#x503C;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x4E8C;&#x503C;&#x5316;&#x5904;&#x7406;&#x3002; &#x8001;&#x5E08;&#x8981;&#x6C42;&#x4E0D;&#x80FD;&#x8C03;&#x5E93;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x662F;&#x7A7A;&#x57DF;&#x4E0A;&#x7684;&#x53D8;&#x6362;&#xFF0C;&#x904D;&#x5386;&#x771F;&#x4E2A;&#x56FE;&#x50CF;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x7070;&#x5EA6;&#x503C;&#x4F4E;&#x4E8E;&#x9608;&#x503C;&#x7684;&#x7F6E;&#x4E3A;0&#xFF0C;&#x628A;&#x9AD8;&#x4E8E;&#x9608;&#x503C;&#x7684;&#x7F6E;&#x4E3A;255&#x3002; 1res = image.clone(); &#x8FD9;&#x884C;&#x4EE3;&#x7801;&#x8868;&#x793A;&#x5BF9;image&#x8FDB;&#x884C;&#x6DF1;&#x62F7;&#x8D1D;&#xFF0C;&#x503C;&#x590D;&#x5236;&#x3002; &#x5728;&#x540E;&#x9762;&#x7684;&#x5B9E;&#x9A8C;&#x4E2D;&#xFF0C;&#x6211;&#x6709;&#x65F6;&#x5019;&#x4E0D;&#x52A0;namedWindow&#xFF0C;&#x5176;&#x5B9E;&#x4E5F;&#x80FD;&#x6B63;&#x5E38;&#x7684;&#x663E;&#x793A;&#x56FE;&#x50CF;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x62A5;&#x9519;&#x3002; &#x8FD9;&#x4E00;&#x90E8;&#x5206;&#x7684;&#x4EE3;&#x7801;&#x662F;&#xFF1A; 1234567891011121314151617181920212223242526272829int Binarization(){ Mat image,res; image = imread(&quot;lena.jpg&quot;, 0); // &#x7070;&#x5EA6;&#x8BFB;&#x5165; namedWindow(&quot;&#x539F;&#x56FE;&quot;, WINDOW_AUTOSIZE); // Create a window for display. imshow(&quot;&#x539F;&#x56FE;&quot;, image); // Show our image insid e it. res = image.clone(); int gray; for (int i = 0; i &lt; res.rows; i++) { for (int j = 0; j &lt; res.cols; j++) { gray = res.at&lt;uchar&gt;(i, j); if (gray &gt; 80) gray = 255; else gray = 0; res.at&lt;uchar&gt;(i, j) = saturate_cast&lt;uchar&gt;(gray); } } //threshold(image, res, 80, 255, 0); namedWindow(&quot;&#x4E8C;&#x503C;&#x5316;&#x7684;&#x56FE;&quot;, WINDOW_AUTOSIZE); // Create a window for display. imshow(&quot;&#x4E8C;&#x503C;&#x5316;&#x7684;&#x56FE;&quot;, res); // Show our image insid e it. waitKey(0); // Wait for a keystroke in the window destroyAllWindows(); return 0;} &#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x7684;&#x5BF9;&#x6570;&#x53D8;&#x6362;]]></content>
      <categories>
        <category>高级图像处理</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>计算机视觉</tag>
        <tag>高级图像处理</tag>
        <tag>中科大</tag>
        <tag>实验笔记</tag>
        <tag>赵振刚</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[寒假算法基础集训营1题解]]></title>
    <url>%2F%2Fposts%2F4714a7e1%2F</url>
    <content type="text"><![CDATA[&#x5BD2;&#x5047;&#x91CC;&#x505A;&#x7684;&#x6BD4;&#x8D5B;&#xFF0C;&#x88AB;&#x5927;&#x4F6C;&#x6309;&#x5728;&#x5730;&#x4E0A;&#x6469;&#x64E6;&#xFF0C;&#x5B66;&#x5230;&#x4E86;&#x4E0D;&#x5C11;&#x4E1C;&#x897F;&#x3002;&#x6545;&#x8BB0;&#x5F55;&#x4E4B;&#x3002; &#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5B98;&#x65B9;&#x9898;&#x89E3; &#x5C0F;a&#x7684;&#x8BA1;&#x7B97;&#x5668;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x7B7E;&#x5230;&#x9898;&#xFF0C;&#x6CA1;&#x5565;&#x597D;&#x8BF4;&#x7684;&#x3002;&#x76F4;&#x63A5;&#x6A21;&#x62DF;&#x53EF;&#x4EE5;&#x505A;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;#include&lt;vector&gt;//#pragma warning(disable:4996)using namespace std;typedef struct { int o; long long int temp;}op;int n;double num;vector&lt;op&gt; V;void solution(){ cin &gt;&gt; n &gt;&gt; num; V.resize(n); for (int i = 0; i &lt; n; i++) { cin &gt;&gt; V[i].o&gt;&gt;V[i].temp; } for (int i = n-1; i &gt;= 0; i--) { if (V[i].o==1) //+ { num -= V[i].temp; } if (V[i].o == 2) //- { num += V[i].temp; } if (V[i].o == 3) //* { num /= V[i].temp; } if (V[i].o == 4) //&#xF7; { num *= V[i].temp; } } cout &lt;&lt; num &lt;&lt; endl;}int main(){ //freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); //system(&quot;pause&quot;); return 0;} &#x5C0F;a&#x4E0E;&#x201D;204&#x201D;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x7528;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#x53EF;&#x4EE5;&#x505A;&#xFF0C;&#x5C3D;&#x91CF;&#x8BA9;&#x524D;&#x540E;&#x4E24;&#x4E2A;&#x6570;&#x7684;&#x5DEE;&#x503C;&#x6700;&#x5927;&#x3002; &#x5F53;&#x524D;&#x9762;&#x7684;&#x6570;&#x4E3A;0&#x65F6;&#xFF0C;&#x5C3D;&#x91CF;&#x9009;&#x62E9;4&#x3002; &#x5F53;&#x524D;&#x9762;&#x7684;&#x6570;&#x4E3A;2&#x65F6;&#xFF0C;&#x9009;&#x62E9;0&#x548C;4&#x4E2D;&#xFF0C;&#x5269;&#x4F59;&#x8F83;&#x591A;&#x7684;&#x90A3;&#x4E2A;&#x3002; &#x5F53;&#x524D;&#x9762;&#x7684;&#x6570;&#x4E3A;4&#x65F6;&#xFF0C;&#x5C3D;&#x91CF;&#x9009;&#x62E9;0&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;iostream&gt;#include&lt;vector&gt;//#pragma warning(disable:4996)using namespace std;int num2 = 0, num4 = 0, num0 = 0;void solution(){ int n,temp; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; temp; if (temp == 2) num2++; if (temp == 0) num0++; if (temp == 4) num4++; } int cur = 0, res = 0; for (int i = 0; i &lt; n; i++) { if (cur==0) { if (num4 &gt; 0) { num4--; res += 16; cur = 4; continue; } else if (num2&gt;0) { num2--; res += 4; cur = 2; continue; } } else if (cur==2) { if (num4&gt;num0) { num4--; res += 4; cur = 4; continue; } else if (num0 &gt; num4) { num0--; res += 4; cur = 0; continue; } } else if (cur==4) { if (num0&gt;0) { cur = 0; res += 16; num0--; continue; } else if (num2&gt;0) { cur = 2; res += 4; num2--; continue; } } } cout &lt;&lt; res;}int main(){ //freopen(&quot;3.txt&quot;, &quot;r&quot;, stdin); solution(); //system(&quot;pause&quot;); return 0;} &#x5C0F;a&#x4E0E;&#x661F;&#x9645;&#x63A2;&#x7D22;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5F88;&#x6709;&#x610F;&#x601D;&#x7684;&#x4E00;&#x4E2A;&#x9898;&#xFF0C;&#x8FD9;&#x4E2A;&#x9898;&#x8003;&#x5230;&#x4E86;&#x5F02;&#x6216;&#x7684;&#x6027;&#x8D28;&#x548C;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x3002;&#x662F;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x7684;&#x53D8;&#x79CD;&#xFF0C;&#x975E;&#x5E38;&#x5DE7;&#x5999;&#x3002; &#x5B98;&#x65B9;&#x9898;&#x89E3;&#x4E2D;&#x63D0;&#x5230;&#xFF0C;DP&#x7684;&#x6570;&#x7EC4;&#x4E0D;&#x80FD;&#x53EA;&#x5F00;&#x5230;3000&#xFF0C;&#x662F;&#x56E0;&#x4E3A;&#xFF0C;pi&#x5728;[1,3000]&#xFF0C;3000&#x901A;&#x8FC7;&#x5F02;&#x6216;&#xFF0C;&#x6700;&#x5927;&#x53EF;&#x5230;&#x8FBE;&#x7684;&#x6570;&#x662F;4095&#x3002;&#x6240;&#x4EE5;dp&#x6570;&#x7EC4;&#x6700;&#x5C11;&#x4E5F;&#x8981;4096&#x3002;&#x4EE3;&#x7801;&#x4E2D;&#x5F00;&#x5230;&#x4E86;4100&#x3002; &#x5173;&#x952E;&#x70B9;&#xFF1A; dp&#x6570;&#x7EC4;&#x4E0D;&#x80FD;&#x53EA;&#x5F00;3000&#xFF0C;&#x56E0;&#x4E3A;3000&#x901A;&#x8FC7;&#x5F02;&#x6216;&#x8FD0;&#x7B97;&#xFF0C;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x5230;4095&#x3002; dp&#x6570;&#x7EC4;&#x53EF;&#x4EE5;&#x662F;&#x4E00;&#x7EF4;&#x7684;&#x3002; &#x6838;&#x5FC3;&#x4EE3;&#x7801;&#xFF1A;123456789101112131415//&#x56E0;&#x4E3A;&#x6700;&#x5927;&#x662F;3000&#xFF0C;&#x6839;&#x636E;&#x5F02;&#x6216;&#xFF0C;&#x6700;&#x5927;&#x503C;&#x662F;4095dp[V[0] ^ V[n - 1]] = true;for (int i = 0; i &lt; n; i++){ for (int j = 4095; j &gt;= 0; j--) { if (V[i]&lt;V[0]&amp;&amp;V[i]&gt;V[n-1]) //&#x6EE1;&#x8DB3;&#x4E2D;&#x8F6C;&#x6761;&#x4EF6; { if (dp[j^V[i]]) { dp[j] = dp[j^V[i]]; } } }} &#x9010;&#x6B65;&#x5206;&#x6790;&#xFF0C;&#x5728;&#x6700;&#x5F00;&#x59CB; &#xFF0C;&#x628A;1dp[V[0] ^ V[n - 1]] = true; &#x8868;&#x793A;&#x53EA;&#x8003;&#x7B2C;&#x4E00;&#x4E2A;&#x548C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#xFF0C;&#x53EF;&#x4EE5;&#x5230;&#x8FBE;&#x7684;&#x503C;&#x3002;&#x5F02;&#x6216;&#x8FD0;&#x7B97;&#x6709;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x6027;&#x8D28;&#xFF1A;&#x5982;&#x679C;A&#x2295;B=D&#x2295;E=C&#x3002;&#x5219;E=A&#x2295;B&#x2295;D. &#x6240;&#x4EE5;&#x5728;&#x7B2C;&#x4E8C;&#x6B21;&#x5FAA;&#x73AF;&#xFF0C;&#x5728;0~4095&#x4E2D;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x503C;&#xFF0C;&#x8BB0;&#x4E3A;t&#xFF0C;&#x4F7F;&#x5F97;t&#x2295;V[1]=C&#x3002;&#x8FD9;&#x6837;&#xFF0C;&#x8FD9;&#x4E2A;t&#x5C31;&#x662F;V[0]&#x2295;V[1]&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x7684;&#x503C;&#x3002; &#x7136;&#x540E;&#x4F9D;&#x6B21;&#x7C7B;&#x63A8;&#xFF0C;&#x4E0D;&#x65AD;&#x4EE5;&#x4E4B;&#x524D;&#x5F02;&#x6216;&#x7684;&#x7ED3;&#x679C;&#x4F5C;&#x4E3A;C&#xFF0C;&#x4EE5;&#x4E0D;&#x540C;&#x7684;V[i]&#xFF0C;&#x6765;&#x627E;&#x4E0D;&#x540C;&#x7684;t&#x3002;&#x6700;&#x540E;&#x5728;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x53D6;&#x5F97;&#x7684;&#x5F02;&#x6216;&#x503C;&#x4E2D;&#xFF0C;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x6700;&#x5C0F;&#x7684;&#x3002; &#x56E0;&#x4E3A;&#x521D;&#x59CB;&#x503C;&#x662F;V[0]&#x2295;V[n-1]&#xFF0C;&#x6240;&#x4EE5;&#x4E0A;&#x8FF0;&#x5BFB;&#x627E;&#x7684;t&#x90FD;&#x662F;&#x98DE;&#x8239;&#x5230;&#x8FBE;&#x7684;&#x4E2D;&#x95F4;&#x661F;&#x7403;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x56E0;&#x4E3A;&#x521D;&#x503C;&#x662F;V[0]&#x2295;V[n-1]&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x540E;&#x4FDD;&#x8BC1;&#x4E00;&#x5B9A;&#x80FD;&#x5230;&#x8FBE;n&#x53F7;&#x661F;&#x7403;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;cstring&gt;#include &lt;cmath&gt;#include &lt;cfloat&gt;#include &lt;climits&gt;#include &lt;string&gt;#include &lt;vector&gt;#include &lt;list&gt;#include &lt;queue&gt;#include &lt;stack&gt;#include &lt;map&gt;#include &lt;set&gt;#include &lt;algorithm&gt;#include &lt;bitset&gt;#include &lt;sstream&gt;#include &lt;ctime&gt;#pragma warning(disable:4996)using namespace std;#define Windvoid solution(){ ios::sync_with_stdio(false); int n; //&#x661F;&#x7403;&#x6570; int t; //&#x8010;&#x4E45;&#x5EA6; cin &gt;&gt; n; vector&lt;int&gt;V(n),mid(n); vector&lt;bool&gt; dp(4100); for (int i = 0; i &lt; n; i++) { cin &gt;&gt; V[i]; } if (V[n - 1] &gt;= V[0]) //&#x4E0D;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#xFF0C;&#x76F4;&#x63A5;&#x8FD4;&#x56DE; { cout &lt;&lt; &quot;-1&quot; &lt;&lt; endl; return; } if (n == 1) { cout &lt;&lt; (V[0] ? V[0] : -1) &lt;&lt; endl; //&#x5982;&#x679C;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x661F;&#x7403;&#xFF0C;&#x5219;&#x770B;V[0]&#x662F;&#x5426;&#x4E3A;0&#xFF0C;&#x5982;&#x679C;&#x4E3A;0&#xFF0C;&#x8F93;&#x51FA;-1 return; } //&#x5C06;&#x6240;&#x6709;&#x80FD;&#x4F5C;&#x4E3A;&#x4E2D;&#x8F6C;&#x7AD9;&#x7684;&#x661F;&#x7403;&#x52A0;&#x5165;&#x8FDB;&#x6765; //&#x56E0;&#x4E3A;&#x6700;&#x5927;&#x662F;3000&#xFF0C;&#x6839;&#x636E;&#x5F02;&#x6216;&#xFF0C;&#x6700;&#x5927;&#x503C;&#x662F;4095 dp[V[0] ^ V[n - 1]] = true; for (int i = 0; i &lt; n; i++) { for (int j = 4095; j &gt;= 0; j--) { if (V[i]&lt;V[0]&amp;&amp;V[i]&gt;V[n-1]) //&#x6EE1;&#x8DB3;&#x4E2D;&#x8F6C;&#x6761;&#x4EF6; { if (dp[j^V[i]]) { dp[j] = dp[j^V[i]]; } } } } for (int i = 4095; i &gt;0; i--) { if (dp[i]) { cout &lt;&lt; i &lt;&lt; endl; return; } }}int main(){#ifdef Wind freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin);#endif solution(); system(&quot;pause&quot;); return 0;}]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>寒假比赛</tag>
        <tag>非官方题解</tag>
        <tag>给大佬递茶</tag>
        <tag>被按在地上摩擦</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[算法导论复习笔记]]></title>
    <url>%2F%2Fposts%2Fdb76c882%2F</url>
    <content type="text"><![CDATA[&#x7B97;&#x6CD5;&#x5BFC;&#x8BBA;&#x590D;&#x4E60;&#x7B14;&#x8BB0;&#x3002;&#x5982;&#x6709;&#x9519;&#x8BEF;&#xFF0C;&#x8FD8;&#x8BF7;&#x591A;&#x591A;&#x6279;&#x8BC4;&#x6307;&#x6B63;&#x3002; &#x7EA2;&#x9ED1;&#x6811;&#x6027;&#x8D28;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#x5982;&#x679C;&#x6EE1;&#x8DB3;&#x4E0B;&#x9762;&#x7684;&#x7EA2;&#x9ED1;&#x6027;&#x8D28;&#xFF0C;&#x5219;&#x4E3A;&#x4E00;&#x68F5;&#x7EA2;&#x9ED1;&#x6811;&#xFF1A; &#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#x6216;&#x662F;&#x7EA2;&#x7684;&#xFF0C;&#x6216;&#x662F;&#x9ED1;&#x7684;&#x3002; &#x6839;&#x7ED3;&#x70B9;&#x662F;&#x9ED1;&#x7684;&#x3002; &#x6BCF;&#x4E2A;&#x53F6;&#x7ED3;&#x70B9;(NIL)&#x662F;&#x9ED1;&#x7684; &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x662F;&#x7EA2;&#x7684;&#xFF0C;&#x5219;&#x5B83;&#x7684;&#x4E24;&#x4E2A;&#x513F;&#x5B50;&#x90FD;&#x662F;&#x9ED1;&#x7684;&#x3002; &#x5BF9;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#xFF0C;&#x4ECE;&#x8BE5;&#x7ED3;&#x70B9;&#x5230;&#x5176;&#x5B50;&#x5B59;&#x7ED3;&#x70B9;&#x7684;&#x6240;&#x6709;&#x8DEF;&#x5F84;&#x4E0A;&#x5305;&#x542B;&#x76F8;&#x540C;&#x6570;&#x76EE;&#x7684;&#x9ED1;&#x7ED3;&#x70B9;&#x3002; &#x5F15;&#x7406; &#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#x7684;&#x6027;&#x8D28; &#x64CD;&#x4F5C;&#x8981;&#x6C42;&#x662F;&#x77E5;&#x9053;&#x5177;&#x4F53;&#x7684;&#x64CD;&#x4F5C;&#x548C;&#x65F6;&#x95F4;&#xFF0C;&#x6392;&#x9664;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x63D2;&#x5165;&#x548C;&#x5220;&#x9664;&#x64CD;&#x4F5C;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x77E5;&#x9053;&#x4ED6;&#x4FE9;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x3002; &#x65CB;&#x8F6C; &#x671F;&#x672B;&#x590D;&#x4E60;&#x7B14;&#x8BB0;OneNote&#x751F;&#x6210;&#x7684;&#x56FE;&#x7247;~]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>算法</tag>
        <tag>复习</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[智能机器人 LAB2]]></title>
    <url>%2F%2Fposts%2F8837a525%2F</url>
    <content type="text"><![CDATA[&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;-LAB2 &#x5B9E;&#x9A8C;&#x62A5;&#x544A;&#x5982;&#x6709;&#x9519;&#x8BEF;&#xFF0C;&#x8BF7;&#x591A;&#x591A;&#x6279;&#x8BC4;&#x6307;&#x6B63;&#xFF0C;&#x4E0D;&#x80DC;&#x611F;&#x6FC0;&#x3002; &#x4EE3;&#x7801; &#x4EE3;&#x7801;&#x5206;&#x6790;&#x58F0;&#x660E;&#x5F69;&#x8272;&#x56FE;&#x548C;&#x6DF1;&#x5EA6;&#x56FE;&#x53D8;&#x91CF;123vector&lt;cv::Mat&gt; colorImgs, depthImgs; // &#x5F69;&#x8272;&#x56FE;&#x548C;&#x6DF1;&#x5EA6;&#x56FE;vector&lt;Eigen::Isometry3d, Eigen::aligned_allocator&lt;Eigen::Isometry3d&gt;&gt; poses; // &#x76F8;&#x673A;&#x4F4D;&#x59FF; &#x8BFB;&#x53D6;&#x5F69;&#x8272;&#x56FE;-&#x6DF1;&#x5EA6;&#x56FE;&#x5BF9;&#x7531;&#x4E8E;&#x8FD9;&#x91CC;&#x8BBE;&#x5B9A;&#x4E86;&#x5F69;&#x8272;&#x56FE;-&#x6DF1;&#x5EA6;&#x56FE;&#x5BF9;&#x4E00;&#x5171;&#x6709;5&#x4E2A;&#xFF0C;&#x6240;&#x4EE5;&#x76F4;&#x63A5;&#x5728;&#x5FAA;&#x73AF;&#x91CC;&#x5199;&#x660E;5&#x4E2A;&#xFF0C;&#x4F9D;&#x6B21;&#x8BFB;&#x53D6;&#x5F69;&#x8272;&#x56FE;-&#x6DF1;&#x8272;&#x56FE;&#x5BF9;12345678for ( int i=0; i&lt;5; i++ ){ boost::format fmt( &quot;./%s/%d.%s&quot; ); //&#x56FE;&#x50CF;&#x6587;&#x4EF6;&#x683C;&#x5F0F; colorImgs.push_back( cv::imread( (fmt%&quot;color&quot;%(i+1)%&quot;png&quot;).str() )); depthImgs.push_back( cv::imread( (fmt%&quot;depth&quot;%(i+1)%&quot;pgm&quot;).str(), -1 )); // &#x4F7F;&#x7528;-1&#x8BFB;&#x53D6;&#x539F;&#x59CB;&#x56FE;&#x50CF; ... &#x8BBE;&#x5B9A;&#x76F8;&#x673A;&#x5916;&#x53C2;&#x7531;&#x4E8E;&#x76F8;&#x673A;&#x5728;&#x8FD0;&#x52A8;&#xFF0C;&#x6240;&#x4EE5; $P$ &#x7684;&#x76F8;&#x673A;&#x5750;&#x6807;&#x5E94;&#x8BE5;&#x662F;&#x5B83;&#x7684;&#x4E16;&#x754C;&#x5750;&#x6807;&#xFF08;&#x8BB0;&#x4E3A; $P_w$&#xFF09;&#xFF0C;&#x6839;&#x636E;&#x76F8;&#x673A;&#x7684;&#x5F53;&#x524D;&#x4F4D;&#x59FF;&#xFF0C;&#x53D8;&#x6362;&#x5230;&#x76F8;&#x673A;&#x5750;&#x6807;&#x7CFB;&#x4E0B;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x76F8;&#x673A;&#x7684;&#x4F4D;&#x59FF;&#x7531;&#x5B83;&#x7684;&#x65CB;&#x8F6C;&#x77E9;&#x9635;$ R$ &#x548C;&#x5E73;&#x79FB;&#x5411;&#x91CF;$ t$ &#x6765;&#x63CF;&#x8FF0;&#x3002; &#x8BFB;&#x53D6;&#x76F8;&#x673A;&#x4F4D;&#x59FF;&#x4FE1;&#x606F;&#xFF0C;&#x662F;&#x6839;&#x636E;post.txt&#x6587;&#x4EF6;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x800C;&#x6765;&#x7684;&#xFF0C;&#x5177;&#x4F53;&#x505A;&#x6CD5;&#x662F;&#xFF0C;&#x5148;&#x8BFB;&#x53D6;&#x8868;&#x793A;&#x65CB;&#x8F6C;&#x7684;&#x56DB;&#x5143;&#x6570;&#x4FE1;&#x606F;&#xFF0C;&#x8F6C;&#x5230;&#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x4E2D;&#xFF0C;&#x518D;&#x8BFB;&#x53D6;&#x8868;&#x793A;&#x5E73;&#x79FB;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x8F6C;&#x6362;&#x5230;&#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x4E2D;&#x3002;1234567double data[7] = {0};for ( auto&amp; d:data ) fin&gt;&gt;d;Eigen::Quaterniond q( data[6], data[3], data[4], data[5] );//&#x8868;&#x793A;&#x65CB;&#x8F6C;&#x7684;&#x56DB;&#x5143;&#x6570;Eigen::Isometry3d T(q); //&#x8F6C;&#x5230;&#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x4E2D;T.pretranslate( Eigen::Vector3d( data[0], data[1], data[2] )); //&#x8BBE;&#x5B9A;&#x5E73;&#x79FB;&#x5411;&#x91CF;poses.push_back( T ); //&#x628A;&#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x8F6C;&#x79FB;&#x5230;&#x76F8;&#x673A;&#x4F4D;&#x59FF;&#x4E2D; &#x516C;&#x5F0F;&#xFF1A;&#x8BBE;&#x56DB;&#x5143;&#x6570;&#x4E3A;$ q = q_0 + q_1i + q_2j + q_3k$&#xFF0C;&#x5219;&#x5BF9;&#x5E94;&#x7684;&#x65CB;&#x8F6C;&#x77E9;&#x9635;R&#x4E3A;&#xFF1A;&#x8BBE;&#x5B9A;&#x76F8;&#x673A;&#x5185;&#x53C2;&#x76F8;&#x673A;&#x5185;&#x53C2;&#x4E00;&#x5171;&#x6709;cx,cy,fx,fy&#x56DB;&#x4E2A;&#x503C;&#xFF0C;&#x5355;&#x4F4D;&#x90FD;&#x662F;&#x50CF;&#x7D20;&#x3002; &#x539F;&#x7406;&#x662F;&#xFF0C;&#x50CF;&#x7D20;&#x5750;&#x6807;&#x7CFB;&#x4E0E;&#x6210;&#x50CF;&#x5E73;&#x9762;&#x4E4B;&#x95F4;&#xFF0C;&#x76F8;&#x5DEE;&#x4E86;&#x4E00;&#x4E2A;&#x7F29;&#x653E;&#x548C;&#x4E00;&#x4E2A;&#x539F;&#x70B9;&#x7684;&#x5E73;&#x79FB;&#x3002;&#x5176;&#x4E2D;&#xFF0C;cx&#xFF0C;cy&#x8868;&#x793A;&#x7684;&#x662F;&#x6210;&#x50CF;&#x5E73;&#x9762;&#x76F8;&#x5BF9;&#x4E8E;&#x50CF;&#x7D20;&#x5750;&#x6807;&#x7CFB;&#x7684;&#x5E73;&#x79FB;&#x3002; &#x8BBE;&#x50CF;&#x7D20;&#x5750;&#x6807;&#x5728; $u$ &#x8F74;&#x4E0A;&#x7F29;&#x653E;&#x4E86; $&#x3B1;$ &#x500D;&#xFF0C;&#x5728; $v$ &#x4E0A;&#x7F29;&#x653E;&#x4E86; $&#x3B2;$ &#x500D;&#x3002;&#x5219;$P&#x2019;$&#x7684;&#x5750;&#x6807;&#x4E0E;&#x50CF;&#x7D20;&#x5750;&#x6807;$[u,v]^T$&#x7684;&#x5173;&#x7CFB;&#x4E3A;&#xFF1A;&#x53C8;&#x7531;&#x5C0F;&#x5B54;&#x6210;&#x50CF;&#x7684;&#x516C;&#x5F0F;&#x628A; $&#x3B1;f$ &#x5408;&#x5E76;&#x6210; $f_x$&#xFF0C;&#x628A; $&#x3B2;f$ &#x5408;&#x5E76;&#x6210; $f_y$ &#xFF0C;&#x53EF;&#x5F97;&#xFF1A;&#x7531;&#x4E8E;$f$ &#x7684;&#x5355;&#x4F4D;&#x4E3A;&#x7C73;&#xFF0C; $&#x3B1;, &#x3B2;$ &#x7684;&#x5355;&#x4F4D;&#x4E3A;&#x50CF;&#x7D20;&#x6BCF;&#x7C73;&#xFF0C;&#x6240;&#x4EE5; $f_x, f_y$ &#x7684;&#x5355;&#x4F4D;&#x4E3A;&#x50CF;&#x7D20;&#x3002; &#x65B0;&#x5EFA;&#x70B9;&#x4E91;&#x56FE;&#x5148;&#x5B9A;&#x4E49;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x540D;&#x79F0;123// &#x5B9A;&#x4E49;&#x70B9;&#x4E91;&#x4F7F;&#x7528;&#x7684;&#x683C;&#x5F0F;&#xFF1A;&#x8FD9;&#x91CC;&#x7528;&#x7684;&#x662F;XYZRGBtypedef pcl::PointXYZRGB PointT; typedef pcl::PointCloud&lt;PointT&gt; PointCloud; Ptr&#x662F;&#x4E00;&#x4E2A;&#x667A;&#x80FD;&#x6307;&#x9488;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;PointCloud &#x5176;&#x4E2D;PointT&#x662F;pcl::PointXYZRGB&#x7C7B;&#x578B;&#x3002;&#x5B83;&#x91CD;&#x8F7D;&#x4E86;-&gt; &#x8FD4;&#x56DE;&#x4E86;&#x6307;&#x5411;PointCloud&#x7684;&#x6307;&#x9488;*Ptr&#x662F;&#x4E0B;&#x9762;&#x7C7B;&#x578B; boost::shared_ptr&lt;PointCloud&gt; pcl&#x70B9;&#x4E91;&#x5E93;&#x63D0;&#x4F9B;&#x4E86;&#x975E;&#x5E38;&#x65B9;&#x4FBF;&#x7684;&#x8C03;&#x7528;&#x63A5;&#x53E3;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x4F20;&#x5165;&#x6BCF;&#x4E2A;&#x70B9;&#x7684;&#x4E09;&#x7EF4;&#x5750;&#x6807;&#x548C;&#x989C;&#x8272;&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x628A;&#x591A;&#x5F20;&#x56FE;&#x7247;&#x81EA;&#x52A8;&#x62FC;&#x63A5;&#x5230;&#x4E00;&#x8D77;&#x3002;12345678910111213141516171819202122232425262728293031PointCloud::Ptr pointCloud( new PointCloud ); for ( int i=0; i&lt;5; i++ ){ cout&lt;&lt;&quot;&#x8F6C;&#x6362;&#x56FE;&#x50CF;&#x4E2D;: &quot;&lt;&lt;i+1&lt;&lt;endl; //&#x6BCF;&#x4E2A;&#x56FE;&#x50CF;&#x5BF9;&#xFF0C;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x4F4D;&#x59FF;&#x4FE1;&#x606F; cv::Mat color = colorImgs[i]; //&#x5F69;&#x8272;&#x56FE;&#x50CF; cv::Mat depth = depthImgs[i]; //&#x6DF1;&#x5EA6;&#x56FE;&#x50CF; Eigen::Isometry3d T = poses[i]; for ( int v=0; v&lt;color.rows; v++ ) for ( int u=0; u&lt;color.cols; u++ ) { unsigned int d = depth.ptr&lt;unsigned short&gt; ( v )[u]; // &#x6DF1;&#x5EA6;&#x503C; if ( d==0 ) continue; // &#x4E3A;0&#x8868;&#x793A;&#x6CA1;&#x6709;&#x6D4B;&#x91CF;&#x5230; Eigen::Vector3d point; //&#x50CF;&#x7D20;&#x5750;&#x6807; point[2] = double(d)/depthScale; //Z &#x6DF1;&#x5EA6; point[0] = (u-cx)*point[2]/fx; //&#x7531;&#x9488;&#x5B54;&#x76F8;&#x673A;&#x6A21;&#x578B;&#x8BA1;&#x7B97;&#x5750;&#x6807; point[1] = (v-cy)*point[2]/fy; Eigen::Vector3d pointWorld = T*point; //&#x5C06;&#x76F8;&#x673A;&#x5750;&#x6807;&#x7CFB;&#x4E0B;&#x7684;&#x5750;&#x6807;&#x53D8;&#x6362;&#x5230;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB; PointT p ; //&#x70B9;&#x4E91; XYZRGB p.x = pointWorld[0]; //&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x4E2D;&#x7684;&#x5750;&#x6807; p.y = pointWorld[1]; p.z = pointWorld[2]; p.b = color.data[ v*color.step+u*color.channels() ]; //&#x6CE8;&#x610F;opencv&#x5F69;&#x8272;&#x56FE;&#x50CF;&#x901A;&#x9053;&#x7684;&#x987A;&#x5E8F;&#x4E3A; bgr p.g = color.data[ v*color.step+u*color.channels()+1 ]; p.r = color.data[ v*color.step+u*color.channels()+2 ]; pointCloud-&gt;points.push_back( p ); //&#x70B9;&#x4E91;&#x4E2D;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x70B9; }} &#x516C;&#x5F0F;&#xFF1A; &#x8FD0;&#x884C;&#x622A;&#x56FE; &#x5355;&#x76EE;&#x76F8;&#x673A;&#x5185;&#x53C2;&#x3001;&#x5916;&#x53C2;&#x662F;&#x6307;&#x54EA;&#x4E9B;&#x53C2;&#x6570;&#xFF1F; &#x5916;&#x53C2;&#x5982;&#x4F55;&#x7528;&#x77E9;&#x9635;&#x8868;&#x793A;&#xFF1F;&#x5185;&#x53C2;&#xFF1A;$c_x,c_y,f_x,f_y$&#x5916;&#x53C2;&#x4F7F;&#x7528;&#x9F50;&#x6B21;&#x5750;&#x6807;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x8868;&#x793A;&#x3002;&#x5DE6;&#x4E0A;3*3&#x662F;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#xFF0C;&#x53F3;&#x8FB9;&#x662F;&#x5E73;&#x79FB;&#x53D8;&#x6362;&#x3002; &#x53CC;&#x76EE;&#x76F8;&#x673A;&#x5185;&#x53C2;&#x3001;&#x5916;&#x53C2;&#x5185;&#x53C2;&#x76F8;&#x673A;&#x7684;&#x5185;&#x53C2;&#x6709;4&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x662F;$c_x,c_y,f_x,f_y$&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x8981;&#x6709;&#x89E3;&#x51B3;&#x7578;&#x53D8;&#x7684;&#x4E94;&#x4E2A;&#x53C2;&#x6570;&#x3002; &#x8BFB;&#x53D6;&#x76F8;&#x673A;&#x53C2;&#x6570;&#x7684;&#x4EE3;&#x7801;&#x5728;rectify.h&#x4E2D;&#xFF0C;&#x5177;&#x4F53;&#x53C2;&#x6570;&#x5728;intrinsics.xml&#x4E2D;&#x3002;&#x5982;&#x4E0B;&#xFF1A;&#x5DE6;&#x76F8;&#x673A;&#x7684;&#x5185;&#x53C2;&#x548C;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x53C2;&#x6570;12345678910111213141516&lt;opencv_storage&gt;&lt;M1 type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;3&lt;/rows&gt; &lt;cols&gt;3&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 1.1316289419152909e+003 0. 6.7002980347009304e+002 0. 1.1316289419152909e+003 3.9950109175499784e+002 0. 0. 1.&lt;/data&gt;&lt;/M1&gt;&lt;D1 type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;1&lt;/rows&gt; &lt;cols&gt;5&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 1.4986336340613862e-001 -1.1555661146153864e+000 3.3866741697495639e-003 1.1952943179603111e-002 1.7747259071867683e+000&lt;/data&gt;&lt;/D1&gt; &#x53F3;&#x76F8;&#x673A;&#x7684;&#x5185;&#x53C2;&#x548C;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x53C2;&#x6570;12345678910111213141516&lt;M2 type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;3&lt;/rows&gt; &lt;cols&gt;3&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 1.1316289419152909e+003 0. 6.7645167888745175e+002 0. 1.1316289419152909e+003 3.9314009439860592e+002 0. 0. 1.&lt;/data&gt;&lt;/M2&gt;&lt;D2 type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;1&lt;/rows&gt; &lt;cols&gt;5&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 1.3553831241923531e-001 -8.6303773993984356e-001 7.1136544177058808e-003 9.2765351119315394e-003 1.3940332911325242e+000&lt;/data&gt;&lt;/D2&gt;&lt;/opencv_storage&gt; &#x516C;&#x5F0F;&#x5982;&#x4E0B;&#xFF1A; &#x900F;&#x955C;&#x7578;&#x53D8;&#x7531;&#x4E8E;&#x9488;&#x5B54;&#x53EF;&#x4EE5;&#x900F;&#x8FC7;&#x7684;&#x5149;&#x7EBF;&#x592A;&#x5C11;&#xFF0C;&#x6210;&#x50CF;&#x4F1A;&#x4E0D;&#x6E05;&#x695A;&#xFF0C;&#x6240;&#x4EE5;&#x5F80;&#x5F80;&#x90FD;&#x4F1A;&#x52A0;&#x4E0A;&#x51F8;&#x900F;&#x955C;&#x6C47;&#x805A;&#x66F4;&#x591A;&#x7684;&#x5149;&#x7EBF;&#x3002;&#x4F46;&#x662F;&#x52A0;&#x4E0A;&#x51F8;&#x900F;&#x955C;&#x4EE5;&#x540E;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x6210;&#x50CF;&#x7578;&#x53D8;&#xFF0C;&#x6240;&#x4EE5;&#x8FD8;&#x9700;&#x8981;&#x6821;&#x6B63;&#x900F;&#x955C;&#x7578;&#x53D8;&#x3002;&#x900F;&#x955C;&#x7684;&#x7578;&#x53D8;&#x4E3B;&#x8981;&#x5206;&#x4E3A;&#x4E24;&#x7C7B;&#xFF0C;&#x4E00;&#x7C7B;&#x662F;&#x5F84;&#x5411;&#x7578;&#x53D8;&#xFF0C;&#x4E00;&#x7C7B;&#x662F;&#x5207;&#x5411;&#x7578;&#x53D8;&#x3002; &#x5F84;&#x5411;&#x7578;&#x53D8;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x4F1A;&#x4EA7;&#x751F;&#x201C;&#x9C7C;&#x773C;&#x201D;&#x73B0;&#x8C61;&#x3002;&#x6210;&#x50CF;&#x4E2D;&#x5FC3;&#x5904;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x4E3A;0&#xFF0C;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x968F;&#x7740;&#x4E0E;&#x6210;&#x50CF;&#x4E2D;&#x5FC3;&#x8DDD;&#x79BB;&#x589E;&#x5927;&#x800C;&#x589E;&#x5927;&#xFF0C;&#x5728;&#x56FE;&#x50CF;&#x8FB9;&#x7F18;&#x5904;&#x8FBE;&#x5230;&#x6700;&#x5927;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x3002;&#x5E38;&#x5E38;&#x7528;&#x5076;&#x6B21;&#x5E42;&#x7684;&#x6CF0;&#x52D2;&#x516C;&#x5F0F;&#x63CF;&#x8FF0;&#x5F84;&#x5411;&#x7578;&#x53D8;$$\left{\begin{aligned}x_{cerrected}=x(1+k_1r^2+k_2r^4+k_3r^6)\y_{cerrected}=y(1+k_1r^2+k_2r^4+k_3r^6)\end{aligned}\right.$$ &#x5207;&#x5411;&#x7578;&#x53D8;&#x5207;&#x5411;&#x7578;&#x53D8;&#x7531;&#x900F;&#x955C;&#x548C;&#x6210;&#x50CF;&#x5E73;&#x9762;&#x4E0D;&#x5E73;&#x884C;&#x5F15;&#x8D77;&#x3002;&#x5E38;&#x7528;&#x5982;&#x4E0B;&#x516C;&#x5F0F;&#x63CF;&#x8FF0; $$\left{\begin{aligned}x_{cerrected}&amp;=x+2p_1xy+p_2(r^2+2x^2)\y_{cerrected}&amp;=y+p_1(r^2+2y^2)+2p_2xy\end{aligned}\right.$$ &#x5C0F;&#x7ED3;&#x5355;&#x76EE;&#x6444;&#x50CF;&#x673A;&#x900F;&#x955C;&#x7578;&#x53D8;&#x6821;&#x6B63;&#x9700;&#x8981;&#x786E;&#x5B9A;&#x7684;&#x5C31;&#x662F;$k_1,k_2,k_3,p_1,p_2$&#x8FD9;5&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x201C;&#x9C7C;&#x773C;&#x201D;&#x73B0;&#x8C61;&#x4E0D;&#x660E;&#x663E;&#x7684;&#x8BDD;&#xFF0C;&#x5E38;&#x5E38;&#x4F7F;&#x7528;$k_1,k_2$&#x6765;&#x6821;&#x6B63;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x3002; &#x5916;&#x53C2;&#x6B64;&#x5904;&#x7528;R&#x548C;T&#x6765;&#x63CF;&#x8FF0;&#x5DE6;&#x53F3;&#x4E24;&#x4E2A;&#x6444;&#x50CF;&#x673A;{camera}&#x5750;&#x6807;&#x7CFB;&#x7684;&#x76F8;&#x5BF9;&#x5173;&#x7CFB;&#xFF0C;&#x5177;&#x4F53;&#x4E3A;&#x5C06;&#x5DE6;&#x6444;&#x50CF;&#x673A;{camera}&#x4E0B;&#x7684;&#x5750;&#x6807;&#x8F6C;&#x6362;&#x5230;&#x53F3;&#x6444;&#x50CF;&#x673A;{camera}&#x4E0B;&#x7684;&#x5750;&#x6807;&#x3002;12345678910111213141516171819&lt;opencv_storage&gt;&lt;R type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;3&lt;/rows&gt; &lt;cols&gt;3&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 9.9909318070240760e-001 3.5020847379939768e-002 -2.4214799663375593e-002 -3.4760970744630318e-002 9.9933433045958386e-001 1.1071173279572044e-002 2.4586402478553149e-002 -1.0219403783309490e-002 9.9964547345520272e-001&lt;/data&gt;&lt;/R&gt;&lt;T type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;3&lt;/rows&gt; &lt;cols&gt;1&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; -6.0209269661173187e+002 1.5326928276045152e+001 -2.2150904288412747e+001&lt;/data&gt;&lt;/T&gt;&lt;/opencv_storage&gt; &#x6BCF;&#x4E2A;&#x76F8;&#x673A;&#x7684;&#x65CB;&#x8F6C;&#x77E9;&#x9635;1234567891011121314151617181920&lt;R1 type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;3&lt;/rows&gt; &lt;cols&gt;3&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 9.9988245414945298e-001 9.1965294752025303e-003 1.2267914642630471e-002 -9.2637135176302024e-003 9.9994234300203466e-001 5.4308639703710120e-003 -1.2217262210921568e-002 -5.5438720415545229e-003 9.9990999794324309e-001&lt;/data&gt;&lt;/R1&gt;&lt;R2 type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;3&lt;/rows&gt; &lt;cols&gt;3&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 9.9900074660452376e-001 -2.5430656902316658e-002 3.6753094742089557e-002 2.5632007896526286e-002 9.9965885355277262e-001 -5.0176373672242616e-003 -3.6612954740047575e-002 5.9546790906987689e-003 9.9931177984757591e-001&lt;/data&gt;&lt;/R2&gt; &#x53CC;&#x76EE;&#x76F8;&#x673A;&#x672C;&#x5F81;&#x77E9;&#x9635;&#x672C;&#x5F81;&#x77E9;&#x9635;&#x5E38;&#x7528;&#x5B57;&#x6BCD;$E$&#x6765;&#x8868;&#x793A;&#xFF0C;&#x5176;&#x7269;&#x7406;&#x610F;&#x4E49;&#x662F;&#x5DE6;&#x53F3;{picture}&#x5750;&#x6807;&#x7CFB;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x53EF;&#x4EE5;&#x63CF;&#x8FF0;&#x5DE6;&#x53F3;&#x6444;&#x50CF;&#x673A;&#x56FE;&#x50CF;&#x5E73;&#x9762;&#x4E0A;&#x5BF9;&#x5E94;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x3002; &#x8BA1;&#x7B97;&#x672C;&#x5F81;&#x77E9;&#x9635;&#x7531;&#x4E8E;&#x672C;&#x5F81;&#x77E9;&#x9635;&#x662F;&#x7B97;&#x51FA;&#x6765;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5DE6;&#x53F3;&#x76F8;&#x673A;&#x7684;&#x5916;&#x53C2;&#x6765;&#x7B97;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x6839;&#x636E;&#x6807;&#x5B9A;&#xFF0C;&#x6C42;&#x5F97;&#x524D;&#x6587;&#x6240;&#x8BF4;&#x7684;$R$&#x548C;$T$&#x6765;&#x7B97;&#x3002;&#x8FD9;&#x91CC;&#x662F;&#x76F4;&#x63A5;&#x6839;&#x636E;&#x6807;&#x5B9A;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x6C42;&#x5F97;$R$&#x548C;$T$&#x6765;&#x7B97;&#x672C;&#x5F81;&#x77E9;&#x9635;&#x7684;&#x3002; &#x5BF9;&#x7EA7;&#x51E0;&#x4F55;&#x5728;&#x53CC;&#x76EE;&#x95EE;&#x9898;&#x4E2D;&#x975E;&#x5E38;&#x7684;&#x91CD;&#x8981;&#xFF0C;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x7ACB;&#x4F53;&#x5339;&#x914D;&#x7B49;&#x95EE;&#x9898;&#xFF0C;&#x800C;&#x8981;&#x5E94;&#x7528;&#x5BF9;&#x7EA7;&#x51E0;&#x4F55;&#x53BB;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#xFF0C;&#x6BD4;&#x5982;&#x6C42;&#x7EA7;&#x7EBF;&#xFF0C;&#x9700;&#x8981;&#x77E5;&#x9053;&#x672C;&#x5F81;&#x77E9;&#x9635;&#x6216;&#x8005;&#x57FA;&#x7840;&#x77E9;&#x9635;&#xFF0C;&#x56E0;&#x6B64;&#x53CC;&#x76EE;&#x6807;&#x5B9A;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E5F;&#x4F1A;&#x628A;&#x672C;&#x5F81;&#x77E9;&#x9635;&#x548C;&#x57FA;&#x7840;&#x77E9;&#x9635;&#x7B97;&#x51FA;&#x6765;&#x3002;&#x4E4B;&#x6240;&#x4EE5;&#x8BF4;&#x662F;&#x7B97;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x4E24;&#x4E2A;&#x77E9;&#x9635;&#x4E0E;$R$&#x548C;$T$&#x5E76;&#x4E0D;&#x72EC;&#x7ACB;&#x3002; &#x5047;&#x8BBE;&#x7A7A;&#x95F4;&#x4E2D;&#x6709;&#x4E00;&#x70B9;$P$&#xFF0C;&#x5176;&#x5728;{world}&#x5750;&#x6807;&#x7CFB;&#x4E0B;&#x7684;&#x5750;&#x6807;&#x4E3A;$P_W$&#xFF0C;&#x5176;&#x5728;&#x5DE6;&#x53F3;&#x6444;&#x50CF;&#x673A;{camera}&#x5750;&#x6807;&#x7CFB;&#x4E0B;&#x7684;&#x5750;&#x6807;&#x53EF;&#x4EE5;&#x4E3A;$P_l$&#x548C;$P_r$&#xFF0C;&#x53F3;{camera}&#x5750;&#x6807;&#x7CFB;&#x539F;&#x70B9;&#x5728;&#x5DE6;{camera}&#x5750;&#x6807;&#x7CFB;&#x7684;&#x5750;&#x6807;&#x4E3A;$T=[T_x,T_y,T_z]^T$&#xFF0C;&#x5219;&#x6709;&#xFF1A;$$P_r=R(P_l-T)$$&#x5219;&#x901A;&#x8FC7;&#x70B9;$T$&#x7684;&#x6240;&#x6709;&#x70B9;&#x7684;$P_l$&#x6240;&#x7EC4;&#x6210;&#x7684;&#x5E73;&#x9762;&#xFF08;&#x5373;&#x6781;&#x9762;&#xFF09;&#x53EF;&#x4EE5;&#x7528;&#x4E0B;&#x5F0F;&#x8868;&#x793A;&#xFF1A;$$(P_l-T)^T(P_l\times T)=0\tag{1}$$&#x5C06;$P_l&#xD7;T$&#x5199;&#x6210;&#x77E9;&#x9635;&#x76F8;&#x4E58;&#x7684;&#x5F62;&#x5F0F;&#xFF1A;$$P_l\times T=SP_l\tag{2}$$&#x5176;&#x4E2D;$S$&#x4E3A;&#xFF1A;$$S=\begin{bmatrix}0 &amp; -T_x &amp; T_y \T_z &amp; 0 &amp; -T_x \-T_y &amp; T_x &amp; 0\end{bmatrix}$$&#x7EFC;&#x5408;&#xFF08;1&#xFF09;&#xFF08;2&#xFF09;&#x5F0F;&#x53EF;&#x5F97;&#xFF1A;$$P_r^TRSP_l=0\tag{3}$$&#x4E58;&#x79EF;$RS$&#x5373;&#x4E3A;&#x672C;&#x5F81;&#x77E9;&#x9635;$E$&#xFF0C;&#x5229;&#x7528;&#x6295;&#x5F71;&#x65B9;&#x7A0B;&#x5C06;&#xFF08;3&#xFF09;&#x5F0F;&#x7B80;&#x5316;&#xFF1A;$$P_{pr}^TEP_{pl}=0\tag{4}$$&#xFF08;4&#xFF09;&#x5F0F;&#x63CF;&#x8FF0;&#x4E86;&#x540C;&#x4E00;&#x7269;&#x7406;&#x70B9;&#x5728;&#x5DE6;&#x53F3;&#x6444;&#x50CF;&#x673A;&#x56FE;&#x50CF;&#x5E73;&#x9762;&#x4E0A;&#x6295;&#x5F71;&#x5728;{picture}&#x4E0B;&#x7684;&#x5173;&#x7CFB;&#x3002; &#x6295;&#x5F71;&#x77E9;&#x9635;&#x5982;&#x56FE;&#xFF0C;&#x8003;&#x8651;&#x4E09;&#x7EF4;&#x4E16;&#x754C;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x70B9;&#xFF0C;&#x548C;&#x5176;&#x5728;&#x56FE;&#x50CF;&#xFF08;&#x4E8C;&#x7EF4;&#xFF09;&#x4E2D;&#x7684;&#x5750;&#x6807;&#x5173;&#x7CFB;&#x3002; $(X&#xFF0C;Y&#xFF0C;Z)$&#x4E3A;&#x70B9;&#x7684;&#x4E09;&#x7EF4;&#x5750;&#x6807;&#xFF0C;$(x&#xFF0C;y)$&#x4E3A;&#x5176;&#x901A;&#x8FC7;&#x76F8;&#x673A;&#x6210;&#x50CF;&#x540E;&#x5728;&#x56FE;&#x50CF;&#xFF08;&#x4E8C;&#x7EF4;&#xFF09;&#x4E0A;&#x7684;&#x5750;&#x6807;&#x3002;$u_0$&#x548C;$v_0$&#x662F;&#x76F8;&#x673A;&#x7684;&#x4E2D;&#x5FC3;&#x70B9;&#xFF08;&#x4E3B;&#x70B9;)&#xFF0C;&#x8BE5;&#x70B9;&#x4F4D;&#x4E8E;&#x56FE;&#x50CF;&#x5E73;&#x9762;&#x4E2D;&#x5FC3;&#xFF08;&#x7406;&#x8BBA;&#x4E0A;&#x662F;&#x8FD9;&#x6837;&#x3002;&#x4F46;&#x5B9E;&#x9645;&#x7684;&#x76F8;&#x673A;&#x4F1A;&#x6709;&#x51E0;&#x4E2A;&#x50CF;&#x7D20;&#x7684;&#x504F;&#x5DEE;&#xFF09; &#x73B0;&#x5728;&#x53EA;&#x8003;&#x8651;$y$&#x65B9;&#x5411;&#x4E0A;&#xFF0C;&#x7531;&#x4E8E;&#x9700;&#x8981;&#x5C06;&#x4E09;&#x7EF4;&#x4E16;&#x754C;&#x4E2D;&#x7684;&#x5750;&#x6807;&#xFF0C;&#x8F6C;&#x6362;&#x4E3A;&#x56FE;&#x50CF;&#x4E0A;&#x7684;&#x50CF;&#x7D20;&#xFF08;&#x56FE;&#x50CF;&#x4E0A;&#x7684;&#x5750;&#x6807;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x662F;&#x50CF;&#x7D20;&#x7684;&#x4F4D;&#x7F6E;&#xFF09;&#xFF0C;&#x9700;&#x8981;&#x6C42;$y$&#x65B9;&#x5411;&#x4E0A;&#x7126;&#x8DDD;&#x7B49;&#x4E8E;&#x591A;&#x5C11;&#x4E2A;&#x50CF;&#x7D20;&#xFF08;&#x7528;&#x50CF;&#x7D20;&#x503C;&#x8868;&#x793A;&#x7126;&#x8DDD;&#xFF09;&#xFF0C;$P_y$&#x8868;&#x793A;&#x50CF;&#x7D20;&#x7684;&#x9AD8;&#xFF0C;&#x7126;&#x8DDD;$f$&#xFF08;&#x7C73;&#x6216;&#x6BEB;&#x7C73;&#xFF09;&#x3002;&#x5782;&#x76F4;&#x50CF;&#x7D20;&#x8868;&#x793A;&#x7684;&#x7126;&#x8DDD;&#x4E3A;$$f_y=\frac f {p_y}$$ &#x5982;&#x679C;&#x53EA;&#x8003;&#x8651;y&#x65B9;&#x5411;&#x3002;&#x6211;&#x4EEC;&#x4E09;&#x7EF4;&#x4E16;&#x754C;&#x4E2D;&#x5F97;&#x70B9;&#xFF0C;&#x5728;&#x56FE;&#x50CF;&#xFF08;&#x4E8C;&#x7EF4;&#xFF09;&#x4E2D;y&#x7684;&#x5750;&#x6807;&#x3002;$$y=\frac{f_yY}{Z}+v_0$$&#x540C;&#x7406;&#xFF0C;&#x5F97;&#x5230;x&#x7684;&#x5750;&#x6807;&#xFF1A;$$x=\frac{f_xX}{Z}+u_0$$&#x73B0;&#x5728;&#xFF0C;&#x5C06;&#x4E0A;&#x56FE;&#x4E2D;&#x7684;&#x5750;&#x6807;&#x7CFB;&#x7684;&#x539F;&#x70B9;$O$&#xFF0C;&#x79FB;&#x52A8;&#x5230;&#x56FE;&#x50CF;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x3002;&#x7531;&#x4E8E;$(x&#xFF0C;y)$&#x662F;&#x5173;&#x4E8E;$(u0&#xFF0C;v0)$&#x7684;&#x504F;&#x79FB;&#xFF0C;&#x4E0A;&#x9762;&#x8868;&#x793A;&#x56FE;&#x50CF;&#xFF08;&#x4E8C;&#x7EF4;&#xFF09;&#x4E2D;&#x70B9;&#x7684;&#x5750;&#x6807;&#x7684;&#x5F0F;&#x5B50;&#x4E0D;&#x53D8;&#x3002;&#x5C06;&#x5F0F;&#x5B50;&#x4EE5;&#x77E9;&#x9635;&#x7684;&#x5F62;&#x5F0F;&#x91CD;&#x5199;&#xFF0C;&#x5F97;&#x3002; &#x5176;&#x4E2D;&#xFF0C;&#x7B49;&#x5F0F;&#x5DE6;&#x8FB9;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x77E9;&#x9635;&#xFF0C;&#x53EB;&#x505A;&#x201C;&#x76F8;&#x673A;&#x5185;&#x53C2;&#x6570;&#x77E9;&#x9635;&#x201D;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x77E9;&#x9635;&#x53EB;&#xFF08;&#x6295;&#x5F71;&#x77E9;&#x9635;&#xFF09;&#x3002; &#x66F4;&#x4E3A;&#x4E00;&#x822C;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5F00;&#x59CB;&#x65F6;&#x7684;&#x53C2;&#x8003;&#x5750;&#x6807;&#x7CFB;&#x4E0D;&#x4F4D;&#x4E8E;&#x4E3B;&#x70B9;&#xFF08;&#x4E2D;&#x5FC3;&#x70B9;&#xFF09;&#xFF0C;&#x9700;&#x8981;&#x989D;&#x5916;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x201C;&#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x201D;&#x548C;&#x201C;&#x5E73;&#x79FB;&#x5411;&#x91CF;&#x201D;&#x6765;&#x8868;&#x793A;&#x8FD9;&#x4E2A;&#x5F0F;&#x5B50;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#x5728;&#x4E0D;&#x540C;&#x89C6;&#x89D2;&#x4E2D;&#x662F;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x3002;&#x6574;&#x5408;&#x540E;&#xFF0C;&#x4E0A;&#x8FF0;&#x5F0F;&#x5B50;&#x91CD;&#x5199;&#x4E3A;: &#x5DE6;&#x53F3;&#x76F8;&#x673A;&#x7684;&#x6295;&#x5F71;&#x77E9;&#x9635;&#x4FDD;&#x5B58;&#x5728;rectifyData.xml&#x4E2D;&#xFF0C;&#x4E3A;&#xFF1A;123456789101112131415&lt;P1 type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;3&lt;/rows&gt; &lt;cols&gt;4&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 1.1316289419152909e+003 0. 6.4512952423095703e+002 0. 0. 1.1316289419152909e+003 3.9881204986572266e+002 0. 0. 0. 1. 0.&lt;/data&gt;&lt;/P1&gt;&lt;P2 type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;3&lt;/rows&gt; &lt;cols&gt;4&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 1.1316289419152909e+003 0. 6.4512952423095703e+002 -6.8202703903622192e+005 0. 1.1316289419152909e+003 3.9881204986572266e+002 0. 0. 0. 1. 0.&lt;/data&gt;&lt;/P2&gt; &#x91CD;&#x6295;&#x5F71;&#x77E9;&#x9635;Q&#x77E9;&#x9635;&#x4E3A;&#x91CD;&#x6295;&#x5F71;&#x77E9;&#x9635;&#xFF0C;&#x5373;&#x77E9;&#x9635;Q&#x53EF;&#x4EE5;&#x628A;2&#x7EF4;&#x5E73;&#x9762;(&#x56FE;&#x50CF;&#x5E73;&#x9762;)&#x4E0A;&#x7684;&#x70B9;&#x6295;&#x5F71;&#x5230;3&#x7EF4;&#x7A7A;&#x95F4;&#x7684;&#x70B9;&#x3002; $$Q=\begin{bmatrix}1&amp;\,0&amp;\,0&amp;\,-c_x\0&amp;\,1&amp;\,0&amp;\,-c_y\0&amp;\,0&amp;\,0&amp;\,f\0&amp;\,0&amp;\,-1/T_x&amp;\,(c_x-c_x&#x2019;)/T_x\\end{bmatrix}$$&#x5219;$$Q\begin{bmatrix}x\y\d\1\end{bmatrix}=\begin{bmatrix}X\Y\Z\W\end{bmatrix}\tag{5}$$ &#x5176;&#x4E2D;d&#x8868;&#x793A;&#x89C6;&#x5DEE;&#xFF0C;&#x4E09;&#x7EF4;&#x5750;&#x6807;&#x4E3A;$(X/W,Y/W,Z/W)$&#xFF0C;$c_x&#x2019;$&#x8868;&#x793A;&#x53F3;&#x56FE;&#x50CF;&#x7684;&#x4E3B;&#x70B9;&#xFF0C;&#x5F53;&#x6821;&#x6B63;&#x6B63;&#x786E;&#x65F6;&#xFF0C;$c_x=c_x&#x2019;$&#xFF0C;&#x5728;&#x7ACB;&#x4F53;&#x6821;&#x6B63;&#x6B63;&#x786E;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#x5C55;&#x5F00;&#xFF08;5&#xFF09;&#x5F0F;&#xFF0C;&#x53EF;&#x5F97;$$(X/W,Y/W,Z/W)=(-\frac{x-c_x}{d}T_x, -\frac{y-c_y}{d}T_x, -\frac{f}{d}T_x)\tag{6}$$&#x4E4B;&#x6240;&#x4EE5;&#x6709;&#x8D1F;&#x53F7;&#x662F;&#x56E0;&#x4E3A;$T_xT$ &#x662F;&#x8D1F;&#x7684;&#xFF0C;&#x4E4B;&#x6240;&#x4EE5;&#x8981;&#x51CF;&#x53BB;$c_x$&#x6216;$c_y$&#x662F;&#x56E0;&#x4E3A;{pixel}&#x5750;&#x6807;&#x7CFB;&#x7684;&#x539F;&#x70B9;&#x5728;&#x5DE6;&#x4E0A;&#x89D2;&#xFF0C;&#x800C;{camera}&#x5750;&#x6807;&#x7CFB;&#x7684;&#x539F;&#x70B9;&#x5728;&#x5149;&#x8F74;&#x4E0A;&#x3002; &#x4EE3;&#x7801;&#x4E2D;&#x7684;&#x91CD;&#x6295;&#x5F71;&#x77E9;&#x9635;&#x662F;12345678&lt;Q type_id=&quot;opencv-matrix&quot;&gt; &lt;rows&gt;4&lt;/rows&gt; &lt;cols&gt;4&lt;/cols&gt; &lt;dt&gt;d&lt;/dt&gt; &lt;data&gt; 1. 0. 0. -6.4512952423095703e+002 0. 1. 0. -3.9881204986572266e+002 0. 0. 0. 1.1316289419152909e+003 0. 0. 1.6592141911476194e-003 0.&lt;/data&gt;&lt;/Q&gt;&lt;/opencv_storage&gt; &#x5F15;&#x7528; &#x673A;&#x5668;&#x89C6;&#x89C9;&#x5B66;&#x4E60;&#x7B14;&#x8BB0; SLAM&#x5341;&#x56DB;&#x8BB2; &#x8D75;&#x632F;&#x521A;&#x8001;&#x5E08;&#x7684;PPT]]></content>
      <categories>
        <category>智能机器人</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>双目相机</tag>
        <tag>单目相机</tag>
        <tag>深度测量</tag>
        <tag>点云图</tag>
        <tag>相机参数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[智能机器人复习笔记]]></title>
    <url>%2F%2Fposts%2F1d9c933b%2F</url>
    <content type="text"><![CDATA[&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;&#x590D;&#x4E60;&#x7B14;&#x8BB0;&#xFF0C;&#x4EB2;&#x5A18;&#x561E;&#xFF0C;&#x8981;&#x4EBA;&#x547D;&#x4E86;&#x3002;T_T&#x5982;&#x6709;&#x9519;&#x8BEF;&#xFF0C;&#x8FD8;&#x8BF7;&#x591A;&#x591A;&#x6279;&#x8BC4;&#x6307;&#x6B63;&#x3002; &#x7EEA;&#x8BBA;&#x4EC0;&#x4E48;&#x662F;&#x673A;&#x5668;&#x4EBA;&#x6765;&#x81EA;&#x56FD;&#x9645;&#x6807;&#x51C6;&#x7EC4;&#x7EC7;&#xFF08;ISO&#xFF09;&#x7684;&#x5B9A;&#x4E49;&#xFF1A;&#x673A;&#x5668;&#x4EBA;&#x662F;&#x4E00;&#x79CD;&#x81EA;&#x52A8;&#x7684;&#x3001;&#x4F4D;&#x7F6E;&#x53EF;&#x63A7;&#x7684;&#x3001;&#x5177;&#x6709;&#x7F16;&#x7A0B;&#x80FD;&#x529B;&#x7684;&#x591A;&#x529F;&#x80FD;&#x673A;&#x68B0;&#x624B;&#xFF0C;&#x8FD9;&#x79CD;&#x673A;&#x68B0;&#x624B;&#x5177;&#x6709;&#x51E0;&#x4E2A;&#x8F74;&#xFF0C;&#x80FD;&#x591F;&#x501F;&#x52A9;&#x4E8E;&#x53EF;&#x7F16;&#x7A0B;&#x5E8F;&#x64CD;&#x4F5C;&#x6765;&#x5904;&#x7406;&#x5404;&#x79CD;&#x6750;&#x6599;&#x3001;&#x96F6;&#x4EF6;&#x3001;&#x5DE5;&#x5177;&#x548C;&#x4E13;&#x7528;&#x88C5;&#x7F6E;&#xFF0C;&#x4EE5;&#x6267;&#x884C;&#x79CD;&#x79CD;&#x4EFB;&#x52A1;&#x3002; &#x5B9A;&#x4E49;&#x5927;&#x591A;&#x6765;&#x6E90;&#x4E8E;&#x5DE5;&#x4E1A;&#x81EA;&#x52A8;&#x5316;&#x573A;&#x666F;&#xFF0C;&#x8FD8;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;&#x5B8C;&#x5168;&#x7EDF;&#x4E00;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x5E76;&#x4E14;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x8303;&#x7574;&#x8FD8;&#x5728;&#x4E0D;&#x65AD;&#x53D8;&#x5316;&#x6F14;&#x8FDB;&#x4E2D;&#x3002;&#x5171;&#x540C;&#x5C5E;&#x6027;&#xFF1A; &#x50CF;&#x4EBA;&#x6216;&#x4EBA;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x5E76;&#x6A21;&#x4EFF;&#x4EBA;&#x7684;&#x52A8;&#x4F5C; &#x5177;&#x6709;&#x667A;&#x80FD;&#x6216;&#x611F;&#x89C9;&#x4E0E;&#x8BC6;&#x522B;&#x80FD;&#x529B; &#x662F;&#x4EBA;&#x5236;&#x9020;&#x7684;&#x673A;&#x5668;&#x6216;&#x673A;&#x68B0;&#x7535;&#x5B50;&#x88C5;&#x7F6E; &#x4EC0;&#x4E48;&#x662F;&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;&#x4E00;&#x79CD;&#x5E7F;&#x4E49;&#x7684;&#x5B9A;&#x4E49;&#xFF1A;&#x5177;&#x6709;&#x611F;&#x89C9;&#xFF0C;&#x8BC6;&#x522B;&#xFF0C;&#x63A8;&#x7406;&#x5224;&#x65AD;&#x548C;&#x4E0E;&#x4EBA;&#x4EA4;&#x4E92;&#x7684;&#x80FD;&#x529B;&#xFF0C;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x5916;&#x754C;&#x6761;&#x4EF6;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x5728;&#x4E00;&#x5B9A;&#x8303;&#x56F4;&#x5185;&#x81EA;&#x884C;&#x4FEE;&#x6539;&#x7A0B;&#x5E8F;&#x4EE5;&#x8FBE;&#x6210;&#x76EE;&#x6807;&#x7684;&#x7CFB;&#x7EDF;&#x3002; &#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x4E0E;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x8054;&#x7CFB;&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;&#x7528;&#x5230;&#x4E86;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x7684;&#x591A;&#x4E2A;&#x9886;&#x57DF;&#x3002;&#x5305;&#x62EC;&#x4F46;&#x4E0D;&#x4EC5;&#x9650;&#x4E8E; &#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9; &#x81EA;&#x7136;&#x8BED;&#x8A00;&#x7406;&#x89E3;&#x4E0E;&#x4EA4;&#x6D41; &#x8BA4;&#x77E5;&#x4E0E;&#x63A8;&#x7406; &#x673A;&#x5668;&#x4EBA;&#x5B66; &#x535A;&#x5F08;&#x4E0E;&#x4F26;&#x7406; &#x673A;&#x5668;&#x5B66;&#x4E60; &#x673A;&#x5668;&#x4EBA;&#x4E09;&#x5B88;&#x5219; &#x673A;&#x5668;&#x4EBA;&#x5FC5;&#x987B;&#x4E0D;&#x5371;&#x5BB3;&#x4EBA;&#x7C7B;&#xFF0C;&#x4E5F;&#x4E0D;&#x5141;&#x8BB8;&#x5B83;&#x773C;&#x770B;&#x4EBA;&#x5C06;&#x53D7;&#x5BB3;&#x800C;&#x8896;&#x624B;&#x65C1;&#x89C2;&#x3002; &#x673A;&#x5668;&#x4EBA;&#x5FC5;&#x987B;&#x7EDD;&#x5BF9;&#x670D;&#x4ECE;&#x4E8E;&#x4EBA;&#x7C7B;&#xFF0C;&#x9664;&#x975E;&#x8FD9;&#x79CD;&#x670D;&#x4ECE;&#x6709;&#x5BB3;&#x4E8E;&#x4EBA;&#x7C7B;&#x3002; &#x673A;&#x5668;&#x4EBA;&#x5FC5;&#x987B;&#x4FDD;&#x62A4;&#x81EA;&#x8EAB;&#x4E0D;&#x53D7;&#x4F24;&#x5BB3;&#xFF0C;&#x9664;&#x975E;&#x4E3A;&#x4E86;&#x4FDD;&#x62A4;&#x4EBA;&#x7C7B;&#x6216;&#x8005;&#x662F;&#x4EBA;&#x7C7B;&#x547D;&#x4EE4;&#x5B83;&#x4F5C;&#x51FA;&#x727A;&#x7272;&#x3002; &#x4E09;&#x7EF4;&#x53D8;&#x6362;&#x7A7A;&#x95F4;&#x5750;&#x6807;&#x7CFB;&#x7B1B;&#x5361;&#x5C14;&#x5750;&#x6807;&#x7CFB;&#x4EFB;&#x4F55;&#x8FDE;&#x4E2A;&#x4E8C;&#x7EF4;&#x7684;&#x7B1B;&#x5361;&#x5C14;&#x5750;&#x6807;&#x7CFB;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5E73;&#x79FB;&#x548C;&#x65CB;&#x8F6C;&#x4F7F;&#x4E24;&#x4E2A;&#x5750;&#x6807;&#x7CFB;&#x91CD;&#x5408;&#x3002; &#x4E09;&#x7EF4;&#x7684;&#x7B1B;&#x5361;&#x5C14;&#x5750;&#x6807;&#x7CFB;&#x5206;&#x4E24;&#x79CD;&#xFF0C;&#x5DE6;&#x624B;&#x7CFB;&#x548C;&#x53F3;&#x624B;&#x7CFB;&#x3002;&#x6A21;&#x578B;&#x90FD;&#x662F;&#x5DE6;&#x624B;/&#x53F3;&#x624B;&#x7684;&#xFF1A; &#x5927;&#x62C7;&#x6307;&#x6307;&#x5411;$X$&#x8F74;&#x7684;&#x6B63;&#x65B9;&#x5411; &#x98DF;&#x6307;&#x6307;&#x5411;$Y$&#x8F74;&#x7684;&#x6B63;&#x65B9;&#x5411; &#x4E2D;&#x6307;&#x6307;&#x5411;$Z$&#x8F74;&#x7684;&#x8D1F;&#x65B9;&#x5411; &#x6A21;&#x578B;&#x5750;&#x6807;&#x7CFB;&#xFF08;&#x7269;&#x4F53;&#x5750;&#x6807;&#x7CFB;&#xFF09;&#x662F;&#x548C;&#x7279;&#x5B9A;&#x7269;&#x4F53;&#x76F8;&#x5173;&#x8054;&#x7684;&#x5750;&#x6807;&#x7CFB;&#x3002; &#x6BCF;&#x4E2A;&#x7269;&#x4F53;&#x90FD;&#x6709;&#x5B83;&#x4EEC;&#x72EC;&#x7ACB;&#x7684;&#x5750;&#x6807;&#x7CFB;&#x3002;&#x5F53;&#x7269;&#x4F53;&#x79FB;&#x52A8;&#x6216;&#x8005;&#x6539;&#x53D8;&#x65B9;&#x5411;&#x65F6;&#xFF0C;&#x548C;&#x8BE5;&#x7269;&#x4F53;&#x76F8;&#x5173;&#x8054;&#x7684;&#x5750;&#x6807;&#x7CFB;&#x5C31;&#x968F;&#x4E4B;&#x79FB;&#x52A8;&#x6216;&#x8005;&#x6539;&#x53D8;&#x65B9;&#x5411;&#x3002; &#x201C;&#x524D;&#x201D;&#x201C;&#x540E;&#x201D;&#x201C;&#x5DE6;&#x201D;&#x201C;&#x53F3;&#x201D;&#x53EA;&#x6709;&#x5728;&#x7269;&#x4F53;&#x5750;&#x6807;&#x7CFB;&#x4E2D;&#x624D;&#x6709;&#x610F;&#x4E49;&#x3002; &#x7269;&#x4F53;&#x5750;&#x6807;&#x7CFB;&#x4E5F;&#x80FD;&#x50CF;&#x6307;&#x5B9A;&#x65B9;&#x5411;&#x4E00;&#x6837;&#x6307;&#x5B9A;&#x4F4D;&#x7F6E;&#x3002; &#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x53C8;&#x53EB;&#x505A;&#x5168;&#x5C40;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x5B87;&#x5B99;&#x5750;&#x6807;&#x7CFB;&#x3002;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x662F;&#x4E00;&#x4E2A;&#x7279;&#x6B8A;&#x7684;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x4ED6;&#x5EFA;&#x7ACB;&#x4E86;&#x63CF;&#x8FF0;&#x5176;&#x5B83;&#x5750;&#x6807;&#x7CFB;&#x6240;&#x9700;&#x8981;&#x7684;&#x53C2;&#x8003;&#x6846;&#x67B6;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x80FD;&#x591F;&#x7528;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x63CF;&#x8FF0;&#x5176;&#x5B83;&#x5750;&#x6807;&#x7CFB;&#x7684;&#x4F4D;&#x7F6E;&#x3002; &#x4F5C;&#x7528;&#xFF1A;&#x5EFA;&#x7ACB;&#x4E86;&#x63CF;&#x8FF0;&#x5176;&#x4ED6;&#x5750;&#x6807;&#x7CFB;&#x6240;&#x9700;&#x8981;&#x7684;&#x53C2;&#x8003;&#x6846;&#x67B6;&#x3002;&#x4ECE;&#x975E;&#x6280;&#x672F;&#x610F;&#x4E49;&#x4E0A;&#x8BB2;&#xFF0C;&#x5B83;&#x662F;&#x6211;&#x4EEC;&#x5173;&#x5FC3;&#x7684;&#x7684;&#x6700;&#x5927;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x6240;&#x4EE5;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x4E0D;&#x5FC5;&#x662F;&#x6574;&#x4E2A;&#x4E16;&#x754C;&#x3002; &#x4E16;&#x754C;&#x5750;&#x6807;&#x7684;&#x5178;&#x578B;&#x95EE;&#x9898;&#xFF1A; &#x6BCF;&#x4E2A;&#x7269;&#x4F53;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x65B9;&#x5411; &#x6444;&#x50CF;&#x673A;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x65B9;&#x5411; &#x4E16;&#x754C;&#x4E2D;&#x6BCF;&#x4E00;&#x70B9;&#x7684;&#x5730;&#x5F62;&#x662F;&#x4EC0;&#x4E48; &#x7269;&#x4F53;&#x4ECE;&#x90A3;&#x91CC;&#x6765;&#x5230;&#x90A3;&#x91CC;&#x53BB; &#x76F8;&#x673A;&#x5750;&#x6807;&#x7CFB;&#x6444;&#x50CF;&#x5750;&#x6807;&#x7CFB;&#x662F;&#x548C;&#x89C2;&#x5BDF;&#x8005;&#x5BC6;&#x5207;&#x76F8;&#x5173;&#x7684;&#x5750;&#x6807;&#x7CFB;&#x3002;&#x8BE5;&#x5750;&#x6807;&#x7CFB;&#x5B9A;&#x4E49;&#x5728;&#x6444;&#x50CF;&#x673A;&#x7684;&#x5C4F;&#x5E55;&#x53EF;&#x89C6;&#x533A;&#x57DF;&#x3002; &#x8BBE;&#x5907;&#x5750;&#x6807;&#x7CFB;&#x8BBE;&#x5907;&#x5750;&#x6807;&#x7CFB;&#xFF08;DC&#xFF09;&#x6216;&#x5C4F;&#x5E55;&#x5750;&#x6807;&#x7CFB;&#xFF1A;&#x663E;&#x793A;&#x8BBE;&#x5907;&#x7684;&#x5750;&#x6807;&#x7CFB;&#x79F0;&#x4E3A;&#x8BBE;&#x5907;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x8BE5;&#x5750;&#x6807;&#x7CFB;&#x4F9D;&#x8D56;&#x4E8E;&#x5177;&#x4F53;&#x7684;&#x663E;&#x793A;&#x8BBE;&#x5907;&#x3002; &#x89C4;&#x8303;&#x5316;&#x5750;&#x6807;&#x7CFB;&#x6307;&#x72EC;&#x7ACB;&#x4E8E;&#x5177;&#x4F53;&#x7269;&#x7406;&#x8BBE;&#x5907;&#x7684;&#x4E00;&#x79CD;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x5B83;&#x7684;&#x5750;&#x6807;&#x8303;&#x56F4;&#x5728;x&#x548C;y&#x4E0A;&#x7684;&#x8303;&#x56F4;&#x90FD;&#x662F;0&#x5230;1&#xFF0C;&#x4E3B;&#x8981;&#x7528;&#x4E8E;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x5185;&#x90E8;&#x5904;&#x7406;&#x56FE;&#x5F62;&#xFF0C;&#x5BF9;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x7269;&#x7406;&#x8BBE;&#x5907;&#xFF0C;&#x89C4;&#x8303;&#x5316;&#x5750;&#x6807;&#x548C;&#x8BBE;&#x5907;&#x5750;&#x6807;&#x4EC5;&#x4EC5;&#x76F8;&#x5DEE;&#x4E00;&#x4E2A;&#x6BD4;&#x4F8B;&#x56E0;&#x5B50;&#xFF0C;&#x89C4;&#x8303;&#x5316;&#x5750;&#x6807;&#x53EF;&#x4EE5;&#x770B;&#x6210;&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7684;&#x56FE;&#x5F62;&#x8BBE;&#x5907;&#x3002; &#x5185;&#x79EF;&#x4E0E;&#x5916;&#x79EF;&#x5185;&#x79EF;&#x53EF;&#x4EE5;&#x63CF;&#x8FF0;&#x5411;&#x91CF;&#x95F4;&#x7684;&#x6295;&#x5F71;&#x5173;&#x7CFB;&#x3002;&#x516C;&#x5F0F;&#x4E3A;&#xFF1A; &#x5916;&#x79EF;&#x7684;&#x65B9;&#x5411;&#x5782;&#x76F4;&#x4E8E;&#x8FD9;&#x4E24;&#x4E2A;&#x5411;&#x91CF;&#xFF0C;&#x5927;&#x5C0F;&#x4E3A;$\lvert a \rvert\lvert b\rvert sin\langle a,b \rangle$&#x3002;&#x662F;&#x4E24;&#x4E2A;&#x5411;&#x91CF;&#x5F20;&#x6210;&#x7684;&#x56DB;&#x8FB9;&#x5F62;&#x7684;&#x6709;&#x5411;&#x9762;&#x79EF;&#x3002;&#x516C;&#x5F0F;&#x4E3A;&#xFF1A; &#x5916;&#x79EF;&#x53EA;&#x5BF9;&#x4E09;&#x7EF4;&#x5411;&#x91CF;&#x5B58;&#x5728;&#x5B9A;&#x4E49;&#xFF0C;&#x6211;&#x4EEC;&#x8FD8;&#x80FD;&#x7528;&#x5916;&#x79EF;&#x8868;&#x793A;&#x5411;&#x91CF;&#x7684;&#x65CB;&#x8F6C;&#x3002; &#x4F4D;&#x7F6E;&#x63CF;&#x8FF0;&#x5750;&#x6807;&#x7CFB;&#x7684;&#x8868;&#x793A;&#x5750;&#x6807;&#x7CFB;&#x5728;&#x56FA;&#x5B9A;&#x53C2;&#x8003;&#x5750;&#x6807;&#x7CFB;&#x8FDC;&#x70B9;&#x7684;&#x8868;&#x793A;&#xFF1A;&#x7528;&#x4E09;&#x4E2A;&#x76F8;&#x4E92;&#x5782;&#x76F4;&#x7684;&#x5355;&#x4F4D;&#x5411;&#x91CF;&#x6765;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x4E2D;&#x5FC3;&#x4F4D;&#x4E8E;&#x53C2;&#x8003;&#x5750;&#x6807;&#x7CFB;&#x539F;&#x70B9;&#x7684;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x5206;&#x522B;&#x4E3A;n,o,a&#xFF0C;&#x8FD9;&#x6837;&#xFF0C;&#x5750;&#x6807;&#x7CFB;&#x5C31;&#x53EF;&#x4EE5;&#x7531;&#x4E09;&#x4E2A;&#x5411;&#x91CF;&#x4EE5;&#x77E9;&#x9635;&#x7684;&#x5F62;&#x5F0F;&#x8868;&#x793A;&#x4E3A; &#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x5BF9;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x5411;&#x91CF;&#xFF0C;&#x82E5;&#x5728;&#x57FA;&#x4E3A;$(e_1,e_2,e_3)$&#x7684;&#x5750;&#x6807;&#x7CFB;&#x4E2D;&#x7684;&#x5750;&#x6807;&#x4E3A;$[a_1,a_2,a_3]$&#xFF0C;&#x5728;&#x57FA;&#x4E3A;$(e&#x2019;_1,e&#x2019;_2,e&#x2019;_3)$&#x7684;&#x5750;&#x6807;&#x7CFB;&#x4E2D;&#x7684;&#x5750;&#x6807;&#x4E3A;$[a&#x2019;_1,a&#x2019;_2,a&#x2019;_3]$&#x3002;&#x5219;&#x6709;&#xFF1A;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x7684;&#x6027;&#x8D28;&#xFF1A; &#x662F;&#x4E00;&#x4E2A;&#x884C;&#x5217;&#x5F0F;&#x4E3A;1&#x7684;&#x6B63;&#x4EA4;&#x77E9;&#x9635;&#x3002; &#x5355;&#x4F4D;&#x5411;&#x91CF;&#x4E4B;&#x95F4;&#x4E92;&#x76F8;&#x5782;&#x76F4;&#xFF0C;&#x6B63;&#x4EA4;&#x3002; &#x9F50;&#x6B21;&#x5750;&#x6807;&#x70B9;&#x5728;&#x4E00;&#x4E2A;&#x4E09;&#x7EF4;&#x5411;&#x91CF;&#x7684;&#x672B;&#x5C3E;&#x6DFB;&#x52A0;1&#xFF0C;&#x5C31;&#x53D8;&#x6210;&#x4E86;&#x56DB;&#x7EF4;&#x5411;&#x91CF;&#xFF0C;&#x79F0;&#x4E4B;&#x4E3A;&#x9F50;&#x6B21;&#x5750;&#x6807;&#x3002; &#x6DFB;&#x52A0;&#x4E86;&#x4E00;&#x7EF4;&#xFF0C;&#x5373;&#x591A;&#x4E86;&#x4E00;&#x4E2A;&#x81EA;&#x7531;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x5141;&#x8BB8;&#x628A;&#x53D8;&#x6362;&#x5199;&#x6210;&#x7EBF;&#x6027;&#x7684;&#x5F62;&#x5F0F;&#x3002;&#x5728;&#x9F50;&#x6B21;&#x5750;&#x6807;&#x4E2D;&#xFF0C;&#x67D0;&#x4E2A;&#x70B9; $x$ &#x7684;&#x6BCF;&#x4E2A;&#x5206;&#x91CF;&#x540C;&#x4E58;&#x4E00;&#x4E2A;&#x975E;&#x96F6;&#x5E38;&#x6570; $k$ &#x540E;&#xFF0C; &#x4ECD;&#x7136;&#x8868;&#x793A;&#x7684;&#x662F;&#x540C;&#x4E00;&#x4E2A;&#x70B9;&#x3002; &#x5750;&#x6807;&#x8F74;&#x5047;&#x8BBE;i\j\k&#x662F;&#x76F4;&#x89D2;&#x5750;&#x6807;&#x7CFB;&#x4E2D;X\Y\Z&#x5750;&#x6807;&#x8F74;&#x7684;&#x5355;&#x4F4D;&#x5411;&#x91CF;&#xFF0C;&#x5219;X\Y\Z&#x8F74;&#x53EF;&#x8868;&#x793A;&#x4E3A; &#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x5BF9;&#x4E8E;&#x9F50;&#x6B21;&#x5750;&#x6807;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x65CB;&#x8F6C;&#x548C;&#x5E73;&#x79FB;&#x5199;&#x5728;&#x4E00;&#x4E2A;&#x77E9;&#x9635;&#x91CC;&#x9762;&#xFF0C;&#x4F7F;&#x5F97;&#x6574;&#x4E2A;&#x5173;&#x7CFB;&#x53D8;&#x6210;&#x4E86;&#x7EBF;&#x6027;&#x5173;&#x7CFB;&#x3002;&#x8FD9;&#x4E2A;&#x63CF;&#x8FF0;&#x53D8;&#x6362;&#x5173;&#x7CFB;&#x7684;&#x77E9;&#x9635;&#x5C31;&#x662F;&#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x3002; &#x5173;&#x4E8E;&#x53D8;&#x6362;&#x77E9;&#x9635; T&#xFF0C;&#x5B83;&#x5177;&#x6709;&#x6BD4;&#x8F83;&#x7279;&#x522B;&#x7684;&#x7ED3;&#x6784;&#xFF1A;&#x5DE6;&#x4E0A;&#x89D2;&#x4E3A;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#xFF0C;&#x53F3;&#x4FA7;&#x4E3A;&#x5E73;&#x79FB;&#x5411;&#x91CF;&#xFF0C;&#x5DE6;&#x4E0B;&#x89D2;&#x4E3A; 0 &#x5411;&#x91CF;&#xFF0C;&#x53F3;&#x4E0B;&#x89D2;&#x4E3A; 1&#x3002;&#x8FD9;&#x79CD;&#x77E9;&#x9635;&#x53C8;&#x79F0;&#x4E3A;&#x7279;&#x6B8A;&#x6B27;&#x6C0F;&#x7FA4;&#x3002; &#x8BE5;&#x77E9;&#x9635;&#x7684;&#x9006;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x53CD;&#x5411;&#x7684;&#x53D8;&#x6362;&#xFF1A; &#x9F50;&#x6B21;&#x5750;&#x6807;&#x63CF;&#x8FF0;&#x5750;&#x6807;&#x7CFB;&#x5750;&#x6807;&#x7CFB;&#x4E0D;&#x5728;&#x56FA;&#x5B9A;&#x53C2;&#x8003;&#x5750;&#x6807;&#x7CFB;&#x7684;&#x539F;&#x70B9;&#xFF1A;&#x53EF;&#x4EE5;&#x5728;&#x8BE5;&#x5750;&#x6807;&#x7CFB;&#x7684;&#x539F;&#x70B9;&#x4E0E;&#x53C2;&#x8003;&#x5750;&#x6807;&#x7CFB;&#x539F;&#x70B9;&#x4E4B;&#x95F4;&#x505A;&#x4E00;&#x4E2A;&#x5411;&#x91CF;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x5411;&#x91CF;&#x7531;&#x4E0A;&#x8282;&#x4E2D;&#x63D0;&#x5230;&#x7684;&#x53C2;&#x8003;&#x5750;&#x6807;&#x7CFB;&#x7684;&#x4E09;&#x4E2A;&#x5750;&#x6807;&#x5411;&#x91CF;&#x8868;&#x793A;&#x3002;&#x8FD9;&#x6837;&#xFF0C;&#x8FD9;&#x4E2A;&#x5750;&#x6807;&#x7CFB;&#x5C31;&#x53EF;&#x4EE5;&#x7531;&#x4E09;&#x4E2A;&#x8868;&#x793A;&#x65B9;&#x5411;&#x7684;&#x5355;&#x4F4D;&#x5411;&#x91CF;&#x4EE5;&#x53CA;&#x7B2C;&#x56DB;&#x4E2A;&#x4F4D;&#x7F6E;&#x5411;&#x91CF;&#x6765;&#x8868;&#x793A;&#x3002; &#x4E3E;&#x4F8B;&#x8BF4;&#x660E;&#xFF1A;&#x5750;&#x6807;&#x7CFB;&#x4F4D;&#x4E8E;&#x53C2;&#x8003;&#x5750;&#x6807;&#x7CFB;&#x7684;3&#xFF0C;5&#xFF0C;7&#x7684;&#x4F4D;&#x7F6E;&#x3002;n&#x8F74;&#x4E0E;x&#x8F74;&#x5E73;&#x884C;&#xFF0C;o&#x8F74;&#x76F8;&#x5BF9;&#x4E8E;y&#x8F74;&#x89D2;&#x5EA6;45&#xB0;&#xFF0C;a&#x8F74;&#x76F8;&#x5BF9;&#x4E8E;z&#x8F74;&#x89D2;&#x5EA6;45 &#xB0;&#xFF09; &#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x65B9;&#x5411;&#x4E3A;&#x65CB;&#x8F6C;&#x8F74;&#xFF0C;&#x957F;&#x5EA6;&#x4E3A;&#x65CB;&#x8F6C;&#x7684;&#x89D2;&#x5EA6;&#x3002; &#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x4E0E;&#x77E9;&#x9635;&#x7684;&#x4E0D;&#x540C; &#x4EC5;&#x6709;&#x4E09;&#x4E2A;&#x91CF; &#x65E0;&#x7EA6;&#x675F; &#x66F4;&#x76F4;&#x89C2; &#x662F;&#x4E00;&#x4E2A;&#x4E1C;&#x897F;&#x7684;&#x4E0D;&#x540C;&#x8868;&#x8FBE;&#x65B9;&#x5F0F;&#x3002; &#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x65CB;&#x8F6C;&#x8F74;&#x4E3A;$n$&#xFF0C;&#x89D2;&#x5EA6;&#x4E3A;$\theta$&#x7684;&#x65CB;&#x8F6C;&#xFF0C;&#x5B83;&#x5BF9;&#x5E94;&#x7684;&#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x4E3A;$\theta n$&#x3002;&#x7531;&#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x5230;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x7684;&#x8FC7;&#x7A0B;&#x7531;&#x7F57;&#x5FB7;&#x91CC;&#x683C;&#x65AF;&#x516C;&#x5F0F;&#x8868;&#x660E;&#x3002;&#x5177;&#x4F53;&#x5982;&#x4E0B;&#xFF1A;&#x7B26;&#x53F7; $\hat{}$ &#x662F;&#x5411;&#x91CF;&#x5230;&#x53CD;&#x5BF9;&#x79F0;&#x7684;&#x8F6C;&#x6362;&#x7B26;&#x3002;&#x5B9A;&#x4E49;&#x89C1;&#x5916;&#x79EF;&#x8FD0;&#x7B97;&#x516C;&#x5F0F;&#x3002;&#x5373;&#x4E3A;&#xFF1A; &#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x8F6C;&#x5411;&#x91CF;&#xFF0C;&#x89D2;&#x5EA6;&#x4E3A;&#xFF1A;&#x8F74;&#x4E3A;&#xFF1A;$$Rn=n$$ &#x6B27;&#x62C9;&#x89D2;&#x5C06;&#x65CB;&#x8F6C;&#x5206;&#x89E3;&#x4E3A;&#x4E09;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x8F6C;&#x52A8;&#x3002; &#x8F74;&#x53EF;&#x4EE5;&#x662F;&#x5B9A;&#x8F74;&#x6216;&#x8005;&#x52A8;&#x8F74;&#xFF0C;&#x987A;&#x5E8F;&#x4EA6;&#x53EF;&#x4EE5;&#x4E0D;&#x540C;&#x3002; &#x5E38;&#x89C1;&#x7684;&#x6709;yaw-pitch-roll&#xFF0C;&#x504F;&#x822A;-&#x4FEF;&#x4EF0;-&#x6EDA;&#x8F6C;&#xFF0C;&#x4E1C;&#x5317;&#x5929;&#x3002; &#x4E07;&#x5411;&#x9501;&#x6B27;&#x62C9;&#x89D2;&#x7684;&#x5947;&#x5F02;&#x6027;&#x95EE;&#x9898;&#xFF0C;&#x5728;&#x7279;&#x5B9A;&#x503C;&#x65F6;&#xFF0C;&#x65CB;&#x8F6C;&#x81EA;&#x7531;&#x5EA6;&#x51CF;1&#x3002; &#x4E07;&#x5411;&#x9501;&#x7684;&#x60C5;&#x51B5;&#xFF1A;&#x5728;&#x65CB;&#x8F6C;&#x662F;&#x52A8;&#x6001;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5373;&#x7ED5;&#x65CB;&#x8F6C;&#x4E4B;&#x540E;&#x7684;&#x65CB;&#x8F6C;&#x8F74;&#x65CB;&#x8F6C;&#x7684;&#x3002;&#x5728;&#x4E09;&#x4E2A;&#x65CB;&#x8F6C;&#x6B21;&#x5E8F;&#x95F4;&#xFF0C;&#x53EA;&#x6709;&#x4E2D;&#x95F4;&#x7684;&#x90A3;&#x4E2A;&#x65CB;&#x8F6C;&#x6B21;&#x5E8F;&#xFF0C;&#x65CB;&#x8F6C;&#x89D2;&#x662F;$&#xB1;90&#xB0;$&#x65F6;&#xFF0C;&#x624D;&#x4F1A;&#x53D1;&#x751F;&#x4E07;&#x5411;&#x9501;&#x3002;&#x6B64;&#x65F6;&#x7B2C;&#x4E00;&#x4E2A;&#x65CB;&#x8F6C;&#x8F74;&#x548C;&#x7B2C;&#x4E09;&#x4E2A;&#x65CB;&#x8F6C;&#x8F74;&#x5904;&#x4E8E;&#x540C;&#x4E00;&#x4E2A;&#x5E73;&#x9762;&#xFF0C;&#x4E22;&#x5931;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x3002; &#x7531;&#x4E8E;&#x4E07;&#x5411;&#x9501;&#x7684;&#x5B58;&#x5728;&#xFF0C;&#x6B27;&#x62C9;&#x89D2;&#x4E0D;&#x9002;&#x5408;&#x63D2;&#x503C;&#x6216;&#x8FED;&#x4EE3; &#x2022; &#x591A;&#x7528;&#x4E8E;&#x4EBA;&#x673A;&#x4EA4;&#x4E92;&#x4E2D; &#x53EF;&#x4EE5;&#x8BC1;&#x660E;&#xFF1A;&#x4EC5;&#x7528;&#x4E09;&#x4E2A;&#x5B9E;&#x6570;&#x8868;&#x8FBE;&#x65CB;&#x8F6C;&#x65F6;&#xFF0C;&#x4E0D;&#x53EF;&#x907F;&#x514D;&#x5730;&#x5B58;&#x5728;&#x5947;&#x5F02;&#x6027;&#x95EE;&#x9898;&#x3002; &#x5982;&#x679C;&#x8FD8;&#x4E0D;&#x7406;&#x89E3;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x8FD9;&#x4E2A;&#x89C6;&#x9891;&#x3002; &#x56DB;&#x5143;&#x6570;&#x56DB;&#x5143;&#x6570;&#x65E2;&#x662F;&#x7D27;&#x51D1;&#x7684;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x5947;&#x5F02;&#x6027;&#x3002; &#x4E00;&#x4E2A;&#x56DB;&#x5143;&#x6570; q &#x62E5;&#x6709;&#x4E00;&#x4E2A;&#x5B9E;&#x90E8;&#x548C;&#x4E09;&#x4E2A;&#x865A;&#x90E8;&#x3002;&#x50CF;&#x8FD9;&#x6837;$q = q_0 + q_1i + q_2j + q_3k$&#x5176;&#x4E2D;$ i, j, k$ &#x4E3A;&#x56DB;&#x5143;&#x6570;&#x7684;&#x4E09;&#x4E2A;&#x865A;&#x90E8;&#x3002;&#x8FD9;&#x4E09;&#x4E2A;&#x865A;&#x90E8;&#x6EE1;&#x8DB3;&#x5173;&#x7CFB;&#x5F0F;&#xFF1A; &#x80FD;&#x7528;&#x5355;&#x4F4D;&#x56DB;&#x5143;&#x6570;&#x8868;&#x793A;&#x4E09;&#x7EF4;&#x7A7A;&#x95F4;&#x4E2D;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x65CB;&#x8F6C;&#x3002; &#x5047;&#x8BBE;&#x67D0;&#x4E2A;&#x65CB;&#x8F6C;&#x662F;&#x7ED5;&#x5355;&#x4F4D;&#x5411;&#x91CF;$ n = [n_x, n_y, n_z]^T$&#x8FDB;&#x884C;&#x4E86;&#x89D2;&#x5EA6;&#x4E3A; $\theta$ &#x7684;&#x65CB;&#x8F6C;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x65CB;&#x8F6C;&#x7684;&#x56DB;&#x5143;&#x6570;&#x5F62;&#x5F0F;&#x4E3A;$$q=[cos \frac\theta 2,n_xsin\frac \theta 2,n_y\frac \theta 2,n_z \frac \theta 2]^T$$ &#x4ECE;&#x56DB;&#x5143;&#x6570;&#x8BA1;&#x7B97;&#x5BF9;&#x5E94;&#x7684;&#x65CB;&#x8F6C;&#x8F74;&#x4E0E;&#x5939;&#x89D2;&#xFF1A; &#x5728;&#x56DB;&#x5143;&#x6570;&#x4E2D;&#xFF0C; &#x4EFB;&#x610F;&#x7684;&#x65CB;&#x8F6C;&#x90FD;&#x53EF;&#x4EE5;&#x7531;&#x4E24;&#x4E2A;&#x4E92;&#x4E3A;&#x76F8;&#x53CD;&#x6570;&#x7684;&#x56DB;&#x5143;&#x6570;&#x8868;&#x793A;&#x3002; &#x56DB;&#x5143;&#x6570;&#x7684;&#x8FD0;&#x7B97;&#x73B0;&#x6709;&#x4E24;&#x4E2A;&#x56DB;&#x5143;&#x6570;$q_a&#xFF0C;q_b$&#xFF0C;&#x4ED6;&#x4EEC;&#x7684;&#x5411;&#x91CF;&#x8868;&#x793A;&#x4E3A;$[s_a,v_a],[s_b,v_b]$&#xFF0C;&#x6216;&#x8005;&#x539F;&#x59CB;&#x56DB;&#x5143;&#x6570;&#x8868;&#x793A;&#x4E3A;$$q_a = s_a + x_ai + y_aj + z_ak, q_b = s_b + x_bi + y_bj + z_bk$$ &#x52A0;&#x51CF;&#x6CD5;&#x8BA1;&#x7B97;&#xFF1A;$$q_a \pm q_b=[s_a \pm s_b,\boldsymbol{v_a \pm v_b]}$$&#x5176;&#x4ED6;&#x8BA1;&#x7B97;&#xFF1A; &#x8BA1;&#x7B97;&#x65CB;&#x8F6C;&#x7528;&#x56DB;&#x5143;&#x6570;&#x8BA1;&#x7B97;&#x65CB;&#x8F6C;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E3A;&#x4E86;&#x5C06;&#x6700;&#x540E;&#x7684;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x7684;&#x5B9E;&#x90E8;&#x7F6E;&#x4E3A;0&#xFF0C;&#x9700;&#x8981;&#x4E58;&#x56DB;&#x5143;&#x6570;&#x7684;&#x9006;&#xFF0C;&#x5982;&#x679C;&#x56DB;&#x5143;&#x6570;&#x7684;&#x6A21;&#x503C;&#x4E3A;1&#xFF0C;&#x5219;&#x53EA;&#x9700;&#x8981;&#x4E58;&#x5171;&#x8F6D;&#x5373;&#x53EF;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x4F1A;&#x5BFC;&#x81F4;&#x65CB;&#x8F6C;&#x4E86;&#x4E24;&#x6B21;&#xFF0C;&#x4E8E;&#x662F;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x5148;&#x65CB;&#x8F6C;&#x4E00;&#x534A;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B21;&#x518D;&#x65CB;&#x8F6C;&#x4E00;&#x534A;&#x3002;$$\boldsymbol{p}=[0,x,y,z] \\boldsymbol{q}=[cos\frac \theta 2,\boldsymbol{n}\,sin \frac \theta 2] \\boldsymbol{p&#x2019;=qpq}^{-1}$$&#x7B2C;&#x4E00;&#x6B21;&#x662F;&#x4EE5;&#x5411;&#x91CF;&#x4E3A;&#x8F74;&#xFF0C;&#x65CB;&#x8F6C;$\theta /2$&#xFF0C;&#x7B2C;&#x4E8C;&#x6B21;&#x662F;&#x4EE5;&#x5411;&#x91CF;&#x7684;&#x8D1F;&#x65B9;&#x5411;&#x4E3A;&#x8F74;&#xFF0C;&#x518D;&#x65CB;&#x8F6C;$\theta /2$ &#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#x4E3A;&#x5565;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F; &#x56FE;&#x50CF;&#x989C;&#x8272;&#x7A7A;&#x95F4;RGB&#x7EA2;&#x7EFF;&#x84DD;&#x989C;&#x8272;&#x7A7A;&#x95F4;&#x3002; YUV&#x590D;&#x5408;&#x989C;&#x8272;&#x89C6;&#x9891;&#x6807;&#x51C6;&#xFF0C;Y&#x4E3A;&#x4EAE;&#x5EA6;&#xFF0C;UV&#x662F;&#x8272;&#x5EA6;&#x3002; HSB&#x4E3A;&#x8272;&#x5EA6;&#xFF0C;&#x9971;&#x548C;&#x5EA6;&#xFF0C;&#x4EAE;&#x5EA6;&#x7A7A;&#x95F4;&#x3002; &#x56FE;&#x50CF;&#x7684;&#x5B58;&#x50A8; &#x77E2;&#x91CF;&#x683C;&#x5F0F;&#xFF1A;&#x7528;&#x7EBF;&#x6BB5;&#x6216;&#x8005;&#x7EBF;&#x6BB5;&#x7684;&#x7EC4;&#x5408;&#x8868;&#x793A;&#x56FE;&#x50CF;&#xFF08;WMF&#xFF09; &#x5149;&#x6805;&#x683C;&#x5F0F;&#xFF1A;&#x7528;&#x8BB8;&#x591A;&#x50CF;&#x7D20;&#x70B9;&#x7684;&#x96C6;&#x5408;&#x8868;&#x793A;&#x56FE;&#x50CF;&#xFF08;BMP&#xFF0C;GIF&#xFF0C;JPEG&#xFF09; &#x56FE;&#x50CF;&#x7684;&#x8FB9;&#x7F18;&#x6982;&#x5FF5;&#xFF1A; &#x7A7A;&#x95F4;&#x66F2;&#x9762;&#x7684;&#x4E0D;&#x8FDE;&#x7EED;&#x70B9; &#x4E0D;&#x540C;&#x6750;&#x6599;&#x6216;&#x4E0D;&#x540C;&#x989C;&#x8272; &#x7269;&#x4F53;&#x4E0E;&#x80CC;&#x666F;&#x7684;&#x5206;&#x754C;&#x7EBF; &#x9634;&#x5F71;&#x5F15;&#x8D77;&#x7684;&#x8FB9;&#x7F18; &#x8FB9;&#x7F18;&#x70B9;&#xFF1A;&#x4EAE;&#x5EA6;&#x663E;&#x8457;&#x53D8;&#x5316;&#x7684;&#x70B9;&#x8FB9;&#x7F18;&#x6BB5;&#xFF1A;&#x8FB9;&#x7F18;&#x70B9;&#x5750;&#x6807;&#x548C;&#x65B9;&#x5411;&#x7684;&#x603B;&#x548C;&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x5668;&#xFF1A;&#x62BD;&#x53D6;&#x8FB9;&#x7F18;&#x96C6;&#x5408;&#x7684;&#x7B97;&#x6CD5;&#x8FB9;&#x7F18;&#x8DDF;&#x8E2A;&#xFF1A;&#x786E;&#x5B9A;&#x8F6E;&#x5ED3;&#x7684;&#x641C;&#x7D22;&#x8FC7;&#x7A0B; &#x5728;&#x7070;&#x5EA6;&#x56FE;&#x4E0B;&#xFF1A;&#x662F;&#x4E00;&#x9636;&#x5DEE;&#x5206;&#x7684;&#x6781;&#x5927;&#x503C;&#x7684;&#x70B9;&#xFF0C;&#x4E8C;&#x9636;&#x5DEE;&#x5206;&#x8FC7;&#x96F6;&#x70B9;&#x7684;&#x70B9;&#x3002; &#x6570;&#x5B57;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x57FA;&#x672C;&#x6B65;&#x9AA4; &#x56FE;&#x50CF;&#x91C7;&#x96C6; &#x56FE;&#x50CF;&#x589E;&#x5F3A; &#x56FE;&#x50CF;&#x590D;&#x539F; &#x5F62;&#x6001;&#x5B66;&#x5904;&#x7406; &#x5206;&#x5272; &#x8868;&#x793A;&amp;&#x63CF;&#x8FF0; &#x5BF9;&#x8C61;&#x8BC6;&#x522B; &#x53EF;&#x80FD;&#x6709;&#x7684;&#xFF1A; &#x5F69;&#x8272;&#x56FE;&#x50CF;&#x5904;&#x7406; &#x56FE;&#x50CF;&#x538B;&#x7F29; &#x6982;&#x8FF0;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x9884;&#x5904;&#x7406;&#xFF1F; &#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x83B7;&#x53D6;&#x56FE;&#x50CF;&#x662F;&#x901A;&#x8FC7;&#x6210;&#x50CF;&#x7CFB;&#x7EDF;&#xFF08;&#x5149;&#x5B66;&#x955C;&#x5934;+CCD&#xFF09;&#x5F97;&#x5230;&#xFF1B; &#x6210;&#x50CF;&#x7CFB;&#x7EDF;&#x672C;&#x8EAB;&#x7535;&#x5B50;&#x5E72;&#x6270;&#x548C;&#x5916;&#x754C;&#x73AF;&#x5883;&#x4EA7;&#x751F;&#x7684;&#x968F;&#x673A;&#x5E72;&#x6270;&#xFF0C;&#x4F7F;&#x5F97;&#x56FE;&#x50CF;&#x542B;&#x6709;&#x566A;&#x58F0;&#xFF1B; &#x6210;&#x50CF;&#x7CFB;&#x7EDF;&#x6240;&#x5904;&#x7684;&#x7167;&#x660E;&#x6216;&#x5176;&#x4ED6;&#x73AF;&#x5883;&#xFF0C;&#x4F7F;&#x5F97;&#x56FE;&#x50CF;&#x7684;&#x7070;&#x5EA6;&#x5206;&#x8FA8;&#x7387;&#x4E0D;&#x9AD8;&#xFF0C;&#x751A;&#x81F3;&#x5F88;&#x96BE;&#x533A;&#x5206;&#x56FE;&#x50CF;&#x4E2D;&#x7684;&#x7269;&#x4F53;&#x3002; &#x5FC5;&#x987B;&#x5728;&#x89C6;&#x89C9;&#x7684;&#x521D;&#x7EA7;&#x9636;&#x6BB5;&#x5BF9;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x7070;&#x5EA6;&#x4FEE;&#x6B63;&#x3001;&#x566A;&#x58F0;&#x8FC7;&#x6EE4;&#x7B49;&#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x3002; &#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x7684;&#x529F;&#x80FD;&#x662F;&#x4EC0;&#x4E48;&#xFF1F; &#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x5E76;&#x4E0D;&#x8003;&#x8651;&#x56FE;&#x50CF;&#x964D;&#x8D28;&#x539F;&#x56E0;&#xFF0C;&#x53EA;&#x5C06;&#x56FE;&#x50CF;&#x4E2D;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x7279;&#x5F81;&#x6709;&#x9009;&#x62E9;&#x7684;&#x7A81;&#x51FA;&#xFF0C;&#x8870;&#x51CF;&#x5176;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x7279;&#x5F81;&#x3002; &#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x540E;&#x7684;&#x8F93;&#x51FA;&#x56FE;&#x50CF;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x53BB;&#x903C;&#x8FD1;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#xFF0C;&#x8FD9;&#x79CD;&#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x65B9;&#x6CD5;&#x79F0;&#x4E3A;&#x56FE;&#x50CF;&#x589E;&#x5F3A;&#x3002; &#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x6709;&#x54EA;&#x51E0;&#x79CD;&#xFF1F; &#x7A7A;&#x95F4;&#x57DF;&#x6CD5;&#x548C;&#x9891;&#x7387;&#x57DF;&#x6CD5; &#x7A7A;&#x95F4;&#x57DF;&#x6CD5;&#x662F;&#x76F4;&#x63A5;&#x5728;&#x7A7A;&#x95F4;&#x57DF;&#x5BF9;&#x56FE;&#x50CF;&#x50CF;&#x7D20;&#x8FD0;&#x7B97;&#x5904;&#x7406;&#xFF1B; &#x9891;&#x7387;&#x57DF;&#x6CD5;&#x662F;&#x5148;&#x5BF9;&#x56FE;&#x50CF;&#x505A;&#x67D0;&#x79CD;&#x53D8;&#x6362;&#xFF08;DFT&#x3001;DCT&#x3001;DWT&#x3001;K-L&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x53D8;&#x6362;&#x57DF;&#x5BF9;&#x56FE;&#x50CF;&#x7684;&#x53D8;&#x6362;&#x503C;&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x8BA1;&#x7B97;&#x540E;&#x7684;&#x56FE;&#x50CF;&#x9006;&#x53D8;&#x6362;&#x5230;&#x7A7A;&#x95F4;&#x57DF;&#x3002; &#x5168;&#x5C40;&#x8FD0;&#x7B97;&#x548C;&#x5C40;&#x90E8;&#x8FD0;&#x7B97; &#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x548C;&#x5F69;&#x8272;&#x56FE;&#x50CF; &#x76F4;&#x65B9;&#x56FE;&#x4FEE;&#x6B63;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x6982;&#x5FF5;&#x5982;&#x679C;&#x5C06;&#x56FE;&#x50CF;&#x4E2D;&#x50CF;&#x7D20;&#x4EAE;&#x5EA6;&#xFF08;&#x7070;&#x5EA6;&#x7EA7;&#x522B;&#xFF09;&#x770B;&#x6210;&#x662F;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x53D8;&#x91CF;&#xFF0C; &#x5219;&#x5176;&#x5206;&#x5E03;&#x60C5;&#x51B5;&#x5C31;&#x53CD;&#x6620;&#x4E86;&#x56FE;&#x50CF;&#x7684;&#x7EDF;&#x8BA1;&#x7279;&#x6027;&#xFF0C;&#x8FD9;&#x53EF;&#x7528;Probability Density Function (PDF)&#x6765;&#x523B;&#x753B;&#x548C;&#x63CF;&#x8FF0;&#xFF0C;&#x8868;&#x73B0;&#x4E3A;&#x7070;&#x5EA6;&#x76F4;&#x65B9;&#x56FE;&#xFF08;Histogram&#xFF09;&#x3002; &#x7070;&#x5EA6;&#x76F4;&#x65B9;&#x56FE;&#x662F;&#x7070;&#x5EA6;&#x7EA7;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x8868;&#x793A;&#x56FE;&#x50CF;&#x4E2D;&#x5177;&#x6709;&#x67D0;&#x79CD;&#x7070;&#x5EA6;&#x7EA7;&#x7684;&#x50CF;&#x7D20;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x53CD;&#x6620;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6BCF;&#x79CD;&#x7070;&#x5EA6;&#x51FA;&#x73B0;&#x7684;&#x9891;&#x7387;&#xFF0C;&#x5B83;&#x662F;&#x56FE;&#x50CF;&#x6700;&#x57FA;&#x672C;&#x7684;&#x7EDF;&#x8BA1;&#x7279;&#x5F81;&#x3002; &#x76F4;&#x65B9;&#x56FE;&#x4FEE;&#x6B63;&#x95EE;&#x9898;&#xFF1A;&#x56FE;&#x50CF;&#x7684;&#x7070;&#x5EA6;&#x503C;&#x975E;&#x5747;&#x5300;&#x5206;&#x5E03;&#xFF0C;&#x5176;&#x4E2D;&#x6709;&#x5F88;&#x591A;&#x56FE;&#x50CF;&#x7684;&#x7070;&#x5EA6;&#x503C;&#x96C6;&#x4E2D;&#x5728;&#x4E00;&#x4E2A;&#x5C0F;&#x7684;&#x533A;&#x95F4;&#x5185;&#xFF0C;&#x5BFC;&#x81F4;&#x56FE;&#x50CF;&#x7684;&#x5BF9;&#x6BD4;&#x5EA6;&#x964D;&#x4F4E;&#x3002; &#x89E3;&#x51B3;&#xFF1A;&#x76F4;&#x65B9;&#x56FE;&#x5747;&#x8861;&#x5316;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x91CD;&#x65B0;&#x5747;&#x5300;&#x5206;&#x5E03;&#x5404;&#x4E2A;&#x7070;&#x5EA6;&#x503C;&#x6765;&#x589E;&#x5F3A;&#x56FE;&#x50CF;&#x7684;&#x5BF9;&#x6BD4;&#x5EA6;&#x3002;&#x7ECF;&#x8FC7;&#x76F4;&#x65B9;&#x56FE;&#x5747;&#x8861;&#x5316;&#x540E;&#x7684;&#x56FE;&#x50CF;&#x5BF9;&#x505A;&#x4E8C;&#x503C;&#x5316;&#x5904;&#x7406;&#x4E2D;&#x7684;&#x9608;&#x503C;&#x9009;&#x62E9;&#x5F88;&#x6709;&#x5E2E;&#x52A9;&#x3002; &#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x5C3A;&#x5EA6;&#x53D8;&#x6362;: &#x628A;&#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x533A;&#x95F4;&#x5728;$[a,b]$&#x5185;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x503C;&#x6620;&#x5C04;&#x5230;$[z_1,z_k]$&#x7684;&#x533A;&#x95F4;&#x5185;&#x3002; &#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x7531;&#x4E8E;&#x5149;&#x7167;&#x539F;&#x56E0;&#xFF0C;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x533A;&#x95F4;$[a,b]$&#x5E38;&#x5E38;&#x662F;$[z_1,z_k]$&#x7684;&#x5B50;&#x7A7A;&#x95F4;&#x3002;&#x5982;&#x679C;&#x56FE;&#x50CF;&#x7684;&#x5927;&#x591A;&#x6570;&#x50CF;&#x7D20;&#x7070;&#x5EA6;&#x503C;&#x5206;&#x5E03;&#x5728;&#x533A;&#x95F4;[a,b],&#x4E00;&#x5C0F;&#x90E8;&#x5206;&#x5206;&#x5E03;&#x5728;&#x6B64;&#x533A;&#x95F4;&#x5916;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4EE5;&#x4E0B;&#x6620;&#x5C04;&#x51FD;&#x6570;&#xFF1A; $$z&#x2019;=\left{\begin{aligned}&amp; \frac {z_k-z_1}{b-a}(z-a)+z_1 \quad &amp; a \le z \le b\&amp; z_1 \quad &amp;z &lt; a \&amp; z_k \quad &amp;z&gt;b\end{aligned}\right.$$ &#x4F7F;&#x66DD;&#x5149;&#x4E0D;&#x5145;&#x5206;&#x7684;&#x56FE;&#x50CF;&#x9ED1;&#x7684;&#x66F4;&#x9ED1;&#x767D;&#x7684;&#x66F4;&#x767D;&#x3002; &#x76F4;&#x65B9;&#x56FE;&#x5747;&#x8861;&#x5316;&#x7B97;&#x6CD5; &#x56FE;&#x50CF;&#x7EBF;&#x6027;&#x8FD0;&#x7B97;LSI&#x7CFB;&#x7EDF;LSI&#xFF1A;&#x7EBF;&#x6027;&#x79FB;&#x4E0D;&#x53D8;&#x7CFB;&#x7EDF;&#x3002;&#x4E0E;LTI&#xFF08;&#x7EBF;&#x6027;&#x65F6;&#x4E0D;&#x53D8;&#x7CFB;&#x7EDF;&#xFF09;&#x7C7B;&#x4F3C;&#x3002; &#x6027;&#x8D28;&#xFF1A; &#x7EBF;&#x6027;&#xFF1A;&#x6EE1;&#x8DB3;&#x53E0;&#x52A0;&#x539F;&#x7406;&#xFF0C;&#x5373;&#x6709;&#xFF08;1&#xFF09;&#x53EF;&#x52A0;&#x6027;&#xFF0C;&#xFF08;2&#xFF09;&#x6BD4;&#x4F8B;&#x6027;&#x3002; &#x79FB;&#x4E0D;&#x53D8;&#xFF1A;&#x82E5;&#x7CFB;&#x7EDF;&#x54CD;&#x5E94;&#x4E0E;&#x6FC0;&#x52B1;&#x52A0;&#x4E8E;&#x7CFB;&#x7EDF;&#x7684;&#x65F6;&#x523B;&#x65E0;&#x5173;&#xFF0C;&#x5219;&#x4E3A;&#x79FB;&#x4E0D;&#x53D8;&#x7CFB;&#x7EDF;&#x3002;&#x5373;&#x82E5;&#x8F93;&#x5165;$x(n)$&#x4EA7;&#x751F;&#x8F93;&#x51FA;$y(n)$&#xFF0C;&#x5219;&#x8F93;&#x5165;$x(n-m)$&#x4EA7;&#x751F;&#x8F93;&#x51FA;$y(n-m)$&#x3002;&#x8F93;&#x5165;&#x79FB;&#x52A8;&#x591A;&#x5C11;&#x4F4D;&#xFF0C;&#x8F93;&#x51FA;&#x4E5F;&#x79FB;&#x52A8;&#x76F8;&#x540C;&#x7684;&#x4F4D;&#x6570;&#x3002; &#x4E8C;&#x7EF4;&#x8FDE;&#x7EED;&#x5377;&#x79EF; &#x56FE;&#x50CF;&#x79BB;&#x6563;&#x7CFB;&#x7EDF;&#x7684;&#x5377;&#x79EF; Mask Format &#x7EBF;&#x6027;&#x6EE4;&#x6CE2;&#x5668;&#x566A;&#x58F0; &#x6912;&#x76D0;&#x566A;&#x58F0;&#xFF1A;&#x542B;&#x6709;&#x968F;&#x673A;&#x51FA;&#x73B0;&#x7684;&#x9ED1;&#x767D;&#x4EAE;&#x5EA6;&#x503C;&#x3002; &#x9AD8;&#x65AF;&#x566A;&#x58F0;&#xFF1A;&#x542B;&#x6709;&#x4EAE;&#x5EA6;&#x670D;&#x4ECE;&#x9AD8;&#x65AF;&#x6216;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x7684;&#x566A;&#x58F0;&#x3002;&#x9AD8;&#x65AF;&#x566A;&#x58F0;&#x662F;&#x5F88;&#x591A;&#x4F20;&#x611F;&#x5668;&#x566A;&#x58F0;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x5982;&#x6444;&#x50CF;&#x673A;&#x7684;&#x7535;&#x5B50;&#x5E72;&#x6270;&#x566A;&#x58F0;&#x3002; &#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#x9AD8;&#x65AF;&#x566A;&#x58F0;&#xFF0C;&#x767D;&#x566A;&#x58F0;&#xFF0C;&#x9AD8;&#x65AF;&#x767D;&#x566A;&#x58F0;&#x7684;&#x533A;&#x522B;&#x662F;&#x5565;&#xFF1F; &#x5747;&#x503C;&#x6EE4;&#x6CE2;&#x5668; &#x6700;&#x7B80;&#x5355;&#x5747;&#x503C;&#x6EE4;&#x6CE2;&#x5668;&#x662F;&#x5C40;&#x90E8;&#x5747;&#x503C;&#x8FD0;&#x7B97;&#xFF0C;&#x5373;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x53EA;&#x7528;&#x5176;&#x5C40;&#x90E8;&#x90BB;&#x57DF;&#x5185;&#x6240;&#x6709;&#x503C;&#x7684;&#x5E73;&#x5747;&#x503C;&#x6765;&#x7F6E;&#x6362;&#xFF1A;$$h[i,j]=\frac 1 M \sum_{(k,l)\in N}f[k,l] $$ &#x4E5F;&#x53EF;&#x4EE5;&#x52A0;&#x6743;&#xFF0C;&#x4E00;&#x79CD;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5CF0;&#x503C;&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x6C34;&#x5E73;&#x548C;&#x5782;&#x76F4;&#x65B9;&#x5411;&#x4E0A;&#x5BF9;&#x79F0;&#x7684;&#x5178;&#x578B;&#x6743;&#x503C;&#x6A21;&#x677F;&#xFF1A; &#x9AD8;&#x65AF;&#x5E73;&#x6ED1;&#x6EE4;&#x6CE2;&#x5668;&#x6982;&#x8FF0;&#x9AD8;&#x65AF;&#x5E73;&#x6ED1;&#x6EE4;&#x6CE2;&#x5668;&#x662F;&#x4E00;&#x7C7B;&#x6839;&#x636E;&#x9AD8;&#x65AF;&#x51FD;&#x6570;&#x7684;&#x5F62;&#x72B6;&#x6765;&#x9009;&#x62E9;&#x6743;&#x503C;&#x7684;&#x7EBF;&#x6027;&#x6EE4;&#x6CE2;&#x5668;&#x3002;&#x9AD8;&#x65AF;&#x5E73;&#x6ED1;&#x6EE4;&#x6CE2;&#x5668;&#x5BF9;&#x53BB;&#x9664;&#x670D;&#x4ECE;&#x6B63;&#x6001;&#x5206;&#x5E03;&#x7684;&#x566A;&#x58F0;&#x662F;&#x5F88;&#x6709;&#x6548;&#x7684;&#x3002; &#x8BA1;&#x7B97;&#x4E8C;&#x7EF4;&#x96F6;&#x5747;&#x503C;&#x79BB;&#x6563;&#x9AD8;&#x65AF;&#x5E73;&#x6ED1;&#x6EE4;&#x6CE2;&#x5668;&#x51FD;&#x6570;&#x8868;&#x8FBE;&#x5F0F;&#x4E3A;&#xFF1A;&#x9AD8;&#x65AF;&#x6EE4;&#x6CE2;&#x5668;&#x7684;&#x601D;&#x60F3;&#xFF1A;&#x968F;&#x7740;&#x8DDD;&#x79BB;&#x7684;&#x589E;&#x5927;&#xFF0C;&#x5BF9;&#x4E2D;&#x5FC3;&#x50CF;&#x7D20;&#x7684;&#x5F71;&#x54CD;&#x51CF;&#x5C0F;&#x3002; &#x6027;&#x8D28;&#x9AD8;&#x65AF;&#x51FD;&#x6570;&#x6709;5&#x4E2A;&#x91CD;&#x8981;&#x6027;&#x8D28;&#xFF0C;&#x5176;&#x6027;&#x8D28;&#x51B3;&#x5B9A;&#x4E86;&#x5B83;&#x5728;&#x7A7A;&#x95F4;&#x57DF;&#x548C;&#x9891;&#x7387;&#x57DF;&#x90FD;&#x662F;&#x5F88;&#x597D;&#x7684;&#x4F4E;&#x901A;&#x6EE4;&#x6CE2;&#x5668;&#x3002; &#x4E8C;&#x7EF4;&#x9AD8;&#x65AF;&#x51FD;&#x6570;&#x5177;&#x6709;&#x65CB;&#x8F6C;&#x5BF9;&#x79F0;&#x6027;&#xFF1A;&#x6EE4;&#x6CE2;&#x5668;&#x5728;&#x5404;&#x4E2A;&#x65B9;&#x5411;&#x5E73;&#x6ED1;&#x7A0B;&#x5EA6;&#x4E00;&#x81F4;&#x3002;&#x65CB;&#x8F6C;&#x5BF9;&#x79F0;&#x6027;&#x610F;&#x5473;&#x7740;&#x9AD8;&#x65AF;&#x5E73;&#x6ED1;&#x6EE4;&#x6CE2;&#x5668;&#x5728;&#x540E;&#x7EED;&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x4E2D;&#x4E0D;&#x4F1A;&#x504F;&#x5411;&#x4EFB;&#x4E00;&#x65B9;&#x5411;&#x3002; &#x9AD8;&#x65AF;&#x662F;&#x5355;&#x503C;&#x51FD;&#x6570;&#xFF1A;&#x9AD8;&#x65AF;&#x6EE4;&#x6CE2;&#x5668;&#x7528;&#x50CF;&#x7D20;&#x90BB;&#x57DF;&#x7684;&#x52A0;&#x6743;&#x503C;&#x6765;&#x4EE3;&#x66FF;&#x8BE5;&#x70B9;&#x7684;&#x50CF;&#x7D20;&#x503C;&#xFF0C;&#x6BCF;&#x4E00;&#x90BB;&#x57DF;&#x50CF;&#x7D20;&#x70B9;&#x6743;&#x503C;&#x662F;&#x968F;&#x8BE5;&#x70B9;&#x4E0E;&#x4E2D;&#x5FC3;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x5355;&#x8C03;&#x589E;&#x51CF;&#x7684;&#x3002;&#x5E73;&#x6ED1;&#x8FD0;&#x7B97;&#x5BF9;&#x79BB;&#x7B97;&#x5B50;&#x4E2D;&#x5FC3;&#x8D8A;&#x8FDC;&#x7684;&#x70B9;&#xFF0C;&#x4F5C;&#x7528;&#x8D8A;&#x5C0F;&#x3002; &#x9AD8;&#x65AF;&#x51FD;&#x6570;&#x7684;&#x5085;&#x7ACB;&#x53F6;&#x53D8;&#x6362;&#x9891;&#x8C31;&#x662F;&#x5355;&#x74E3;&#x7684;&#xFF1A;&#x56FE;&#x50CF;&#x5E38;&#x88AB;&#x4E0D;&#x5E0C;&#x671B;&#x7684;&#x9AD8;&#x9891;&#x4FE1;&#x53F7;&#x6240;&#x6C61;&#x67D3;&#xFF0C;&#x5E73;&#x6ED1;&#x56FE;&#x50CF;&#x4E0D;&#x4F1A;&#x88AB;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x9AD8;&#x9891;&#x566A;&#x58F0;&#x6C61;&#x67D3;&#xFF0C;&#x53EF;&#x4EE5;&#x4FDD;&#x7559;&#x5927;&#x90E8;&#x5206;&#x4FE1;&#x53F7;&#x3002; &#x9AD8;&#x65AF;&#x6EE4;&#x6CE2;&#x5668;&#x5BBD;&#x5EA6;&#x662F;&#x7531;&#x53C2;&#x6570;$\sigma$&#x8868;&#x793A;&#x7684;&#xFF1A;$\sigma$&#x8D8A;&#x5927;&#xFF0C;&#x9AD8;&#x65AF;&#x6EE4;&#x6CE2;&#x5668;&#x7684;&#x65F6;&#x57DF;&#x8D8A;&#x5BBD;&#xFF0C;&#x9891;&#x5E26;&#x8D8A;&#x7A84;&#xFF0C;&#x5E73;&#x6ED1;&#x7A0B;&#x5EA6;&#x8D8A;&#x597D;&#x3002;&#x53EF;&#x4EE5;&#x8C03;&#x8282;$\sigma$ &#xFF0C;&#x4F7F;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x5728;&#x8FC7;&#x5206;&#x6A21;&#x7CCA;&#xFF08;&#x8FC7;&#x5E73;&#x6ED1;&#xFF09;&#x4E0E;&#x5E73;&#x6ED1;&#x56FE;&#x50CF;&#x4E2D;&#x7531;&#x4E8E;&#x566A;&#x58F0;&#x548C;&#x7EC6;&#x7EB9;&#x7406;&#x6240;&#x5F15;&#x8D77;&#x7684;&#x8FC7;&#x591A;&#x4E0D;&#x5E0C;&#x671B;&#x7A81;&#x53D8;&#x91CF;&#xFF08;&#x6B20;&#x5E73;&#x6ED1;&#xFF09;&#x4E4B;&#x95F4;&#x53D6;&#x6298;&#x4E2D;&#x3002; &#x9AD8;&#x65AF;&#x51FD;&#x6570;&#x6709;&#x53EF;&#x5206;&#x79BB;&#x6027;&#xFF1A;&#x5B9E;&#x73B0;&#x9AD8;&#x65AF;&#x6EE4;&#x6CE2;&#x65F6;&#x53EF;&#x5206;&#x6B65;&#x8FDB;&#x884C;&#x3002; &#x975E;&#x7EBF;&#x6027;&#x6EE4;&#x6CE2;&#x5668;&#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#x5668;&#x6982;&#x8FF0;&#x5747;&#x503C;&#x6EE4;&#x6CE2;&#x548C;&#x9AD8;&#x65AF;&#x6EE4;&#x6CE2;&#x8FD0;&#x7B97;&#x4E3B;&#x8981;&#x95EE;&#x9898;&#x662F;&#x6709;&#x53EF;&#x80FD;&#x6A21;&#x7CCA;&#x56FE;&#x50CF;&#x4E2D;&#x5C16;&#x9510;&#x4E0D;&#x8FDE;&#x7EED;&#x7684;&#x90E8;&#x5206;&#x3002; &#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#x5668;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x4F7F;&#x7528;&#x50CF;&#x7D20;&#x70B9;&#x90BB;&#x57DF;&#x7070;&#x5EA6;&#x503C;&#x7684;&#x4E2D;&#x503C;&#x6765;&#x4EE3;&#x66FF;&#x8BE5;&#x50CF;&#x7D20;&#x70B9;&#x7684;&#x7070;&#x5EA6;&#x503C;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x53BB;&#x9664;&#x8109;&#x51B2;&#x566A;&#x58F0;&#x3001;&#x6912;&#x76D0;&#x566A;&#x58F0;&#x540C;&#x65F6;&#x4FDD;&#x7559;&#x56FE;&#x50CF;&#x8FB9;&#x7F18;&#x7EC6;&#x8282;&#x3002; &#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#x4E0D;&#x4F9D;&#x8D56;&#x4E8E;&#x90BB;&#x57DF;&#x5185;&#x4E0E;&#x5178;&#x578B;&#x503C;&#x5DEE;&#x522B;&#x5F88;&#x5927;&#x7684;&#x503C;&#xFF0C;&#x5904;&#x7406;&#x8FC7;&#x7A0B;&#x4E0D;&#x8FDB;&#x884C;&#x52A0;&#x6743;&#x8FD0;&#x7B97;&#x3002; &#x8BA1;&#x7B97; &#x6309;&#x4EAE;&#x5EA6;&#x503C;&#x5927;&#x5C0F;&#x6392;&#x5217;&#x50CF;&#x7D20;&#x70B9; &#x9009;&#x62E9;&#x6392;&#x5E8F;&#x50CF;&#x7D20;&#x96C6;&#x7684;&#x4E2D;&#x95F4;&#x503C;&#x4F5C;&#x4E3A;&#x70B9;[i&#xFF0C;j]&#x7684;&#x65B0;&#x503C; &#x4E00;&#x822C;&#x91C7;&#x7528;&#x5947;&#x6570;&#x70B9;&#x7684;&#x90BB;&#x57DF;&#x8BA1;&#x7B97;&#x4E2D;&#x503C;&#xFF0C;&#x5982;&#x679C;&#x50CF;&#x7D20;&#x70B9;&#x6570;&#x4E3A;&#x5076;&#x6570;&#xFF0C;&#x5219;&#x4E2D;&#x503C;&#x5C31;&#x53D6;&#x6392;&#x5E8F;&#x50CF;&#x7D20;&#x4E2D;&#x95F4;&#x4E24;&#x70B9;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002; &#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#x5728;&#x4E00;&#x5B9A;&#x6761;&#x4EF6;&#x4E0B;&#x53EF;&#x4EE5;&#x514B;&#x670D;&#x7EBF;&#x6027;&#x6EE4;&#x6CE2;&#x5668;&#x6240;&#x9020;&#x6210;&#x7684;&#x56FE;&#x50CF;&#x7EC6;&#x8282;&#x6A21;&#x7CCA;&#xFF0C;&#x800C;&#x5BF9;&#x6EE4;&#x9664;&#x8109;&#x51B2;&#x5E72;&#x6270;&#x5F88;&#x6709;&#x6548;&#x3002; &#x8FB9;&#x7F18;&#x4FDD;&#x6301;&#x6EE4;&#x6CE2;&#x5668;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;&#x8FB9;&#x7F18;&#x4FDD;&#x6301;&#x6EE4;&#x6CE2;&#x5668; &#x5747;&#x503C;&#x6EE4;&#x6CE2;&#xFF1A;&#x5E73;&#x6ED1;&#x56FE;&#x50CF;&#x5916;&#x8FD8;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x56FE;&#x50CF;&#x8FB9;&#x7F18;&#x6A21;&#x7CCA;&#xFF1B; &#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#xFF1A;&#x53BB;&#x9664;&#x8109;&#x51B2;&#x566A;&#x58F0;&#x7684;&#x540C;&#x65F6;&#x53EF;&#x80FD;&#x5C06;&#x56FE;&#x50CF;&#x4E2D;&#x7684;&#x7EBF;&#x6761;&#x7EC6;&#x8282;&#x6EE4;&#x9664;&#x3002; &#x8FB9;&#x7F18;&#x4FDD;&#x6301;&#x6EE4;&#x6CE2;&#x5668;&#x662F;&#x5728;&#x7EFC;&#x5408;&#x8003;&#x8651;&#x4E86;&#x5747;&#x503C;&#x6EE4;&#x6CE2;&#x5668;&#x548C;&#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#x5668;&#x7684;&#x4F18;&#x7F3A;&#x70B9;&#x540E;&#x53D1;&#x5C55;&#x8D77;&#x6765;&#x7684;&#xFF0C;&#x5B83;&#x7684;&#x7279;&#x70B9;&#x662F;&#xFF1A;&#x6EE4;&#x6CE2;&#x5668;&#x5728;&#x9664;&#x566A;&#x58F0;&#x8109;&#x51B2;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x53C8;&#x4E0D;&#x81F3;&#x4E8E;&#x4F7F;&#x56FE;&#x50CF;&#x8FB9;&#x7F18;&#x5341;&#x5206;&#x6A21;&#x7CCA;&#x3002; &#x8BA1;&#x7B97; &#x5BF9;&#x7070;&#x5EA6;&#x56FE;&#x8C61;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;[i&#xFF0C;j]&#x53D6;&#x9002;&#x5F53;&#x5927;&#x5C0F;&#x7684;&#x4E00;&#x4E2A;&#x90BB;&#x57DF;&#xFF08;3&#xD7;3&#x90BB;&#x57DF;&#xFF09; &#x5206;&#x522B;&#x8BA1;&#x7B97;[i&#xFF0C;j]&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x5B50;&#x90BB;&#x57DF;&#x3001;&#x5DE6;&#x4E0B;&#x89D2;&#x5B50;&#x90BB;&#x57DF;&#x3001;&#x53F3;&#x4E0A;&#x89D2;&#x5B50;&#x90BB;&#x57DF;&#x3001;&#x53F3;&#x4E0B;&#x89D2;&#x5B50;&#x90BB;&#x57DF;&#x7684;&#x7070;&#x5EA6;&#x5206;&#x5E03;&#x5747;&#x5300;&#x5EA6;V &#x7136;&#x540E;&#x53D6;&#x6700;&#x5C0F;&#x5747;&#x5300;&#x5EA6;&#x5BF9;&#x5E94;&#x533A;&#x57DF;&#x7684;&#x5747;&#x503C;&#x4F5C;&#x4E3A;&#x8BE5;&#x50CF;&#x7D20;&#x70B9;&#x7684;&#x65B0;&#x7070;&#x5EA6;&#x503C;&#x3002;$$V=\sum f^2[i,j]-(\sum f[i,j])^2/N$$&#x6216;&#x8005;$$V=\sum (f[i,j]-\bar f[i,j])^2$$ &#x4E3E;&#x4F8B;&#x4F8B;&#xFF1A;&#x8BA1;&#x7B97;&#x4E00;&#x4E2A;&#x90BB;&#x57DF;&#x7684;&#x5747;&#x5300;&#x5EA6;&#x5206;&#x5E03;&#x7531;&#x8BA1;&#x7B97;&#x53EF;&#x77E5;&#xFF0C;&#x5206;&#x5E03;&#x8D8A;&#x5747;&#x5300;&#xFF0C;V&#x503C;&#x8D8A;&#x5C0F;&#x3002; &#x8FB9;&#x7F18;&#x4E0E;&#x8F6E;&#x5ED3;&#x5B9A;&#x4E49; &#x8FB9;&#x7F18;&#x662F;&#x6307;&#x56FE;&#x50CF;&#x5C40;&#x90E8;&#x4EAE;&#x5EA6;&#x53D8;&#x5316;&#x6700;&#x663E;&#x8457;&#x7684;&#x90E8;&#x5206; &#x8FB9;&#x7F18;&#x7684;&#x8FDE;&#x63A5;&#x6784;&#x6210;&#x8F6E;&#x5ED3;&#x3002; &#x8F6E;&#x5ED3;&#x662F;&#x7269;&#x4F53;&#x5728;&#x573A;&#x666F;&#x4E2D;&#x7684;&#x5B8C;&#x6574;&#x8FB9;&#x754C;&#x3002; &#x56FE;&#x50CF;&#x7684;&#x4EAE;&#x5EA6;&#x53D8;&#x5316; &#x9636;&#x8DC3;&#x4E0D;&#x8FDE;&#x7EED;&#xFF1A;&#x56FE;&#x50CF;&#x4EAE;&#x5EA6;&#x5728;&#x4E0D;&#x8FDE;&#x7EED;&#x5904;&#x4E24;&#x8FB9;&#x7684;&#x50CF;&#x7D20;&#x7070;&#x5EA6;&#x503C;&#x6709;&#x7740;&#x663E;&#x8457;&#x7684;&#x5DEE;&#x5F02;&#x3002; &#x7EBF;&#x6761;&#x4E0D;&#x8FDE;&#x7EED;&#xFF1A;&#x56FE;&#x50CF;&#x4EAE;&#x5EA6;&#x7A81;&#x7136;&#x4ECE;&#x4E00;&#x4E2A;&#x503C;&#x53D8;&#x5316;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x503C;&#xFF0C;&#x4FDD;&#x6301;&#x4E00;&#x4E2A;&#x8F83;&#x5C0F;&#x7684;&#x884C;&#x7A0B;&#x540E;&#x53C8;&#x8FD4;&#x56DE;&#x5230;&#x539F;&#x6765;&#x7684;&#x503C;&#x3002; &#x4EE5;&#x4E0A;&#x662F;&#x7406;&#x60F3;&#x72B6;&#x6001;&#xFF0C;&#x5B9E;&#x9645;&#x4E2D;&#x7531;&#x4E8E;&#x5927;&#x591A;&#x6570;&#x4F20;&#x611F;&#x5668;&#x5143;&#x4EF6;&#x5177;&#x6709;&#x4F4E;&#x9891;&#x7279;&#x6027;&#xFF0C;&#x4F7F;&#x5F97;&#x9636;&#x8DC3;&#x8FB9;&#x7F18;&#x53D8;&#x6210;&#x659C;&#x5761;&#x5F62;&#x8FB9;&#x7F18;&#xFF0C;&#x7EBF;&#x6761;&#x8FB9;&#x7F18;&#x53D8;&#x6210;&#x5C4B;&#x9876;&#x5F62;&#x8FB9;&#x7F18;&#x3002; &#x4E0D;&#x540C;&#x7C7B;&#x578B;&#x7684;&#x8FB9;&#x754C; &#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x4E00;&#x4E9B;&#x672F;&#x8BED; &#x8FB9;&#x7F18;&#x70B9;&#xFF1A;&#x56FE;&#x50CF;&#x4E2D;&#x4EAE;&#x5EA6;&#x663E;&#x8457;&#x53D8;&#x5316;&#x7684;&#x70B9;&#x3002; &#x8FB9;&#x7F18;&#x6BB5;&#xFF1A;&#x8FB9;&#x7F18;&#x70B9;&#x5750;&#x6807;[i,j]&#x53CA;&#x5176;&#x65B9;&#x5411;&#x3B8;&#x7684;&#x603B;&#x548C;&#xFF0C;&#x8FB9;&#x7F18;&#x7684;&#x65B9;&#x5411;&#x53EF;&#x4EE5;&#x662F;&#x68AF;&#x5EA6;&#x503C;&#x3002; &#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x5668;&#xFF1A;&#x4ECE;&#x56FE;&#x50CF;&#x4E2D;&#x62BD;&#x53D6;&#x8FB9;&#x7F18;&#xFF08;&#x8FB9;&#x7F18;&#x70B9;&#x6216;&#x8FB9;&#x7F18;&#x7EBF;&#x6BB5;&#xFF09;&#x96C6;&#x5408;&#x7684;&#x7B97;&#x6CD5;&#x3002; &#x8F6E;&#x5ED3;&#xFF1A;&#x8FB9;&#x7F18;&#x5217;&#x8868;&#xFF0C;&#x6216;&#x662F;&#x4E00;&#x6761;&#x8FB9;&#x7F18;&#x5217;&#x8868;&#x7684;&#x66F2;&#x7EBF;&#x6A21;&#x578B;&#x3002; &#x8FB9;&#x7F18;&#x8FDE;&#x63A5;&#xFF1A;&#x4ECE;&#x65E0;&#x5E8F;&#x8FB9;&#x7F18;&#x8868;&#x5F62;&#x6210;&#x6709;&#x5E8F;&#x8FB9;&#x7F18;&#x8868;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x4E60;&#x60EF;&#x4E0A;&#x8FB9;&#x7F18;&#x7684;&#x8868;&#x793A;&#x7528;&#x987A;&#x65F6;&#x9488;&#x65B9;&#x5411;&#x6765;&#x6392;&#x5E8F;&#x3002; &#x8FB9;&#x7F18;&#x8DDF;&#x8E2A;&#xFF1A;&#x4E00;&#x4E2A;&#x7528;&#x6765;&#x786E;&#x5B9A;&#x8F6E;&#x5ED3;&#x56FE;&#x50CF;&#x7684;&#x641C;&#x7D22;&#x8FC7;&#x7A0B;&#x3002; &#x68AF;&#x5EA6;&#x4E00;&#x7EF4;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x9636;&#x8DC3;&#x8FB9;&#x7F18;&#xFF08;&#x5C31;&#x662F;&#x524D;&#x9762;&#x7684;&#x7531;&#x9ED1;&#x7A81;&#x7136;&#x53D8;&#x767D;&#xFF09;&#x540C;&#x56FE;&#x50CF;&#x7684;&#x4E00;&#x9636;&#x5BFC;&#x6570;&#x5C40;&#x90E8;&#x5CF0;&#x503C;&#xFF08;&#x77AC;&#x95F4;&#x53D8;&#x767D;&#xFF09;&#x6709;&#x5173;&#x3002;&#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x503C;&#x7684;&#x663E;&#x8457;&#x53D8;&#x5316;&#x53EF;&#x7528;&#x68AF;&#x5EA6;&#x7684;&#x79BB;&#x6563;&#x903C;&#x8FD1;&#x51FD;&#x6570;&#x6765;&#x68C0;&#x6D4B;&#xFF0C;&#x68AF;&#x5EA6;&#x662F;&#x4E00;&#x9636;&#x5BFC;&#x6570;&#x7684;&#x4E8C;&#x7EF4;&#x7B49;&#x6548;&#x5F0F;&#xFF1A;$$G(x,y)=[G_x,G_y]=[\frac {\partial f}{\partial x},\frac {\partial f}{\partial y}]$$&#x68AF;&#x5EA6;&#x7684;&#x5E45;&#x5EA6;&#x503C;$$|G(x,y)|=\sqrt{G_x^2+G_y^2}$$&#x6216;&#x8005;$$|G(x,y)|=|G_x|+|G_y|$$&#x68AF;&#x5EA6;&#x7684;&#x5E45;&#x5EA6;&#x503C;&#x662F;&#x4E0E;&#x65B9;&#x5411;&#x65E0;&#x5173;&#x7684;&#xFF0C;&#x7B97;&#x5B50;&#x662F;&#x5404;&#x5411;&#x540C;&#x6027;&#x7B97;&#x5B50;&#x3002; &#x6570;&#x5B57;&#x56FE;&#x50CF;&#x4E2D;&#xFF0C;&#x5BFC;&#x6570;&#x7528;&#x5DEE;&#x5206;&#x8868;&#x793A;&#xFF1A;$$G_x=f[i,j+1]-f[i,j] \G_y=f[i,j]-f[i+1,j]$$ &#x4E00;&#x9636;&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;Roberts&#x4EA4;&#x53C9;&#x7B97;&#x5B50;Roberts&#x7B97;&#x5B50;&#x4E3A;&#x68AF;&#x5EA6;&#x5E45;&#x5EA6;&#x503C;&#x8BA1;&#x7B97;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x79CD;&#x7B80;&#x5355;&#x7684;&#x8FD1;&#x4F3C;&#xFF1A;$$|G[i,j]|=|f[i,j]-f[i+1,j+1]|+|f[i+1&#xFF0C;j]-f[i,j+1]|$$&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;$|G[i,j]|=|G_x|+|G_y|$ &#x6A21;&#x677F;&#x5377;&#x79EF;&#xFF1A; Sobel&#x7B97;&#x5B50;Sobel&#x7B97;&#x5B50;&#x4E3A;&#x68AF;&#x5EA6;&#x5E45;&#x5EA6;&#x503C;&#x8BA1;&#x7B97;&#xFF1A;$$M=\sqrt{s_x^2+s_y^2}$$&#x5176;&#x4E2D;$$s_x = (a_2+ca_3+a_4)-(a_0+ca_7+a6) \s_y =(a_0+ca_1+a_2)-(a_6+ca_5+a4) \c = 2$$ &#x5BF9;&#x5E94;&#x7684;&#x56FE;&#x662F;Gx&#x548C;Gy&#x6A21;&#x677F;&#x662F;&#xFF1A; Prewitt&#x7B97;&#x5B50;Prewitt&#x7B97;&#x5B50;&#x548C;Sobel&#x7B97;&#x5B50;&#x65B9;&#x7A0B;&#x4E00;&#x6837;&#xFF1A;$$M=\sqrt{s_x^2+s_y^2}$$&#x5176;&#x4E2D;$$s_x = (a_2+ca_3+a_4)-(a_0+ca_7+a6) \s_y =(a_0+ca_1+a_2)-(a_6+ca_5+a4) \c = 1$$&#x5BF9;&#x5E94;&#x7684;&#x56FE;&#x662F;Gx&#x548C;Gy&#x6A21;&#x677F;&#x662F;&#xFF1A; &#x4E8C;&#x9636;&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x63D0;&#x51FA;&#x7684;&#x539F;&#x56E0;&#xFF1A;&#x4E00;&#x9636;&#x5BFC;&#x6570;&#x7684;&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x5668;&#x4F1A;&#x5BFC;&#x81F4;&#x8FB9;&#x7F18;&#x70B9;&#x68C0;&#x6D4B;&#x592A;&#x591A;&#x3002; &#x89E3;&#x51B3;&#x601D;&#x8DEF;&#xFF1A;&#x4F7F;&#x7528;&#x68AF;&#x5EA6;&#x503C;&#x7684;&#x6781;&#x5927;&#x503C;&#x5BF9;&#x5E94;&#x70B9;&#x4F5C;&#x4E3A;&#x8FB9;&#x7F18;&#x70B9;&#xFF0C;&#x5BF9;&#x5E94;&#x7740;&#x4E8C;&#x9636;&#x5BFC;&#x6570;&#x96F6;&#x4EA4;&#x53C9;&#x70B9;&#x3002; &#x62C9;&#x666E;&#x62C9;&#x65AF;&#x7B97;&#x5B50;&#x62C9;&#x666E;&#x62C9;&#x65AF;&#x7B97;&#x5B50;&#x662F;&#x4E8C;&#x9636;&#x5BFC;&#x6570;&#x7684;&#x4E8C;&#x7EF4;&#x7B49;&#x6548;&#x5F0F;&#xFF1A; &#x5DEE;&#x5206;&#x8868;&#x793A;&#x4E3A;&#xFF1A;&#x5377;&#x53CA;&#x6A21;&#x677F;&#x4E3A;&#xFF1A; Canny&#x8FB9;&#x7F18;&#x68C0;&#x6D4B; &#x7528;&#x9AD8;&#x65AF;&#x5E73;&#x6ED1;&#x6EE4;&#x6CE2;&#x5668;&#x5E73;&#x6ED1;&#x56FE;&#x50CF; &#x7528;&#x4E00;&#x9636;&#x504F;&#x5BFC;&#x6570;&#x7684;&#x6709;&#x9650;&#x5DEE;&#x5206;&#x6765;&#x8BA1;&#x7B97;&#x56FE;&#x50CF;&#x7684;&#x68AF;&#x5EA6;&#x7684;&#x5E45;&#x5EA6;&#x548C;&#x65B9;&#x5411; &#x5BF9;&#x68AF;&#x5EA6;&#x5E45;&#x5EA6;&#x503C;&#x8FDB;&#x884C;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;&#xFF08;NMS&#xFF09; &#x7528;&#x53CC;&#x9608;&#x503C;&#x7B97;&#x6CD5;&#x68C0;&#x6D4B;&#x548C;&#x8FDE;&#x63A5;&#x8FB9;&#x7F18; &#x8BE6;&#x7EC6;&#x8BF4;&#x660E;&#x5982;&#x4E0B;&#xFF1A;I[i,j]&#x8868;&#x793A;&#x56FE;&#x50CF;&#xFF0C;&#x4F7F;&#x7528;&#x53EF;&#x5206;&#x79BB;&#x6EE4;&#x6CE2;&#x65B9;&#x6CD5;&#x6C42;&#x53D6;&#x56FE;&#x50CF;&#x4E0E;&#x9AD8;&#x65AF;&#x5E73;&#x6ED1;&#x6EE4;&#x6CE2;&#x5668;&#x7684;&#x5377;&#x79EF;&#xFF0C;&#x5F97;&#x5230;&#x5E73;&#x6ED1;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF1A;$$S[i,j]=G[i,j;\sigma]*I[i,j]$$&#x5E73;&#x6ED1;&#x540E;&#x7684;&#x56FE;&#x50CF;&#x9635;&#x5217;S[i,j]&#x7684;&#x68AF;&#x5EA6;&#x53EF;&#x4EE5;&#x7528;2&#xD7;2&#x7684;&#x4E00;&#x9636;&#x6709;&#x9650;&#x5DEE;&#x5206;&#x8FD1;&#x4F3C;&#x8BA1;&#x7B97;&#xFF0C;x&#x548C;y&#x65B9;&#x5411;&#x7684;&#x504F;&#x5BFC;&#x6570;P[i,j]&#x4E0E;Q[i,j]:$$P[i,j]\approx(S[i,j+1]-S[i,j]+S[i+1,j+1]-S[i+1,j])/2 \Q[i,j]\approx(S[i,j]-S[i+1,j]+S[i,j+1]-S[i+1,j+1])/2$$$P[i,j]$&#x4E0E;$Q[i,j]$&#x662F;2&#xD7;2&#x6B63;&#x65B9;&#x5F62;&#x5185;&#x6C42;&#x5F97;&#x7684;&#x6709;&#x9650;&#x5DEE;&#x5206;&#x7684;&#x5747;&#x503C; &#x68AF;&#x5EA6;&#x5E45;&#x5EA6;&#x503C;&#x548C;&#x65B9;&#x5411;&#x89D2;&#x5206;&#x522B;&#x662F;&#xFF1A;$$M[i,j]=\sqrt{P^2[i,j]+Q^2[i,j]} \\theta[i,j]=arctan(P[i,j]/Q[i,j])$$&#x8001;&#x5E08;&#x7684;PPT&#x91CC;$arctan()$&#x91CC;&#x6709;&#x4E24;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x5E94;&#x8BE5;&#x8868;&#x793A;&#x7684;&#x662F;&#x9664;&#x6CD5;&#x5173;&#x7CFB;&#x3002; &#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;&#xFF1A; &#x7B97;&#x6CD5;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;3&#xD7;3&#x90BB;&#x57DF;&#x4F5C;&#x7528;&#x5728;&#x5E45;&#x503C;&#x9635;&#x5217;M[i,j]&#x7684;&#x6240;&#x6709;&#x70B9;&#x4E0A;&#xFF1B; &#x6BCF;&#x4E00;&#x4E2A;&#x70B9;&#x4E0A;&#xFF0C;&#x90BB;&#x57DF;&#x7684;&#x4E2D;&#x5FC3;&#x50CF;&#x7D20;M[i,j]&#x4E0E;&#x6CBF;&#x7740;&#x68AF;&#x5EA6;&#x7EBF;&#x7684;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;&#x5176;&#x4E2D;&#x68AF;&#x5EA6;&#x7EBF;&#x662F;&#x7531;&#x90BB;&#x57DF;&#x7684;&#x4E2D;&#x5FC3;&#x70B9;&#x5904;&#x7684;&#x6247;&#x533A;&#x503C;$&#x3B6;[i,j]$&#x7ED9;&#x51FA;&#x3002; &#x5982;&#x679C;&#x5728;&#x90BB;&#x57DF;&#x4E2D;&#x5FC3;&#x70B9;&#x5904;&#x7684;&#x5E45;&#x503C;M[i,j]&#x4E0D;&#x6BD4;&#x68AF;&#x5EA6;&#x7EBF;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x4E24;&#x4E2A;&#x76F8;&#x90BB;&#x70B9;&#x5E45;&#x503C;&#x5927;&#xFF0C;&#x5219;M[i,j]&#x8D4B;&#x503C;&#x4E3A;&#x96F6;&#xFF0C;&#x5426;&#x5219;&#x7EF4;&#x6301;&#x539F;&#x503C;&#xFF1B; &#x6B64;&#x8FC7;&#x7A0B;&#x53EF;&#x4EE5;&#x628A;M[i,j]&#x5BBD;&#x5C4B;&#x810A;&#x5E26;&#x7EC6;&#x5316;&#x6210;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x5BBD;&#xFF0C;&#x5373;&#x4FDD;&#x7559;&#x5C4B;&#x810A;&#x7684;&#x9AD8;&#x5EA6;&#x503C;&#x3002; &#x94FE;&#x7801;&#x8F6E;&#x5ED3;&#x8868;&#x793A;&#x94FE;&#x7801;&#xFF1A;&#x6CBF;&#x7740;&#x8F6E;&#x5ED3;&#x8BB0;&#x5F55;&#x8FB9;&#x7F18;&#x8868;&#x7684;&#x4E00;&#x79CD;&#x8868;&#x793A;&#x65B9;&#x6CD5;&#x3002;&#x89C4;&#x5B9A;&#x4E86;&#x8FB9;&#x7F18;&#x8868;&#x4E2D;&#x6BCF;&#x4E00;&#x4E2A;&#x8FB9;&#x7F18;&#x70B9;&#x6240;&#x5BF9;&#x5E94;&#x7684;&#x8F6E;&#x5ED3;&#x65B9;&#x5411;&#xFF0C;&#x8F6E;&#x5ED3;&#x65B9;&#x5411;&#x88AB;&#x91CF;&#x5316;&#x4E3A;4&#x90BB;&#x70B9;&#x94FE;&#x7801;&#x6216;8&#x90BB;&#x70B9;&#x94FE;&#x7801;&#x3002; &#x4E3E;&#x4F8B;&#xFF1A; &#x94FE;&#x7801;&#x7684;&#x5FAE;&#x5206;&#xFF08;&#x5DEE;&#x5206;&#x94FE;&#x7801;&#xFF09;&#x53EF;&#x7531;&#x539F;&#x94FE;&#x7801;&#x7684;&#x4E00;&#x9636;&#x5DEE;&#x5206;&#x6C42;&#x5F97;&#x3002;&#x5DEE;&#x5206;&#x94FE;&#x7801;&#x5177;&#x6709;&#x65CB;&#x8F6C;&#x4E0D;&#x53D8;&#x6027;&#xFF0C;&#x53EF;&#x7528;&#x4E8E;&#x624B;&#x5199;&#x4F53;&#x8BC6;&#x522B;&#x3002;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#xFF1A;&#x540E;&#x9762;&#x7684;&#x51CF;&#x524D;&#x9762;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x5C0F;&#x4E8E;&#x96F6;&#xFF0C;&#x5219;&#x52A0;&#x4E0A;8&#x3002; Hough&#x53D8;&#x6362;&#x6982;&#x8FF0; Hough&#x53D8;&#x6362;&#x662F;&#x5229;&#x7528;&#x56FE;&#x50CF;&#x5168;&#x5C40;&#x7279;&#x6027;&#x800C;&#x5C06;&#x8FB9;&#x7F18;&#x50CF;&#x7D20;&#x8FDE;&#x63A5;&#x8D77;&#x6765;&#x7EC4;&#x6210;&#x533A;&#x57DF;&#x5C01;&#x95ED;&#x8FB9;&#x754C;&#x7684;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x3002; &#x5728;&#x9884;&#x5148;&#x77E5;&#x9053;&#x533A;&#x57DF;&#x5F62;&#x72B6;&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#xFF0C;&#x5229;&#x7528;Hough&#x53D8;&#x6362;&#x53EF;&#x4EE5;&#x65B9;&#x4FBF;&#x7684;&#x5F97;&#x5230;&#x8FB9;&#x754C;&#x66F2;&#x7EBF;&#x800C;&#x5C06;&#x4E0D;&#x8FDE;&#x7EED;&#x7684;&#x8FB9;&#x7F18;&#x50CF;&#x7D20;&#x70B9;&#x8FDE;&#x63A5;&#x8D77;&#x6765;&#x3002; &#x4E3B;&#x8981;&#x4F18;&#x70B9;&#x662F;&#x53D7;&#x566A;&#x58F0;&#x548C;&#x66F2;&#x7EBF;&#x95F4;&#x65AD;&#x7684;&#x5F71;&#x54CD;&#x8F83;&#x5C0F;&#x3002; Hough&#x53D8;&#x6362;&#x7684;&#x4E3B;&#x8981;&#x601D;&#x60F3;&#x5C31;&#x662F;&#x5728;&#x5DF2;&#x77E5;&#x5F62;&#x72B6;&#x7684;&#x6761;&#x4EF6;&#x4E0B;&#xFF0C;&#x5C06;&#x66F2;&#x7EBF;&#x4ECE;&#x56FE;&#x50CF;&#x5750;&#x6807;&#x7CFB;&#x53D8;&#x6362;&#x5230;&#x53C2;&#x6570;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x901A;&#x8FC7;&#x7814;&#x7A76;&#x53C2;&#x6570;&#x5750;&#x6807;&#x7CFB;&#x4E0B;&#x7684;&#x4E00;&#x4E9B;&#x7279;&#x5F81;&#xFF0C;&#x5F97;&#x5230;&#x56FE;&#x50CF;&#x5750;&#x6807;&#x7CFB;&#x4E0B;&#x7684;&#x8868;&#x793A;&#x3002; &#x76F4;&#x7EBF;Hough&#x53D8;&#x6362;&#x76F4;&#x7EBF;Hough&#x53D8;&#x6362;&#x7528;&#x5230;&#x4E86;&#x70B9;-&#x7EBF;&#x7684;&#x5BF9;&#x5076;&#x6027; &#x5728;&#x56FE;&#x50CF;&#x7A7A;&#x95F4;&#x4E2D;&#x5171;&#x7EBF;&#x7684;&#x70B9;&#x662F;&#x5728;&#x53C2;&#x6570;&#x7A7A;&#x95F4;&#x4E2D;&#x91CC;&#x76F8;&#x4EA4;&#x7684;&#x7EBF;&#x3002;&#x53CD;&#x8FC7;&#x6765;&#xFF0C;&#x5728;&#x53C2;&#x6570;&#x7A7A;&#x95F4;&#x4E2D;&#x76F8;&#x4EA4;&#x4E8E;&#x4E00;&#x4E2A;&#x70B9;&#x7684;&#x6240;&#x6709;&#x76F4;&#x7EBF;&#xFF0C;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#x5728;&#x56FE;&#x50CF;&#x7A7A;&#x95F4;&#x4E2D;&#x90FD;&#x662F;&#x5171;&#x7EBF;&#x7684;&#x70B9;&#x3002; Hough&#x53D8;&#x6362;&#x901A;&#x8FC7;&#x8FD9;&#x79CD;&#x5BF9;&#x5076;&#x6027;&#x628A;&#x5728;&#x56FE;&#x50CF;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x68C0;&#x6D4B;&#x95EE;&#x9898;&#x8F6C;&#x6362;&#x5230;&#x53C2;&#x6570;&#x7A7A;&#x95F4;&#x91CC;&#x8FDB;&#x884C;&#xFF0C;&#x901A;&#x8FC7;&#x53C2;&#x6570;&#x7A7A;&#x95F4;&#x91CC;&#x7684;&#x7B80;&#x5355;&#x7D2F;&#x52A0;&#x7EDF;&#x8BA1;&#x5B8C;&#x6210;&#x68C0;&#x6D4B;&#x3002; &#x76F4;&#x7EBF;Hough&#x53D8;&#x6362;&#x5177;&#x4F53;&#x7D2F;&#x52A0;&#x7EDF;&#x8BA1;&#x8FC7;&#x7A0B;&#x662F;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;2D&#x7D2F;&#x52A0;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x3002; &#x7D2F;&#x52A0;&#x7EDF;&#x8BA1;&#xFF1A; &#x5728;&#x53C2;&#x6570;&#x7A7A;&#x95F4;PQ&#x4E2D;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;2D&#x7684;&#x7D2F;&#x52A0;&#x6570;&#x7EC4;A(p,q)&#xFF0C;&#x5176;&#x4E2D;p,q&#x7684;&#x53D8;&#x5316;&#x8303;&#x56F4;&#x662F;$[p_min,p_max]$&#xFF0C;$[q_min,q_max]$&#xFF0C;&#x5206;&#x522B;&#x662F;&#x659C;&#x7387;&#x548C;&#x622A;&#x8DDD;&#x7684;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x3002; &#x5F00;&#x59CB;&#x65F6;&#x7F6E;&#x6570;&#x7EC4;A&#x4E3A;&#x96F6;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x56FE;&#x50CF;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x7ED9;&#x5B9A;&#x70B9;&#xFF0C;&#x8BA9;p&#x53D6;&#x904D;P&#x8F74;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x503C;&#xFF0C;&#x6839;&#x636E;&#x516C;&#x5F0F;$q=-px_i+y_i$&#x8BA1;&#x7B97;&#x5BF9;&#x5E94;&#x7684;q&#x3002; &#x518D;&#x6839;&#x636E;p&#x548C;q&#x7684;&#x503C;&#x5BF9;A&#x7D2F;&#x52A0;$A(p,q)=A(p,q)+1$ &#x7D2F;&#x52A0;&#x7ED3;&#x675F;&#x540E;&#xFF0C;&#x6839;&#x636E;A(p,q)&#x7684;&#x503C;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x6709;&#x591A;&#x5C11;&#x70B9;&#x5171;&#x7EBF;&#xFF0C;&#x5373;A(p,q)&#x7684;&#x503C;&#x5C31;&#x662F;&#x5728;(p,q)&#x5904;&#x5171;&#x7EBF;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#x3002; &#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x7684;&#x51C6;&#x786E;&#x6027;&#x53D6;&#x51B3;&#x4E8E;&#x7D2F;&#x52A0;&#x6570;&#x7EC4;&#x7684;&#x5C3A;&#x5BF8;&#x3002;&#x5982;&#x679C;&#x628A;P&#x8F74;&#x5212;&#x5206;&#x6210;K&#x4EFD;&#xFF0C;&#x90A3;&#x4E48;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x70B9;(xk,yk)&#x8BA1;&#x7B97;&#x53EF;&#x5F97;q&#x7684;K&#x4E2A;&#x503C;&#x3002;&#x5982;&#x679C;&#x56FE;&#x50CF;&#x4E2D;&#x6709;n&#x4E2A;&#x70B9;&#xFF0C;&#x5219;&#x9700;&#x8981;nK&#x6B21;&#x8FD0;&#x7B97;&#xFF0C;&#x5C0F;&#x4E8E;n2&#x6B21;&#x3002;&#x5982;&#x679C;&#x76F4;&#x7EBF;&#x63A5;&#x8FD1;&#x4E8E;&#x5782;&#x76F4;&#x65B9;&#x5411;&#xFF0C;&#x5219;&#x7531;&#x4E8E;p&#x548C;q&#x7684;&#x503C;&#x90FD;&#x63A5;&#x8FD1;&#x65E0;&#x7A77;&#x800C;&#x4F7F;&#x8BA1;&#x7B97;&#x91CF;&#x9661;&#x589E;&#xFF0C;&#x6240;&#x4EE5;&#x4F7F;&#x7528;&#x76F4;&#x7EBF;&#x7684;&#x6781;&#x5750;&#x6807;&#x65B9;&#x7A0B;&#x8868;&#x793A;$r=x_icos \theta + y_i sin \theta$&#x5219;&#x539F;&#x56FE;&#x50CF;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x70B9;&#x5BF9;&#x5E94;&#x7740;&#x65B0;&#x53C2;&#x6570;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x66F2;&#x7EBF;&#xFF0C;&#x90A3;&#x4E48;&#x539F;&#x6765;&#x7684;&#x70B9;&#x2014;&#x76F4;&#x7EBF;&#x5BF9;&#x5076;&#x53D8;&#x6210;&#x4E86;&#x70B9;&#x2014;&#x66F2;&#x7EBF;&#x5BF9;&#x5076;&#x3002;&#x7D2F;&#x52A0;&#x5668;&#x6570;&#x7EC4;&#x662F;$A(&#x3B8;,&#x3BB;)$ &#x4E8C;&#x503C;&#x56FE;&#x50CF;&#x6982;&#x5FF5;&#x8FD1;&#x90BB; &#x5982;&#x679C;&#x4E24;&#x4E2A;&#x50CF;&#x7D20;&#x53EA;&#x6709;&#x516C;&#x5171;&#x8FB9;&#x754C;&#xFF0C;&#x5219;&#x79F0;&#x5B83;&#x4EEC;&#x4E92;&#x4E3A;4&#x90BB;&#x70B9;&#xFF0C;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x88AB;&#x8BA4;&#x4E3A;&#x4E0E;&#x5B83;&#x7684;4&#x90BB;&#x70B9;&#x662F;4&#x8FDE;&#x901A;&#x5173;&#x7CFB; &#x5982;&#x679C;&#x4E24;&#x4E2A;&#x50CF;&#x7D20;&#x81F3;&#x5C11;&#x5171;&#x4EAB;&#x4E00;&#x4E2A;&#x9876;&#x89D2;&#xFF0C;&#x5219;&#x79F0;&#x5B83;&#x4EEC;&#x4E92;&#x4E3A;8&#x90BB;&#x70B9;&#xFF0C;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x88AB;&#x8BA4;&#x4E3A;&#x4E0E;&#x5B83;&#x7684;8&#x90BB;&#x70B9;&#x662F;8&#x8FDE;&#x901A;&#x5173;&#x7CFB; &#x8DEF;&#x5F84;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x5230;&#x53E6;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x7684;&#x8DEF;&#x5F84;&#x6307;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x5E8F;&#x5217;&#xFF0C;&#x6B64;&#x5E8F;&#x5217;&#x4E2D;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x4E92;&#x4E3A;&#x90BB;&#x70B9;&#x3002;&#x5982;&#x679C;&#x90BB;&#x70B9;&#x5173;&#x7CFB;&#x662F;4&#x8FDE;&#x901A;&#x7684;&#xFF0C;&#x5219;&#x8DEF;&#x5F84;&#x662F;4&#x8DEF;&#x5F84;&#x5982;&#x679C;&#x90BB;&#x70B9;&#x5173;&#x7CFB;&#x662F;8&#x8FDE;&#x901A;&#x7684;&#xFF0C;&#x5219;&#x8DEF;&#x5F84;&#x662F;8&#x8DEF;&#x5F84; &#x524D;&#x666F;&#x56FE;&#x50CF;&#x4E2D;&#x503C;&#x4E3A;1&#x7684;&#x5168;&#x90E8;&#x50CF;&#x7D20;&#x7684;&#x96C6;&#x5408;&#x79F0;&#x4E3A;&#x524D;&#x666F;&#xFF0C;&#x524D;&#x666F;&#x76EE;&#x6807;&#x68C0;&#x6D4B;&#x4E2D;&#x7684;&#x524D;&#x666F;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x68C0;&#x6D4B;&#x5230;&#x7684;&#x76EE;&#x6807;&#x3002; &#x8FB9;&#x754C;$S$&#x7684;&#x8FB9;&#x754C;&#x662F;$S_{&#x524D;&#x666F;}$&#x4E2D;&#x4E0E;$S_{&#x80CC;&#x666F;}$&#x6709;4&#x8FDE;&#x901A;&#x5173;&#x7CFB;&#x7684;&#x50CF;&#x7D20;&#x96C6;&#x5408;&#xFF0C;&#x7528;$s&#x2019;$&#x8868;&#x793A;&#x3002; &#x5185;&#x90E8;$s$&#x4E2D;&#x4E0D;&#x5C5E;&#x4E8E;&#x5B83;&#x7684;&#x8FB9;&#x754C;&#x7684;&#x50CF;&#x7D20;&#x96C6;&#x5408;&#xFF0C;&#x7528;$s-s&#x2019;$&#x8868;&#x793A; &#x5305;&#x56F4;&#x5982;&#x679C;&#x4ECE;s&#x4E2D;&#x4EFB;&#x610F;&#x4E00;&#x70B9;&#x5230;&#x56FE;&#x50CF;&#x8FB9;&#x754C;&#xFF08;&#x4E0D;&#x662F;S&#x7684;&#x8FB9;&#x754C;&#xFF0C;&#x662F;&#x6574;&#x4E2A;&#x56FE;&#x7684;&#x8FB9;&#x754C;&#xFF09;&#x7684;4&#x8DEF;&#x5F84;&#x5FC5;&#x987B;&#x4E0E;&#x533A;&#x57DF;T&#x76F8;&#x4EA4;&#xFF0C;&#x5219;&#x533A;&#x57DF;T&#x5305;&#x56F4;&#x533A;&#x57DF;s&#xFF08;s&#x5728;T&#x5185;&#xFF09;&#x3002; &#x4E3A;&#x4EC0;&#x4E48;&#x4F7F;&#x7528;&#x4E8C;&#x503C;&#x56FE;&#x50CF; &#x4EBA;&#x7C7B;&#x5728;&#x7406;&#x89E3;&#x53EA;&#x6709;&#x4E24;&#x4E2A;&#x7070;&#x5EA6;&#x7EC4;&#x6210;&#x7684;&#x7EBF;&#x6761;&#x3001;&#x8F6E;&#x5ED3;&#x5F71;&#x50CF;&#x6216;&#x5176;&#x5B83;&#x56FE;&#x50CF;&#x65F6;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x56F0;&#x96BE;&#x3002; &#x4E8C;&#x503C;&#x56FE;&#x50CF;&#x8BA1;&#x7B97;&#x7B97;&#x6CD5;&#x7B80;&#x5355;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;&#x548C;&#x5B9E;&#x73B0;&#xFF0C;&#x8BA1;&#x7B97;&#x901F;&#x5EA6;&#x5FEB;&#x3002; &#x4E8C;&#x503C;&#x56FE;&#x50CF;&#x6240;&#x9700;&#x5185;&#x5B58;&#x5C0F;&#xFF0C;&#x5BF9;&#x8BA1;&#x7B97;&#x673A;&#x8BBE;&#x5907;&#x8981;&#x6C42;&#x4F4E; &#x8BB8;&#x591A;&#x4E8C;&#x503C;&#x89C6;&#x89C9;&#x7CFB;&#x7EDF;&#x7684;&#x6280;&#x672F;&#x4E5F;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x7070;&#x5EA6;&#x89C6;&#x89C9;&#x7CFB;&#x7EDF; &#x5982;&#x4F55;&#x5F97;&#x5230;&#x4E8C;&#x503C;&#x56FE;&#x50CF;&#x6700;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x901A;&#x8FC7;&#x9608;&#x503C;&#x5206;&#x5272;&#x7684;&#x65B9;&#x6CD5;&#x5F97;&#x5230;&#x4E8C;&#x503C;&#x56FE;&#x50CF;&#xFF0C;&#x9608;&#x503C;&#x53D6;&#x51B3;&#x4E8E;&#x7167;&#x660E;&#x6761;&#x4EF6;&#x548C;&#x7269;&#x4F53;&#x7684;&#x53CD;&#x5C04;&#x7279;&#x6027;&#x3002; &#x7B97;&#x6CD5;&#x8FC7;&#x7A0B;&#xFF1A;&#x6BD4;&#x8F83;&#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x4E0E;&#x67D0;&#x4E00;&#x7070;&#x5EA6;&#x503C;&#x7684;&#x5173;&#x7CFB;&#x53EF;&#x4EE5;&#x5206;&#x6210;&#x4E24;&#x90E8;&#x5206;&#xFF0C;&#x7B2C;&#x4E00;&#x90E8;&#x5206;&#x5C0F;&#x4E8E;&#x9608;&#x503C;&#xFF0C;&#x5C06;&#x6B64;&#x90E8;&#x5206;&#x7684;&#x7070;&#x5EA6;&#x503C;&#x8BBE;&#x5B9A;&#x4E3A;0&#xFF1B;&#x7B2C;&#x4E8C;&#x90E8;&#x5206;&#x5927;&#x4E8E;&#x9608;&#x503C;&#xFF0C;&#x5C06;&#x6B64;&#x90E8;&#x5206;&#x7684;&#x7070;&#x5EA6;&#x503C;&#x8BBE;&#x5B9A;&#x4E3A;1&#x3002; &#x7531;&#x6B64;&#x5F97;&#x5230;&#x7684;&#x7ECF;&#x8FC7;&#x9608;&#x503C;&#x5904;&#x7406;&#x56FE;&#x50CF;&#x56E0;&#x4E3A;&#x53EA;&#x6709;&#x4E24;&#x4E2A;&#x7070;&#x5EA6;&#x503C;&#x6545;&#x79F0;&#x4E3A;&#x4E8C;&#x503C;&#x56FE;&#x50CF;&#x3002; &#x9608;&#x503C;&#x5206;&#x5272;&#x7B97;&#x6CD5;&#x7684;&#x8FC7;&#x7A0B;&#xFF1A;&#x8BBE;(x,y)&#x662F;&#x4E8C;&#x7EF4;&#x56FE;&#x50CF;&#x7684;&#x5E73;&#x9762;&#x5750;&#x6807;&#xFF0C;&#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x7EA7;&#x7684;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x662F;$G={0,1,2,3,4&#x2026;..L-1}$&#xFF08;&#x4E60;&#x60EF;&#x4E0A;0&#x8868;&#x793A;&#x6700;&#x6697;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;L-1&#x4EE3;&#x8868;&#x6700;&#x4EAE;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#xFF09;&#xFF0C;&#x4F4D;&#x4E8E;&#x5750;&#x6807;&#x70B9;(x,y)&#x4E0A;&#x7684;&#x50CF;&#x7D20;&#x70B9;&#x7684;&#x7070;&#x5EA6;&#x7EA7;&#x8868;&#x793A;f(x,y)&#x3002;&#x8BBE;t&#x4E3A;&#x5206;&#x5272;&#x9608;&#x503C;&#xFF0C;&#x4E8E;&#x662F;&#x56FE;&#x50CF;&#x51FD;&#x6570;&#x5728;&#x9608;&#x503C;t&#x4E0A;&#x7684;&#x5206;&#x5272;&#x7ED3;&#x679C;&#x53EF;&#x4EE5;&#x6709;&#x5982;&#x4E0B;&#x8868;&#x793A;&#xFF1A;&#x9608;&#x503C;&#x5206;&#x5272;&#x7B97;&#x6CD5;&#x5B9E;&#x9645;&#x5C31;&#x662F;&#x6309;&#x67D0;&#x4E2A;&#x51C6;&#x5219;&#x51FD;&#x6570;&#x6C42;&#x6700;&#x4F18;&#x9608;&#x503C;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x81EA;&#x52A8;&#x9608;&#x503C;&#x5206;&#x5272;&#x76F4;&#x65B9;&#x56FE;&#x6CD5;&#x56FE;&#x50CF;&#x76F4;&#x65B9;&#x56FE;&#x4F1A;&#x51FA;&#x73B0;&#x4E24;&#x4E2A;&#x5206;&#x79BB;&#x5CF0;&#x503C;&#xFF0C;&#x90A3;&#x4E48;&#x76F4;&#x65B9;&#x56FE;&#x4E2D;&#x5206;&#x5272;&#x9608;&#x503C;&#x7684;&#x9009;&#x62E9;&#x5728;&#x4E24;&#x4E2A;&#x6CE2;&#x5CF0;&#x4E4B;&#x95F4;&#x7684;&#x6CE2;&#x8C37;&#x3002;&#x53CC;&#x5CF0;&#x76F4;&#x65B9;&#x56FE;&#x53EF;&#x4EE5;&#x63A8;&#x5E7F;&#x5230;&#x5177;&#x6709;&#x4E0D;&#x540C;&#x7070;&#x5EA6;&#x503C;&#x7684;&#x591A;&#x4E2A;&#x7269;&#x4F53;&#x56FE;&#x50CF;&#x4E2D;&#x3002;&#x56FE;&#x50CF;&#x4E2D;&#x6709;&#x591A;&#x4E2A;&#x7269;&#x4F53;&#x4E14;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x7070;&#x5EA6;&#x5206;&#x5E03;&#xFF0C;&#x5982;&#x56FE;&#xFF1A; &#x76F4;&#x65B9;&#x56FE;&#x53D8;&#x6362;&#x6CD5;&#x5982;&#x679C;&#x76EE;&#x6807;&#x533A;&#x57DF;&#x548C;&#x80CC;&#x666F;&#x533A;&#x57DF;&#x4E4B;&#x95F4;&#x7684;&#x8C37;&#x4E0D;&#x591F;&#x6DF1;&#xFF0C;&#x4EE5;&#x81F3;&#x4E8E;&#x65E0;&#x6CD5;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x5408;&#x9002;&#x7684;&#x9608;&#x503C;&#xFF0C;&#x5219;&#x5C31;&#x8981;&#x5BF9;&#x76F4;&#x65B9;&#x56FE;&#x8FDB;&#x884C;&#x53D8;&#x6362;&#x3002; &#x5C40;&#x9650;&#x6027; &#x5982;&#x679C;&#x573A;&#x666F;&#x4E2D;&#x4E0D;&#x540C;&#x90E8;&#x5206;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x7167;&#x660E;&#xFF0C;&#x90A3;&#x4E48;&#x5373;&#x4F7F;&#x56FE;&#x50CF;&#x4E2D;&#x4EC5;&#x5305;&#x542B;&#x6709;&#x4E00;&#x4E2A;&#x7269;&#x4F53;&#x4E5F;&#x65E0;&#x6CD5;&#x7528;&#x4E00;&#x4E2A;&#x9608;&#x503C;&#x6765;&#x5206;&#x5272;&#x56FE;&#x50CF;&#x3002; &#x57FA;&#x4E8E;&#x76F4;&#x65B9;&#x56FE;&#x7684;&#x9608;&#x503C;&#x5206;&#x5272;&#x65B9;&#x6CD5;&#x6CA1;&#x6709;&#x5229;&#x7528;&#x56FE;&#x50CF;&#x5F3A;&#x5EA6;&#x7684;&#x7A7A;&#x95F4;&#x4FE1;&#x606F;&#xFF0C;&#x5728;&#x672C;&#x8D28;&#x4E0A;&#x5B58;&#x5728;&#x5C40;&#x9650;&#x6027;&#x3002; &#x4E8C;&#x503C;&#x56FE;&#x50CF;&#x8FD0;&#x7B97;&#x8FDE;&#x901A;&#x6210;&#x5206;&#x6807;&#x8BB0; &#x7ACB;&#x4F53;&#x89C6;&#x89C9;&#x89C6;&#x89C9;&#x5750;&#x6807;&#x7CFB;&#x7EDF; &#x50CF;&#x7D20;&#x5750;&#x6807;&#x7CFB;&#xFF1A;&#x53C8;&#x53EB;&#x56FE;&#x50CF;&#x5750;&#x6807;&#x7CFB;&#xFF0C;&#x539F;&#x70B9; $o&#x2019;$ &#x4F4D;&#x4E8E;&#x56FE;&#x50CF;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#xFF0C; $u$ &#x8F74;&#x5411;&#x53F3;&#x4E0E; $x$ &#x8F74;&#x5E73;&#x884C;&#xFF0C; $v$&#x8F74;&#x5411;&#x4E0B;&#x4E0E; $y$ &#x8F74;&#x5E73;&#x884C;&#x3002; &#x50CF;&#x5E73;&#x9762;&#x5750;&#x6807;&#x7CFB;&#xFF1A;&#x50CF;&#x7D20;&#x5750;&#x6807;&#x7CFB;&#x4E0E;&#x6210;&#x50CF;&#x5E73;&#x9762;&#x4E4B;&#x95F4;&#xFF0C;&#x76F8;&#x5DEE;&#x4E86;&#x4E00;&#x4E2A;&#x7F29;&#x653E;&#x548C;&#x4E00;&#x4E2A;&#x539F;&#x70B9;&#x7684;&#x5E73;&#x79FB;&#x3002; &#x76F8;&#x673A;&#x5750;&#x6807;&#x7CFB; &#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB; &#x9488;&#x5B54;&#x76F8;&#x673A;&#x6A21;&#x578B;&#x5E38;&#x7528;&#x7684;&#x76F8;&#x673A;&#x6A21;&#x578B;&#x90FD;&#x662F;&#x6839;&#x636E;&#x5C0F;&#x5B54;&#x6210;&#x50CF;&#x7684;&#x539F;&#x7406;&#x505A;&#x6210;&#x7684;&#x3002; &#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x83B7;&#x5F97;&#x597D;&#x7684;&#x6210;&#x50CF;&#x6548;&#x679C;&#xFF0C;&#x6211;&#x4EEC;&#x5728;&#x76F8;&#x673A;&#x7684;&#x524D;&#x65B9;&#x52A0;&#x4E86;&#x900F;&#x955C;&#x3002;&#x52A0;&#x4E86;&#x900F;&#x955C;&#x4E4B;&#x540E;&#x4F1A;&#x5F15;&#x8D77;&#x7578;&#x53D8;&#xFF0C;&#x53EB;&#x5F84;&#x5411;&#x7578;&#x53D8;&#xFF0C;&#x4E3B;&#x8981;&#x6709;&#x4E24;&#x79CD;&#xFF1A;&#x6876;&#x5F62;&#x7578;&#x53D8;&#x548C;&#x6795;&#x5F62;&#x7578;&#x53D8;&#x3002; &#x76F8;&#x673A;&#x7684;&#x5185;&#x53C2;&#x50CF;&#x7D20;&#x5750;&#x6807;&#x7CFB;&#x4E0E;&#x6210;&#x50CF;&#x5E73;&#x9762;&#x4E4B;&#x95F4;&#xFF0C;&#x76F8;&#x5DEE;&#x4E86;&#x4E00;&#x4E2A;&#x7F29;&#x653E;&#x548C;&#x4E00;&#x4E2A;&#x539F;&#x70B9;&#x7684;&#x5E73;&#x79FB;&#x3002;&#x8BBE;&#x50CF;&#x7D20;&#x5750;&#x6807;&#x5728; $u$ &#x8F74;&#x4E0A;&#x7F29;&#x653E;&#x4E86; $&#x3B1;$ &#x500D;&#xFF0C;&#x5728;$ v$ &#x4E0A;&#x7F29;&#x653E;&#x4E86;$ &#x3B2;$ &#x500D;&#x3002; &#x8BB0;$P=[X&#x2019;,Y&#x2019;]$&#x662F;&#x6210;&#x50CF;&#x5E73;&#x9762;&#x7684;&#x5750;&#x6807;&#x3002;&#x5219;&#x6210;&#x50CF;&#x5E73;&#x9762;&#x5750;&#x6807;&#x5BF9;&#x5E94;&#x7684;&#x50CF;&#x7D20;&#x5750;&#x6807;$[u,v]^T$&#x4E3A;$$\left{\begin{aligned}u &amp;=\alpha X&#x2019; + c_x\v &amp;=\beta Y&#x2019; + c_y\\end{aligned}\right.$$ &#x628A;$\alpha f$&#x5408;&#x5E76;&#x6210;$f_x$&#xFF0C;&#x628A;$\beta f$&#x5408;&#x5E76;&#x6210;$f_y$&#xFF0C;&#x53EF;&#x5F97;&#xFF1A;$$\left{\begin{aligned}u &amp;=f_x \frac X Z + c_x\v &amp;=f_y \frac Y Z + c_y\\end{aligned}\right.$$&#x5176;&#x4E2D;&#xFF0C;$f$ &#x7684;&#x5355;&#x4F4D;&#x4E3A;&#x7C73;&#xFF0C; $\alpha,\beta$ &#x7684;&#x5355;&#x4F4D;&#x4E3A;&#x50CF;&#x7D20;&#x6BCF;&#x7C73;&#xFF0C;&#x6240;&#x4EE5;$ f_x, f_y $&#x7684;&#x5355;&#x4F4D;&#x4E3A;&#x50CF;&#x7D20;&#x3002; &#x82E5;&#x5C06;&#x5176;&#x5199;&#x6210;&#x77E9;&#x9635;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x6709;&#xFF1A;&#x4E2D;&#x95F4;&#x6846;&#x8D77;&#x6765;&#x7684;&#x90E8;&#x5206;&#x5C31;&#x53EB;&#x5185;&#x53C2;&#x77E9;&#x9635;&#xFF0C;&#x4E00;&#x822C;&#x7ED9;&#x51FA;&#x5C31;&#x7ED9;&#x8FD9;&#x79CD;&#x5F62;&#x5F0F;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x89C1;&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;-LAB2&#x4E2D;&#x7684;&#x62A5;&#x544A;&#x3002; &#x5F84;&#x5411;&#x7578;&#x53D8;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x4F1A;&#x4EA7;&#x751F;&#x201C;&#x9C7C;&#x773C;&#x201D;&#x73B0;&#x8C61;&#x3002;&#x6210;&#x50CF;&#x4E2D;&#x5FC3;&#x5904;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x4E3A;0&#xFF0C;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x968F;&#x7740;&#x4E0E;&#x6210;&#x50CF;&#x4E2D;&#x5FC3;&#x8DDD;&#x79BB;&#x589E;&#x5927;&#x800C;&#x589E;&#x5927;&#xFF0C;&#x5728;&#x56FE;&#x50CF;&#x8FB9;&#x7F18;&#x5904;&#x8FBE;&#x5230;&#x6700;&#x5927;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x3002;&#x5E38;&#x5E38;&#x7528;&#x5076;&#x6B21;&#x5E42;&#x7684;&#x6CF0;&#x52D2;&#x516C;&#x5F0F;&#x63CF;&#x8FF0;&#x5F84;&#x5411;&#x7578;&#x53D8;$$\left{\begin{aligned}x_{cerrected}=x(1+k_1r^2+k_2r^4+k_3r^6)\y_{cerrected}=y(1+k_1r^2+k_2r^4+k_3r^6)\end{aligned}\right.$$ &#x5207;&#x5411;&#x7578;&#x53D8;&#x5207;&#x5411;&#x7578;&#x53D8;&#x7531;&#x900F;&#x955C;&#x548C;&#x6210;&#x50CF;&#x5E73;&#x9762;&#x4E0D;&#x5E73;&#x884C;&#x5F15;&#x8D77;&#x3002;&#x5E38;&#x7528;&#x5982;&#x4E0B;&#x516C;&#x5F0F;&#x63CF;&#x8FF0; $$\left{\begin{aligned}x_{cerrected}&amp;=x+2p_1xy+p_2(r^2+2x^2)\y_{cerrected}&amp;=y+p_1(r^2+2y^2)+2p_2xy\end{aligned}\right.$$ &#x4FEE;&#x590D;&#x7578;&#x53D8;&#x8054;&#x5408;&#x4E0A;&#x8FF0;&#x4E24;&#x4E2A;&#x516C;&#x5F0F;&#xFF0C;&#x5BF9;&#x4E8E;&#x76F8;&#x673A;&#x5750;&#x6807;&#x7CFB;&#x4E2D;&#x7684;&#x4E00;&#x70B9; P (X; Y; Z)&#xFF0C;&#x6211;&#x4EEC;&#x80FD;&#x591F;&#x901A;&#x8FC7;&#x4E94;&#x4E2A;&#x7578;&#x53D8;&#x7CFB;&#x6570;&#x627E;&#x5230;&#x8FD9;&#x4E2A;&#x70B9;&#x5728;&#x50CF;&#x7D20;&#x5E73;&#x9762;&#x4E0A;&#x7684;&#x6B63;&#x786E;&#x4F4D;&#x7F6E;&#xFF1A; &#x5C06;&#x4E09;&#x7EF4;&#x7A7A;&#x95F4;&#x70B9;&#x6295;&#x5F71;&#x5230;&#x5F52;&#x4E00;&#x5316;&#x56FE;&#x50CF;&#x5E73;&#x9762;&#x3002;&#x8BBE;&#x5B83;&#x7684;&#x5F52;&#x4E00;&#x5316;&#x5750;&#x6807;&#x4E3A; $[x, y]^T$&#x3002; &#x5BF9;&#x5F52;&#x4E00;&#x5316;&#x5E73;&#x9762;&#x4E0A;&#x7684;&#x70B9;&#x8FDB;&#x884C;&#x5F84;&#x5411;&#x7578;&#x53D8;&#x548C;&#x5207;&#x5411;&#x7578;&#x53D8;&#x7EA0;&#x6B63;&#x3002;$$\left{\begin{aligned}x_{cerrected}&amp;=x(1+k_1r^2+k_2r^4+k_3r^6)+2p_1xy+p_2(r^2+2x^2)\y_{cerrected}&amp;=y(1+k_1r^2+k_2r^4+k_3r^6)+p_1(r^2+2y^2)+2p_2xy\end{aligned}\right.$$ &#x5C06;&#x7EA0;&#x6B63;&#x540E;&#x7684;&#x70B9;&#x901A;&#x8FC7;&#x5185;&#x53C2;&#x6570;&#x77E9;&#x9635;&#x6295;&#x5F71;&#x5230;&#x50CF;&#x7D20;&#x5E73;&#x9762;&#xFF0C;&#x5F97;&#x5230;&#x8BE5;&#x70B9;&#x5728;&#x56FE;&#x50CF;&#x4E0A;&#x7684;&#x6B63;&#x786E;&#x4F4D;&#x7F6E;&#x3002;$$\left{\begin{aligned}u&amp;=f_xx_{cerrected}+c_x\v&amp;=f_yy_{cerrected}+c_y\end{aligned}\right.$$ &#x56E0;&#x6B64;&#x5728;&#x7ED9;&#x7578;&#x53D8;&#x53C2;&#x6570;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5F80;&#x5F80;&#x662F;&#x7ED9;&#x4E00;&#x4E2A;1*5&#x7684;&#x77E9;&#x9635;&#xFF0C;&#x4E3E;&#x4F8B;&#x89C1;&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;-LAB2&#x4E2D;&#x7684;&#x62A5;&#x544A;&#x3002; &#x603B;&#x7ED3;&#x5355;&#x76EE;&#x76F8;&#x673A;&#x7684;&#x6210;&#x50CF;&#x8FC7;&#x7A0B; &#x9996;&#x5148;&#xFF0C;&#x4E16;&#x754C;&#x5750;&#x6807;&#x7CFB;&#x4E0B;&#x6709;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x7684;&#x70B9; P&#xFF0C;&#x4E16;&#x754C;&#x5750;&#x6807;&#x4E3A; $P_w$&#xFF1B; &#x7531;&#x4E8E;&#x76F8;&#x673A;&#x5728;&#x8FD0;&#x52A8;&#xFF0C;&#x5B83;&#x7684;&#x8FD0;&#x52A8;&#x7531;$R, t$&#x6216;&#x53D8;&#x6362;&#x77E9;&#x9635;$T$&#x63CF;&#x8FF0;&#x3002;$P$&#x7684;&#x76F8;&#x673A;&#x5750;&#x6807;&#x4E3A;&#xFF1A;$\tilde{P_c}= RP_w + t$&#x3002; &#x8FD9;&#x65F6;&#x7684; $\tilde P_c$ &#x4ECD;&#x6709; $X, Y, Z$ &#x4E09;&#x4E2A;&#x91CF;&#xFF0C;&#x628A;&#x5B83;&#x4EEC;&#x6295;&#x5F71;&#x5230;&#x5F52;&#x4E00;&#x5316;&#x5E73;&#x9762; $Z = 1$ &#x4E0A;&#xFF0C;&#x5F97;&#x5230; $P$ &#x7684;&#x5F52;&#x4E00;&#x5316;&#x76F8;&#x673A;&#x5750;&#x6807;&#xFF1A; $P_c = [X/Z, Y /Z, 1]^T$ &#x6700;&#x540E;&#xFF0C; $P$ &#x7684;&#x5F52;&#x4E00;&#x5316;&#x5750;&#x6807;&#x7ECF;&#x8FC7;&#x5185;&#x53C2;&#x540E;&#xFF0C;&#x5BF9;&#x5E94;&#x5230;&#x5B83;&#x7684;&#x50CF;&#x7D20;&#x5750;&#x6807;&#xFF1A; $P_{uv} = KP_c$ &#x4E00;&#x5171;4&#x79CD;&#x5750;&#x6807;&#xFF1A;&#x4E16;&#x754C;&#x3001;&#x76F8;&#x673A;&#x3001;&#x5F52;&#x4E00;&#x5316;&#x76F8;&#x673A;&#x548C;&#x50CF;&#x7D20;&#x5750;&#x6807;&#x3002; &#x6DF1;&#x5EA6;&#x83B7;&#x53D6; &#x6563;&#x7126;&#x6DF1;&#x5EA6;&#x6CD5; &#x53CC;&#x76EE;&#x89C6;&#x89C9;&#x6CD5; &#x6DF1;&#x5EA6;&#x76F8;&#x673A;&#x6CD5; &#x53CC;&#x76EE;&#x6A21;&#x578B;&#x539F;&#x7406;&#x56FE;&#x4E2D;&#x7684;&#x57FA;&#x7EBF;&#xFF08;baseline&#xFF09;&#x4E0D;&#x662F;&#x4E00;&#x6761;&#x7EBF;&#xFF0C;&#x800C;&#x662F;&#x4E00;&#x4E2A;&#x8DDD;&#x79BB;&#x3002;&#x7531;&#x4E8E;&#x53CC;&#x76EE;&#x76F8;&#x673A;&#x4E4B;&#x95F4;&#x5B58;&#x5728;&#x89C6;&#x5DEE;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x7528;&#x5B83;&#x6765;&#x8BA1;&#x7B97;&#x6DF1;&#x5EA6;&#x3002; &#x8BA1;&#x7B97;&#x516C;&#x5F0F;&#x4E3A;$$z=\frac {fb}{d}$$$z$&#x8868;&#x793A;&#x6DF1;&#x5EA6;&#xFF0C;$f$&#x662F;&#x7126;&#x8DDD;&#xFF0C;$d$&#x4E3A;&#x5DE6;&#x53F3;&#x56FE;&#x7684;&#x6A2A;&#x5750;&#x6807;&#x4E4B;&#x5DEE;&#xFF0C;&#x79F0;&#x4E3A;&#x89C6;&#x5DEE;&#x3002;$$d=u_L-u_R$$&#x89C6;&#x5DEE;&#x4E0E;&#x8DDD;&#x79BB;&#x6210;&#x53CD;&#x6BD4;&#xFF0C;&#x89C6;&#x5DEE;&#x8D8A;&#x5927;&#xFF0C;&#x8DDD;&#x79BB;&#x8D8A;&#x8FD1;&#x3002;&#x89C6;&#x5DEE;&#x7684;&#x6700;&#x5C0F;&#x503C;&#x662F;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x3002; &#x7531;&#x4E8E;&#x89C6;&#x5DEE;&#x6700;&#x5C0F;&#x4E3A;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#xFF0C;&#x4E8E;&#x662F;&#x53CC;&#x76EE;&#x7684;&#x6DF1;&#x5EA6;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x7406;&#x8BBA;&#x4E0A;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x7531; fb &#x786E;&#x5B9A;&#x3002;&#x6211;&#x4EEC;&#x770B;&#x5230;&#xFF0C;&#x5F53;&#x57FA;&#x7EBF;&#x8D8A;&#x957F;&#x65F6;&#xFF0C;&#x53CC;&#x76EE;&#x6700;&#x5927;&#x80FD;&#x6D4B;&#x5230;&#x7684;&#x8DDD;&#x79BB;&#x5C31;&#x4F1A;&#x53D8;&#x8FDC;&#xFF1B;&#x53CD;&#x4E4B;&#xFF0C;&#x5C0F;&#x578B;&#x53CC;&#x76EE;&#x5668;&#x4EF6;&#x5219;&#x53EA;&#x80FD;&#x6D4B;&#x91CF;&#x5F88;&#x8FD1;&#x7684;&#x8DDD;&#x79BB;&#x3002; &#x6027;&#x8D28; &#x8DDD;&#x79BB;&#x53CD;&#x6BD4;&#x4E8E;&#x5DEE;&#x5F02;&#xFF0C;&#x8D8A;&#x8FD1;&#x7684;&#x76EE;&#x6807;&#x6D4B;&#x91CF;&#x7684;&#x8D8A;&#x51C6;&#x3002; &#x5DEE;&#x5F02;&#x6B63;&#x6BD4;&#x4E8E;(&#x5DE6;&#x53F3;&#x76F8;&#x673A;&#x95F4;)&#x57FA;&#x7EBF;&#x5BBD;&#x5EA6;&#x3002;&#x7ED9;&#x5B9A;&#x5DEE;&#x5F02;&#x8BEF;&#x5DEE;&#xFF0C;&#x589E;&#x52A0;&#x57FA;&#x7EBF;&#x5BBD;&#x5EA6;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x6DF1;&#x5EA6;&#x4F30;&#x8BA1;&#x5F97;&#x7CBE;&#x5EA6;.&#x4F46;&#x589E;&#x52A0;&#x57FA;&#x7EBF;&#x5BBD;&#x5EA6;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;&#x76EE;&#x6807;&#x5728;&#x67D0;&#x4E2A;&#x76F8;&#x673A;&#x4E2D;&#x6D88;&#x5931;&#x7684;&#x60C5;&#x5F62;. &#x51FA;&#x73B0;&#x5728;&#x4E24;&#x53F0;&#x76F8;&#x673A;&#x4E2D;&#x7684;&#x540C;&#x4E00;&#x70B9;&#x6784;&#x6210;&#x5171;&#x8F6D;&#x5BF9;.&#x5171;&#x8F6D;&#x5BF9;&#x4F4D;&#x4E8E;&#x6838;&#x7EBF;&#x3002; &#x6838;&#x7EBF;&#x662F;&#x5565; RGB-D&#x76F8;&#x673A;&#x539F;&#x7406;&#xFF1A;&#x7269;&#x7406;&#x624B;&#x6BB5;&#x6D4B;&#x91CF;&#x6DF1;&#x5EA6; &#x4E3B;&#x8981;&#x5206;&#x7C7B;&#xFF1A; &#x901A;&#x8FC7;&#x7EA2;&#x5916;&#x7ED3;&#x6784;&#x5149; &#x98DE;&#x884C;&#x65F6;&#x95F4;&#x6CD5; &#x6570;&#x5B57;&#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x9884;&#x5904;&#x7406;&#xFF1F; &#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x83B7;&#x53D6;&#x56FE;&#x50CF;&#x662F;&#x901A;&#x8FC7;&#x6210;&#x50CF;&#x7CFB;&#x7EDF;&#x5F97;&#x5230;&#xFF0C;&#x6210;&#x50CF;&#x7CFB;&#x7EDF;&#x672C;&#x8EAB;&#x7535;&#x5B50;&#x5E72;&#x6270;&#x548C;&#x5916;&#x754C;&#x73AF;&#x5883;&#x4EA7;&#x751F;&#x7684;&#x968F;&#x673A;&#x5E72;&#x6270;&#xFF0C;&#x4F7F;&#x5F97;&#x56FE;&#x50CF;&#x542B;&#x6709;&#x566A;&#x58F0;&#x3002; &#x6210;&#x50CF;&#x7CFB;&#x7EDF;&#x6240;&#x5904;&#x7684;&#x7167;&#x660E;&#x6216;&#x5176;&#x4ED6;&#x73AF;&#x5883;&#xFF0C;&#x4F7F;&#x5F97;&#x56FE;&#x50CF;&#x7684;&#x7070;&#x5EA6;&#x5206;&#x8FA8;&#x7387;&#x4E0D;&#x9AD8;&#xFF0C;&#x751A;&#x81F3;&#x5F88;&#x96BE;&#x533A;&#x5206;&#x56FE;&#x50CF;&#x4E2D;&#x7684;&#x7269;&#x4F53;&#x3002; &#x56E0;&#x6B64;&#x5FC5;&#x987B;&#x5728;&#x89C6;&#x89C9;&#x7684;&#x521D;&#x7EA7;&#x9636;&#x6BB5;&#x5BF9;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x7070;&#x5EA6;&#x4FEE;&#x6B63;&#x3001;&#x566A;&#x58F0;&#x8FC7;&#x6EE4;&#x7B49;&#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x3002; &#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x7684;&#x529F;&#x80FD;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;&#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x4E2D;&#x7684;&#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x5E76;&#x4E0D;&#x8003;&#x8651;&#x56FE;&#x50CF;&#x964D;&#x8D28;&#x539F;&#x56E0;&#xFF0C;&#x53EA;&#x5C06;&#x56FE;&#x50CF;&#x4E2D;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x7279;&#x5F81;&#x6709;&#x9009;&#x62E9;&#x7684;&#x7A81;&#x51FA;&#xFF0C;&#x8870;&#x51CF;&#x5176;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x7279;&#x5F81;&#x3002; &#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x540E;&#x7684;&#x8F93;&#x51FA;&#x56FE;&#x50CF;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x53BB;&#x903C;&#x8FD1;&#x539F;&#x59CB;&#x56FE;&#x50CF;&#xFF0C;&#x8FD9;&#x79CD;&#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x65B9;&#x6CD5;&#x79F0;&#x4E3A;&#x56FE;&#x50CF;&#x589E;&#x5F3A;&#x3002; &#x56FE;&#x50CF;&#x9884;&#x5904;&#x7406;&#x6709;&#x54EA;&#x51E0;&#x79CD;&#xFF1F; &#x7A7A;&#x95F4;&#x57DF;&#x6CD5;&#x548C;&#x9891;&#x7387;&#x57DF;&#x6CD5;&#xFF1A; &#x7A7A;&#x95F4;&#x57DF;&#x6CD5;&#x662F;&#x76F4;&#x63A5;&#x5728;&#x7A7A;&#x95F4;&#x57DF;&#x5BF9;&#x56FE;&#x50CF;&#x50CF;&#x7D20;&#x8FD0;&#x7B97;&#x5904;&#x7406;&#xFF1B; &#x9891;&#x7387;&#x57DF;&#x6CD5;&#x662F;&#x5148;&#x5BF9;&#x56FE;&#x50CF;&#x505A;&#x67D0;&#x79CD;&#x53D8;&#x6362;&#xFF08;DFT&#x3001;DCT&#x3001;DWT&#x3001;K-L&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x53D8;&#x6362;&#x57DF;&#x5BF9;&#x56FE;&#x50CF;&#x7684;&#x53D8;&#x6362;&#x503C;&#x8FDB;&#x884C;&#x8FD0;&#x7B97;&#xFF0C;&#x6700;&#x540E;&#x5C06;&#x8BA1;&#x7B97;&#x540E;&#x7684;&#x56FE;&#x50CF;&#x9006;&#x53D8;&#x6362;&#x5230;&#x7A7A;&#x95F4;&#x57DF;&#x3002; &#x5168;&#x5C40;&#x8FD0;&#x7B97;&#x548C;&#x5C40;&#x90E8;&#x8FD0;&#x7B97; &#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x548C;&#x5F69;&#x8272;&#x56FE;&#x50CF; &#x76F4;&#x65B9;&#x6982;&#x5FF5;&#x5982;&#x679C;&#x5C06;&#x56FE;&#x50CF;&#x4E2D;&#x50CF;&#x7D20;&#x4EAE;&#x5EA6;&#xFF08;&#x7070;&#x5EA6;&#x7EA7;&#x522B;&#xFF09;&#x770B;&#x6210;&#x662F;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x53D8;&#x91CF;&#xFF0C; &#x5219;&#x5176;&#x5206;&#x5E03;&#x60C5;&#x51B5;&#x5C31;&#x53CD;&#x6620;&#x4E86;&#x56FE;&#x50CF;&#x7684;&#x7EDF;&#x8BA1;&#x7279;&#x6027;&#xFF0C;&#x8FD9;&#x53EF;&#x7528;Probability Density Function (PDF)&#x6765;&#x523B;&#x753B;&#x548C;&#x63CF;&#x8FF0;&#xFF0C;&#x8868;&#x73B0;&#x4E3A;&#x7070;&#x5EA6;&#x76F4;&#x65B9;&#x56FE;&#xFF08;Histogram&#xFF09;&#x3002; &#x7070;&#x5EA6;&#x76F4;&#x65B9;&#x56FE;&#x662F;&#x7070;&#x5EA6;&#x7EA7;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x8868;&#x793A;&#x56FE;&#x50CF;&#x4E2D;&#x5177;&#x6709;&#x67D0;&#x79CD;&#x7070;&#x5EA6;&#x7EA7;&#x7684;&#x50CF;&#x7D20;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x53CD;&#x6620;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6BCF;&#x79CD;&#x7070;&#x5EA6;&#x51FA;&#x73B0;&#x7684;&#x9891;&#x7387;&#xFF0C;&#x5B83;&#x662F;&#x56FE;&#x50CF;&#x6700;&#x57FA;&#x672C;&#x7684;&#x7EDF;&#x8BA1;&#x7279;&#x5F81;&#x3002; &#x7279;&#x5F81;&#x70B9;&#x6CD5;&#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1;&#x6982;&#x8FF0;&#x91CC;&#x7A0B;&#x8BA1;(Odometry)&#x662F;&#x4E00;&#x79CD;&#x5229;&#x7528;&#x4ECE;&#x79FB;&#x52A8;&#x4F20;&#x611F;&#x5668;&#x83B7;&#x5F97;&#x7684;&#x6570;&#x636E;&#x6765;&#x4F30;&#x8BA1;&#x7269;&#x4F53;&#x4F4D;&#x7F6E;&#x968F;&#x65F6;&#x95F4;&#x7684;&#x53D8;&#x5316;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x8BE5;&#x65B9;&#x6CD5;&#x88AB;&#x7528;&#x5728;&#x8BB8;&#x591A;&#x79CD;&#x673A;&#x5668;&#x4EBA;&#x7CFB;&#x7EDF;&#xFF08;&#x8F6E;&#x5F0F;&#x6216;&#x8005;&#x817F;&#x5F0F;&#xFF09;&#x4E0A;&#x9762;&#xFF0C;&#x6765;&#x4F30;&#x8BA1;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x786E;&#x5B9A;&#x8FD9;&#x4E9B;&#x673A;&#x5668;&#x4EBA;&#x76F8;&#x5BF9;&#x4E8E;&#x521D;&#x59CB;&#x4F4D;&#x7F6E;&#x79FB;&#x52A8;&#x7684;&#x8DDD;&#x79BB;&#x3002; &#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1;&#x662F;&#x4E00;&#x79CD;&#x5229;&#x7528;&#x8FDE;&#x7EED;&#x7684;&#x56FE;&#x50CF;&#x5E8F;&#x5217;&#x6765;&#x4F30;&#x8BA1;&#x673A;&#x5668;&#x4EBA;&#x79FB;&#x52A8;&#x8DDD;&#x79BB;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x6309;&#x7167;&#x539F;&#x7406;&#x4E0D;&#x540C;&#xFF0C;&#x53EF;&#x5206;&#x4E3A;&#x7279;&#x5F81;&#x70B9;&#x6CD5;&#xFF0C;&#x5149;&#x6D41;&#x573A;&#x6CD5;&#x53CA;&#x5176;&#x6539;&#x8FDB;&#x7684;&#x76F4;&#x63A5;&#x6CD5;&#x3002; &#x7279;&#x5F81;&#x70B9;&#x56FE;&#x50CF;&#x5F53;&#x4E2D;&#x5177;&#x6709;&#x4EE3;&#x8868;&#x6027;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x6709;&#x4EE5;&#x4E0B;&#x7279;&#x70B9;&#xFF1A; &#x53EF;&#x91CD;&#x590D;&#x6027;:&#x5728;&#x4E0D;&#x540C;&#x56FE;&#x50CF;&#x4E2D;&#x80FD;&#x91CD;&#x73B0; &#x53EF;&#x533A;&#x522B;&#x6027;:&#x4E0D;&#x540C;&#x7684;&#x70B9;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x8868;&#x8FBE; &#x9AD8;&#x6548;:&#x7279;&#x5F81;&#x70B9;&#x6570;&#x91CF;&#x5E94;&#x8FDC;&#x5C0F;&#x4E8E;&#x50CF;&#x7D20;&#x7684;&#x6570;&#x91CF; &#x672C;&#x5730;:&#x7279;&#x5F81;&#x4EC5;&#x4E0E;&#x4E00;&#x5C0F;&#x7247;&#x56FE;&#x50CF;&#x533A;&#x57DF;&#x76F8;&#x5173; &#x7279;&#x5F81;&#x70B9;&#x7684;&#x4FE1;&#x606F;&#xFF1A; &#x5173;&#x952E;&#x70B9;(Key point)&#xFF1A;&#x4F4D;&#x7F6E;&#x3001;&#x5927;&#x5C0F;&#x3001;&#x65B9;&#x5411;&#x3001;&#x8BC4;&#x5206;&#x7B49; &#x63CF;&#x8FF0;&#x5B50;&#xFF08;Descriptor&#xFF09;&#xFF1A;&#x7279;&#x5F81;&#x70B9;&#x5468;&#x56F4;&#x7684;&#x56FE;&#x50CF;&#x4FE1;&#x606F; &#x7279;&#x5F81;&#x63CF;&#x8FF0;&#x5E94;&#x8BE5;&#x5728;&#x5149;&#x7167;&#x3001;&#x89C6;&#x89D2;&#x53D1;&#x751F;&#x5C11;&#x91CF;&#x53D8;&#x5316;&#x65F6;&#x4ECD;&#x80FD;&#x4FDD;&#x6301;&#x4E00;&#x81F4;&#x3002; Harris Detector&#x8FD9;&#x4E2A;&#x90E8;&#x5206;&#x6211;&#x8BB0;&#x5F97;&#x4E0A;&#x8BFE;&#x8BB2;&#x4E86;$$R=\lambda_1\lambda_2-k(\lambda_1+\lambda_2)^2$$ Harris Detector&#x662F;&#x901A;&#x8FC7;&#x6570;&#x5B66;&#x8BA1;&#x7B97;&#x5728;&#x56FE;&#x50CF;&#x4E0A;&#x53D1;&#x73B0;&#x89D2;&#x5EA6;&#x7279;&#x5F81;&#x7684;&#x4E00;&#x79CD;&#x7B97;&#x6CD5;&#x3002; &#x7F3A;&#x70B9;&#xFF1A;Harris&#x7B97;&#x5B50;&#x5BF9;&#x7070;&#x5EA6;&#x7684;&#x5E73;&#x79FB;&#x662F;&#x4E0D;&#x53D8;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x53EA;&#x6709;&#x5DEE;&#x5206;&#xFF0C;&#x5BF9;&#x65CB;&#x8F6C;&#x4E5F;&#x6709;&#x4E0D;&#x53D8;&#x6027;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x5C3A;&#x5EA6;&#x5F88;&#x654F;&#x611F;&#xFF0C;&#x5728;&#x4E00;&#x4E2A;&#x5C3A;&#x5EA6;&#x4E0B;&#x662F;&#x89D2;&#x70B9;&#xFF0C;&#x5728;&#x53E6;&#x4E00;&#x4E2A;&#x5C3A;&#x5EA6;&#x4E0B;&#x53EF;&#x80FD;&#x5C31;&#x4E0D;&#x662F;&#x4E86;&#x3002; FAST&#x7279;&#x5F81;FAST &#x662F;&#x4E00;&#x79CD;&#x89D2;&#x70B9;&#xFF0C;&#x4E3B;&#x8981;&#x68C0;&#x6D4B;&#x5C40;&#x90E8;&#x50CF;&#x7D20;&#x7070;&#x5EA6;&#x53D8;&#x5316;&#x660E;&#x663E;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x4EE5;&#x901F;&#x5EA6;&#x5FEB;&#x8457;&#x79F0;&#x3002;&#x5B83;&#x7684;&#x601D;&#x60F3;&#x662F;&#xFF1A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x4E0E;&#x5B83;&#x90BB;&#x57DF;&#x7684;&#x50CF;&#x7D20;&#x5DEE;&#x522B;&#x8F83;&#x5927;&#xFF08;&#x8FC7;&#x4EAE;&#x6216;&#x8FC7;&#x6697;&#xFF09; , &#x90A3;&#x5B83;&#x66F4;&#x53EF;&#x80FD;&#x662F;&#x89D2;&#x70B9;&#x3002;&#x76F8;&#x6BD4;&#x4E8E;&#x5176;&#x4ED6;&#x89D2;&#x70B9;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#xFF0C; FAST &#x53EA;&#x9700;&#x6BD4;&#x8F83;&#x50CF;&#x7D20;&#x4EAE;&#x5EA6;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x5341;&#x5206;&#x5FEB;&#x6377;&#x3002; &#x68C0;&#x6D4B;&#x8FC7;&#x7A0B;&#x5982;&#x4E0B;&#xFF1A; &#x5728;&#x56FE;&#x50CF;&#x4E2D;&#x9009;&#x53D6;&#x50CF;&#x7D20; $p$&#xFF0C;&#x5047;&#x8BBE;&#x5B83;&#x7684;&#x4EAE;&#x5EA6;&#x4E3A; $I_p$&#x3002; &#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x9608;&#x503C; $T$ (&#x6BD4;&#x5982; $I_p$ &#x7684; 20%)&#x3002; &#x4EE5;&#x50CF;&#x7D20; $p$ &#x4E3A;&#x4E2D;&#x5FC3;, &#x9009;&#x53D6;&#x534A;&#x5F84;&#x4E3A; 3 &#x7684;&#x5706;&#x4E0A;&#x7684; 16 &#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x3002; &#x5047;&#x5982;&#x9009;&#x53D6;&#x7684;&#x5706;&#x4E0A;&#xFF0C;&#x6709;&#x8FDE;&#x7EED;&#x7684; N &#x4E2A;&#x70B9;&#x7684;&#x4EAE;&#x5EA6;&#x5927;&#x4E8E; $I_p + T$ &#x6216;&#x5C0F;&#x4E8E; $I_p &#x2212; T$&#xFF0C;&#x90A3;&#x4E48;&#x50CF;&#x7D20; $p$&#x53EF;&#x4EE5;&#x88AB;&#x8BA4;&#x4E3A;&#x662F;&#x7279;&#x5F81;&#x70B9; (N &#x901A;&#x5E38;&#x53D6; 12&#xFF0C;&#x5373;&#x4E3A; FAST-12&#x3002;&#x5176;&#x5B83;&#x5E38;&#x7528;&#x7684; N &#x53D6;&#x503C;&#x4E3A; 9 &#x548C; 11&#xFF0C;&#x4ED6;&#x4EEC;&#x5206;&#x522B;&#x88AB;&#x79F0;&#x4E3A;FAST-9&#xFF0C; FAST-11)&#x3002; &#x5FAA;&#x73AF;&#x4EE5;&#x4E0A;&#x56DB;&#x6B65;&#xFF0C;&#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x6267;&#x884C;&#x76F8;&#x540C;&#x7684;&#x64CD;&#x4F5C;&#x3002; &#x5728; FAST-12 &#x7B97;&#x6CD5;&#x4E2D;&#xFF0C;&#x4E3A;&#x4E86;&#x66F4;&#x9AD8;&#x6548;&#xFF0C;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0;&#x4E00;&#x9879;&#x9884;&#x6D4B;&#x8BD5;&#x64CD;&#x4F5C;&#xFF0C;&#x4EE5;&#x5FEB;&#x901F;&#x5730;&#x6392;&#x9664;&#x7EDD;&#x5927;&#x591A;&#x6570;&#x4E0D;&#x662F;&#x89D2;&#x70B9;&#x7684;&#x50CF;&#x7D20;&#x3002;&#x5177;&#x4F53;&#x64CD;&#x4F5C;&#x4E3A;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#xFF0C;&#x76F4;&#x63A5;&#x68C0;&#x6D4B;&#x90BB;&#x57DF;&#x5706;&#x4E0A;&#x7684;&#x7B2C; 1&#xFF0C; 5&#xFF0C; 9&#xFF0C; 13 &#x4E2A;&#x50CF;&#x7D20;&#x7684;&#x4EAE;&#x5EA6;&#x3002;&#x53EA;&#x6709;&#x5F53;&#x8FD9;&#x56DB;&#x4E2A;&#x50CF;&#x7D20;&#x4E2D;&#x6709;&#x4E09;&#x4E2A;&#x540C;&#x65F6;&#x5927;&#x4E8E; $I_p + T$ &#x6216;&#x5C0F;&#x4E8E; $I_p &#x2212; T$&#x65F6;&#xFF0C;&#x5F53;&#x524D;&#x50CF;&#x7D20;&#x624D;&#x6709;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x89D2;&#x70B9;&#xFF0C;&#x5426;&#x5219;&#x5E94;&#x8BE5;&#x76F4;&#x63A5;&#x6392;&#x9664;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x9884;&#x6D4B;&#x8BD5;&#x64CD;&#x4F5C;&#x5927;&#x5927;&#x52A0;&#x901F;&#x4E86;&#x89D2;&#x70B9;&#x68C0;&#x6D4B;&#x3002; FAST&#x89D2;&#x70B9;&#x7ECF;&#x5E38;&#x51FA;&#x73B0;&#x201C;&#x624E;&#x5806;&#x201D;&#x7684;&#x73B0;&#x8C61;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x7B2C;&#x4E00;&#x904D;&#x68C0;&#x6D4B;&#x4E4B;&#x540E;&#xFF0C;&#x8FD8;&#x9700;&#x8981;&#x7528;&#x975E;&#x6781;&#x5927;&#x503C;&#x6291;&#x5236;&#xFF0C;&#x5728;&#x4E00;&#x5B9A;&#x533A;&#x57DF;&#x5185;&#x4EC5;&#x4FDD;&#x7559;&#x54CD;&#x5E94;&#x6781;&#x5927;&#x503C;&#x7684;&#x89D2;&#x70B9;&#xFF0C;&#x907F;&#x514D;&#x89D2;&#x70B9;&#x96C6;&#x4E2D;&#x7684;&#x95EE;&#x9898;&#x3002; ORB&#x89D2;&#x70B9;&#x68C0;&#x6D4B;Oriented FAST&#x9996;&#x5148;&#xFF0C;FAST&#x89D2;&#x70B9;&#x6570;&#x91CF;&#x8FC7;&#x591A;&#xFF0C;&#x6839;&#x636E;&#x671F;&#x671B;&#x7684;&#x6570;&#x91CF;N&#xFF0C;&#x5BF9;&#x539F;&#x59CB;FAST&#x89D2;&#x70B9;&#x5206;&#x522B;&#x8BA1;&#x7B97;Harris&#x54CD;&#x5E94;&#x503C;&#xFF0C;&#x9009;&#x53D6;&#x524D;N&#x4E2A;&#x5177;&#x6709;&#x6700;&#x5927;&#x54CD;&#x5E94;&#x503C;&#x7684;&#x89D2;&#x70B9;&#x3002;&#x8BA1;&#x7B97;Harris&#x54CD;&#x5E94;&#x503C;&#xFF0C;&#x5C31;&#x662F;&#x524D;&#x9762;Harris Detector&#x91CC;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x90A3;&#x4E2A;$R$&#x3002; &#x5176;&#x6B21;&#xFF0C;FAST&#x89D2;&#x70B9;&#x4E0D;&#x5177;&#x6709;&#x65B9;&#x5411;&#x4FE1;&#x606F;&#xFF0C;&#x56FA;&#x5B9A;&#x9009;&#x53D6;&#x534A;&#x5F84;&#x4E3A;3&#x7684;&#x5706;&#xFF0C;&#x5B58;&#x5728;&#x5C3A;&#x5EA6;&#x95EE;&#x9898;&#xFF1A;&#x8FDC;&#x770B;&#x662F;&#x89D2;&#x70B9;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x8FD1;&#x770B;&#x5C31;&#x4E0D;&#x662F;&#x4E86;&#xFF0C;ORB&#x6DFB;&#x52A0;&#x4E86;&#x5C3A;&#x5EA6;&#x548C;&#x65CB;&#x8F6C;&#x7684;&#x63CF;&#x8FF0;&#xFF0C;&#x5C3A;&#x5EA6;&#x4E0D;&#x53D8;&#x6027;&#x7531;&#x6784;&#x5EFA;&#x56FE;&#x50CF;&#x91D1;&#x5B57;&#x5854;(&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x4E0D;&#x540C;&#x5C42;&#x6B21;&#x7684;&#x964D;&#x91C7;&#x6837;&#xFF0C;&#x4EE5;&#x83B7;&#x5F97;&#x4E0D;&#x540C;&#x5206;&#x8FA8;&#x7387;&#x7684;&#x56FE;&#x50CF;)&#x7684;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;&#xFF0C;&#x65CB;&#x8F6C;&#x7684;&#x63CF;&#x8FF0;&#x5219;&#x7531;&#x7070;&#x5EA6;&#x8D28;&#x5FC3;&#x6CD5;&#x5B9E;&#x73B0;&#x3002; &#x56FE;&#x50CF;&#x91D1;&#x5B57;&#x5854;&#x662F;&#x6307;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x4E0D;&#x540C;&#x5C42;&#x6B21;&#x7684;&#x964D;&#x91C7;&#x6837;&#xFF0C;&#x4EE5;&#x83B7;&#x5F97;&#x4E0D;&#x540C;&#x5206;&#x8FA8;&#x7387;&#x7684;&#x56FE;&#x50CF;&#x3002; &#x5728;&#x91D1;&#x5B57;&#x5854;&#x7684;&#x591A;&#x4E2A;&#x5C42;&#x4E0A;&#x90FD;&#x662F;&#x89D2;&#x70B9;&#xFF0C;&#x624D;&#x7B97;&#x662F;&#x89D2;&#x70B9;&#x3002;&#x5C31;&#x662F;&#x653E;&#x5927;&#x6216;&#x7F29;&#x5C0F;&#xFF0C;&#x8FDC;&#x770B;&#x6216;&#x8FD1;&#x770B;&#xFF0C;&#x90FD;&#x8FD8;&#x662F;&#x4E2A;&#x89D2;&#x70B9;&#xFF0C;&#x4E00;&#x822C;&#x662F;&#x89D2;&#x5EA6;&#x660E;&#x663E;&#x7684;&#x5C16;&#x89D2;&#x3002; &#x7070;&#x5EA6;&#x8D28;&#x5FC3;&#x6CD5; &#x5728;&#x4E00;&#x4E2A;&#x5C0F;&#x7684;&#x56FE;&#x50CF;&#x5757; $B$&#x4E2D;&#xFF0C;&#x5B9A;&#x4E49;&#x56FE;&#x50CF;&#x5757;&#x7684;&#x77E9;&#x4E3A;&#xFF1A;$$m_{pq} = \sum_{x,y\in B}x^py^qI(x, y) \quad p, q =\lbrace 0, 1\rbrace$$ &#x901A;&#x8FC7;&#x77E9;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x56FE;&#x50CF;&#x5757;&#x7684;&#x8D28;&#x5FC3;$$C=\left( \frac {m_{10}}{m_{00}},\frac {m_{01}} {m_{00}} \right)$$ &#x8FDE;&#x63A5;&#x56FE;&#x50CF;&#x5757;&#x7684;&#x51E0;&#x4F55;&#x4E2D;&#x5FC3;$ O$ &#x4E0E;&#x8D28;&#x5FC3; $C$&#xFF0C;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x65B9;&#x5411;&#x5411;&#x91CF; $\overrightarrow {OC}$&#xFF0C;&#x4E8E;&#x662F;&#x7279;&#x5F81;&#x70B9;&#x7684;&#x65B9;&#x5411;&#x53EF;&#x4EE5;&#x5B9A;&#x4E49;&#x4E3A;$$\theta=arctan(m_{01}/m_{10})$$ &#x901A;&#x8FC7;&#x4EE5;&#x4E0A;&#x65B9;&#x6CD5;&#xFF0C; FAST &#x89D2;&#x70B9;&#x4FBF;&#x5177;&#x6709;&#x4E86;&#x5C3A;&#x5EA6;&#x4E0E;&#x65CB;&#x8F6C;&#x7684;&#x63CF;&#x8FF0;&#xFF0C;&#x5927;&#x5927;&#x63D0;&#x5347;&#x4E86;&#x5B83;&#x4EEC;&#x5728;&#x4E0D;&#x540C;&#x56FE;&#x50CF;&#x4E4B;&#x95F4;&#x8868;&#x8FF0;&#x7684;&#x9C81;&#x68D2;&#x6027;&#x3002;&#x6240;&#x4EE5;&#x5728; ORB &#x4E2D;&#xFF0C;&#x628A;&#x8FD9;&#x79CD;&#x6539;&#x8FDB;&#x540E;&#x7684; FAST &#x79F0;&#x4E3A; Oriented FAST&#x3002; BRIEF &#x63CF;&#x8FF0;&#x5B50;BRIEF &#x662F;&#x4E00;&#x79CD;&#x4E8C;&#x8FDB;&#x5236;&#x63CF;&#x8FF0;&#x5B50;&#xFF0C;&#x5B83;&#x7684;&#x63CF;&#x8FF0;&#x5411;&#x91CF;&#x7531;&#x8BB8;&#x591A;&#x4E2A; 0 &#x548C; 1 &#x7EC4;&#x6210;&#xFF0C;&#x8FD9;&#x91CC;&#x7684; 0 &#x548C; 1 &#x7F16;&#x7801;&#x4E86;&#x5173;&#x952E;&#x70B9;&#x9644;&#x8FD1;&#x4E24;&#x4E2A;&#x50CF;&#x7D20;&#xFF08;&#x6BD4;&#x5982;&#x8BF4; $p$ &#x548C; $q$&#xFF09;&#x7684;&#x5927;&#x5C0F;&#x5173;&#x7CFB;&#xFF1A;&#x5982;&#x679C; $p$ &#x6BD4; $q$ &#x5927;&#xFF0C;&#x5219;&#x53D6; 1&#xFF0C;&#x53CD;&#x4E4B;&#x5C31;&#x53D6; 0&#x3002; &#x5982;&#x679C;&#x6211;&#x4EEC;&#x53D6;&#x4E86; 128 &#x4E2A;&#x8FD9;&#x6837;&#x7684; $p&#xFF0C; q$&#xFF0C;&#x6700;&#x540E;&#x5C31;&#x5F97;&#x5230; 128 &#x7EF4;&#x7531; 0&#xFF0C; 1 &#x7EC4;&#x6210;&#x7684;&#x5411;&#x91CF;&#x3002; BRIEF &#x4F7F;&#x7528;&#x4E86;&#x968F;&#x673A;&#x9009;&#x70B9;&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x901F;&#x5EA6;&#x975E;&#x5E38;&#x5FEB;&#xFF0C;&#x800C;&#x4E14;&#x7531;&#x4E8E;&#x4F7F;&#x7528;&#x4E86;&#x4E8C;&#x8FDB;&#x5236;&#x8868;&#x8FBE;&#xFF0C;&#x5B58;&#x50A8;&#x8D77;&#x6765;&#x4E5F;&#x5341;&#x5206;&#x65B9;&#x4FBF;&#xFF0C;&#x9002;&#x7528;&#x4E8E;&#x5B9E;&#x65F6;&#x7684;&#x56FE;&#x50CF;&#x5339;&#x914D;&#x3002; ORB &#x5728; FAST &#x7279;&#x5F81;&#x70B9;&#x63D0;&#x53D6;&#x9636;&#x6BB5;&#x8BA1;&#x7B97;&#x4E86;&#x5173;&#x952E;&#x70B9;&#x7684;&#x65B9;&#x5411;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x65B9;&#x5411;&#x4FE1;&#x606F;&#xFF0C;&#x8BA1;&#x7B97;&#x4E86;&#x65CB;&#x8F6C;&#x4E4B;&#x540E;&#x7684;&#x201C;Steer BRIEF&#x201D;&#x7279;&#x5F81;&#xFF0C;&#x4F7F; ORB &#x7684;&#x63CF;&#x8FF0;&#x5B50;&#x5177;&#x6709;&#x8F83;&#x597D;&#x7684;&#x65CB;&#x8F6C;&#x4E0D;&#x53D8;&#x6027;&#x3002; &#x7531;&#x4E8E;&#x8003;&#x8651;&#x5230;&#x4E86;&#x65CB;&#x8F6C;&#x548C;&#x7F29;&#x653E;&#xFF0C;&#x4F7F;&#x5F97; ORB &#x5728;&#x5E73;&#x79FB;&#x3001;&#x65CB;&#x8F6C;&#x3001;&#x7F29;&#x653E;&#x7684;&#x53D8;&#x6362;&#x4E0B;&#x4ECD;&#x6709;&#x826F;&#x597D;&#x7684;&#x8868;&#x73B0;&#x3002; &#x7279;&#x5F81;&#x5339;&#x914D;&#x901A;&#x8FC7;&#x63CF;&#x8FF0;&#x5B50;&#x7684;&#x5DEE;&#x5F02;&#x5224;&#x65AD;&#x54EA;&#x4E9B;&#x7279;&#x5F81;&#x4E3A;&#x540C;&#x4E00;&#x4E2A;&#x70B9;&#x3002; &#x66B4;&#x529B;&#x5339;&#x914D;&#xFF1A;&#x6BD4;&#x8F83;&#x56FE;1&#x4E2D;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x548C;&#x56FE;2&#x7279;&#x5F81;&#x7684;&#x8DDD;&#x79BB;&#xFF08;Brute-Force Matcher&#xFF09; &#x52A0;&#x901F;&#xFF1A;&#x5FEB;&#x901F;&#x8FD1;&#x4F3C;&#x6700;&#x8FD1;&#x90BB;&#xFF08;FLANN&#xFF09; &#x7279;&#x5F81;&#x70B9;&#x6CD5;&#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1;-&#x5DE5;&#x4F5C;&#x6D41;&#x7A0B;Input&#x5DE6;&#x56FE;&#x50CF;&#x3001;&#x53F3;&#x56FE;&#x50CF;&#x5E8F;&#x5217;&#x3001;&#x5DE6;&#x53F3;&#x76F8;&#x673A;&#x7684;&#x5185;&#x53C2;&#x3001;&#x5916;&#x53C2;Output&#x56FE;&#x50CF;&#x5BF9;&#x4E4B;&#x95F4;&#x7684;&#x4F4D;&#x59FF;&#x5173;&#x7CFB;&#x3001;&#x76F8;&#x673A;&#x8F68;&#x8FF9;(&#x4E5F;&#x53EF;&#x4EE5;&#x751F;&#x6210;&#x57FA;&#x4E8E;&#x7279;&#x5F81;&#x70B9;&#x7684;&#x7A00;&#x758F;3d&#x5730;&#x56FE;&#xFF0C;optional) &#x83B7;&#x5F97;&#x5DE6;&#x53F3;&#x56FE;&#x50CF;&#x3001;&#x56FE;&#x50CF;&#x6821;&#x6B63; &#x63D0;&#x53D6;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x70B9; &#x5DE6;&#x53F3;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x5339;&#x914D;&#xFF0C;&#x83B7;&#x53D6;&#x7279;&#x5F81;&#x70B9;&#x5750;&#x6807; &#x524D;&#x540E;&#x56FE;&#x50CF;&#x7279;&#x5F81;&#x5339;&#x914D; &#x589E;&#x91CF;&#x5F0F;&#x7684;&#x8FD0;&#x52A8;&#x4F30;&#x8BA1; &#x5728;&#x6700;&#x540E;&#x4E00;&#x6B65;&#x201C;&#x589E;&#x91CF;&#x5F0F;&#x7684;&#x8FD0;&#x52A8;&#x4F30;&#x8BA1;&#x201D;&#x4E2D;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x4E3A;&#x4E86;&#x6839;&#x636E;&#x5339;&#x914D;&#x540E;&#x7684;&#x7279;&#x5F81;&#x70B9;&#x548C;&#x7279;&#x5F81;&#x70B9;&#x7684;&#x5750;&#x6807;&#xFF0C;&#x6062;&#x590D;&#x4E24;&#x4E2A;&#x65F6;&#x523B;&#x76F8;&#x673A;&#x7684;&#x8FD0;&#x52A8;&#x3002; &#x589E;&#x91CF;&#x5F0F;&#x8FD0;&#x52A8;&#x4F30;&#x8BA1;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;/ PnP&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F; ICP&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F; &#x7279;&#x5F81;&#x70B9;&#x6D41;&#x7A0B; &#x5728;&#x56FE;&#x50CF;&#x4E2D;&#x63D0;&#x53D6;&#x7279;&#x5F81;&#x70B9;&#x5E76;&#x8BA1;&#x7B97;&#x7279;&#x5F81;&#x63CF;&#x8FF0; &#x5728;&#x4E0D;&#x540C;&#x56FE;&#x50CF;&#x4E2D;&#x5BFB;&#x627E;&#x7279;&#x5F81;&#x5339;&#x914D; &#x5229;&#x7528;&#x5339;&#x914D;&#x70B9;&#x4FE1;&#x606F;&#x8BA1;&#x7B97;&#x76F8;&#x673A;&#x4F4D;&#x59FF; &#x7279;&#x5F81;&#x70B9;&#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1;&#x7F3A;&#x70B9; &#x5173;&#x952E;&#x70B9;&#x7684;&#x63D0;&#x53D6;&#x4E0E;&#x63CF;&#x8FF0;&#x5B50;&#x7684;&#x8BA1;&#x7B97;&#x975E;&#x5E38;&#x8017;&#x65F6;&#x3002; &#x4F7F;&#x7528;&#x7279;&#x5F81;&#x70B9;&#x65F6;&#xFF0C;&#x5FFD;&#x7565;&#x4E86;&#x9664;&#x7279;&#x5F81;&#x70B9;&#x4EE5;&#x5916;&#x7684;&#x6240;&#x6709;&#x4FE1;&#x606F;&#x3002; &#x76F8;&#x673A;&#x6709;&#x65F6;&#x4F1A;&#x8FD0;&#x52A8;&#x5230;&#x7279;&#x5F81;&#x7F3A;&#x5931;&#x7684;&#x5730;&#x65B9;&#xFF0C;&#x5F80;&#x5F80;&#x8FD9;&#x4E9B;&#x5730;&#x65B9;&#x6CA1;&#x6709;&#x660E;&#x663E;&#x7684;&#x7EB9;&#x7406;&#x4FE1;&#x606F;&#x3002; xxxx &#x5149;&#x6D41;&#x6CD5;&#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1;&#x5149;&#x6D41;&#x7684;&#x6982;&#x5FF5;&#x5149;&#x6D41;&#x662F;&#x4E00;&#x79CD;&#x63CF;&#x8FF0;&#x50CF;&#x7D20;&#x968F;&#x7740;&#x65F6;&#x95F4;&#xFF0C;&#x5728;&#x56FE;&#x50CF;&#x4E4B;&#x95F4;&#x8FD0;&#x52A8;&#x7684;&#x65B9;&#x6CD5;&#x3002;&#x5149;&#x6D41;&#x8868;&#x8FBE;&#x4E86;&#x56FE;&#x50CF;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x7531;&#x4E8E;&#x5B83;&#x5305;&#x542B;&#x4E86;&#x76EE;&#x6807;&#x8FD0;&#x52A8;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x88AB;&#x89C2;&#x5BDF;&#x8005;&#x7528;&#x6765;&#x786E;&#x5B9A;&#x76EE;&#x6807;&#x7684;&#x8FD0;&#x52A8;&#x60C5;&#x51B5;&#x3002; &#x5149;&#x6D41;&#x9664;&#x4E86;&#x63D0;&#x4F9B;&#x8FDC;&#x8FD1;&#x5916;&#xFF0C;&#x8FD8;&#x53EF;&#x4EE5;&#x63D0;&#x4F9B;&#x89D2;&#x5EA6;&#x4FE1;&#x606F;&#x3002; &#x8BA1;&#x7B97;&#x90E8;&#x5206;&#x50CF;&#x7D20;&#x8FD0;&#x52A8;&#x7684;&#x79F0;&#x4E3A;&#x7A00;&#x758F;&#x5149;&#x6D41;&#xFF0C;&#x8BA1;&#x7B97;&#x6240;&#x6709;&#x50CF;&#x7D20;&#x7684;&#x79F0;&#x4E3A;&#x7A20;&#x5BC6;&#x5149;&#x6D41;&#x3002; &#x672C;&#x8D28;&#x4E0A;&#x90FD;&#x662F;&#x4F30;&#x8BA1;&#x50CF;&#x7D20;&#x5728;&#x4E0D;&#x540C;&#x65F6;&#x523B;&#x56FE;&#x50CF;&#x4E2D;&#x7684;&#x8FD0;&#x52A8;&#x3002; &#x5149;&#x6D41;&#x7B97;&#x6CD5;&#x7684;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x5149;&#x6D41;&#x7B97;&#x6CD5;&#x8BC4;&#x4F30;&#x4E24;&#x5E45;&#x56FE;&#x50CF;&#x7684;&#x4E4B;&#x95F4;&#x7684;&#x53D8;&#x5F62;&#xFF0C;&#x5B83;&#x7684;&#x57FA;&#x672C;&#x5047;&#x8BBE;&#x662F;&#x4F53;&#x7D20;&#xFF08;&#x4F53;&#x79EF;&#x5143;&#x7D20;&#x7684;&#x7B80;&#x79F0;&#xFF09;&#x548C;&#x56FE;&#x50CF;&#x50CF;&#x7D20;&#x5B88;&#x6052;&#x3002;&#x5B83;&#x5047;&#x8BBE;&#x4E00;&#x4E2A;&#x7269;&#x4F53;&#x7684;&#x989C;&#x8272;&#x5728;&#x524D;&#x540E;&#x4E24;&#x5E27;&#x6CA1;&#x6709;&#x5DE8;&#x5927;&#x800C;&#x660E;&#x663E;&#x7684;&#x53D8;&#x5316;&#x3002;&#x57FA;&#x4E8E;&#x8FD9;&#x4E2A;&#x601D;&#x8DEF;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x56FE;&#x50CF;&#x7EA6;&#x675F;&#x65B9;&#x7A0B;&#x3002;&#x4E0D;&#x540C;&#x7684;&#x5149;&#x6D41;&#x7B97;&#x6CD5;&#x89E3;&#x51B3;&#x4E86;&#x5047;&#x5B9A;&#x4E86;&#x4E0D;&#x540C;&#x9644;&#x52A0;&#x6761;&#x4EF6;&#x7684;&#x5149;&#x6D41;&#x95EE;&#x9898;&#x3002; &#x5149;&#x6D41;&#x6CD5;&#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1;&#x8FC7;&#x7A0B; &#x56FE;&#x50CF;&#x83B7;&#x53D6;&#xFF1A;&#x5355;&#x76EE;&#x7167;&#x76F8;&#x673A;&#x3001;&#x53CC;&#x76EE;&#x7167;&#x76F8;&#x673A;&#x6216;&#x8005;&#x5168;&#x5411;&#x7167;&#x76F8;&#x673A;&#xFF1B; &#x56FE;&#x50CF;&#x6821;&#x6B63;&#xFF1A;&#x4F7F;&#x7528;&#x4E00;&#x4E9B;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x6280;&#x672F;&#x6765;&#x53BB;&#x9664;&#x900F;&#x955C;&#x7578;&#x53D8;&#xFF1B; &#x7279;&#x5F81;&#x68C0;&#x6D4B;&#xFF1A;&#x786E;&#x5B9A;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x63CF;&#x8FF0;&#x7B26;&#xFF0C;&#x5728;&#x5E27;&#x4E0E;&#x5E27;&#x4E4B;&#x95F4;&#x5339;&#x914D;&#x7279;&#x5F81;&#x5E76;&#x6784;&#x5EFA;&#x5149;&#x6D41;&#x573A;&#x3002; &#x4F7F;&#x7528;&#x76F8;&#x5173;&#x6027;&#x6765;&#x5EA6;&#x91CF;&#x4E24;&#x5E45;&#x56FE;&#x50CF;&#x95F4;&#x7684;&#x4E00;&#x81F4;&#x6027;&#xFF0C;&#x5E76;&#x4E0D;&#x8FDB;&#x884C;&#x957F;&#x65F6;&#x95F4;&#x7684;&#x7279;&#x5F81;&#x8DDF;&#x8E2A; &#x7279;&#x5F81;&#x63D0;&#x53D6;&#x3001;&#x5339;&#x914D;&#xFF08;Lucas&#x2013;Kanade method&#xFF09; &#x6784;&#x5EFA;&#x5149;&#x6D41;&#x573A; &#x68C0;&#x67E5;&#x5149;&#x6D41;&#x573A;&#x5411;&#x91CF;&#x662F;&#x5426;&#x5B58;&#x5728;&#x6F5C;&#x5728;&#x7684;&#x8DDF;&#x8E2A;&#x8BEF;&#x5DEE;&#xFF0C;&#x79FB;&#x9664;&#x5916;&#x70B9; &#x7531;&#x5149;&#x6D41;&#x573A;&#x4F30;&#x8BA1;&#x7167;&#x76F8;&#x673A;&#x7684;&#x8FD0;&#x52A8; &#x53EF;&#x9009;&#x65B9;&#x6CD5;1&#xFF1A;&#x4F7F;&#x7528;&#x5361;&#x5C14;&#x66FC;&#x6EE4;&#x6CE2;&#x8FDB;&#x884C;&#x72B6;&#x6001;&#x4F30;&#x8BA1; &#x53EF;&#x9009;&#x65B9;&#x6CD5;2&#xFF1A;&#x67E5;&#x627E;&#x7279;&#x5F81;&#x7684;&#x51E0;&#x4F55;&#x4E0E;3D&#x5C5E;&#x6027;&#xFF0C;&#x4EE5;&#x6700;&#x5C0F;&#x5316;&#x57FA;&#x4E8E;&#x76F8;&#x90BB;&#x4E24;&#x5E27;&#x4E4B;&#x95F4;&#x7684;&#x91CD;&#x6295;&#x5F71;&#x8BEF;&#x5DEE;&#x7684;&#x7F5A;&#x51FD;&#x6570;&#x503C;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x6570;&#x5B66;&#x4E0A;&#x7684;&#x6700;&#x5C0F;&#x5316;&#x65B9;&#x6CD5;&#x6216;&#x968F;&#x673A;&#x91C7;&#x6837;&#x65B9;&#x6CD5;&#x6765;&#x5B8C;&#x6210; &#x5468;&#x671F;&#x6027;&#x7684;&#x91CD;&#x5B9A;&#x4F4D;&#x8DDF;&#x8E2A;&#x70B9;&#x3002; &#x5149;&#x6D41;&#x6CD5;&#x7684;&#x7F3A;&#x70B9; &#x5149;&#x6D41;&#x4EC5;&#x4F30;&#x8BA1;&#x4E86;&#x50CF;&#x7D20;&#x95F4;&#x7684;&#x5E73;&#x79FB;&#xFF0C;&#x6CA1;&#x6709;&#x7528;&#x5230;&#x76F8;&#x673A;&#x672C;&#x8EAB;&#x7684;&#x51E0;&#x4F55;&#x7ED3;&#x6784; &#x6CA1;&#x6709;&#x8003;&#x8651;&#x5230;&#x76F8;&#x673A;&#x7684;&#x65CB;&#x8F6C;&#x548C;&#x56FE;&#x50CF;&#x7684;&#x7F29;&#x653E; &#x5BF9;&#x4E8E;&#x8FB9;&#x754C;&#x4E0A;&#x7684;&#x70B9;&#xFF0C;&#x5149;&#x6D41;&#x4E0D;&#x597D;&#x8FFD;&#x8E2A; &#x4F46;&#x662F;&#x76F4;&#x63A5;&#x6CD5;&#x5219;&#x8003;&#x8651;&#x4E86;&#x8FD9;&#x4E9B;&#x4FE1;&#x606F; Lucas-Kanade &#x5149;&#x6D41;&#x6982;&#x8FF0;&#x8BA1;&#x7B97;&#x4E24;&#x5E27;&#x5728;&#x65F6;&#x95F4;$t$ &#x5230;$t + &#x3B4;t$&#x4E4B;&#x95F4;&#x6BCF;&#x4E2A;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#x4F4D;&#x7F6E;&#x7684;&#x79FB;&#x52A8;&#x3002;&#x7531;&#x4E8E;&#x5B83;&#x662F;&#x57FA;&#x4E8E;&#x56FE;&#x50CF;&#x4FE1;&#x53F7;&#x7684;&#x6CF0;&#x52D2;&#x7EA7;&#x6570;&#xFF0C;&#x8FD9;&#x79CD;&#x65B9;&#x6CD5;&#x79F0;&#x4E3A;&#x5DEE;&#x5206;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5BF9;&#x4E8E;&#x7A7A;&#x95F4;&#x548C;&#x65F6;&#x95F4;&#x5750;&#x6807;&#x4F7F;&#x7528;&#x504F;&#x5BFC;&#x6570;&#x3002; &#x4E09;&#x4E2A;&#x5047;&#x8BBE;&#x6761;&#x4EF6; &#x4EAE;&#x5EA6;&#x6052;&#x5B9A;&#xFF0C;&#x5C31;&#x662F;&#x540C;&#x4E00;&#x70B9;&#x968F;&#x7740;&#x65F6;&#x95F4;&#x7684;&#x53D8;&#x5316;&#xFF0C;&#x5176;&#x4EAE;&#x5EA6;&#x4E0D;&#x4F1A;&#x53D1;&#x751F;&#x6539;&#x53D8;&#xFF0C;&#x7528;&#x4E8E;&#x5F97;&#x5230;&#x5149;&#x6D41;&#x6CD5;&#x57FA;&#x672C;&#x65B9;&#x7A0B;&#xFF1B; &#x5C0F;&#x8FD0;&#x52A8;&#xFF0C;&#x8FD9;&#x4E2A;&#x5FC5;&#x987B;&#x6EE1;&#x8DB3;&#xFF0C;&#x5C31;&#x662F;&#x65F6;&#x95F4;&#x7684;&#x53D8;&#x5316;&#x4E0D;&#x4F1A;&#x5F15;&#x8D77;&#x4F4D;&#x7F6E;&#x7684;&#x5267;&#x70C8;&#x53D8;&#x5316;&#xFF0C;&#x8FD9;&#x6837;&#x7070;&#x5EA6;&#x624D;&#x80FD;&#x5BF9;&#x4F4D;&#x7F6E;&#x6C42;&#x504F;&#x5BFC;&#xFF08;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;&#xFF0C;&#x5C0F;&#x8FD0;&#x52A8;&#x60C5;&#x51B5;&#x4E0B;&#x6211;&#x4EEC;&#x624D;&#x80FD;&#x7528;&#x524D;&#x540E;&#x5E27;&#x4E4B;&#x95F4;&#x5355;&#x4F4D;&#x4F4D;&#x7F6E;&#x53D8;&#x5316;&#x5F15;&#x8D77;&#x7684;&#x7070;&#x5EA6;&#x53D8;&#x5316;&#x53BB;&#x8FD1;&#x4F3C;&#x7070;&#x5EA6;&#x5BF9;&#x4F4D;&#x7F6E;&#x7684;&#x504F;&#x5BFC;&#x6570;&#xFF09;&#xFF1B; &#x7A7A;&#x95F4;&#x4E00;&#x81F4;&#xFF0C;&#x4E00;&#x4E2A;&#x573A;&#x666F;&#x4E0A;&#x90BB;&#x8FD1;&#x7684;&#x70B9;&#x6295;&#x5F71;&#x5230;&#x56FE;&#x50CF;&#x4E0A;&#x4E5F;&#x662F;&#x90BB;&#x8FD1;&#x70B9;&#xFF0C;&#x4E14;&#x90BB;&#x8FD1;&#x70B9;&#x901F;&#x5EA6;&#x4E00;&#x81F4;&#x3002;&#x8FD9;&#x662F;Lucas-Kanade&#x5149;&#x6D41;&#x6CD5;&#x7279;&#x6709;&#x7684;&#x5047;&#x5B9A;&#x3002; &#x793A;&#x610F;&#x56FE;&#x5982;&#x4E0B;&#xFF1A; LK&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B; &#x8BBE;$t$&#x65F6;&#x523B;&#x4F4D;&#x4E8E;$x,y$&#x5904;&#x50CF;&#x7D20;&#x70B9;&#x7684;&#x7070;&#x5EA6;&#x503C;&#x4E3A;$I(x,y,t)$ &#x5728;$t+dt$&#x65F6;&#x523B;&#xFF0C;&#x8BE5;&#x50CF;&#x7D20;&#x8FD0;&#x52A8;&#x5230;&#x4E86;$x+dx,y+dy$&#x5904; &#x5E0C;&#x671B;&#x8BA1;&#x7B97;&#x8FD0;&#x52A8;$dx,dy$ &#x7531;&#x7070;&#x5EA6;&#x4E0D;&#x53D8;&#x5047;&#x8BBE; $I(x+dx,y+dy,t+dt)=I(x,y,t)$&#x3002;&#x7070;&#x5EA6;&#x4E0D;&#x53D8;&#x5047;&#x8BBE;&#x662F;&#x4E00;&#x4E2A;&#x5F88;&#x5F3A;&#x7684;&#x5047;&#x8BBE;&#xFF0C;&#x5B9E;&#x9645;&#x5F53;&#x4E2D;&#x5F88;&#x53EF;&#x80FD;&#x4E0D;&#x6210;&#x7ACB;&#x3002; &#x5BF9; $t+dt$ &#x65F6;&#x523B;&#x7684;&#x7070;&#x5EA6;&#x8FDB;&#x884C;Taylor&#x5C55;&#x5F00;&#x5E76;&#x4FDD;&#x7559;&#x4E00;&#x9636;&#x9879;&#xFF1A; &#x56E0;&#x4E3A;&#x6211;&#x4EEC;&#x5047;&#x8BBE;&#x4E86;&#x7070;&#x5EA6;&#x4E0D;&#x53D8;&#xFF0C;&#x4E8E;&#x662F;&#x4E0B;&#x4E00;&#x4E2A;&#x65F6;&#x523B;&#x7684;&#x7070;&#x5EA6;&#x7B49;&#x4E8E;&#x4E4B;&#x524D;&#x7684;&#x7070;&#x5EA6;&#xFF0C;&#x4ECE;&#x800C; &#x4E24;&#x8FB9;&#x9664;&#x4EE5; $dt$&#xFF0C;&#x5F97;&#xFF1A; &#x5176;&#x4E2D; $dx/dt$ &#x4E3A;&#x50CF;&#x7D20;&#x5728; $x$ &#x8F74;&#x4E0A;&#x8FD0;&#x52A8;&#x901F;&#x5EA6;&#xFF0C;&#x800C; $dy/dt$ &#x4E3A; $y$ &#x8F74;&#x901F;&#x5EA6;&#xFF0C;&#x628A;&#x5B83;&#x4EEC;&#x8BB0;&#x4E3A; $u,v$&#x3002;&#x540C;&#x65F6; $\partial I/ \partial x$ &#x4E3A;&#x56FE;&#x50CF;&#x5728;&#x8BE5;&#x70B9;&#x5904; $x$ &#x65B9;&#x5411;&#x7684;&#x68AF;&#x5EA6;&#xFF0C;&#x53E6;&#x4E00;&#x9879;&#x5219;&#x662F;&#x5728; $y$ &#x65B9;&#x5411;&#x7684;&#x68AF;&#x5EA6;&#xFF0C;&#x8BB0;&#x4E3A; $Ix, Iy$&#x3002;&#x628A;&#x56FE;&#x50CF;&#x7070;&#x5EA6;&#x5BF9;&#x65F6;&#x95F4;&#x7684;&#x53D8;&#x5316;&#x91CF;&#x8BB0;&#x4E3A; $I_t$&#xFF0C;&#x5199;&#x6210;&#x77E9;&#x9635;&#x5F62;&#x5F0F;&#xFF0C;&#x6709;&#xFF1A; 8&#x4E2D;&#x7684;&#x5F0F;&#x5B50;&#x662F;&#x4E00;&#x4E2A;&#x4E8C;&#x5143;&#x4E00;&#x6B21;&#x7EBF;&#x6027;&#x65B9;&#x7A0B;&#xFF0C;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#xFF0C;&#x6B20;&#x5B9A;&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5F15;&#x5165;&#x989D;&#x5916;&#x7684;&#x7EA6;&#x675F;&#x3002;&#x5047;&#x5B9A;&#x4E00;&#x4E2A;&#x7A97;&#x53E3;$(w*w)$&#x5185;&#x5149;&#x5EA6;&#x4E0D;&#x53D8;&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8D85;&#x5B9A;&#x65B9;&#x7A0B;&#x7EC4;&#x8BA1;&#x7B97;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x89E3;&#x6765;&#x6C42;&#x89E3;$u&#xFF0C;v$&#x3002; &#x8D85;&#x5B9A;&#x65B9;&#x7A0B;&#x7EC4;&#x5BF9;&#x4E8E;&#x5F62;&#x5982;$A_{m&#xD7;n}X=b$&#x7684;&#x65B9;&#x7A0B;&#xFF0C;&#x8003;&#x8651;&#x6D4B;&#x91CF;&#x6570;&#x636E;&#x548C;&#x6240;&#x9700;&#x89E3;&#x7684;&#x53C2;&#x6570;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#xFF0C;&#x8BE5;&#x65B9;&#x7A0B;&#x7684;&#x89E3;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x4EE5;&#x4E0B;&#x51E0;&#x79CD;&#x60C5;&#x51B5;&#xFF1A; &#x8003;&#x8651;$m&#x2265;n$&#x5E76;&#x4E14;$R(A)=n$&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5982;&#x679C;&#x89E3;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x4F46;&#x627E;&#x4E00;&#x4E2A;&#x6700;&#x63A5;&#x8FD1;$A_{m&#xD7;n}X=b$&#x7684;&#x89E3;&#x77E2;&#x91CF;&#x4ECD;&#x7136;&#x6709;&#x610F;&#x4E49;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x7A0B;&#x6210;&#x4E3A;&#x8D85;&#x5B9A;&#x65B9;&#x7A0B;&#xFF08;&#x65B9;&#x7A0B;&#x5927;&#x4E8E;&#x672A;&#x77E5;&#x6570;&#xFF09;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x5BFB;&#x627E;&#x4E00;&#x4E2A;&#x5411;&#x91CF;$x$&#x4F7F;&#x5F97; $&#x2016;Ax&#x2212;b&#x2016;$&#x6700;&#x5C0F;&#xFF0C;&#x8FD9;&#x91CC;&#x7684;$&#x2016;&#x2219;&#x2016;$&#x8868;&#x793A;&#x77E2;&#x91CF;&#x8303;&#x6570;&#x3002;&#x8FD9;&#x6837;&#x7684;xx&#x79F0;&#x4E3A;&#x8BE5;&#x8D85;&#x5B9A;&#x65B9;&#x7A0B;&#x7EC4;&#x7684;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x89E3;&#x3002; &#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x6CD5;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x6CD5;&#x7684;&#x76EE;&#x6807;&#xFF1A;&#x6C42;&#x8BEF;&#x5DEE;&#x7684;&#x6700;&#x5C0F;&#x5E73;&#x65B9;&#x548C;&#x3002; &#x5BF9;&#x5E94;&#x6709;&#x4E24;&#x79CD;&#x6A21;&#x578B;&#xFF1A;&#x7EBF;&#x6027;&#x6A21;&#x578B;&#x548C;&#x975E;&#x7EBF;&#x6027;&#x6A21;&#x578B;&#x3002; &#x5982;&#x679C;&#x77E9;&#x9635;&#x662F;&#x53EF;&#x9006;&#x7684;&#xFF0C;&#x7EBF;&#x6027;&#x6A21;&#x578B;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x7684;&#x89E3;&#x662F;closed-form&#xFF08;&#x95ED;&#x5F0F;&#x89E3;&#xFF09;&#x5373;$$\theta = (X^TX)^{-1}X^TY$$&#x800C;&#x975E;&#x7EBF;&#x6027;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x6CA1;&#x6709;closed-form&#xFF08;&#x95ED;&#x5F0F;&#x89E3;&#xFF09;&#xFF0C;&#x901A;&#x5E38;&#x7528;&#x8FED;&#x4EE3;&#x6CD5;&#x6C42;&#x89E3;&#xFF0C;&#x5982;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x6CD5;(&#x53C8;&#x5206;&#x4E3A;&#x6279;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x3001;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;)&#x3001;&#x725B;&#x987F;&#x6CD5;&#x3001;&#x62DF;&#x725B;&#x987F;&#x6CD5;&#x7B49;&#xFF0C;&#x5B83;&#x4EEC;&#x7684;&#x5E94;&#x7528;&#x6761;&#x4EF6;&#x66F4;&#x4E3A;&#x5E7F;&#x6CDB;&#xFF08;&#x65E0;&#x7EA6;&#x675F;&#xFF09;&#xFF0C;&#x90FD;&#x662F;&#x901A;&#x8FC7;&#x8FED;&#x4EE3;&#x66F4;&#x65B0;&#x6765;&#x9010;&#x6B65;&#x8FDB;&#x884C;&#x7684;&#x53C2;&#x6570;&#x4F18;&#x5316;&#x65B9;&#x6CD5;&#xFF0C;&#x6700;&#x7EC8;&#x7ED3;&#x679C;&#x4E3A;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x3002; &#x5982;&#x679C;&#x4F18;&#x5316;&#x7684;&#x51FD;&#x6570;&#x662F;&#x51F8;&#x51FD;&#x6570;&#xFF0C;&#x6781;&#x5C0F;&#x503C;&#x70B9;&#x5373;&#x6700;&#x5C0F;&#x503C;&#x70B9;&#xFF0C;&#x5B58;&#x5728;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x89E3;&#x3002; &#x6027;&#x8D28;&#x4E00;&#x822C;&#x8BF4;&#x6765;&#xFF0C;&#x8D85;&#x5B9A;&#x65B9;&#x7A0B;&#x7EC4;&#x65E0;&#x89E3;&#xFF08;&#x6B64;&#x65F6;&#x4E3A;&#x77DB;&#x76FE;&#x65B9;&#x7A0B;&#x7EC4;&#xFF09;&#xFF0C;&#x8FD9;&#x65F6;&#x9700;&#x8981;&#x5BFB;&#x627E;&#x65B9;&#x7A0B;&#x7EC4;&#x7684;&#x4E00;&#x4E2A;&#x201C;&#x6700;&#x8FD1;&#x4F3C;&#x201D;&#x7684;&#x89E3;. &#x5B9A;&#x4E49; &#x8BB0;&#x8BEF;&#x5DEE;&#x5411;&#x91CF; $r=b-Ax$, &#x79F0;&#x4F7F;$||r||^2_2$ &#x6700;&#x5C0F;&#x7684;&#x89E3;$x*$&#x4E3A;&#x65B9;&#x7A0B;&#x7EC4;$Ax=b$&#x7684;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x89E3;&#x3002; &#x5B9A;&#x7406; $x*$&#x662F; $Ax=b$&#x7684;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x89E3;&#x7684;&#x5145;&#x8981;&#x6761;&#x4EF6;&#x4E3A;$x*$&#x662F; $A^TAx=A^Tb$ &#x7684;&#x89E3;. &#x8303;&#x6570;L1-&#x8303;&#x6570;&#xFF1A;$||x||1=\sum{i=1}^n|x_i|$L2-&#x8303;&#x6570;&#xFF1A;$||x||2=\sqrt{\sum{i=1}^nx_i^2}$ L2&#x8303;&#x6570;&#x662F;&#x6700;&#x5E38;&#x7528;&#x7684;&#x8303;&#x6570;&#xFF0C;&#x6B27;&#x5F0F;&#x7A7A;&#x95F4;&#x7684;&#x8DDD;&#x79BB;&#x5EA6;&#x91CF;&#x65B9;&#x6CD5;&#x6B27;&#x6C0F;&#x8DDD;&#x79BB;&#x5C31;&#x662F;&#x4E00;&#x79CD;L2&#x8303;&#x6570; L2&#x8303;&#x6570;&#x662F;&#x6307;&#x5411;&#x91CF;&#x5404;&#x5143;&#x7D20;&#x7684;&#x5E73;&#x65B9;&#x548C;&#x7136;&#x540E;&#x6C42;&#x5E73;&#x65B9;&#x6839;&#x3002;&#x8BA9;L2&#x8303;&#x6570;&#x7684;&#x89C4;&#x5219;&#x9879;&#x6700;&#x5C0F;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x5F97;&#x7684;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x90FD;&#x5F88;&#x5C0F;&#xFF0C;&#x90FD;&#x63A5;&#x8FD1;&#x4E8E;0&#xFF0C;&#x4F46;&#x4E0E;L1&#x8303;&#x6570;&#x4E0D;&#x540C;&#xFF0C;&#x5B83;&#x4E0D;&#x4F1A;&#x8BA9;&#x5B83;&#x7B49;&#x4E8E;0&#xFF0C;&#x800C;&#x662F;&#x63A5;&#x8FD1;&#x4E8E;0&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E2D;&#x4E00;&#x822C;&#x7528;&#x6765;&#x9632;&#x6B62;&#x8FC7;&#x62DF;&#x5408;&#x3002; &#x8BC1;&#x660E;&#x5B9A;&#x7406;&#x5B9A;&#x7406; $x*$&#x662F; $Ax=b$&#x7684;&#x6700;&#x5C0F;&#x4E8C;&#x4E58;&#x89E3;&#x7684;&#x5145;&#x8981;&#x6761;&#x4EF6;&#x4E3A;$x*$&#x662F; $A^TAx=A^Tb$ &#x7684;&#x89E3;. &#x8BA1;&#x7B97;&#x4F8B;&#x9898; &#x76F4;&#x63A5;&#x6CD5;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F;&#xFF1F; &#x4F18;&#x70B9; &#x7701;&#x7565;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x7684;&#x65F6;&#x95F4; &#x53EA;&#x9700;&#x6709;&#x50CF;&#x7D20;&#x68AF;&#x5EA6;&#x800C;&#x4E0D;&#x5FC5;&#x662F;&#x89D2;&#x70B9;&#xFF08;&#x5BF9;&#x767D;&#x5899;&#x7B49;&#x5730;&#x65B9;&#x6709;&#x8F83;&#x597D;&#x6548;&#x679C;&#xFF09; &#x53EF;&#x7A20;&#x5BC6;&#x6216;&#x534A;&#x7A20;&#x5BC6; &#x7F3A;&#x70B9; &#x7070;&#x5EA6;&#x4E0D;&#x53D8;&#x96BE;&#x4EE5;&#x6EE1;&#x8DB3;&#xFF08;&#x6613;&#x53D7;&#x66DD;&#x5149;&#x548C;&#x6A21;&#x7CCA;&#x5F71;&#x54CD;&#xFF09; &#x5355;&#x50CF;&#x7D20;&#x533A;&#x5206;&#x6027;&#x5DEE; &#x56FE;&#x50CF;&#x975E;&#x51F8;&#x6027; SLAMSLAM&#x6982;&#x5FF5;&#x673A;&#x5668;&#x4EBA;&#x5728;&#x4E00;&#x4E2A;&#x672A;&#x77E5;&#x73AF;&#x5883;&#x4E2D;&#x4ECE;&#x4E00;&#x4E2A;&#x672A;&#x77E5;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#x79FB;&#x52A8;&#xFF0C;&#x5728;&#x79FB;&#x52A8;&#x8FC7;&#x7A0B;&#x4E2D;&#x6839;&#x636E;&#x4F4D;&#x7F6E;&#x4F30;&#x8BA1;&#x548C;&#x5730;&#x56FE;&#x8FDB;&#x884C;&#x81EA;&#x8EAB;&#x5B9A;&#x4F4D;&#xFF0C;&#x540C;&#x65F6;&#x5728;&#x81EA;&#x8EAB;&#x5B9A;&#x4F4D;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x5EFA;&#x9020;&#x589E;&#x91CF;&#x5F0F;&#x5730;&#x56FE;&#xFF0C;&#x5B9E;&#x73B0;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x81EA;&#x4E3B;&#x5B9A;&#x4F4D;&#x548C;&#x5BFC;&#x822A;&#x3002; SLAM&#x6982;&#x89C8; &#x89C6;&#x89C9;SLAM&#x6D41;&#x7A0B; &#x4F20;&#x611F;&#x5668;&#x4FE1;&#x606F;&#x8BFB;&#x53D6;&#x3002;&#x5728;&#x89C6;&#x89C9; SLAM &#x4E2D;&#x4E3B;&#x8981;&#x4E3A;&#x76F8;&#x673A;&#x56FE;&#x50CF;&#x4FE1;&#x606F;&#x7684;&#x8BFB;&#x53D6;&#x548C;&#x9884;&#x5904;&#x7406;&#x3002;&#x5982;&#x679C;&#x5728;&#x673A;&#x5668;&#x4EBA;&#x4E2D;&#xFF0C;&#x8FD8;&#x53EF;&#x80FD;&#x6709;&#x7801;&#x76D8;&#x3001;&#x60EF;&#x6027;&#x4F20;&#x611F;&#x5668;&#x7B49;&#x4FE1;&#x606F;&#x7684;&#x8BFB;&#x53D6;&#x548C;&#x540C;&#x6B65;&#x3002; &#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1; (Visual Odometry, VO)&#x3002;&#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1;&#x4EFB;&#x52A1;&#x662F;&#x4F30;&#x7B97;&#x76F8;&#x90BB;&#x56FE;&#x50CF;&#x95F4;&#x76F8;&#x673A;&#x7684;&#x8FD0;&#x52A8;&#xFF0C;&#x4EE5;&#x53CA;&#x5C40;&#x90E8;&#x5730;&#x56FE;&#x7684;&#x6837;&#x5B50;&#x3002; VO &#x53C8;&#x79F0;&#x4E3A;&#x524D;&#x7AEF;&#xFF08;Front End&#xFF09;&#x3002; &#x540E;&#x7AEF;&#x4F18;&#x5316;&#xFF08;Optimization&#xFF09;&#x3002;&#x540E;&#x7AEF;&#x63A5;&#x53D7;&#x4E0D;&#x540C;&#x65F6;&#x523B;&#x89C6;&#x89C9;&#x91CC;&#x7A0B;&#x8BA1;&#x6D4B;&#x91CF;&#x7684;&#x76F8;&#x673A;&#x4F4D;&#x59FF;&#xFF0C;&#x4EE5;&#x53CA;&#x56DE;&#x73AF;&#x68C0;&#x6D4B;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5BF9;&#x5B83;&#x4EEC;&#x8FDB;&#x884C;&#x4F18;&#x5316;&#xFF0C;&#x5F97;&#x5230;&#x5168;&#x5C40;&#x4E00;&#x81F4;&#x7684;&#x8F68;&#x8FF9;&#x548C;&#x5730;&#x56FE;&#x3002;&#x7531;&#x4E8E;&#x63A5;&#x5728; VO &#x4E4B;&#x540E;&#xFF0C;&#x53C8;&#x79F0;&#x4E3A;&#x540E;&#x7AEF;&#xFF08;Back End&#xFF09;&#x3002; &#x56DE;&#x73AF;&#x68C0;&#x6D4B;&#xFF08;Loop Closing&#xFF09;&#x3002;&#x56DE;&#x73AF;&#x68C0;&#x6D4B;&#x5224;&#x65AD;&#x673A;&#x5668;&#x4EBA;&#x662F;&#x5426;&#x66FE;&#x7ECF;&#x5230;&#x8FBE;&#x8FC7;&#x5148;&#x524D;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x5982;&#x679C;&#x68C0;&#x6D4B;&#x5230;&#x56DE;&#x73AF;&#xFF0C;&#x5B83;&#x4F1A;&#x628A;&#x4FE1;&#x606F;&#x63D0;&#x4F9B;&#x7ED9;&#x540E;&#x7AEF;&#x8FDB;&#x884C;&#x5904;&#x7406;&#x3002; &#x5EFA;&#x56FE;&#xFF08;Mapping&#xFF09;&#x3002;&#x5B83;&#x6839;&#x636E;&#x4F30;&#x8BA1;&#x7684;&#x8F68;&#x8FF9;&#xFF0C;&#x5EFA;&#x7ACB;&#x4E0E;&#x4EFB;&#x52A1;&#x8981;&#x6C42;&#x5BF9;&#x5E94;&#x7684;&#x5730;&#x56FE;&#x3002; &#x4EE5;&#x4E0B;&#x8BE6;&#x7EC6;&#x89E3;&#x91CA; SLAM&#x5E38;&#x7528;&#x7684;&#x4F20;&#x611F;&#x5668; &#x7EA2;&#x5916;&#x4F20;&#x611F;&#x5668;&#xFF1A;&#x8F83;&#x8FD1;&#x8DDD;&#x79BB;&#x611F;&#x5E94;&#xFF0C;&#x5E38;&#x7528;&#x4E8E;&#x626B;&#x5730;&#x673A;&#x5668;&#x4EBA;&#x3002; &#x6FC0;&#x5149;&#x96F7;&#x8FBE;&#x3001;&#x6DF1;&#x5EA6;&#x4F20;&#x611F;&#x5668;&#x3002; &#x6444;&#x50CF;&#x5934;&#xFF1A;&#x5355;&#x76EE;&#xFF0C;&#x53CC;&#x76EE;&#xFF0C;&#x591A;&#x76EE;&#x3002; &#x60EF;&#x6027;&#x4F20;&#x611F;&#x5668;&#xFF1A;&#x82F1;&#x6587;&#x53EB;IMU&#xFF0C;&#x5305;&#x62EC;&#x9640;&#x87BA;&#x4EEA;&#x3001;&#x52A0;&#x901F;&#x5EA6;&#x8BA1;&#xFF0C;&#x662F;&#x667A;&#x80FD;&#x624B;&#x673A;&#x7684;&#x6807;&#x914D;&#x3002; SLAM&#x7684;&#x8FD0;&#x7B97;&#x7ED3;&#x679C; &#x8BA1;&#x7B97;&#x81EA;&#x8EAB;&#x4F4D;&#x7F6E;&#xFF08;&#x5728;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x671D;&#x5411;&#xFF09; &#x6784;&#x5EFA;&#x73AF;&#x5883;&#x5730;&#x56FE;&#xFF08;&#x7A00;&#x758F;&#x6216;&#x8005;&#x7A20;&#x5BC6;&#x7684;&#x4E09;&#x7EF4;&#x70B9;&#x4E91;&#xFF09; &#x5730;&#x56FE;&#x8868;&#x793A; &#x6805;&#x683C;&#x5730;&#x56FE;&#xFF1A;&#x6BCF;&#x4E2A;&#x6805;&#x683C;&#x4EE5;&#x6982;&#x7387;&#x7684;&#x5F62;&#x5F0F;&#x8868;&#x793A;&#x3002;3D&#x7684;&#x6805;&#x683C;&#x5730;&#x56FE;&#x91C7;&#x7528;&#x516B;&#x53C9;&#x6811;&#x5B58;&#x50A8;&#x3002;&#x9002;&#x7528;&#x4E8E;&#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x4E0E;&#x907F;&#x969C;&#x3002; &#x7279;&#x5F81;&#x5730;&#x56FE;&#xFF1A;&#x5730;&#x56FE;&#x6BD4;&#x8F83;&#x7A00;&#x758F;&#x3002;&#x9002;&#x7528;&#x4E8E;&#x5B58;&#x5728;&#x8F83;&#x591A;&#x7279;&#x5F81;&#x7684;&#x573A;&#x666F;&#x3002; &#x4F4D;&#x59FF;&#x56FE;&#xFF1A;&#x4EC5;&#x5305;&#x542B;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x4F4D;&#x59FF;&#x4FE1;&#x606F;&#xFF0C;&#x6709;&#x6548;&#x8868;&#x8FBE;&#x4F4D;&#x59FF;&#x4E4B;&#x95F4;&#x7684;&#x7EA6;&#x675F;&#xFF0C;&#x53EF;&#x4EE5;&#x4E0E;&#x6805;&#x683C;&#x5730;&#x56FE;&#x548C;&#x7279;&#x5F81;&#x5730;&#x56FE;&#x7ED3;&#x5408;&#x3002; &#x5176;&#x4ED6;&#x5730;&#x56FE;&#xFF1A;&#x7528;&#x4E8E;&#x573A;&#x666F;&#x6784;&#x5EFA;&#xFF0C;TSDF&#x3002; &#x89C6;&#x89C9;SLAM&#x6846;&#x67B6; &#x524D;&#x7AEF;&#x4E0E;&#x540E;&#x7AEF;&#x524D;&#x7AEF; &#x63D0;&#x53D6;&#x4F20;&#x611F;&#x5668;&#x91C7;&#x96C6;&#x7684;&#x6570;&#x636E; &#x8FDB;&#x884C;&#x6570;&#x636E;&#x5173;&#x8054; &#x540E;&#x7AEF; &#x5BF9;&#x524D;&#x7AEF;&#x4EA7;&#x751F;&#x7684;&#x6A21;&#x578B;&#x8FDB;&#x884C;&#x53C2;&#x6570;&#x4F30;&#x8BA1; &#x524D;&#x7AEF;&#x7EBF;&#x7A0B;&#xFF1A; &#x8F93;&#x5165;&#x4F20;&#x611F;&#x5668;&#x6570;&#x636E; SLAM&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x7279;&#x5F81;&#x8FFD;&#x8E2A;&#x4E0E;&#x4F4D;&#x59FF;&#x5B9E;&#x65F6;&#x6C42;&#x89E3;&#x3002; &#x8F93;&#x51FA;&#x8BBE;&#x5907;&#x5B9E;&#x65F6;&#x4F4D;&#x59FF;&#x548C;&#x4E09;&#x7EF4;&#x70B9;&#x4E91;&#x3002; &#x540E;&#x7AEF;&#x7EBF;&#x7A0B;&#xFF1A; &#x8FDB;&#x884C;&#x5C40;&#x90E8;&#x6216;&#x5168;&#x5C40;&#x4F18;&#x5316;&#xFF0C;&#x51CF;&#x5C11;&#x8BEF;&#x5DEE;&#x79EF;&#x7D2F;&#x3002; &#x573A;&#x666F;&#x56DE;&#x8DEF;&#x68C0;&#x6D4B;&#x3002; &#x573A;&#x666F;&#x91CD;&#x5B9A;&#x4F4D;&#x3002; &#x5730;&#x56FE;&#x8868;&#x793A; &#x6805;&#x683C;&#x5730;&#x56FE; &#x6BCF;&#x4E2A;&#x6805;&#x683C;&#x4EE5;&#x6982;&#x7387;&#x7684;&#x5F62;&#x5F0F;&#x8868;&#x793A; 3D&#x7684;&#x6805;&#x683C;&#x5730;&#x56FE;&#x91C7;&#x7528;&#x516B;&#x53C9;&#x6811;&#x5B58;&#x50A8; &#x9002;&#x7528;&#x4E8E;&#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x4E0E;&#x907F;&#x969C; &#x7279;&#x5F81;&#x5730;&#x56FE; &#x5730;&#x56FE;&#x6BD4;&#x8F83;&#x7A00;&#x758F; &#x9002;&#x7528;&#x4E8E;&#x5B58;&#x5728;&#x8F83;&#x591A;&#x7279;&#x5F81;&#x7684;&#x573A;&#x666F; &#x4F4D;&#x59FF;&#x56FE; &#x4EC5;&#x5305;&#x542B;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x4F4D;&#x59FF;&#x4FE1;&#x606F; &#x6709;&#x6548;&#x8868;&#x8FBE;&#x4F4D;&#x59FF;&#x4E4B;&#x95F4;&#x7684;&#x7EA6;&#x675F; &#x53EF;&#x4EE5;&#x4E0E;&#x6805;&#x683C;&#x5730;&#x56FE;&#x548C;&#x7279;&#x5F81;&#x5730;&#x56FE;&#x7ED3;&#x5408; &#x5176;&#x4ED6;&#x5730;&#x56FE; &#x7528;&#x4E8E;&#x573A;&#x666F;&#x6784;&#x5EFA; TSDF SLAM&#x524D;&#x7AEF;&#x56DE;&#x73AF;&#x68C0;&#x6D4B;&#x65B9;&#x6CD5; &#x6700;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;&#x5BF9;&#x4EFB;&#x610F;&#x4E24;&#x4E2A;&#x5173;&#x952E;&#x5E27;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x5339;&#x914D;&#x3002; &#x57FA;&#x4E8E;&#x91CC;&#x7A0B;&#x8BA1;&#x7684;&#x65B9;&#x6CD5;&#x3002; &#x57FA;&#x4E8E;&#x5916;&#x89C2;&#x7684;&#x65B9;&#x6CD5;&#xFF1A;&#x4E3B;&#x6D41;&#xFF0C;&#x6838;&#x5FC3;&#x5728;&#x4E8E;&#x8861;&#x91CF;&#x56FE;&#x50CF;&#x95F4;&#x7684;&#x76F8;&#x4F3C;&#x6027;&#x3002; &#x8BC4;&#x4EF7;&#x6307;&#x6807;ROC&#x66F2;&#x7EBF;&#x3002;&#x7CBE;&#x5EA6;&#xFF1A;&#x6B63;&#x786E;&#x56DE;&#x73AF;&#x68C0;&#x6D4B;&#x5360;&#x603B;&#x68C0;&#x6D4B;&#x56DE;&#x73AF;&#x6570;&#x76EE;&#x7684;&#x6BD4;&#x7387;&#x53EC;&#x56DE;&#xFF1A;&#x6B63;&#x786E;&#x56DE;&#x73AF;&#x68C0;&#x6D4B;&#x5360;&#x6D4B;&#x8BD5;&#x6837;&#x672C;&#x603B;&#x56DE;&#x73AF;&#x7684;&#x6BD4;&#x7387; &#x8BCD;&#x888B;&#x6A21;&#x578B;Apperance-based&#x4E3B;&#x8981;&#x65B9;&#x6CD5;&#xFF1A;&#x8BCD;&#x888B;&#x3002;Bag of Words BoW&#x662F;&#x5BF9;&#x7279;&#x5F81;&#x7684;&#x805A;&#x7C7B;&#xFF1A; &#x7279;&#x5F81;&#x805A;&#x7C7B;&#x5F62;&#x6210;&#x4E86;Word &#x8BB8;&#x591A;Word&#x7EC4;&#x6210;&#x4E86;Dictionary &#x56FE;&#x50CF;&#x7684;&#x76F8;&#x4F3C;&#x6027;=Word&#x7684;&#x76F8;&#x4F3C;&#x6027; &#x53EA;&#x770B;Word&#x7684;&#x6709;&#x65E0;&#xFF0C;&#x65E0;&#x89C6;Word&#x7684;&#x987A;&#x5E8F; &#x64CD;&#x4F5C;&#x65B9;&#x6CD5;&#xFF1A; &#x9006;&#x5E8F;&#x7D22;&#x5F15;&#x5355;&#x8BCD;&#x6DB5;&#x76D6;&#x4E86;&#x6240;&#x6709;&#x51FA;&#x73B0;&#x7684;&#x5355;&#x8BCD; &#x6BCF;&#x4E00;&#x4E2A;&#x5355;&#x8BCD;&#x6307;&#x5411;&#x5305;&#x542B;&#x5B83;&#x7684;&#x4E00;&#x7CFB;&#x5217;&#x56FE;&#x50CF; &#x91C7;&#x7528;&#x6295;&#x7968;&#x673A;&#x5236;&#x9009;&#x53D6;&#x5019;&#x9009;&#x8005;&#xFF0C;&#x52A0;&#x901F;&#x641C;&#x7D22; &#x56FE;&#x50CF;-&gt;BoW&#x5411;&#x91CF; &#x8F93;&#x5165;&#x4E00;&#x5F20;&#x56FE;&#x50CF;I&#xFF0C;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x68C0;&#x6D4B;&#x4E0E;&#x7279;&#x5F81;&#x63CF;&#x8FF0;&#xFF0C;&#x7279;&#x5F81;&#x70B9;&#x6570;&#x91CF;&#x6700;&#x591A;&#x4E0D;&#x8D85;&#x8FC7;&#x7EA6;&#x5B9A;&#x503C;&#x3002; &#x5C06;&#x6BCF;&#x4E2A;&#x7279;&#x5F81;&#x901A;&#x8FC7;&#x6811;&#x5F62;&#x7ED3;&#x6784;&#x7684;&#x5B57;&#x5178;&#xFF0C;&#x5F97;&#x5230;BoW&#x5411;&#x91CF;v&#xFF0C;&#x8BE5;&#x5411;&#x91CF;&#x7684;&#x7EF4;&#x5EA6;&#x4E3A;&#x7279;&#x5F81;&#x6570;&#x91CF; &#x5E38;&#x7528;&#x5F00;&#x6E90;SLAM&#x7CFB;&#x7EDF; PTAM ORB-SLAM LSD-SLAM DSO SVO RDSLAM PKSLAM ORB-SLAM&#x5206;&#x6790;&#x4E09;&#x4E2A;&#x7EBF;&#x7A0B;&#xFF1A;Tracking&#x3001;Local Mapping&#x3001;Loop Closing &#x7279;&#x70B9;&#xFF1A;&#x57FA;&#x672C;&#x5EF6;&#x7EED;&#x4E86;PTAM&#x7684;&#x7B97;&#x6CD5;&#x6846;&#x67B6;&#xFF0C;&#x4F46;&#x5BF9;&#x6846;&#x67B6;&#x4E2D;&#x7684;&#x5927;&#x90E8;&#x5206;&#x7EC4;&#x4EF6;&#x90FD;&#x505A;&#x4E86;&#x6539;&#x8FDB;&#xFF1A; &#x9009;&#x7528;ORB&#x7279;&#x5F81;&#xFF0C;&#x5339;&#x914D;&#x548C;&#x91CD;&#x5B9A;&#x4F4D;&#x6027;&#x80FD;&#x66F4;&#x597D;&#x3002; &#x52A0;&#x5165;&#x4E86;&#x5FAA;&#x73AF;&#x8D3F;&#x8D42;&#x7684;&#x68C0;&#x6D4B;&#x548C;&#x95ED;&#x5408;&#x673A;&#x5236;&#xFF0C;&#x4EE5;&#x6D88;&#x9664;&#x8BEF;&#x5DEE;&#x79EF;&#x7D2F;&#x3002; &#x901A;&#x8FC7;&#x68C0;&#x6D4B;&#x89C6;&#x5DEE;&#x6765;&#x81EA;&#x52A8;&#x9009;&#x62E9;&#x521D;&#x59CB;&#x5316;&#x7684;&#x4E24;&#x5E27;&#x3002; &#x91C7;&#x7528;&#x4E00;&#x79CD;&#x66F4;&#x9C81;&#x68D2;&#x7684;&#x5173;&#x952E;&#x5E27;&#x548C;&#x4E09;&#x7EF4;&#x70B9;&#x7684;&#x9009;&#x62E9;&#x673A;&#x5236;&#x3002; &#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x7684;&#x6982;&#x5FF5;&#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x6280;&#x672F;&#x662F;&#x673A;&#x5668;&#x4EBA;&#x7814;&#x7A76;&#x9886;&#x57DF;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x91CD;&#x8981;&#x5206;&#x652F;&#x3002;&#x6240;&#x8C13;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x6700;&#x4F18;&#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x95EE;&#x9898;,&#x5C31;&#x662F;&#x4F9D;&#x636E;&#x67D0;&#x4E2A;&#x6216;&#x67D0;&#x4E9B;&#x4F18;&#x5316;&#x51C6;&#x5219;(&#x5982;&#x5DE5;&#x4F5C;&#x4EE3;&#x4EF7;&#x6700;&#x5C0F;&#x3001;&#x884C;&#x8D70;&#x8DEF;&#x7EBF;&#x6700;&#x77ED;&#x3001;&#x884C;&#x8D70;&#x65F6;&#x95F4;&#x6700;&#x77ED;&#x7B49;),&#x5728;&#x5176;&#x5DE5;&#x4F5C;&#x7A7A;&#x95F4;&#x4E2D;&#x627E;&#x5230;&#x4E00;&#x6761;&#x4ECE;&#x8D77;&#x59CB;&#x72B6;&#x6001;&#x5230;&#x76EE;&#x6807;&#x72B6;&#x6001;&#x7684;&#x80FD;&#x907F;&#x5F00;&#x969C;&#x788D;&#x7269;&#x7684;&#x6700;&#x4F18;&#x8DEF;&#x5F84;&#x3002; &#x4F9D;&#x636E;&#x67D0;&#x79CD;&#x6700;&#x4F18;&#x51C6;&#x5219;&#xFF0C;&#x5728;&#x5DE5;&#x4F5C;&#x7A7A;&#x95F4;&#x4E2D;&#x5BFB;&#x627E;&#x4E00;&#x6761;&#x4ECE;&#x8D77;&#x59CB;&#x72B6;&#x6001;&#x5230;&#x76EE;&#x6807;&#x72B6;&#x6001;&#x7684;&#x907F;&#x5F00;&#x969C;&#x788D;&#x7269;&#x7684;&#x6700;&#x4F18;&#x8DEF;&#x5F84;&#xFF0C;&#x9700;&#x8981;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#xFF1A; &#x59CB;&#x4E8E;&#x521D;&#x59CB;&#x70B9;&#x6B62;&#x4E8E;&#x76EE;&#x6807;&#x70B9;&#x3002; &#x907F;&#x969C;&#x3002; &#x5C3D;&#x53EF;&#x80FD;&#x4F18;&#x5316;&#x7684;&#x8DEF;&#x5F84;&#x3002; &#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x7684;&#x5206;&#x7C7B;&#x6839;&#x636E;&#x73AF;&#x5883;&#x7279;&#x70B9;&#xFF0C;&#x53EF;&#x5206;&#x4E3A; &#x9759;&#x6001;&#x7ED3;&#x6784;&#x5316;&#x73AF;&#x5883;&#x4E0B;&#x7684;&#x8DEF;&#x5F84;&#x89C4;&#x5212; &#x52A8;&#x6001;&#x5DF2;&#x77E5;&#x73AF;&#x5883;&#x4E0B;&#x7684;&#x8DEF;&#x5F84;&#x89C4;&#x5212; &#x52A8;&#x6001;&#x4E0D;&#x786E;&#x5B9A;(&#x5C40;&#x90E8;)&#x73AF;&#x5883;&#x4E0B;&#x7684;&#x8DEF;&#x5F84;&#x89C4;&#x5212; &#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x7B97;&#x6CD5; &#x8FEA;&#x6770;&#x65AF;&#x7279;&#x62C9;&#x7B97;&#x6CD5; &#x6700;&#x4F73;&#x4F18;&#x5148;&#x641C;&#x7D22;BFS&#x7B97;&#x6CD5; $A^*$&#x7B97;&#x6CD5;&#xFF1A;Dijkstra + BFS &#x7B97;&#x6CD5; &#x5404;&#x79CD;&#x8DDD;&#x79BB;&#x66FC;&#x54C8;&#x987F;&#x4E3E;&#x4F8B;/&#x51FA;&#x79DF;&#x8F66;&#x8DDD;&#x79BB;&#x4E24;&#x70B9;x&#x8F74;&#x5750;&#x6807;&#x5DEE;&#x52A0;&#x4E0A;y&#x8F74;&#x5750;&#x6807;&#x7684;&#x5DEE;&#xFF0C;&#x4E58;&#x4EE5;&#x5355;&#x4F4D;&#x957F;&#x5EA6;&#x3002;&#x5373;&#xFF1A;[abs(node.x - goal.x)+abs(node.y - goal.y)]*D &#x5BF9;&#x89D2;&#x7EBF;&#x8DDD;&#x79BB;&#x5982;&#x679C;&#x5730;&#x56FE;&#x5141;&#x8BB8;&#x5BF9;&#x89D2;&#x8FD0;&#x52A8;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x53E6;&#x4E00;&#x79CD;&#x542F;&#x53D1;&#x51FD;&#x6570;1234function heuristic(node) = dx = abs(node.x - goal.x) dy = abs(node.y - goal.y)return D * (dx + dy) + (D2 - 2 * D) * min(dx, dy) &#x6B27;&#x51E0;&#x91CC;&#x5F97;&#x8DDD;&#x79BB;&#x76F8;&#x6BD4;&#x4E8E;&#x5BF9;&#x89D2;&#x7EBF;&#x8DDD;&#x79BB;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x66F4;&#x591A;&#x7684;&#x641C;&#x7D22;&#x7A7A;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x6709;&#x591A;&#x6761;&#x8DDD;&#x79BB;&#x76F8;&#x7B49;&#x7684;&#x8DEF;&#x5F84;&#x3002;1234function heuristic(node) = dx = abs(node.x - goal.x) dy = abs(node.y - goal.y) return D * sqrt(dx * dx + dy * dy) &#x968F;&#x673A;&#x8DEF;&#x56FE;&#x6CD5;&#x57FA;&#x4E8E;&#x56FE;&#x641C;&#x7D22;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x968F;&#x673A;&#x8DEF;&#x56FE;&#xFF08;Probabilistic Road Maps&#xFF0C;PRM&#xFF09;&#x5C31;&#x662F;&#x5728;&#x89C4;&#x5212;&#x7A7A;&#x95F4;&#x5185;&#x968F;&#x673A;&#x9009;&#x53D6;N&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x4E4B;&#x540E;&#x8FDE;&#x63A5;&#x5404;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x53BB;&#x9664;&#x4E0E;&#x969C;&#x788D;&#x7269;&#x63A5;&#x89E6;&#x7684;&#x8FDE;&#x7EBF;&#xFF0C;&#x7531;&#x6B64;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x8DEF;&#x56FE;&#x3002; PRM&#x662F;&#x7531;&#x5728;&#x8282;&#x70B9;&#x5904;&#x76F8;&#x8FDE;&#x7684;&#x7B80;&#x5355;&#x66F2;&#x7EBF;&#x6BB5;&#x6216;&#x8005;&#x5F27;&#x7EBF;&#x6BB5;&#x7EC4;&#x6210;&#x7684;&#x4E00;&#x4E2A;&#x7F51;&#x7EDC;&#x3002;&#x5176;&#x4E2D;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x4F4D;&#x5F62;&#x3002;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x4E4B;&#x95F4;&#x7684;&#x6BCF;&#x4E2A;&#x5F27;&#x7EBF;&#x6BB5;&#x5BF9;&#x5E94;&#x4E24;&#x4E2A;&#x4F4D;&#x5F62;&#x4E4B;&#x95F4;&#x7684;&#x65E0;&#x78B0;&#x649E;&#x8DEF;&#x5F84;&#x3002; &#x57FA;&#x4E8E;&#x56FE;&#x641C;&#x7D22;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x968F;&#x673A;&#x8DEF;&#x56FE;&#xFF08;Probabilistic Road Maps&#xFF0C;PRM&#xFF09;&#x5C31;&#x662F;&#x5728;&#x89C4;&#x5212;&#x7A7A;&#x95F4;&#x5185;&#x968F;&#x673A;&#x9009;&#x53D6;N&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x4E4B;&#x540E;&#x8FDE;&#x63A5;&#x5404;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x53BB;&#x9664;&#x4E0E;&#x969C;&#x788D;&#x7269;&#x63A5;&#x89E6;&#x7684;&#x8FDE;&#x7EBF;&#xFF0C;&#x7531;&#x6B64;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x968F;&#x673A;&#x8DEF;&#x56FE;&#x3002;&#x663E;&#x7136;&#xFF0C;&#x5F53;&#x91C7;&#x6837;&#x70B9;&#x592A;&#x5C11;&#xFF0C;&#x6216;&#x8005;&#x5206;&#x5E03;&#x4E0D;&#x5408;&#x7406;&#x65F6;&#xFF0C;PRM&#x7B97;&#x6CD5;&#x662F;&#x4E0D;&#x5B8C;&#x5907;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x968F;&#x7740;&#x91C7;&#x7528;&#x70B9;&#x7684;&#x589E;&#x52A0;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x5B8C;&#x5907;&#x3002;&#x6240;&#x4EE5;PRM&#x662F;&#x6982;&#x7387;&#x5B8C;&#x5907;&#x4E14;&#x4E0D;&#x6700;&#x4F18;&#x7684;&#x3002; &#x6982;&#x7387;&#x89C4;&#x5212;&#x5C5E;&#x4E8E;&#x79BB;&#x7EBF;&#x89C4;&#x5212;&#xFF0C;&#x5B83;&#x4EEC;&#x9700;&#x8981;&#x9884;&#x5148;&#x77E5;&#x9053;&#x5173;&#x4E8E;&#x673A;&#x5668;&#x4EBA;&#x5DE5;&#x4F5C;&#x7A7A;&#x95F4;&#x4E2D;&#x969C;&#x788D;&#x7269;&#x7684;&#x51E0;&#x4F55;&#x5F62;&#x72B6;&#x548C;&#x4F4D;&#x7F6E;&#x4FE1;&#x606F;&#x3002; &#x6982;&#x7387;&#x89C4;&#x5212;&#x662F;&#x4E00;&#x7C7B;&#x975E;&#x5E38;&#x9AD8;&#x6548;&#x5730;&#x89C4;&#x5212;&#x65B9;&#x6CD5;,&#x5C5E;&#x4E8E;&#x57FA;&#x4E8E;&#x62BD;&#x6837;&#xFF08;Sampling-based&#xFF09;&#x65B9;&#x6CD5;&#x65CF;&#x3002; &#x57FA;&#x672C;&#x601D;&#x60F3;&#xFF1A;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#x80FD;&#x5145;&#x5206;&#x8868;&#x793A; Qfree &#x8FDE;&#x901A;&#x6027;&#x7684;&#x6709;&#x9650;&#x907F;&#x78B0;&#x4F4D;&#x5F62;&#x96C6;&#x5408;&#xFF0C;&#x5E76;&#x5229;&#x7528;&#x8BE5;&#x96C6;&#x5408;&#x5EFA;&#x7ACB;&#x7528;&#x4E8E;&#x89E3;&#x51B3;&#x8FD0;&#x52A8;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x7684;&#x8DEF;&#x5F84;&#x56FE;&#x3002; &#x4F4D;&#x5F62;&#x7A7A;&#x95F4;&#x673A;&#x5668;&#x4EBA;&#x4E0A;&#x5404;&#x70B9;&#x4F4D;&#x7F6E;&#x7684;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x89C4;&#x8303;&#x88AB;&#x79F0;&#x4E3A;&#x4F4D;&#x5F62;&#xFF08;Configuration&#xFF09;&#xFF0C;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x4F4D;&#x5F62;&#x7EC4;&#x5408;&#x7684;&#x96C6;&#x5408;&#x88AB;&#x79F0;&#x4E3A;&#x4F4D;&#x5F62;&#x7A7A;&#x95F4;&#x3002; &#x7528; Q &#x6765;&#x8868;&#x793A;&#x4F4D;&#x5F62;&#x7A7A;&#x95F4;&#xFF0C;&#x7528; W &#x8868;&#x793A;&#x5DE5;&#x4F5C;&#x7A7A;&#x95F4;&#xFF0C; &#x7528; Oi &#x8868;&#x793A;&#x5DE5;&#x4F5C;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x969C;&#x788D;&#x7269;&#x3002;&#x6211;&#x4EEC;&#x4F7F;&#x7528; A &#x6765;&#x8868;&#x793A;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x90A3;&#x4E48;&#xFF0C;&#x5904;&#x4E8E;&#x4F4D;&#x5F62; q &#x7684;&#x673A;&#x5668;&#x4EBA;&#x6240;&#x5360;&#x636E;&#x7684;&#x5DE5;&#x4F5C;&#x7A7A;&#x95F4;&#x53EF;&#x88AB;&#x8868;&#x793A;&#x4E3A; A(q) &#x3002;&#x4F1A;&#x4E0E;&#x969C;&#x788D;&#x7269;&#x78B0;&#x649E;&#x7684;&#x6240;&#x6709;&#x4F4D;&#x5F62;&#x6240;&#x7EC4;&#x6210;&#x7684;&#x96C6;&#x5408;&#x6210;&#x4E3A;&#x4F4D;&#x5F62;&#x7A7A;&#x95F4;&#x969C;&#x788D;&#xFF08;Configuration Space Obstacle&#xFF09;&#xFF0C;&#x5176;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A;$$QO={q&#x2208;Q|A(q)&#x2229;O&#x2260;&#x2205;}$$&#x5176;&#x4E2D;$$O=&#x222A;O_i$$&#x90A3;&#x4E48;&#xFF0C;&#x65E0;&#x78B0;&#x649E;&#x4F4D;&#x5F62;&#x7684;&#x96C6;&#x5408;&#x53EF;&#x8868;&#x793A;&#x4E3A;&#x4E0B;&#x9762;&#x7684;&#x5DEE;&#x96C6;$$Q_{free}=Q\QO$$&#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x662F;&#x5BFB;&#x627E;&#x4E00;&#x6761;&#x4ECE;&#x521D;&#x59CB;&#x4F4D;&#x5F62; qs &#x5230;&#x6700;&#x7EC8;&#x4F4D;&#x5F62; qf &#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x4F7F;&#x5F97;&#x673A;&#x5668;&#x4EBA;&#x5728;&#x901A;&#x8FC7;&#x8DEF;&#x5F84;&#x65F6;&#x4E0D;&#x4E0E;&#x4EFB;&#x4F55;&#x969C;&#x788D;&#x7269;&#x53D1;&#x751F;&#x78B0;&#x649E;. &#x968F;&#x673A;&#x8DEF;&#x56FE;&#x6CD5; &#x91C7;&#x6837;&#xFF1A;&#x751F;&#x6210;&#x4E00;&#x7EC4;&#x968F;&#x673A;&#x4F4D;&#x5F62;&#x4F5C;&#x4E3A;&#x8DEF;&#x7EBF;&#x56FE;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x3002;&#x6700;&#x7B80;&#x5355;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x5BF9;&#x4F4D;&#x5F62;&#x7A7A;&#x95F4;&#x91C7;&#x7528;&#x5747;&#x5300;&#x968F;&#x673A;&#x91C7;&#x6837;&#xFF0C;&#x7136;&#x540E;&#x4E22;&#x5F03; QO &#x5185;&#x90E8;&#x70B9;&#x4F4D;&#x5F62;&#x6837;&#x672C;&#x3002;&#x8BE5;&#x65B9;&#x6CD5;&#x7684;&#x7F3A;&#x70B9;&#x662F;&#xFF1A;Qfree &#x4E2D;&#x4EFB;&#x4F55;&#x7279;&#x5B9A;&#x533A;&#x57DF;&#x7684;&#x6837;&#x672C;&#x6570;&#x76EE;&#x4E0E;&#x8BE5;&#x533A;&#x57DF;&#x7684;&#x4F53;&#x79EF;&#x6210;&#x6B63;&#x6BD4;&#xFF0C;&#x56E0;&#x6B64;&#x4E0D;&#x592A;&#x53EF;&#x80FD;&#x5728;&#x72ED;&#x7A84;&#x7684;&#x901A;&#x9053;&#x5185;&#x8FDB;&#x884C;&#x3002;&#x8FD9;&#x88AB;&#x79F0;&#x4E3A;&#x72ED;&#x7A84;&#x901A;&#x9053;&#x95EE;&#x9898;&#xFF08;Narrow Passage Problem&#xFF09;&#x3002; &#x8FDE;&#x63A5;&#xFF1A;&#x4F7F;&#x7528;&#x4E00;&#x4E2A;&#x7B80;&#x5355;&#x7684;&#x5C40;&#x90E8;&#x8DEF;&#x5F84;&#x89C4;&#x5212;&#x7B97;&#x6CD5;&#xFF0C;&#x6765;&#x751F;&#x6210;&#x8FDE;&#x63A5;&#x4F4D;&#x5F62;&#x5BF9;&#x7684;&#x8DEF;&#x5F84;&#x3002;&#x5178;&#x578B;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x5C1D;&#x8BD5;&#x628A;&#x5404;&#x4E2A;&#x8282;&#x70B9;&#x4E0E;&#x5176; k &#x4E2A;&#x6700;&#x8FD1;&#x90BB;&#x8282;&#x70B9;&#x8FDE;&#x63A5;&#x8D77;&#x6765;&#x3002; &#x589E;&#x5F3A;&#xFF1A;&#x52A0;&#x5165;&#x65B0;&#x7684;&#x8282;&#x70B9;&#x548C;&#x5F27;&#x7EBF;&#xFF0C;&#x628A;&#x8DEF;&#x7EBF;&#x56FE;&#x4E2D;&#x4E0D;&#x76F8;&#x8FDE;&#x7684;&#x5143;&#x7D20;&#x8FDE;&#x63A5;&#x8D77;&#x6765;&#x3002;&#x589E;&#x5F3A;&#x7684;&#x76EE;&#x6807;&#x662F;&#x6700;&#x5927;&#x7A0B;&#x5EA6;&#x5730;&#x628A;&#x4E0D;&#x76F8;&#x4EA4;&#x7684;&#x5355;&#x5143;&#x8FDE;&#x63A5;&#x8D77;&#x6765;&#x3002;&#x4E00;&#x79CD;&#x589E;&#x5F3A;&#x65B9;&#x6CD5;&#x662F;&#xFF1A;&#x5C06;&#x4E24;&#x4E2A;&#x4E0D;&#x76F8;&#x4EA4;&#x5355;&#x5143;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x8FDE;&#x63A5;&#x8D77;&#x6765;&#xFF0C;&#x91C7;&#x7528;&#x8F83;&#x590D;&#x6742;&#x7684;&#x89C4;&#x5212;&#x7B97;&#x6CD5;&#x3002;&#x53E6;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x662F;&#xFF1A;&#x5C06;&#x66F4;&#x591A;&#x968F;&#x673A;&#x8282;&#x70B9;&#x6DFB;&#x52A0;&#x5230;&#x8DEF;&#x7EBF;&#x56FE;&#x4E2D;&#x3002; PRM&#x65B9;&#x6CD5;&#x4E0D;&#x5229;&#x7684;&#x4E00;&#x9762;&#x5728;&#x4E8E;&#x5B83;&#x53EA;&#x662F;&#x6982;&#x7387;&#x5B8C;&#x5168;&#xFF08;Probabilistically Complete&#xFF09;&#x7684;&#xFF0C;&#x5373;&#x5F53;&#x6C42;&#x89E3;&#x89C4;&#x5212;&#x95EE;&#x9898;&#x7684;&#x8BA1;&#x7B97;&#x65F6;&#x95F4;&#x8D8B;&#x4E8E;&#x65E0;&#x7A77;&#x5927;&#x65F6;&#xFF0C;&#x6C42;&#x5F97;&#x4E00;&#x4E2A;&#x89E3;&#xFF08;&#x5982;&#x679C;&#x5B58;&#x5728;&#xFF09;&#x7684;&#x6982;&#x7387;&#x8D8B;&#x4E8E;1&#x3002;&#x8FD9;&#x610F;&#x5473;&#x7740;&#xFF1A;&#x5982;&#x679C;&#x95EE;&#x9898;&#x65E0;&#x89E3;&#xFF0C;&#x7B97;&#x6CD5;&#x8FD0;&#x884C;&#x65F6;&#x95F4;&#x4E0D;&#x786E;&#x5B9A;&#xFF0C;&#x9700;&#x8981;&#x52A0;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x8FED;&#x4EE3;&#x6B21;&#x6570;&#x4EE5;&#x4FDD;&#x8BC1;&#x7B97;&#x6CD5;&#x7EC8;&#x6B62;&#x3002; &#x5FEB;&#x901F;&#x641C;&#x7D22;&#x968F;&#x673A;&#x6811;&#xFF08;&#xFF08;Rapidly-Exploring Random Tree, RRT&#xFF09;&#xFF09; &#x91C7;&#x6837;&#xFF1A;&#x4F9D;&#x636E;&#x4E00;&#x4E2A;&#x7A7A;&#x95F4;&#x4E2D;&#x7684;&#x968F;&#x673A;&#x91C7;&#x6837;&#x751F;&#x6210;&#x968F;&#x673A;&#x4F4D;&#x5F62; qrand&#xFF08;&#x4E0E;PRM&#x7C7B;&#x4F3C;&#xFF09;&#x3002; &#x8FDE;&#x63A5;&#xFF1A;&#x5728; T &#x4E0A;&#x627E;&#x5230;&#x6700;&#x9760;&#x8FD1; qrand &#x7684;&#x4F4D;&#x5F62; qnear&#xFF0C;&#x5E76;&#x5728;&#x4ECE; qnear &#x5230; qrand &#x7684;&#x8FDE;&#x7EBF;&#x4E0A;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x5019;&#x9009;&#x70B9; qnew&#xFF0C;&#x4F7F;&#x4E4B;&#x5230; qnear &#x7684;&#x8DDD;&#x79BB;&#x4E3A;&#x9884;&#x5148;&#x7ED9;&#x5B9A;&#x7684;&#x503C; &#x3B4;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x8FDB;&#x884C;&#x78B0;&#x649E;&#x68C0;&#x6D4B;&#xFF0C;&#x5982;&#x679C; qnear &#x5230; qnew &#x7684;&#x8FDE;&#x7EBF;&#x6BB5;&#x5C5E;&#x4E8E; Qfree&#xFF0C;&#x5219;&#x5C06;&#x8BE5;&#x8FDE;&#x7EBF;&#x6BB5;&#x548C; qnew &#x6DFB;&#x52A0;&#x5230; T &#x4E2D;&#x3002;&#x6CE8;&#x610F; qrand &#x5E76;&#x672A;&#x88AB;&#x6DFB;&#x52A0;&#x5230; T &#x4E2D;&#xFF0C;&#x5B83;&#x53EA;&#x662F;&#x6807;&#x8BC6; T &#x7684;&#x751F;&#x957F;&#x65B9;&#x5411;&#x3002;&#x4E3A;&#x52A0;&#x901F;&#x641C;&#x7D22;&#x8FC7;&#x7A0B;&#xFF0C;&#x53CC;&#x5411;RRT&#x65B9;&#x6CD5;&#x91C7;&#x7528;&#x4E24;&#x4E2A;&#x5206;&#x522B;&#x4EE5; qs &#x548C; qg &#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x6811; Ts &#x548C; Tg&#x3002;&#x8FED;&#x4EE3;&#x5230;&#x4E00;&#x5B9A;&#x6B65;&#x6570;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x7B97;&#x6CD5;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x6B65;&#xFF1B; &#x4E24;&#x68F5;&#x6811;&#x8FDE;&#x63A5;&#xFF1A;&#x901A;&#x8FC7;&#x4EA7;&#x751F;&#x4E00;&#x4E2A; qnew &#x4F5C;&#x4E3A; $T_s$ &#x7684;&#x751F;&#x957F;&#x70B9;&#x5E76;&#x5C1D;&#x8BD5;&#x5C06; $T_g$ &#x8FDE;&#x63A5;&#x5230;&#x8BE5;&#x70B9;&#x3002;&#x6B64;&#x65F6;&#x7684;&#x8BA1;&#x7B97;&#x6B65;&#x957F;&#x662F;&#x53EF;&#x53D8;&#x7684;&#x800C;&#x975E;&#x5E38;&#x6570; $&#x3B4;$&#x3002; &#x4F18;&#x70B9;&#xFF1A;&#x590D;&#x6742;&#x5EA6;&#x4E3B;&#x8981;&#x51B3;&#x5B9A;&#x4E8E;&#x5BFB;&#x627E;&#x8DEF;&#x5F84;&#x7684;&#x96BE;&#x5EA6;&#xFF0C;&#x8DDF;&#x6574;&#x4E2A;&#x89C4;&#x5212;&#x573A;&#x666F;&#x7684;&#x5927;&#x5C0F;&#x548C;&#x6784;&#x578B;&#x7A7A;&#x95F4;&#x7684;&#x7EF4;&#x6570;&#x57FA;&#x672C;&#x65E0;&#x5173; &#x7F3A;&#x70B9;&#xFF1A; &#x57FA;&#x672C;&#x65E0;bias&#x7684;RRT&#x4F1A;&#x5728;&#x7A7A;&#x95F4;&#x968F;&#x673A;&#x6269;&#x5C55; &#x8F93;&#x51FA;&#x8DEF;&#x5F84;&#x975E;&#x6700;&#x4F18;&#x8DEF;&#x5F84; &#x671F;&#x672B;&#x590D;&#x4E60;&#x7B14;&#x8BB0;&#x53F3;&#x952E;&#x4FDD;&#x5B58;~ &#x7591;&#x95EE;&#x68AF;&#x5EA6;&#x90E8;&#x5206;&#xFF0C;&#x68AF;&#x5EA6;&#x662F;&#x4E00;&#x9636;&#x5BFC;&#x6570;&#x7684;&#x4E8C;&#x7EF4;&#x7B49;&#x6548;&#x5F0F;&#xFF0C;&#x8FD9;&#x53E5;&#x8BDD;&#x548B;&#x7406;&#x89E3;&#xFF1F;&#x662F;&#x8BF4;&#x5BF9;G(x,y)&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#x90FD;&#x6C42;&#x4E00;&#x9636;&#x5BFC;&#x6570;&#xFF0C;&#x7EC4;&#x6210;&#x7684;&#x5411;&#x91CF;&#x5417;&#xFF1F; &#x68AF;&#x5EA6;&#x7684;&#x5E45;&#x5EA6;&#x503C;&#x662F;&#x4E0E;&#x65B9;&#x5411;&#x65E0;&#x5173;&#x7684;&#xFF0C;&#x7B97;&#x5B50;&#x662F;&#x5404;&#x5411;&#x540C;&#x6027;&#x7B97;&#x5B50;&#x3002;&#x600E;&#x4E48;&#x7406;&#x89E3;&#x5404;&#x5411;&#x540C;&#x6027;&#xFF1F; PPT ch3 94&#x9875; 95&#x9875; 101&#x9875; 105&#x9875; 134 Canny&#x8FB9;&#x7F18;&#x68C0;&#x6D4B;&#x7B97;&#x6CD5;&#x8BA1;&#x7B97;&#x65B9;&#x5411;&#x89D2;&#x95EE;&#x9898;]]></content>
      <categories>
        <category>智能机器人</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>OpenCV</tag>
        <tag>智能机器人</tag>
        <tag>SLAM</tag>
        <tag>计算机视觉</tag>
        <tag>机器人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LSTM+CTC实验报告]]></title>
    <url>%2F%2Fposts%2Fa9eaf96f%2F</url>
    <content type="text"><![CDATA[LSTM+CTC&#x7528;&#x4E8E;&#x9A8C;&#x8BC1;&#x7801;&#x8BC6;&#x522B;&#x7684;&#x5B9E;&#x9A8C;&#x62A5;&#x544A; &#x9A8C;&#x8BC1;&#x7801;&#x751F;&#x6210; &#x566A;&#x58F0;&#x80CC;&#x666F;&#x56FE;+&#x9A8C;&#x8BC1;&#x7801;&#x5728;&#x8001;&#x5E08;&#x7ED9;&#x51FA;&#x7684;&#x4EE3;&#x7801;&#x91CC;&#xFF0C;&#x9A8C;&#x8BC1;&#x7801;&#x662F;&#x9ED1;&#x5E95;&#x767D;&#x5B57;&#xFF0C;&#x4E14;&#x6CA1;&#x6709;&#x566A;&#x58F0;&#x3002;&#x6211;&#x5C06;&#x80CC;&#x666F;&#x56FE;&#x6539;&#x4E3A;&#x968F;&#x673A;&#x751F;&#x6210;&#x7684;&#x4E00;&#x5F20;&#x5E26;&#x566A;&#x58F0;&#x7684;&#x56FE;&#x7247;&#xFF0C;&#x5B57;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x9ED1;&#x8272;&#x3002;&#x751F;&#x6210;&#x4E00;&#x5F20;&#x9A8C;&#x8BC1;&#x7801;&#x3002; &#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5E26;&#x566A;&#x58F0;&#x7684;&#x80CC;&#x666F;&#x56FE;&#x7684;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 12345678910111213def gen_beijingtu(): #&#x8BBE;&#x7F6E;&#x5927;&#x5C0F;&#x4E3A;&#xFF1A;&#x9AD8;=32&#xFF0C;&#x5BBD;=256 image = ImageCaptcha(256,32) #captcha_text = random_captcha_text() captcha_text = &apos; &apos; captcha = image.generate(captcha_text) # image.write(captcha_text, captcha_text + &apos;.jpg&apos;) # &#x5199;&#x5230;&#x6587;&#x4EF6; captcha_image = Image.open(captcha) captcha_image = np.array(captcha_image) return captcha_image &#x5728;&#x751F;&#x6210;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x7C7B;&#x4E2D;&#xFF0C;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#x51E0;&#x4E2A;&#x65B9;&#x6CD5;&#xFF1A; + &#x521D;&#x59CB;&#x5316;&#xFF1A;&#x8BBE;&#x5B9A;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x5B57;&#x7B26;&#x96C6;&#xFF0C;&#x5B57;&#x4F53; + &#x751F;&#x6210;&#x4E00;&#x7EC4;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x6587;&#x672C;&#x3002; + &#x6839;&#x636E;&#x751F;&#x6210;&#x7684;&#x672C;&#x6587;&#xFF0C;&#x8F6C;&#x53D8;&#x5E26;&#x566A;&#x58F0;&#x4E3A;&#x56FE;&#x7247;&#x3002; + &#x5355;&#x4E2A;&#x5B57;&#x7B26;&#x901A;&#x8FC7;One-Hot&#x7F16;&#x7801;&#x8F6C;&#x4E3A;&#x5411;&#x91CF; + One-Hot&#x7F16;&#x7801;&#x7684;&#x5411;&#x91CF;&#x8F6C;&#x4E3A;&#x6587;&#x672C; &#x6574;&#x4F53;&#x7C7B;&#x7684;&#x7ED3;&#x6784;&#x5982;&#x4E0B;&#xFF1A; 123456789101112#&#x6B64;&#x5904;&#x4EE3;&#x7801;&#x662F;&#x4E0D;&#x7B26;&#x5408;&#x89C4;&#x8303;&#x7684;&#xFF0C;&#x6211;&#x60F3;&#x8868;&#x8FBE;&#x7684;&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x7C7B;&#x4F3C;&#x4E8E;&#x7C7B;&#x7684;&#x58F0;&#x660E;&#x3002;class gen_id_card(object): #&#x521D;&#x59CB;&#x5316; __init__(self) #&#x968F;&#x673A;&#x751F;&#x6210;&#x4E00;&#x7EC4;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x6587;&#x672C; random_text(self) #&#x6839;&#x636E;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x6587;&#x672C;&#x751F;&#x6210;&#x9A8C;&#x8BC1;&#x7801;&#x56FE;&#x7247; gen_image(self) #&#x5355;&#x4E2A;&#x5B57;&#x7B26;&#x901A;&#x8FC7;One-Hot&#x7F16;&#x7801;&#x8F6C;&#x4E3A;&#x5411;&#x91CF; char2vec(self, c) #One-Hot&#x7F16;&#x7801;&#x7684;&#x5411;&#x91CF;&#x901A;&#x8FC7;&#x5355;&#x4E2A;&#x5B57;&#x7B26;&#x8F6C;&#x4E3A;&#x6587;&#x672C; vec2text(self, vecs) &#x5404;&#x4E2A;&#x65B9;&#x6CD5;&#x8BE6;&#x7EC6;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A; &#x521D;&#x59CB;&#x5316;&#xFF1A;&#x5728;&#x751F;&#x6210;&#x5B9E;&#x9645;&#x7684;&#x6709;&#x6548;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x6211;&#x9009;&#x62E9;&#x4E86;&#x4EE5;10&#x4E2A;&#x6570;&#x5B57;&#x4F5C;&#x4E3A;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x96C6;&#xFF0C;&#x6570;&#x5B57;&#x4E2A;&#x6570;&#xFF0C;&#x6700;&#x5C11;&#x4E3A;2&#x4E2A;&#xFF0C;&#x6700;&#x591A;&#x8BBE;&#x5B9A;&#x4E3A;4&#x4E2A;&#xFF0C;&#x5B57;&#x4F53;&#x9009;&#x62E9;&#x4E3A;OCR-B&#x3002; &#x4EE3;&#x7801;&#x4E3A;&#xFF1A; 123456789101112def __init__(self): #self.words = open(&apos;AllWords.txt&apos;, &apos;r&apos;).read().split(&apos; &apos;) self.number = [&apos;0&apos;, &apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;, &apos;6&apos;, &apos;7&apos;, &apos;8&apos;, &apos;9&apos;] #&#x5B57;&#x7B26;&#x96C6; self.char_set = self.number #self.char_set = self.words + self.number #10&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x957F;&#x5EA6; self.len = len(self.char_set) #&#x6700;&#x5927;18&#x4E2A;&#xFF0C;&#x5B57;&#x4F53;&#x662F;OCR-B self.max_size = 4 self.ft = put_chinese_text(&apos;fonts/OCR-B.ttf&apos;) &#x5B57;&#x7B26;&#x8F6C;&#x5411;&#x91CF;&#xFF1A;&#x5355;&#x4E2A;&#x5B57;&#x7B26;&#x901A;&#x8FC7;One-Hot&#x7F16;&#x7801;&#x8F6C;&#x4E3A;&#x5411;&#x91CF;&#x3002; &#x4EE3;&#x7801;&#x4E3A;&#xFF1A; 1234567#&#x5355;&#x5B57;&#x8F6C;&#x5411;&#x91CF;def char2vec(self, c): vec = np.zeros((self.len)) for j in range(self.len): if self.char_set[j] == c: vec[j] = 1 return vec &#x5411;&#x91CF;&#x8F6C;&#x6587;&#x672C;&#xFF1A;One-Hot&#x7F16;&#x7801;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#x8F6C;&#x4E3A;&#x6587;&#x672C;&#x3002; 12345678#&#x5411;&#x91CF;&#x8F6C;&#x6587;&#x672C;def vec2text(self, vecs): text = &apos;&apos; v_len = len(vecs) for i in range(v_len): if(vecs[i] == 1): text = text + self.char_set[i % self.len] return text &#x751F;&#x6210;&#x9A8C;&#x8BC1;&#x7801;&#x6587;&#x672C;&#xFF1A;&#x6839;&#x636E;&#x521D;&#x59CB;&#x5316;&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x751F;&#x6210;&#x957F;&#x5EA6;&#x5728;&#x89C4;&#x5B9A;&#x8303;&#x56F4;&#x5185;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#x6587;&#x672C;&#x3002;&#x540C;&#x65F6;&#xFF0C;&#x8C03;&#x7528;&#x524D;&#x9762;&#x6240;&#x8FF0;&#x7684;&#x5355;&#x5B57;&#x8F6C;&#x5411;&#x91CF;&#x65B9;&#x6CD5;&#xFF0C;&#x540C;&#x65F6;&#x8FD4;&#x56DE;&#x6587;&#x672C;&#x5BF9;&#x5E94;&#x7684;&#x5411;&#x91CF;&#x3002; 12345678910111213141516def random_text(self): text = &apos;&apos; vecs = np.zeros((self.max_size * self.len)) #&#x5B57;&#x7B26;2~4&#x4E2A; size = random.randint(2, self.max_size) #size = self.max_size for i in range(size): #&#x968F;&#x4FBF;&#x9009;&#x4E00;&#x4E2A; c = random.choice(self.char_set) #&#x8F6C;&#x4E3A;&#x5411;&#x91CF; vec = self.char2vec(c) #&#x6DFB;&#x52A0;&#x5230;text&#x5F53;&#x4E2D;&#x53BB; text = text + c vecs[i*self.len:(i+1)*self.len] = np.copy(vec) #vecs&#x7684;shape&#x662F;(10*size,)One-Hot&#x7F16;&#x7801;&#xFF0C;&#x5373;&#x4F7F;&#x662F;3&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x4E5F;&#x662F;(40,)&#x7684;One-Hot return text,vecs &#x751F;&#x6210;&#x9A8C;&#x8BC1;&#x7801;&#x56FE;&#x7247;&#xFF1A;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x6709;&#x4E24;&#x4E2A;&#x7248;&#x672C;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x7248;&#x672C;&#x662F;&#x6839;&#x636E;&#x4E4B;&#x524D;&#x6240;&#x8FF0;&#x7684;&#x5E26;&#x566A;&#x58F0;&#x7684;&#x80CC;&#x666F;&#x56FE;&#xFF0C;&#x52A0;&#x4E0A;&#x9A8C;&#x8BC1;&#x7801;&#x56FE;&#x50CF;&#xFF0C;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5E26;&#x566A;&#x58F0;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#x3002;&#x7B2C;&#x4E8C;&#x4E2A;&#x7248;&#x672C;&#x662F;&#x5148;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x767D;&#x5E95;&#x9ED1;&#x5B57;&#x7684;&#xFF0C;&#x65E0;&#x566A;&#x58F0;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#x3002;&#x566A;&#x58F0;&#x90E8;&#x5206;&#x7531;&#x540E;&#x9762;&#x518D;&#x8BF4;&#x7684;&#x6DFB;&#x52A0;&#x6912;&#x76D0;&#x566A;&#x58F0;&#xFF08;&#x56E0;&#x4E3A;&#x6211;&#x559C;&#x6B22;&#x5403;&#x6912;&#x76D0;&#x5473;&#x7684;&#xFF09;&#x51FD;&#x6570;&#x6DFB;&#x52A0;&#xFF0C;&#x53BB;&#x566A;&#x51FD;&#x6570;&#x9009;&#x62E9;&#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#xFF0C;&#x7531;OpenCV&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#xFF08;&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;&#x8BFE;&#x521A;&#x5B66;&#x7684; : P&#xFF09; &#x7248;&#x672C;1&#xFF1A;&#x6839;&#x636E;&#x5E26;&#x566A;&#x58F0;&#x7684;&#x80CC;&#x666F;&#x56FE;&#xFF0C;&#x4EE5;&#x53CA;&#x524D;&#x6587;&#x6240;&#x8FF0;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#x6587;&#x672C;&#xFF0C;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5E26;&#x566A;&#x58F0;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#xFF0C;&#x8001;&#x5E08;&#x7ED9;&#x7684;&#x4EE3;&#x7801;&#x91CC;&#xFF0C;&#x8FD4;&#x56DE;&#x7684;&#x53EA;&#x662F;RGB&#x56FE;&#x50CF;&#x7684;&#x7B2C;&#x4E09;&#x4E2A;&#x901A;&#x9053;&#xFF0C;&#x8FD9;&#x91CC;&#xFF0C;&#x6211;&#x628A;&#x6574;&#x4E2A;&#x5B8C;&#x6574;&#x7684;&#x56FE;&#x50CF;&#x4E5F;&#x4E00;&#x5E76;&#x8FD4;&#x56DE;&#xFF0C;&#x4E3A;&#x540E;&#x9762;&#x7684;&#x8F6C;&#x4E3A;&#x7070;&#x5EA6;&#x4F5C;&#x51C6;&#x5907;&#x3002; 123456789101112131415161718192021222324def gen_image(self): text,vec = self.random_text() #&#x80CC;&#x666F;&#x56FE;&#xFF0C;zeros&#x662F;&#x9ED1;&#x5E95;&#xFF0C;ones&#x662F;&#x767D;&#x5E95;&#xFF0C;&#x7528;&#x4E4B;&#x524D;&#x7684;captcha&#x751F;&#x6210;&#x566A;&#x58F0;&#x80CC;&#x666F;&#x56FE; #img = np.zeros([32,256,3]) #img = np.ones([32,256,3]) img = gen_beijingtu() #color_ = (255,255,255) # &#x5B57;&#x4F53;&#x989C;&#x8272;&#xFF0C;(255,255,255) &#x662F;&#x767D;&#x8272; color_ = (0,0,0) # &#x9ED1;&#x8272; pos = (0, 0) #&#x8D77;&#x59CB;&#x4F4D;&#x7F6E; #&#x5B57;&#x4F53;&#x5927;&#x5C0F; text_size = 35 image = self.ft.draw_text(img, pos, text, text_size, color_) ######&#x67E5;&#x770B;&#x56FE;&#x50CF;####### #f = plt.figure() #ax = f.add_subplot(111) #ax.text(0.1, 0.9, text, ha=&apos;center&apos;, va=&apos;center&apos;, transform=ax.transAxes) #plt.imshow(image) #plt.show() ##################### #&#x8001;&#x5E08;&#x7ED9;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x8FD4;&#x56DE;&#x7684;&#x53EA;&#x662F;&#x56FE;&#x50CF;&#x7684;&#x7B2C;&#x4E09;&#x4E2A;&#x901A;&#x9053;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x628A;&#x6574;&#x4E2A;&#x56FE;&#x50CF;&#x90FD;&#x8FD4;&#x56DE;&#x4E86; #&#x4E3A;&#x540E;&#x9762;&#x518D;&#x8F6C;&#x4E3A;&#x7070;&#x5EA6;&#x505A;&#x51C6;&#x5907;&#x3002; return image[:,:,2],text,vec,image &#x751F;&#x6210;&#x7684;&#x56FE;&#x7247;&#xFF0C;&#x539F;&#x59CB;&#x56FE;&#x5982;&#x4E0B;&#xFF1A; &#x7248;&#x672C;2&#xFF1A;&#x5148;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x767D;&#x5E95;&#x9ED1;&#x5B57;&#x7684;&#xFF0C;&#x65E0;&#x566A;&#x58F0;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#x3002;&#x566A;&#x58F0;&#x90E8;&#x5206;&#x7531;&#x540E;&#x9762;&#x518D;&#x8BF4;&#x7684;&#x6DFB;&#x52A0;&#x6912;&#x76D0;&#x566A;&#x58F0;&#xFF08;&#x56E0;&#x4E3A;&#x6211;&#x559C;&#x6B22;&#x5403;&#x6912;&#x76D0;&#x5473;&#x7684;&#xFF09;&#x51FD;&#x6570;&#x6DFB;&#x52A0;&#xFF0C;&#x53BB;&#x566A;&#x51FD;&#x6570;&#x9009;&#x62E9;&#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#xFF0C;&#x7531;OpenCV&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#xFF08;&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;&#x8BFE;&#x521A;&#x5B66;&#x7684; : P&#xFF09; 123456789101112131415161718#&#x6839;&#x636E;&#x751F;&#x6210;&#x7684;text&#xFF0C;&#x751F;&#x6210;image,&#x8FD4;&#x56DE;&#x6807;&#x7B7E;&#x548C;&#x56FE;&#x7247;&#x5143;&#x7D20;&#x6570;&#x636E;def gen_image(self): text,vec = self.random_text() #&#x80CC;&#x666F;&#x56FE;&#xFF0C;zeros&#x662F;&#x9ED1;&#x5E95;&#xFF0C;ones&#x662F;&#x767D;&#x5E95;&#xFF0C;&#x7528;&#x4E4B;&#x524D;&#x7684;captcha&#x751F;&#x6210;&#x566A;&#x58F0;&#x80CC;&#x666F;&#x56FE; #img = np.zeros([32,256,3]) img = np.ones([32,256,3]) #img = gen_beijingtu() #color_ = (255,255,255) # Write color_ = (0,0,0) # Write pos = (0, 0) #&#x5B57;&#x4F53;&#x5927;&#x5C0F; text_size = 35 image = self.ft.draw_text(img, pos, text, text_size, color_) #&#x67E5;&#x770B;&#x56FE;&#x50CF; cv2.imshow(&apos;image&apos;,image) #&#x8001;&#x5E08;&#x7ED9;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x8FD4;&#x56DE;&#x7684;&#x53EA;&#x662F;&#x56FE;&#x50CF;&#x7684;&#x7B2C;&#x4E09;&#x4E2A;&#x901A;&#x9053;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x628A;&#x6574;&#x4E2A;&#x56FE;&#x50CF;&#x90FD;&#x8FD4;&#x56DE;&#x4E86; #&#x4E3A;&#x540E;&#x9762;&#x518D;&#x8F6C;&#x4E3A;&#x7070;&#x5EA6;&#x505A;&#x51C6;&#x5907;&#x3002; return image[:,:,2],text,vec,image &#x751F;&#x6210;&#x7684;&#x56FE;&#x7247;&#xFF0C;&#x539F;&#x59CB;&#x56FE;&#x5982;&#x4E0B;&#xFF1A; &#x6DFB;&#x52A0;&#x6912;&#x76D0;&#x566A;&#x58F0;&#xFF1A;&#x6912;&#x76D0;&#x566A;&#x58F0;&#x4E5F;&#x79F0;&#x4E3A;&#x8109;&#x51B2;&#x566A;&#x58F0;&#xFF0C;&#x662F;&#x56FE;&#x50CF;&#x4E2D;&#x7ECF;&#x5E38;&#x89C1;&#x5230;&#x7684;&#x4E00;&#x79CD;&#x566A;&#x58F0;&#xFF0C;&#x5B83;&#x662F;&#x4E00;&#x79CD;&#x968F;&#x673A;&#x51FA;&#x73B0;&#x7684;&#x767D;&#x70B9;&#x6216;&#x8005;&#x9ED1;&#x70B9;&#xFF0C;&#x53EF;&#x80FD;&#x662F;&#x4EAE;&#x7684;&#x533A;&#x57DF;&#x6709;&#x9ED1;&#x8272;&#x50CF;&#x7D20;&#x6216;&#x662F;&#x5728;&#x6697;&#x7684;&#x533A;&#x57DF;&#x6709;&#x767D;&#x8272;&#x50CF;&#x7D20;&#xFF08;&#x6216;&#x662F;&#x4E24;&#x8005;&#x7686;&#x6709;&#xFF09;&#x3002; &#x6DFB;&#x52A0;&#x6912;&#x76D0;&#x566A;&#x58F0;&#x7684;&#x601D;&#x60F3;&#x662F;&#x5728;&#x56FE;&#x7247;&#x4E2D;&#xFF0C;&#x968F;&#x673A;&#x9009;&#x53D6;&#x4E00;&#x90E8;&#x5206;&#x6DFB;&#x52A0;&#x767D;&#x8272;&#x50CF;&#x7D20;&#x70B9;&#x6216;&#x9ED1;&#x8272;&#x50CF;&#x7D20;&#x70B9;&#x3002; 12345678910111213141516171819202122#&#x6DFB;&#x52A0;&#x6912;&#x76D0;&#x566A;&#x58F0;def saltpepper(img,n): m=int((img.shape[0]*img.shape[1])*n) for a in range(m): i=int(np.random.random()*img.shape[1]) j=int(np.random.random()*img.shape[0]) if img.ndim==2: img[j,i]=255 elif img.ndim==3: img[j,i,0]=255 img[j,i,1]=255 img[j,i,2]=255 for b in range(m): i=int(np.random.random()*img.shape[1]) j=int(np.random.random()*img.shape[0]) if img.ndim==2: img[j,i]=0 elif img.ndim==3: img[j,i,0]=0 img[j,i,1]=0 img[j,i,2]=0 return img &#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#xFF1A;&#x8BBE;&#x8BA1;&#x601D;&#x60F3;&#x5C31;&#x662F;&#x68C0;&#x67E5;&#x8F93;&#x5165;&#x4FE1;&#x53F7;&#x4E2D;&#x7684;&#x91C7;&#x6837;&#x5E76;&#x5224;&#x65AD;&#x5B83;&#x662F;&#x5426;&#x4EE3;&#x8868;&#x4E86;&#x4FE1;&#x53F7;&#xFF0C;&#x4F7F;&#x7528;&#x5947;&#x6570;&#x4E2A;&#x91C7;&#x6837;&#x7EC4;&#x6210;&#x7684;&#x89C2;&#x5BDF;&#x7A97;&#x53E3;&#x6765;&#x5B9E;&#x73B0;&#x8FD9;&#x9879;&#x529F;&#x80FD;&#x3002;&#x5BF9;&#x89C2;&#x5BDF;&#x7A97;&#x53E3;&#x4E2D;&#x7684;&#x6570;&#x503C;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x628A;&#x4F4D;&#x4E8E;&#x89C2;&#x5BDF;&#x7A97;&#x53E3;&#x4E2D;&#x95F4;&#x7684;&#x4E2D;&#x503C;&#x4F5C;&#x4E3A;&#x8F93;&#x51FA;&#x3002;&#x7136;&#x540E;&#xFF0C;&#x4E22;&#x5F03;&#x6700;&#x65E9;&#x7684;&#x503C;&#xFF0C;&#x53D6;&#x5F97;&#x65B0;&#x7684;&#x91C7;&#x6837;&#xFF0C;&#x4E0D;&#x65AD;&#x91CD;&#x590D;&#x4E0A;&#x9762;&#x7684;&#x8BA1;&#x7B97;&#x8FC7;&#x7A0B;&#x3002; &#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#x662F;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x5E38;&#x7528;&#x6B65;&#x9AA4;&#xFF0C;&#x5B83;&#x5BF9;&#x4E8E;&#x6591;&#x70B9;&#x566A;&#x58F0;&#x548C;&#x6912;&#x76D0;&#x566A;&#x58F0;&#x6765;&#x8BF4;&#x5C24;&#x5176;&#x6709;&#x7528;&#x3002;&#x4FDD;&#x5B58;&#x8FB9;&#x7F18;&#x7684;&#x7279;&#x6027;&#x4F7F;&#x5B83;&#x5728;&#x4E0D;&#x5E0C;&#x671B;&#x51FA;&#x73B0;&#x8FB9;&#x7F18;&#x6A21;&#x7CCA;&#x7684;&#x573A;&#x5408;&#x4E5F;&#x5F88;&#x6709;&#x7528;&#x3002; 12345678910def quzao(image): #&#x663E;&#x793A;&#x539F;&#x59CB;&#x56FE;&#x7247; cv2.imshow(&apos;image&apos;,image) #&#x7531;&#x4E8E;medianBlur&#x4E0D;&#x652F;&#x6301;float64&#x683C;&#x5F0F;&#x7684;&#x56FE;&#x7247;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x8FD9;&#x91CC;&#x5C06;&#x5176;&#x8F6C;&#x4E3A;float32&#x683C;&#x5F0F;&#x7684;&#x3002; image=image.astype(np.float32) #&#x4E2D;&#x503C;&#x6EE4;&#x6CE2; image2=cv2.medianBlur(image,3) cv2.imshow(&apos;medianBlur&apos;,image2) return image2 &#x5982;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x4ECE;&#x4E0A;&#x5230;&#x4E0B;&#x4F9D;&#x6B21;&#x662F;&#xFF1A;&#x539F;&#x59CB;&#x56FE;&#x7247;&#xFF0C;&#x52A0;&#x4E86;&#x6912;&#x76D0;&#x566A;&#x58F0;&#x7684;&#x56FE;&#x7247;&#xFF0C;&#x8FDB;&#x884C;&#x4E2D;&#x503C;&#x6EE4;&#x6CE2;&#x4E4B;&#x540E;&#x7684;&#x56FE;&#x7247;&#x3002; &#x5F69;&#x8272;&#x8F6C;&#x7070;&#x5EA6;&#xFF1A;&#x5728;&#x524D;&#x9762;&#x6240;&#x8FF0;&#x4E2D;&#xFF0C;&#x9760;&#x5E26;&#x566A;&#x58F0;&#x7684;&#x80CC;&#x666F;&#x56FE;&#x751F;&#x6210;&#x7684;&#x9A8C;&#x8BC1;&#x7801;&#x4E2D;&#xFF0C;&#x566A;&#x58F0;&#x4FE1;&#x606F;&#x662F;&#x5F69;&#x8272;&#x7684;&#xFF0C;&#x4E3A;&#x4E86;&#x63D0;&#x9AD8;&#x8BC6;&#x522B;&#x7684;&#x51C6;&#x786E;&#x7387;&#xFF0C;&#x6211;&#x5C06;&#x589E;&#x5E45;&#x56FE;&#x7247;&#x8F6C;&#x4E3A;&#x7070;&#x5EA6;&#x3002; 123456789101112131415161718192021def convert2gray(img): #&#x7B2C;&#x4E00;&#x5217;&#x6240;&#x6709;&#xFF0C;&#x7B2C;&#x4E8C;&#x5217;&#x6240;&#x6709;&#xFF0C;&#x7684;&#x7B2C;1/2/3&#x4E2A;&#x50CF;&#x7D20; r, g, b = img[:, :, 0], img[:, :, 1], img[:, :, 2] gray = 0.2989 * r + 0.5870 * g + 0.1140 * b gray=np.rint(gray) gray=gray.astype(np.uint8) #######&#x67E5;&#x770B;&#x56FE;&#x50CF;######### #f = plt.figure() #ax = f.add_subplot(111) #ax.text(0.1, 0.9, text, ha=&apos;center&apos;, va=&apos;center&apos;, transform=ax.transAxes) #plt.imshow(img) #plt.show() #plt.imshow(gray,cmap=&apos;Greys_r&apos;) #plt.axis(&apos;off&apos;) #plt.show() ############################# #return np.rint(gray) return gray &#x81F3;&#x6B64;&#xFF0C;&#x9A8C;&#x8BC1;&#x7801;&#x751F;&#x6210;&#x90E8;&#x5206;&#x7ED3;&#x675F;&#x3002; &#x7A00;&#x758F;&#x77E9;&#x9635; &#x7531;&#x4E8E;&#x9A8C;&#x8BC1;&#x7801;&#x662F;&#x4E0D;&#x5B9A;&#x957F;&#x7684;&#xFF0C;&#x518D;&#x52A0;&#x4E0A;LSTM&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x90E8;&#x5206;&#x51FD;&#x6570;&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x9700;&#x8981;&#x628A;&#x8F93;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x8F6C;&#x4E3A;&#x7A00;&#x758F;&#x77E9;&#x9635;&#x3002; &#x8FD9;&#x91CC;&#x8BBE;&#x5B9A;Batch_Size=64&#xFF0C;&#x5373;&#x5728;&#x4E00;&#x4E2A;batch&#x4E2D;&#xFF0C;&#x4E00;&#x5171;&#x6709;64&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#x548C;&#x56FE;&#x7247;&#xFF0C;&#x9700;&#x8981;&#x7528;sparse_tuple_from&#x51FD;&#x6570;&#x628A;&#x4ED6;&#x4EEC;&#x8F6C;&#x4E3A;&#x7A00;&#x758F;&#x77E9;&#x9635;&#x3002;&#x73B0;&#x4EE5;3&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#x4E3A;&#x4F8B;&#xFF0C;&#x7ED3;&#x5408;&#x4EE3;&#x7801;&#x8BF4;&#x660E;&#xFF0C;&#x5982;&#x4E0B; 123456789def get_next_batch(batch_size=128): ... #sparse_targets&#x662F;&#x4E00;&#x4E2A;tuple #&#x662F;&#x5C06;&#x9A8C;&#x8BC1;&#x7801;&#x8F6C;&#x4E3A;&#x7684;&#x7A00;&#x758F;&#x77E9;&#x9635; #&#x7B2C;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x662F;&#x8868;&#x793A;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x4F4D;&#x7F6E; #&#x7B2C;&#x4E8C;&#x4E2A;&#x7EF4;&#x5EA6;&#x8868;&#x793A;&#x6240;&#x6709;&#x6570;&#x5B57;&#xFF0C;&#x6309;&#x987A;&#x5E8F;&#x6392;&#x5217; #&#x7B2C;&#x4E09;&#x4E2A;&#x7EF4;&#x5EA6;&#x8868;&#x793A;&#x539F;&#x77E9;&#x9635;&#x7684;&#x6700;&#x5927;&#x5F62;&#x72B6; sparse_targets = sparse_tuple_from(targets) ... &#x73B0;&#x4EE5;3&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#x4E3A;&#x4F8B;&#x8BF4;&#x660E;&#x7A00;&#x758F;&#x77E9;&#x9635;&#x3002; &#x7A00;&#x758F;&#x77E9;&#x9635;&#x7684;&#x7EF4;&#x5EA6;&#x4E00;&#x5171;&#x6709;&#x4E09;&#x4E2A;&#xFF1A; &#x7B2C;&#x4E00;&#x4E2A;&#x7EF4;&#x5EA6;&#x662F;&#x8868;&#x793A;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x4F4D;&#x7F6E; &#x7B2C;&#x4E8C;&#x4E2A;&#x7EF4;&#x5EA6;&#x8868;&#x793A;&#x6240;&#x6709;&#x6570;&#x5B57;&#xFF0C;&#x6309;&#x987A;&#x5E8F;&#x6392;&#x5217; &#x7B2C;&#x4E09;&#x4E2A;&#x7EF4;&#x5EA6;&#x8868;&#x793A;&#x539F;&#x77E9;&#x9635;&#x7684;&#x6700;&#x5927;&#x5F62;&#x72B6; &#x4E3E;&#x4F8B;&#xFF1A;&#x9A8C;&#x8BC1;&#x7801; 1[[4,8,0,9],[2,7,7,5],[1,1,2]] &#x90A3;&#x4E48;&#x7B2C;&#x4E00;&#x5143;&#x7D20;&#x662F; 1[[0,0],[0,1],[0,2],[0,3],[1,0],[1,1],[1,2],[1,3],[2,0],[2,1],[2,2]] &#x8868;&#x793A;&#x7684;&#x662F;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x4F4D;&#x7F6E;&#x3002; &#x7B2C;&#x4E8C;&#x5143;&#x7D20;&#x662F; 1[4,8,0,9,2,7,7,5,1,1,2] &#x7B2C;&#x4E09;&#x5143;&#x7D20;&#x5C31;&#x662F; 1[3,4] &#x56E0;&#x4E3A;&#x662F;3&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#xFF0C;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x662F;4&#x3002; LSTM&#x7F51;&#x7EDC; LSTM&#x6709;&#x591A;&#x79CD;&#x53D8;&#x5F62;&#xFF0C;&#x5728;TensorFlow&#x4E2D;&#xFF0C;LSTM&#x7C7B;&#x7684;&#x5B9A;&#x4E49;&#x4E3A; 123456789class LSTMCell(LayerRNNCell): __init__(self, num_units, use_peepholes=False, cell_clip=None, initializer=None, num_proj=None, proj_clip=None, num_unit_shards=None, num_proj_shards=None, forget_bias=1.0, state_is_tuple=True, activation=None, reuse=None, name=None, dtype=None)... &#x6CA1;&#x6709;&#x4F7F;&#x7528;peephole&#x7684;&#x7248;&#x672C;&#xFF0C;&#x5176;&#x7ED3;&#x6784;&#x662F;&#x6839;&#x636E; &gt;http://www.bioinf.jku.at/publications/older/2604.pdf &#x5728;&#x4F7F;&#x7528;&#x4E86;peephole&#x7684;&#x7248;&#x672C;&#xFF0C;&#x5176;&#x7ED3;&#x6784;&#x662F;&#x6839;&#x636E; &gt;https://research.google.com/pubs/archive/43905.pdf &#x8FD9;&#x6B21;&#x5B9E;&#x9A8C;&#x7684;LSTM&#xFF0C;&#x6211;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x672A;&#x4F7F;&#x7528;peephole&#x7248;&#x672C;&#x7684;LSTM&#x3002; &#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x91C7;&#x53D6;&#x9ED8;&#x8BA4;&#x8BBE;&#x5B9A;&#xFF0C;&#x5373;&#x4E3A;None&#x3002;&#x6211;&#x7684;TensorFlow&#x7684;&#x7248;&#x672C;&#x4E3A;1.10&#xFF0C;&#x5206;&#x6790;&#x6E90;&#x7801;&#x5982;&#x4E0B;&#xFF1A; &#x5148;&#x770B;LSTM&#x521D;&#x59CB;&#x5316;&#x51FD;&#x6570;&#xFF08;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#x7701;&#x7565;&#xFF09;&#xFF1A; 123456789101112131415161718def __init__(self, num_units, use_peepholes=False, cell_clip=None, initializer=None, num_proj=None, proj_clip=None, num_unit_shards=None, num_proj_shards=None, forget_bias=1.0, state_is_tuple=True, activation=None, reuse=None, name=None, dtype=None): ... self._num_units = num_units self._activation = activation or math_ops.tanh self._forget_bias = forget_bias if num_proj: ... else: self._state_size = ( LSTMStateTuple(num_units, num_units) if state_is_tuple else 2 * num_units) self._output_size = num_units &#x53EF;&#x77E5;&#xFF0C;&#x5728;&#x5B9A;&#x4E49; 12#num_hidden=64cell = tf.contrib.rnn.LSTMCell(num_hidden, state_is_tuple=True) &#x65F6;&#xFF0C;&#x8F93;&#x51FA;&#x7684;&#x5927;&#x5C0F;&#x662F;64&#x7684;vector&#x3002; &#x7EE7;&#x7EED;&#x5206;&#x6790;build&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x4E0B;&#xFF08;&#x7531;&#x4E8E;&#x672A;&#x4F7F;&#x7528;peephole&#xFF0C;&#x6545;&#x7565;&#x53BB;peephole&#x76F8;&#x5173;&#xFF09;&#xFF1A; 123456789101112131415def build(self, inputs_shape): ... h_depth = self._num_units if self._num_proj is None else self._num_proj self._kernel = self.add_variable( _WEIGHTS_VARIABLE_NAME, shape=[input_depth + h_depth, 4 * self._num_units], initializer=self._initializer, partitioner=maybe_partitioner) self._bias = self.add_variable( _BIAS_VARIABLE_NAME, shape=[4 * self._num_units], initializer=initializer) &#x53EF;&#x89C1;&#xFF0C;&#x5B9E;&#x9645;&#x7528;&#x4E8E;&#x8BA1;&#x7B97;4&#x4E2A;Gates&#x7684;&#x5411;&#x91CF;&#x7684;&#x662F;&#x7531;input vector&#x548C;&#x4E0A;&#x4E00;&#x65F6;&#x523B;LSTM &#x795E;&#x7ECF;&#x5143;&#x8F93;&#x51FA;&#x6240;&#x7EC4;&#x6210;&#x7684;&#x3002; &#x5206;&#x6790;call&#x51FD;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x662F;&#x5B9E;&#x9645;&#x8BA1;&#x7B97;&#x65F6;&#xFF0C;&#x8C03;&#x7528;&#x7684;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637383940414243def call(self, inputs, state): &quot;&quot;&quot;Run one step of LSTM. Args: inputs: input Tensor, 2D, `[batch, num_units]. state: if `state_is_tuple` is False, this must be a state Tensor, `2-D, [batch, state_size]`. If `state_is_tuple` is True, this must be a tuple of state Tensors, both `2-D`, with column sizes `c_state` and `m_state`. ... &quot;&quot;&quot; sigmoid = math_ops.sigmoid if self._state_is_tuple: (c_prev, m_prev) = state else: c_prev = array_ops.slice(state, [0, 0], [-1, self._num_units]) m_prev = array_ops.slice(state, [0, self._num_units], [-1, num_proj]) # i = input_gate, j = new_input, f = forget_gate, o = output_gate lstm_matrix = math_ops.matmul( array_ops.concat([inputs, m_prev], 1), self._kernel) lstm_matrix = nn_ops.bias_add(lstm_matrix, self._bias) i, j, f, o = array_ops.split( value=lstm_matrix, num_or_size_splits=4, axis=1) if self._use_peepholes: ... else: c = (sigmoid(f + self._forget_bias) * c_prev + sigmoid(i) * self._activation(j)) if self._use_peepholes: ... else: m = sigmoid(o) * self._activation(c) new_state = (LSTMStateTuple(c, m) if self._state_is_tuple else array_ops.concat([c, m], 1)) return m, new_state &#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x628A;&#x4E00;&#x6B21;LSTM&#x795E;&#x7ECF;&#x5143;&#x6267;&#x884C;&#x7684;&#x8FC7;&#x7A0B;&#x8BB2;&#x7684;&#x975E;&#x5E38;&#x6E05;&#x695A;&#x4E86;&#x3002; &#x7531;&#x4E0A;&#x6587;&#xFF0C;&#x53EF;&#x77E5;&#xFF0C;&#x5355;&#x4E2A;LSTM&#x795E;&#x7ECF;&#x5143;&#x7ED3;&#x6784;&#x5982;&#x56FE;&#xFF1A; \(x_t\)&#x662F;&#x8F93;&#x5165;&#x7684;vector&#xFF0C;size=32&#x3002;\(m_{t-1}\)&#x662F;&#x4E0A;&#x4E00;&#x65F6;&#x523B;&#x7684;&#x8F93;&#x51FA;&#xFF0C;size=64&#x3002; &#x4E8C;&#x8005;&#x8FDB;&#x884C;&#x62FC;&#x63A5;&#xFF0C;&#x7EC4;&#x6210;size=96&#x7684;&#x5411;&#x91CF;&#xFF0C;&#x8FD9;&#x4E2A;&#x5411;&#x91CF;&#x7528;&#x4E8E;&#x540E;&#x9762;&#x7684;&#x8BA1;&#x7B97;&#x3002; &#x7279;&#x522B;&#x9700;&#x8981;&#x4E00;&#x63D0;&#x7684;&#x662F;forget_gate&#x7684;&#x8F93;&#x5165;\(f_t\)&#xFF0C;&#x4EE3;&#x7801;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x9ED8;&#x8BA4;&#x7684;forget_gate_bias=1&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x518D;&#x52A0;&#x4E0A;1&#x3002; &#x5176;&#x4E2D;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x4E3A;&#x9ED8;&#x8BA4;&#x7684;Logistic&#x51FD;&#x6570;&#x548C;tanh&#x51FD;&#x6570;&#x3002; \[tanh(x) = \frac{exp(x)-exp(-x)} {exp(x)+exp(-x)}\] &#x5230;&#x73B0;&#x5728;&#x4E3A;&#x6B62;&#xFF0C;&#x53EA;&#x628A;&#x4E00;&#x4E2A;LSTM&#x795E;&#x7ECF;&#x5143;&#x63CF;&#x8FF0;&#x5B8C;&#x6BD5;&#x3002;&#x5728;&#x8BED;&#x53E5; 1cell = tf.contrib.rnn.LSTMCell(num_hidden, state_is_tuple=True) &#x8FD9;&#x8868;&#x793A;&#xFF0C;&#x4E00;&#x5C42;LSTM&#x4E00;&#x5171;&#x6709;64&#x4E2A;&#x5982;&#x4E0A;&#x6240;&#x8FF0;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x3002; &#x5728;&#x8BED;&#x53E5; 1stack = tf.contrib.rnn.MultiRNNCell([cell] * num_layers, state_is_tuple=True) &#x8868;&#x793A;&#xFF0C;&#x4E0A;&#x8FF0;LSTM&#x5C42;&#xFF0C;&#x4E00;&#x5171;&#x6709;1&#x5C42;&#x3002; 1outputs, _ = tf.nn.dynamic_rnn(cell, inputs, seq_len, dtype=tf.float32) &#x8868;&#x793A;&#x52A8;&#x6001;&#x7684;RNN&#x5B9E;&#x73B0;&#x3002; &#x4E0A;&#x8FF0;&#x7684;LSTM&#x795E;&#x7ECF;&#x5143;&#xFF0C;&#x4E00;&#x5C42;&#x6709;64&#x4E2A;&#xFF0C;&#x53EA;&#x6709;&#x4E00;&#x5C42;&#x3002;&#x5982;&#x56FE;&#xFF1A; &#x5168;&#x8FDE;&#x63A5;&#x5C42;&#xFF1A;&#x63A5;&#x6536;&#x6765;&#x81EA;LSTM&#x5C42;&#x7684;size=64&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x8F93;&#x51FA;size=12&#x7684;&#x8F93;&#x51FA;&#x3002; &#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x662F;output=input*W+b &#x6570;&#x636E;&#x6D41;&#x7684;&#x5F62;&#x72B6;&#x5206;&#x6790;&#xFF1A;&#x4EE3;&#x7801;&#x4E2D;&#x6D89;&#x53CA;&#x4E86;&#x5927;&#x91CF;&#x7684;&#x5F62;&#x72B6;&#x53D8;&#x6362;&#x3002;&#x6211;&#x628A;&#x5F62;&#x72B6;&#x7684;&#x53D8;&#x6362;&#x5199;&#x5230;&#x4E86;&#x4EE3;&#x7801;&#x7684;&#x6CE8;&#x91CA;&#x91CC;&#x3002; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051def get_train_model(): #features = convolutional_layers() #print features.get_shape() ##OUTPUT_SHAPE = (32,256) #inputs.shape=(64,256,32) inputs = tf.placeholder(tf.float32, [None, None, OUTPUT_SHAPE[0]]) #&#x5B9A;&#x4E49;ctc_loss&#x9700;&#x8981;&#x7684;&#x7A00;&#x758F;&#x77E9;&#x9635; #targets&#x662F;&#x6807;&#x7B7E;&#xFF0C;&#x4EE5;&#x7A00;&#x758F;&#x77E9;&#x9635;&#x7684;&#x5F62;&#x5F0F;&#x7ED9; targets = tf.sparse_placeholder(tf.int32) #1&#x7EF4;&#x5411;&#x91CF; &#x5E8F;&#x5217;&#x957F;&#x5EA6; [batch_size,] #BATCH_SIZE = 64 #seq_len=[64],&#x6BCF;&#x4E2A;&#x91CC;&#x9762;&#x90FD;&#x662F;256&#xFF0C;&#x8868;&#x793A; &#x4E00;&#x5171;64&#x4E2A;batch&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x91CC;&#x9762;&#xFF0C;&#x662F;256&#x6761;input seq_len = tf.placeholder(tf.int32, [None]) #&#x5B9A;&#x4E49;LSTM&#x7F51;&#x7EDC; #num_hidden = 64 #num_layers = 1 cell = tf.contrib.rnn.LSTMCell(num_hidden, state_is_tuple=True) #temp_input=cell.get_input_at(0) #&#x9ED8;&#x8BA4;&#x662F;&#x4E0D;&#x7528;peephole&#x7684;&#x3002; # state_is_tuple: If True, # accepted and returned states are 2-tuples of the c_state and m_state. stack = tf.contrib.rnn.MultiRNNCell([cell] * num_layers, state_is_tuple=True) #inputs.shape=(64,256,32) #train_seq_len&#xFF1A;shape=(64,)&#xFF0C;&#x6BCF;&#x4E2A;&#x91CC;&#x9762;&#x90FD;&#x662F;256&#xFF0C;&#x8868;&#x793A;&#x4E00;&#x5171;64&#x4E2A;batch&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;&#x91CC;&#x9762;&#x662F;256&#x6761; #output&#x7684;shape=(64,256,64)(batch_size*256&#x6761;*64&#x4E2A;output) outputs, _ = tf.nn.dynamic_rnn(cell, inputs, seq_len, dtype=tf.float32) #print(&quot;================================&quot;,outputs.shape) #shape=(64,256,32) shape = tf.shape(inputs) batch_s, max_timesteps = shape[0], shape[1] #-1&#x8868;&#x793A;&#x7F3A;&#x7701;&#x503C;&#xFF0C;&#x6700;&#x540E;&#x5269;&#x4E0B;&#x7684;&#x6570;&#x5C31;&#x662F;&#x90A3;&#x4E2A;&#x4F4D;&#x7F6E;&#x7684;&#x6570; #reshape&#x4E4B;&#x540E;&#xFF0C;output&#x7684;size&#x662F;(64*256,64) outputs = tf.reshape(outputs, [-1, num_hidden]) W = tf.Variable(tf.truncated_normal([num_hidden, num_classes], stddev=0.1), name=&quot;W&quot;) b = tf.Variable(tf.constant(0., shape=[num_classes]), name=&quot;b&quot;) logits = tf.matmul(outputs, W) + b #&#x8FD9;&#x91CC;&#x7684;&#x76F8;&#x52A0;&#x662F;&#x628A;b&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;&#x52A0;&#x5230;tf.matmul(outputs, W)&#x7684;&#x6BCF;&#x4E00;&#x5217;&#x4E2D;&#x53BB;&#x3002; #reshape&#x4E4B;&#x540E;logits&#x7684;shape&#x662F;(64,256,12) logits = tf.reshape(logits, [batch_s, -1, num_classes]) #&#x4EA4;&#x6362;&#x5750;&#x6807;&#x8F74;&#xFF0C;axis0&#x548C;axis1&#x4E92;&#x6362;&#xFF0C;logits&#x7684;shape&#x662F;(256,64,12) #&#x8FD9;&#x662F;&#x4E3A;&#x4E86;&#x6EE1;&#x8DB3;&#x540E;&#x9762;&#x7684;ctc&#x51FD;&#x6570;&#x7684;&#x8981;&#x6C42; logits = tf.transpose(logits, (1, 0, 2)) #return logits, inputs, targets, seq_len, W, b, cell return logits, inputs, targets, seq_len, W, b CTC&#x539F;&#x7406; TensorFlow&#x628A;CTC&#x5185;&#x90E8;&#x5C01;&#x88C5;&#x7684;&#x975E;&#x5E38;&#x597D;&#x4E86;&#x3002;&#x6211;&#x8FD9;&#x91CC;&#x5C31;&#x5148;&#x628A;&#x539F;&#x7406;&#x5206;&#x6790;&#x4E00;&#x4E0B;&#x5427;&#x3002;&#xFF08;&#x4EE3;&#x7801;&#x5206;&#x6790;&#x4E0D;&#x52A8;&#x4E86;&#xFF09; CTC&#x7B97;&#x6CD5;&#x5168;&#x79F0;&#x53EB;&#xFF1A;Connectionist temporal classification&#x3002;&#x4ECE;&#x5B57;&#x9762;&#x4E0A;&#x7406;&#x89E3;&#x5B83;&#x662F;&#x7528;&#x6765;&#x89E3;&#x51B3;&#x65F6;&#x5E8F;&#x7C7B;&#x6570;&#x636E;&#x7684;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#x3002; &#x5728;&#x9A8C;&#x8BC1;&#x7801;&#x8BC6;&#x522B;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6BD4;&#x5982;&#x5047;&#x5B9A;&#x9A8C;&#x8BC1;&#x7801;&#x662F;&quot;123&quot;&#xFF0C;&#x6570;&#x5B57;1&#x5BF9;&#x5E94;&#x7684;&#x56FE;&#x50CF;&#x7684;&#x5BBD;&#x5EA6;&#x4E0D;&#x6B62;1&#x4E2A;&#x50CF;&#x7D20;&#xFF0C;&#x540C;&#x7406;2,3&#x4E5F;&#x662F;&#x3002;&#x6240;&#x4EE5;LSTM&#x5BF9;&#x5E94;&#x7684;&#x8F93;&#x51FA;&#x53EF;&#x80FD;&#x4F1A;&#x662F;&#x5982;&#x4E0B; 11,1,1,1,1,1,1,2,2,2,2,2,2,3,3,3,3,3,3..... CTC&#x628A;&#x91CD;&#x590D;&#x7684;&#x5185;&#x5BB9;&#x8FDB;&#x884C;&#x5408;&#x5E76;&#xFF0C;&#x6700;&#x540E;&#x5F97;&#x51FA;&#x4E00;&#x4E2A;&#x7ED3;&#x679C;&#x662F;&quot;123&quot;&#x3002; &#x4F46;&#x662F;&#x5219;&#x4F1A;&#x6709;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x5047;&#x5982;&#x9A8C;&#x8BC1;&#x7801;&#x662F;&quot;112&quot;&#xFF0C;&#x5408;&#x5E76;&#x5219;&#x4F1A;&#x51FA;&#x73B0;&#x9519;&#x8BEF;&#xFF0C;&#x4E8E;&#x662F;CTC&#x5F15;&#x5165;&#x4E00;&#x4E2A;&#x7A7A;&#x767D;&#xFF0C;&#x53EB;CTC-blank&#xFF0C;&#x63D2;&#x5165;&#x5728;&#x4E24;&#x4E2A;1&#x4E2D;&#x95F4;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x6B63;&#x786E;&#x8BC6;&#x522B;&#x4E86;&#x3002; &#x8003;&#x8651;&#x5230;&#x4E00;&#x5171;&#x6709;10&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x518D;&#x52A0;&#x4E0A;&#x6CA1;&#x6709;&#x6570;&#x5B57;&#x7684;&#x7A7A;&#x767D;&#x90E8;&#x5206;&#xFF0C;&#x518D;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;ctc-blank&#xFF0C;&#x6240;&#x4EE5;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x8981;&#x8BC6;&#x522B;&#x7684;&#x7A7A;&#x95F4;&#x4E00;&#x5171;&#x6709;12&#x4E2A;&#x3002;&#x8FD9;&#x4E5F;&#x5C31;&#x662F; 1num_classes = obj.len + 1 + 1 # 10&#x4F4D;&#x6570;&#x5B57; + blank + ctc blank &#x7684;&#x7531;&#x6765;&#x3002; &#x5728;CTC&#x4E2D;&#xFF0C;&#x5BF9;&#x4E8E;&#x6807;&#x7B7E;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x540E;&#xFF0C;&#x90FD;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;ctc-blank&#xFF0C;&#x5373;&#x5982;&#x679C;&#x539F;&#x6807;&#x7B7E;&#x6709;\(U\)&#x4E2A;&#xFF0C;&#x5219;\(U&apos;=2U+1\)&#x4E2A; &#x53CD;&#x5411;&#x4F20;&#x64AD; &#x73B0;&#x5728;&#x7684;&#x6A21;&#x578B;&#x53EF;&#x4EE5;&#x62BD;&#x8C61;&#x6210; &#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x6765;&#x8BA1;&#x7B97;&#x3002; LOSS&#x51FD;&#x6570; &#x7531;&#x6807;&#x7B7E;&#xFF0C;&#x5F97;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x771F;&#x5B9E;&#x7684;&#x503C;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x80FD;&#x5F97;&#x5230;&#x8FD9;&#x4E2A;&#x503C;&#x7684;&#x5E8F;&#x5217;&#x6709;&#x5F88;&#x591A;&#xFF0C;&#x8BA1;&#x7B97;&#x8FD9;&#x4E2A;&#x503C;&#x7684;&#x6982;&#x7387;&#x65F6;&#xFF0C;&#x5E94;&#x8BE5;&#x628A;&#x8FD9;&#x4E9B;&#x6240;&#x6709;&#x7684;&#x5E8F;&#x5217;&#x7684;&#x6982;&#x7387;&#x6C42;&#x548C;&#xFF0C;&#x5982;&#x679C;&#x91C7;&#x7528;&#x7A77;&#x4E3E;&#xFF0C;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5C06;&#x4F1A;&#x662F;\(T^N\)&#xFF0C;&#x5176;&#x4E2D;T&#x662F;&#x6B65;&#x6570;&#xFF0C;N&#x662F;&#x5206;&#x7C7B;&#x7684;&#x6570;&#x76EE;&#x3002; &#x5982;&#x4E0A;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x5047;&#x5B9A;&#x73B0;&#x5728;&#x6709;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x3010;1,1,1,1,1,2,2,2,2,3,3,3,3,3,3,3&#x3011;&#x548C;&#x5E8F;&#x5217;&#x3010;1,1,1,1,1,1,1,1,2,2,2,2,3,3,3,3&#x3011;&#xFF0C;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x53EA;&#x6709;&#x3010;1,2,3&#x3011;&#xFF0C;&#x5148;&#x4E0D;&#x8003;&#x8651;ctc-blank&#x3002; &#x5728;&#x7B2C;9&#x4E2A;&#x65F6;&#x95F4;&#x70B9;&#x4E0A;&#xFF0C;&#x9884;&#x6D4B;&#x503C;&#x90FD;&#x662F;2&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x4EE5;&#x7B2C;9&#x4E2A;&#x65F6;&#x95F4;&#x70B9;&#x4E3A;2&#x4F5C;&#x4E3A;&#x7EA6;&#x675F;&#xFF0C;&#x53EF;&#x4EE5;&#x7EC4;&#x6210;4&#x4E2A;&#x5E8F;&#x5217;&#x3002; &#x90A3;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x53EF;&#x4EE5;&#x62BD;&#x8C61;&#x6210;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x79CD;&#x6A21;&#x578B; 1&#x3010;&#x524D;&#x5E8F;&#x3011;2&#x3010;&#x540E;&#x5E8F;&#x3011; &#x90A3;&#x4E48;&#x53EF;&#x77E5;&#xFF0C;&#x5728;&#x7B2C;9&#x4E2A;&#x5E8F;&#x5217;&#x4E3A;2&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5176;&#x53EF;&#x80FD;&#x7684;&#x60C5;&#x51B5;&#x662F; &#x524D;&#x5E8F;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x662F;1&#xFF0C;&#x7B2C;9&#x4E2A;&#x65F6;&#x523B;&#x7531;1-&gt;2 &#x524D;&#x5E8F;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x662F;2&#xFF0C;&#x7B2C;9&#x4E2A;&#x65F6;&#x523B;&#x7531;2-&gt;2 &#x8BB0;\(\alpha\)&#x662F;&#x524D;&#x5E8F;&#x7684;&#x6982;&#x7387;&#x3002;&#x5219;\(\alpha_{t,2}=(\alpha_{t-1,1}+\alpha_{t-1,2})*p_{t,2}\) &#x4E5F;&#x5373;&#xFF0C;&#x5728;t&#x65F6;&#x523B;&#x4E3A;2&#x7684;&#x6982;&#x7387;&#xFF0C;&#x5176;&#x503C;&#x53EA;&#x53EF;&#x80FD;&#x4E0E;t-1&#x65F6;&#x523B;&#xFF0C;&#x503C;&#x4E3A;2&#xFF0C;&#x548C;t-1&#x65F6;&#x523B;&#xFF0C;&#x503C;&#x4E3A;1&#x7684;&#x60C5;&#x51B5;&#x6709;&#x5173;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x53BB;&#x6C42;&#x89E3;&#x3002; &#x5982;&#x679C;&#x6D89;&#x53CA;&#x5230;ctc-blank&#xFF0C;&#x6BD4;&#x5982;&#x3010;1&#xFF0C;1&#xFF0C;2&#x3011;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#xFF0C;&#x5BF9;&#x4E8E;1&#x7684;&#x524D;&#x4E00;&#x4E2A;&#xFF0C;&#x53EA;&#x53EF;&#x80FD;&#x662F;1&#xFF0C;&#x6216;&#x8005;&#x662F;ctc-blank&#xFF0C;&#x4E14;ctc-blank&#x7684;&#x524D;&#x4E00;&#x4E2A;&#x8FD8;&#x662F;1&#x3002; &#x72B6;&#x6001;&#x8F6C;&#x79FB; &#x8FD9;&#x4E00;&#x90E8;&#x5206;&#x6BD4;&#x8F83;&#x7ED5;&#xFF0C;&#x5728;&#x524D;&#x9762;&#x8BF4;&#xFF0C;&#x5728;CTC&#x4E2D;&#xFF0C;&#x5BF9;&#x4E8E;&#x6807;&#x7B7E;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x540E;&#xFF0C;&#x90FD;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;ctc-blank&#xFF0C;&#x5373;&#x5982;&#x679C;&#x539F;&#x6807;&#x7B7E;&#x6709;\(U\)&#x4E2A;&#xFF0C;&#x5219;\(U&apos;=2U+1\)&#x4E2A;&#x3002;&#x90A3;&#x4E48;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x53EF;&#x80FD;&#x7684;&#x6807;&#x7B7E;&#xFF0C;&#x6709;&#x5982;&#x4E0B;&#x8F6C;&#x79FB;&#x7684;&#x53EF;&#x80FD;&#xFF1A; &#x4E0D;&#x80FD;&#x8DF3;&#x8FC7;&#x6807;&#x7B7E;&#x7684; \(z_t=z_{t-2}\)&#x65F6;&#xFF0C;&#x5373;&#x8FD9;&#x4E2A;&#x6807;&#x7B7E;&#x662F;&#x8FDE;&#x7EED;&#x4E24;&#x4E2A;&#x76F8;&#x540C;&#x6807;&#x7B7E;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#xFF0C;&#x5219;&#x4E0D;&#x80FD;&#x8DF3;&#x8FC7;&#x4E0A;&#x4E00;&#x4E2A;&#x6807;&#x7B7E;&#x6765;&#x8BA1;&#x7B97;&#x3002; \(z_t=\epsilon\) ,&#x5219;&#x4E0D;&#x80FD;&#x8DF3;&#x8FC7;&#x4E0A;&#x4E00;&#x4E2A;&#x6807;&#x7B7E;&#x8BA1;&#x7B97;&#x3002; &#x8BA1;&#x7B97;&#x516C;&#x5F0F;&#xFF1A;\(\alpha_{s,t}=(\alpha_{s-1,t-1}+\alpha_{s,t-1})p_t(z_s|X)\) &#x80FD;&#x8DF3;&#x8FC7;&#x6807;&#x7B7E;&#x7684; \(z_{s-1}=\epsilon\)&#xFF0C;&#x4E14;\(z_{s-1}\)&#x662F;&#x4E24;&#x4E2A;&#x4E0D;&#x540C;&#x6807;&#x7B7E;&#x4E2D;&#x95F4;&#x7684;ctc-blank&#x3002;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x662F;&#x53EF;&#x4EE5;&#x8DF3;&#x8FC7;&#x4E0A;&#x4E00;&#x4E2A;&#x6807;&#x7B7E;&#x7684;&#x3002; &#x8BA1;&#x7B97;&#x516C;&#x5F0F;:\(\alpha_{s,t}=(\alpha_{s-2,t-1}+\alpha_{s-1,t-1}+\alpha_{s,t-1})p_t(z_s|X)\) &#x5982;&#x56FE;&#xFF0C;&#x8DF3;&#x8FC7;&#x7684;&#x6807;&#x7B7E;&#x7528;&#x7EA2;&#x8272;&#x6807;&#x6CE8;&#x51FA;&#x6765;&#x4E86;&#x3002; &#x56E0;&#x6B64;&#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x5B9E;&#x9A8C;&#xFF0C;&#x8F93;&#x5165;&#x56FE;&#x7247;&#x5927;&#x5C0F;&#x662F;256*32&#xFF0C;&#x5047;&#x5B9A;&#x9884;&#x6D4B;&#x662F;123&#xFF0C;&#x8BA1;&#x7B97;&#x9884;&#x6D4B;&#x7684;&#x6982;&#x7387;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x6C42;&#x5728;t=256&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x503C;&#x4E3A;3&#x548C;&#x3F5;&#x7684;&#x6982;&#x7387;&#x5373;&#x53EF;&#x3002;&#x5982;&#x56FE; &#x73B0;&#x5728;&#x5F97;&#x5230;&#x4E86;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#x7684;&#x9884;&#x6D4B;&#x503C;&#xFF0C;&#x5047;&#x5B9A;&#x8FD9;&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#x662F;&#x7B2C;\(i\)&#x4E2A;&#xFF0C;&#x6982;&#x7387;&#x4E3A;\(p_i\)&#x3002;&#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;batch&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x662F;64&#x4E2A;&#x3002;&#x90A3;&#x4E48;&#x6211;&#x5E0C;&#x671B;&#x9884;&#x6D4B;&#x7684;&#x6982;&#x7387;&#x6700;&#x5927;&#xFF0C;&#x5373;&#x628A;&#x8FD9;64&#x4E2A;&#x6982;&#x7387;&#x8FDE;&#x4E58;&#x3002;&#x5373; \[ L=\mathop{\prod}\limits_{i=0}\limits^n p_i \] &#x73B0;&#x5728;&#x60F3;&#x8BA9;Loss&#x51FD;&#x6570;&#x80FD;&#x4E0B;&#x964D;&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x5BF9;\(L\)&#x53D6;&#x8D1F;&#x5BF9;&#x6570;&#x3002;&#x5373; \[ Loss=-ln(L) \] Beam Search Beam Search&#x662F;&#x7528;&#x4E8E;&#x9884;&#x6D4B;&#x7684;&#x3002; &#x7531;&#x524D;&#x6587;&#x6240;&#x8FF0;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#xFF0C;LSTM&#x7F51;&#x7EDC;&#x90FD;&#x4F1A;&#x7ED9;&#x51FA;(256,12)&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x5176;&#x4E2D;256&#x8868;&#x793A;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E00;&#x4E2A;&#x9A8C;&#x8BC1;&#x7801;&#xFF0C;&#x4E00;&#x5171;&#x6709;256&#x6B21;&#x8F93;&#x5165;&#xFF0C;&#x6BCF;&#x6B21;&#x8F93;&#x5165;&#x90FD;&#x7531;&#x4E00;&#x4E2A;size=12&#x7684;&#x8F93;&#x51FA;&#x3002; &#x5728;size=12&#x7684;&#x8F93;&#x51FA;&#x4E2D;&#xFF0C;&#x8868;&#x660E;&#x4E86;LSTM&#x8BA4;&#x4E3A;&#xFF0C;&#x5BF9;&#x4E8E;&#x5F53;&#x524D;&#x8FD9;&#x4E2A;size=32&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x5404;&#x4E2A;&#x5B57;&#x7B26;&#x5BF9;&#x5E94;&#x7684;&#x6982;&#x7387;&#x3002;&#x5373;&#x6BCF;&#x4E00;&#x4E2A;&#x56FE;&#x7247;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#xFF08;256,12&#xFF09;&#x7684;&#x8F93;&#x51FA;&#x77E9;&#x9635;&#x3002; &#x7531;&#x4E0A;&#x9762;&#x8FD9;&#x4E2A;&#x6982;&#x7387;&#x77E9;&#x9635;&#xFF0C;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x8F93;&#x51FA;&#x9884;&#x6D4B;&#x5E8F;&#x5217;&#x3002;&#x7B2C;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x662F; greed search&#xFF0C;&#x5373;&#x4ECE;&#x524D;&#x5230;&#x540E;&#xFF0C;&#x6BCF;&#x6B21;&#x9009;&#x53D6;&#x6982;&#x7387;&#x6700;&#x5927;&#x7684;&#x90A3;&#x4E00;&#x4E2A;class&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x6709;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x6BD4;&#x5982;&#x6709;&#x9884;&#x6D4B;&#x5E8F;&#x5217;&#x3010;1,1,1&#x3011;&#x548C;&#x5E8F;&#x5217;&#x3010;1,1,&#x3F5;&#x3011;&#xFF0C;&#x4ED6;&#x4FE9;&#x5230;&#x6700;&#x540E;&#x90FD;&#x4F1A;&#x5F97;&#x5230;&#x9884;&#x6D4B;&#x7ED3;&#x679C;&#x3010;1&#x3011;&#xFF0C;&#x53E6;&#x6709;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#x3010;2,2,2&#x3011;&#xFF0C;&#x9884;&#x6D4B;&#x7ED3;&#x679C;&#x4E3A;&#x3010;2&#x3011;&#x3002;&#x6709;&#x53EF;&#x80FD;&#x3010;2,2,2&#x3011;&#x7684;&#x6982;&#x7387;&#x6BD4;&#x3010;1,1,1&#x3011;&#x548C;&#x3010;1,1,&#x3F5;&#x3011;&#x90FD;&#x5927;&#xFF0C;&#x4F46;&#x662F;&#x3010;1,1,1&#x3011;&#x548C;&#x3010;1,1,&#x3F5;&#x3011;&#x7684;&#x6982;&#x7387;&#x7684;&#x548C;&#x6BD4;&#x3010;2,2,2&#x3011;&#x5927;&#xFF0C;&#x56E0;&#x6B64;&#x5E94;&#x8BE5;&#x8F93;&#x51FA;&#x3010;1&#x3011;&#x800C;&#x975E;&#x3010;2&#x3011;&#x3002; &#x4F46;&#x662F;&#x7A77;&#x4E3E;&#x641C;&#x7D22;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x592A;&#x9AD8;&#x4E86;&#xFF0C;&#x56E0;&#x6B64;&#x8981;&#x91C7;&#x53D6;&#x4E00;&#x79CD;&#x6298;&#x4E2D;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x5C31;&#x662F;beam search&#x3002; &#x539F;&#x7406;&#x5982;&#x56FE; &#x6BCF;&#x6B21;&#x90FD;&#x9009;&#x53D6;&#x6982;&#x7387;&#x4E3A;&#x524D;beam_size&#x5927;&#x5C0F;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x4E0D;&#x65AD;&#x8FDB;&#x884C;&#x641C;&#x7D22;&#xFF0C;&#x6700;&#x540E;&#x6839;&#x636E;&#x641C;&#x7D22;&#x7ED3;&#x679C;&#x9884;&#x6D4B;&#x51FA;&#x4E00;&#x4E2A;&#x6700;&#x5927;&#x7684;&#x53EF;&#x80FD;&#x3002;&#x56FE;&#x4E2D;&#x7684;beam size=3&#xFF0C;&#x6700;&#x540E;&#x9884;&#x6D4B;&#x7684;&#x6700;&#x5927;&#x53EF;&#x80FD;&#x662F;&#x3010;a&#x3011;&#x3002; &#x5B9E;&#x9A8C;&#x7ED3;&#x679C;&#x622A;&#x56FE; &#x8FED;&#x4EE3;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4F1A;&#x51FA;&#x73B0;&#x9884;&#x6D4B;&#x503C;&#x4E3A;&#x7A7A;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x7EE7;&#x7EED;&#x5B66;&#x4E60;&#x5373;&#x53EF;&#x3002; QA &#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4E00;&#x5217;&#x4E00;&#x5217;&#x7684;&#x8F93;&#x5165; &#x5982;&#x679C;&#x662F;&#x6309;&#x884C;&#x8F93;&#x5165;&#xFF0C;&#x5219;&#x8F93;&#x5165;&#x7684;&#x8FD9;&#x4E00;&#x884C;&#xFF0C;&#x4F1A;&#x5305;&#x62EC;&#x591A;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x5C31;&#x6CA1;&#x6CD5;&#x8BC6;&#x522B;&#x4E86;&#x3002; &#x81F4;&#x8C22; &#x611F;&#x8C22;&#x82CF;&#x7490;&#x5CA9;&#x540C;&#x5B66;&#x5728;&#x6B64;&#x6B21;&#x8BD5;&#x9A8C;&#x7684;&#x5927;&#x529B;&#x5E2E;&#x52A9;&#x3002; TODO &#x4FEE;&#x6539;&#x4EE3;&#x7801;&#xFF0C;&#x628A;&#x6CA1;&#x7528;&#x7684;&#x5220;&#x6389;&#x3002; &#x6DFB;&#x52A0;&#x5B9E;&#x9A8C;&#x8981;&#x6C42;&#x6587;&#x6863;&#x3002;]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>笔记</tag>
        <tag>实验报告</tag>
        <tag>LSTM</tag>
        <tag>RNN</tag>
        <tag>CTC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[解决Next主题默认CDN太慢问题]]></title>
    <url>%2F%2Fposts%2F734c571b%2F</url>
    <content type="text"><![CDATA[&#x66F4;&#x6362; Valine &#x9ED8;&#x8BA4;CDN&#x5730;&#x5740; &#x95EE;&#x9898;&#x6700;&#x8FD1;&#x535A;&#x5BA2;&#x6253;&#x5F00;&#x5F88;&#x6162;&#xFF0C;&#x7ECF;&#x67E5;&#xFF0C;&#x53D1;&#x73B0;&#x662F;&#x5361;&#x5728;&#x4E86;&#x8FDE;&#x63A5; unpkg.com &#x4E0A;&#xFF0C;&#x8FD9;&#x662F;Valine&#x9ED8;&#x8BA4;&#x7684;CDN&#x5730;&#x5740;(unpkg.com/valine/dist/Valine.min.js) &#x89E3;&#x51B3;&#x6362;&#x4E2A;CDN&#xFF0C;&#x5230;&#x8FD9;&#x91CC;&#xFF0C;&#x9009;&#x62E9;&#x6700;&#x65B0;&#x7248;&#x672C;&#x7684;Valine&#xFF0C;&#x7136;&#x540E;&#x83B7;&#x53D6;cdn&#x5730;&#x5740; &#x7136;&#x540E;&#x6253;&#x5F00; Next &#x4E3B;&#x9898;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;&#x5728;&#x6700;&#x540E;&#x7684;vendors-&gt;valine&#x91CC;&#x6539;&#x4E3A;&#x65B0;&#x83B7;&#x53D6;&#x7684;CDN &#x5373;&#x53EF;&#x3002;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>CDN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[人工智能复习笔记]]></title>
    <url>%2F%2Fposts%2Fd81a8700%2F</url>
    <content type="text"><![CDATA[&#x9022;&#x8003;&#x5FC5;&#x8FC7;&#xFF01;&#x80FD;&#x529B;&#x6709;&#x9650;&#xFF0C;&#x96BE;&#x514D;&#x51FA;&#x9519;&#xFF0C;&#x8FD8;&#x8BF7;&#x591A;&#x591A;&#x6279;&#x8BC4;&#x6307;&#x6B63;&#xFF0C;&#x7B14;&#x8005;&#x4F1A;&#x53D1;&#x7EA2;&#x5305;&#x916C;&#x8C22;&#x3002; &#x7EEA;&#x8BBA;AI&#x7684;&#x6D41;&#x6D3E;&#x6211;&#x66F4;&#x503E;&#x5411;&#x4E8E;&#x628A;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x5206;&#x4E94;&#x79CD; &#x7B26;&#x53F7;&#x4E3B;&#x4E49;&#x2014;&#x2014;&#x903B;&#x8F91;&#x5B66;&#x3001;&#x54F2;&#x5B66;&#x2014;&#x2014;&#x9006;&#x5411;&#x6F14;&#x7ECE;&#xFF1A;&#x76F8;&#x4FE1;&#x586B;&#x8865;&#x73B0;&#x6709;&#x77E5;&#x8BC6;&#x7684;&#x7A7A;&#x767D;&#x7684; &#x8054;&#x7ED3;&#x4E3B;&#x4E49;&#x2014;&#x2014;&#x795E;&#x7ECF;&#x79D1;&#x5B66;&#x2014;&#x2014;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#xFF1A;&#x5E0C;&#x671B;&#x4ECE;&#x5927;&#x8111;&#x8FD0;&#x884C;&#x65B9;&#x5F0F;&#x5F97;&#x5230;&#x542F;&#x53D1; &#x8FDB;&#x5316;&#x4E3B;&#x4E49;&#x2014;&#x2014;&#x8FDB;&#x5316;&#x751F;&#x7269;&#x5B66;&#x2014;&#x2014;&#x9057;&#x4F20;&#x7F16;&#x7801;&#xFF1A;&#x9057;&#x4F20;&#x7B97;&#x6CD5; &#x8D1D;&#x53F6;&#x65AF;&#x6D3E;&#x2014;&#x2014;&#x7EDF;&#x8BA1;&#x5B66;&#x2014;&#x2014;&#x6982;&#x7387;&#x63A8;&#x7406; &#x884C;&#x4E3A;&#x7C7B;&#x63A8;&#x4E3B;&#x4E49;&#x2014;&#x2014;&#x5FC3;&#x7406;&#x5B66;&#x2014;&#x2014;&#x673A;&#x5668;&#x5185;&#x6838;&#xFF08;&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A;&#xFF09; AI , &#x673A;&#x5668;&#x5B66;&#x4E60;&#xFF0C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E09;&#x8005;&#x4E4B;&#x95F4;&#x7684;&#x5F02;&#x540C;&#x548C;&#x5173;&#x8054;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x662F;&#x6307;&#x8BA9;&#x673A;&#x5668;&#x5177;&#x6709;&#x4EBA;&#x7C7B;&#x7684;&#x667A;&#x80FD;&#xFF0C;&#x4E00;&#x822C;&#x8BA4;&#x4E3A;&#x667A;&#x80FD;&#x662F;&#x77E5;&#x8BC6;&#x548C;&#x667A;&#x529B;&#x7684;&#x603B;&#x548C;&#xFF0C;&#x90FD;&#x548C;&#x5927;&#x8111;&#x601D;&#x7EF4;&#x6709;&#x7BA1;&#x3002;&#x4EBA;&#x5DE5;&#x667A;&#x80FD;&#x6709;&#x591A;&#x4E2A;&#x5206;&#x652F;&#xFF0C;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x662F;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x3002; &#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x662F;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x4E00;&#x4E2A;&#x5206;&#x652F;&#x3002; &#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x5206;&#x7C7B;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x8BAD;&#x7EC3;&#x65F6;&#x76D1;&#x7763;&#x7684;&#x91CF;&#x548C;&#x7C7B;&#x578B;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#x3002;&#x4E3B;&#x8981;&#x6709;&#x56DB;&#x7C7B;&#xFF1A;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x3001;&#x975E;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x3001;&#x534A;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#x548C;&#x5F3A;&#x5316;&#x5B66;&#x4E60;&#x3002; &#x76D1;&#x7763;&#x5B66;&#x4E60;&#xFF1A;&#x5229;&#x7528;&#x4E00;&#x7EC4;&#x5DF2;&#x77E5;&#x7C7B;&#x522B;&#x7684;&#x6837;&#x672C;&#x8C03;&#x6574;&#x5206;&#x7C7B;&#x5668;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x4F7F;&#x5176;&#x8FBE;&#x5230;&#x6240;&#x8981;&#x6C42;&#x6027;&#x80FD;&#x7684;&#x8FC7;&#x7A0B;&#x3002;&#x4E3E;&#x4F8B;&#xFF1A;&#x903B;&#x8F91;&#x56DE;&#x5F52; &#x975E;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#xFF1A;&#x4ECE;&#x6CA1;&#x6709;&#x6807;&#x8BB0;&#x7684;&#x8F93;&#x5165;&#x6570;&#x636E;&#x7EC4;&#x6210;&#x7684;&#x6570;&#x636E;&#x96C6;&#x4E2D;&#x5F97;&#x51FA;&#x63A8;&#x8BBA;&#x3002;&#x4E3E;&#x4F8B;&#xFF1A;&#x805A;&#x7C7B;&#x7B97;&#x6CD5; &#x534A;&#x76D1;&#x7763;&#x5B66;&#x4E60;&#xFF1A;&#x540C;&#x65F6;&#x4F7F;&#x7528;&#x6709;&#x6807;&#x7B7E;&#x7684;&#x6570;&#x636E;&#x548C;&#x6CA1;&#x6709;&#x6807;&#x7B7E;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#x3002;&#x4E3E;&#x4F8B;&#xFF1A;&#x534A;&#x76D1;&#x7763;&#x652F;&#x6301;&#x5411;&#x91CF;&#x673A; S3VM &#x5F3A;&#x5316;&#x5B66;&#x4E60;&#xFF1A;&#x4E00;&#x4E2A;&#x667A;&#x80FD;&#x4F53;&#x4ECE;&#x4E0E;&#x73AF;&#x5883;&#x7684;&#x4EA4;&#x4E92;&#x4E2D;&#x4E0D;&#x65AD;&#x5B66;&#x4E60;&#x4EE5;&#x5B8C;&#x6210;&#x7279;&#x5B9A;&#x76EE;&#x6807;&#x3002;&#x4E3E;&#x4F8B;&#xFF1A;Q-Learning &#x8001;&#x5E08;&#x8FD8;&#x8BF4;&#x4E86;&#x4E00;&#x7C7B;&#xFF1A;&#x8FC1;&#x79FB;&#x5B66;&#x4E60;&#x3002; &#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x5B9A;&#x4E49;&#x5BF9;&#x4E8E;&#x67D0;&#x7C7B;&#x4EFB;&#x52A1; T &#x548C;&#x6027;&#x80FD;&#x5EA6;&#x91CF;P&#xFF0C;&#x4E00;&#x4E2A;&#x8BA1;&#x7B97;&#x673A;&#x7A0B;&#x5E8F;&#x88AB;&#x8BA4;&#x4E3A;&#x53EF;&#x4EE5;&#x4ECE;&#x7ECF;&#x9A8C; E &#x4E2D;&#x5B66;&#x4E60;&#x662F;&#x6307;&#xFF0C;&#x901A;&#x8FC7;&#x7ECF;&#x9A8C; E &#x6539;&#x8FDB;&#x540E;&#xFF0C;&#x5B83;&#x5728;&#x4EFB;&#x52A1; T &#x4E0A;&#x7531;&#x6027;&#x80FD;&#x5EA6;&#x91CF; P &#x8861;&#x91CF;&#x7684;&#x6027;&#x80FD;&#x6709;&#x6240;&#x63D0;&#x5347;&#x3002; T&#xFF1A;&#x5206;&#x7C7B;&#xFF0C;&#x56DE;&#x5F52;&#xFF0C;&#x8BC6;&#x522B;&#x2026; P&#xFF1A;&#x6700;&#x5E38;&#x7528;&#x7684;&#x6709;&#x51C6;&#x786E;&#x7387;&#xFF0C;&#x53EC;&#x56DE;&#x7387;&#xFF0C;F&#x503C;&#xFF0C;&#x4EA4;&#x53C9;&#x71B5;&#x7B49;&#x3002;&#x6839;&#x636E;&#x4EFB;&#x52A1; T &#x4E0D;&#x540C;&#xFF0C;P&#x4E5F;&#x4E0D;&#x5C3D;&#x76F8;&#x540C;&#x3002; E&#xFF1A;&#x6570;&#x636E;&#x96C6;&#x3002; &#x6A21;&#x578B;&#x4F18;&#x5316;&#x8BEF;&#x5DEE;&#x5206;&#x89E3;&#x671F;&#x671B;&#x9519;&#x8BEF;&#x53EF;&#x4EE5;&#x5206;&#x89E3;&#x4E3A;$R(f)=bias^2+variance+\epsilon$ &#x504F;&#x5DEE;bias&#x662F;&#x6307;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x7684;&#x5728;&#x4E0D;&#x540C;&#x8BAD;&#x7EC3;&#x96C6;&#x4E0A;&#x7684;&#x5E73;&#x5747;&#x6027;&#x80FD;&#x548C;&#x6700;&#x4F18;&#x6A21;&#x578B;&#x7684;&#x5DEE;&#x5F02;&#x3002;$bias=E_D[f_D(x)-f^(x)]$&#xFF0C;$f^(x)$&#x8868;&#x793A;&#x6700;&#x4F18;&#x6A21;&#x578B;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x771F;&#x5B9E;&#x7684;&#x6570;&#x636E;&#x5206;&#x5E03;&#x3002; &#x65B9;&#x5DEE;variance&#x662F;&#x6307;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x5728;&#x4E0D;&#x540C;&#x8BAD;&#x7EC3;&#x96C6;&#x4E0A;&#x7684;&#x5DEE;&#x5F02;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x8861;&#x91CF;&#x4E00;&#x4E2A;&#x6A21;&#x578B;&#x662F;&#x5426;&#x5BB9;&#x6613;&#x8FC7;&#x62DF;&#x5408;&#x3002;$variance=E_D[(f_D(x)-E_D[f_D(x)])^2]$ $\epsilon$&#x901A;&#x5E38;&#x662F;&#x7531;&#x4E8E;&#x6837;&#x672C;&#x5206;&#x5E03;&#x548C;&#x566A;&#x58F0;&#x5F15;&#x8D77;&#xFF0C;&#x65E0;&#x6CD5;&#x901A;&#x8FC7;&#x4F18;&#x5316;&#x6A21;&#x578B;&#x6765;&#x51CF;&#x5C11;&#x3002; &#x6CDB;&#x5316;&#x8BEF;&#x5DEE;&#x671F;&#x671B;&#x8BEF;&#x5DEE;&#x548C;&#x7ECF;&#x9A8C;&#x8BEF;&#x5DEE;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;&#x7528;&#x6765;&#x8868;&#x793A;&#x6CDB;&#x5316;&#x6027;&#x80FD;&#x7684;&#x4F18;&#x52A3;&#x3002;&#x8BAD;&#x7EC3;&#x96C6;&#x8D8B;&#x5411;&#x4E8E;&#x65E0;&#x7A77;&#x5927;&#x65F6;&#xFF0C;&#x6CDB;&#x5316;&#x8BEF;&#x5DEE;&#x8D8B;&#x5411;&#x4E8E;0&#x3002; &#x8FC7;&#x62DF;&#x5408;&#x4E0E;&#x6B20;&#x62DF;&#x5408;&#x8FC7;&#x62DF;&#x5408;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x5047;&#x8BBE;&#x7A7A;&#x95F4; $F$&#xFF0C;&#x4E00;&#x4E2A;&#x5047;&#x8BBE; $f$ &#x5C5E;&#x4E8E; $F$&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x5176;&#x4ED6;&#x7684;&#x5047;&#x8BBE; $f&#x2019;$ &#x4E5F;&#x5C5E;&#x4E8E; $F$, &#x4F7F;&#x5F97;&#x5728;&#x8BAD;&#x7EC3;&#x96C6;&#x4E0A; $f$ &#x7684;&#x635F;&#x5931;&#x6BD4; $f&#x2019;$ &#x5C0F;&#xFF0C;&#x4F46;&#x5728;&#x6574;&#x4E2A;&#x6837;&#x672C;&#x7A7A;&#x95F4;&#x4E0A; $&#x2019;$ &#x6BD4; $f$ &#x7684;&#x635F;&#x5931;&#x5C0F;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x8BF4;&#x5047;&#x8BBE; $f$ &#x8FC7;&#x5EA6;&#x62DF;&#x5408;&#x8BAD;&#x7EC3;&#x6570;&#x636E;[Mitchell, 1997]&#x3002; &#x8FC7;&#x62DF;&#x5408;&#xFF1A;&#x4F4E;bias error, &#x9AD8;variance error&#x3002;&#x6B20;&#x62DF;&#x5408;&#xFF1A;&#x9AD8;bias error, &#x4F4E; variance error&#x3002; &#x89E3;&#x51B3;&#x8FC7;&#x62DF;&#x5408;&#xFF1A; More Data &#x589E;&#x52A0;&#x8BAD;&#x7EC3;&#x6570;&#x636E; &#x6570;&#x636E;&#x589E;&#x5F3A;&#xFF0C;&#x6BD4;&#x5982;&#x56FE;&#x50CF;&#x7684;&#x5E73;&#x79FB;&#x3001;&#x65CB;&#x8F6C;&#x3002; &#x4FEE;&#x6539;&#x6A21;&#x578B; &#x51CF;&#x5C11;&#x7F51;&#x7EDC;&#x7684;&#x5C42;&#x6570;&#xFF0C;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x51CF;&#x5C11;&#x7279;&#x5F81;&#x503C;&#x7B49; &#x6B63;&#x5219;&#x5316;&#xFF0C;&#x52A0;&#x5927;&#x6B63;&#x5219;&#x5316;&#x53C2;&#x6570; &#x52A0;&#x566A;&#x58F0; &#x96C6;&#x6210;&#x5B66;&#x4E60;&#xFF1A;&#x901A;&#x8FC7;&#x67D0;&#x79CD;&#x7B56;&#x7565;&#x5C06;&#x591A;&#x4E2A;&#x6A21;&#x578B;&#x96C6;&#x6210;&#x8D77;&#x6765;&#xFF0C;&#x901A;&#x8FC7;&#x7FA4;&#x4F53;&#x51B3;&#x7B56;&#x6765;&#x63D0;&#x9AD8;&#x51B3;&#x7B56;&#x51C6;&#x786E;&#x7387;&#x3002; Boosting&#xFF1A;AdaBoosting Bagging&#xFF1A;&#x968F;&#x673A;&#x68EE;&#x6797; Dropout&#xFF1A;&#x5728;&#x67D0;&#x79CD;&#x7A0B;&#x5EA6;&#x4E0A;&#x8BB2;&#x4E5F;&#x662F;&#x96C6;&#x6210;&#x5B66;&#x4E60;&#x7684;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x3002; Early Stopping&#xFF0C;&#x8981;&#x5212;&#x5206;&#x51FA;&#x4E00;&#x90E8;&#x5206;&#x4F5C;&#x4E3A;&#x9A8C;&#x8BC1;&#x96C6;&#x3002; &#x8D1D;&#x53F6;&#x65AF;&#x65B9;&#x6CD5; &#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#xFF1A;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#x76F8;&#x5BF9;&#x4E8E;&#x56FA;&#x5B9A;&#x6D4B;&#x8BD5;&#x96C6;&#x6765;&#x8BF4;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x5168;&#x6837;&#x672C;&#x6765;&#x505A;&#x6D4B;&#x8BD5;&#xFF0C;&#x589E;&#x52A0;&#x4E86;&#x6D4B;&#x8BD5;&#x96C6;&#x7684;&#x591A;&#x6837;&#x6027;&#xFF0C;&#x5728;&#x4E00;&#x5B9A;&#x7A0B;&#x5EA6;&#x4E0A;&#x53EF;&#x4EE5;&#x8BF4;&#x9632;&#x6B62;&#x8FC7;&#x62DF;&#x5408;&#x7684;&#x3002; &#x89E3;&#x51B3;&#x6B20;&#x62DF;&#x5408;&#xFF1A; &#x8003;&#x8651;&#x66F4;&#x591A;&#x7684;&#x7279;&#x5F81; &#x51CF;&#x5C11;&#x6B63;&#x5219;&#x5316;&#x53C2;&#x6570; &#x8003;&#x8651;&#x66F4;&#x590D;&#x6742;&#x7684;&#x6A21;&#x578B;&#xFF0C;&#x6BD4;&#x5982;&#x589E;&#x5927;&#x7F51;&#x7EDC;&#x5C42;&#x6570;&#xFF0C;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x4E2A;&#x6570; &#x6539;&#x6362;&#x6A21;&#x578B;&#xFF1A;&#x5224;&#x522B;&#x5F0F;&#x6A21;&#x578B;&#x6539;&#x6362;&#x751F;&#x6210;&#x5F0F;&#x6A21;&#x578B;&#x7B49;&#x3002; Boosting boosting&#x4E3B;&#x8981;&#x89E3;&#x51B3;bias&#xFF0C;&#x4F46;&#x662F;&#x53EF;&#x80FD;&#x4F1A;&#x5F15;&#x5165;&#x989D;&#x5916;variance&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x7EC8;&#x4E5F;&#x8BB8;&#x4F1A;&#x5BFC;&#x81F4;variance&#x589E;&#x52A0;&#x3002;bagging&#x4E3B;&#x8981;&#x89E3;&#x51B3;variance&#x3002; &#x4E09;&#x7C7B;&#x6570;&#x636E;&#x96C6; &#x8BAD;&#x7EC3;&#x96C6;&#xFF1A;&#x7528;&#x4E8E;&#x5B66;&#x4E60;&#x53C2;&#x6570; &#x5F00;&#x53D1;/&#x9A8C;&#x8BC1;&#x96C6;&#xFF1A;&#x7528;&#x4E8E;&#x6311;&#x9009;&#x8D85;&#x53C2;&#x6570; &#x6D4B;&#x8BD5;&#x96C6;&#xFF1A;&#x7528;&#x4E8E;&#x4F30;&#x8BA1;&#x6CDB;&#x5316;&#x8BEF;&#x5DEE; K&#x6298;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#x5C06;&#x6570;&#x636E;&#x96C6;D&#x5212;&#x5206;&#x6210;k&#x4E2A;&#x5927;&#x5C0F;&#x76F8;&#x4F3C;&#x7684;&#x4E92;&#x65A5;&#x5B50;&#x96C6;&#xFF0C;&#x6BCF;&#x6B21;&#x7528;k-1&#x4E2A;&#x5B50;&#x96C6;&#x4F5C;&#x4E3A;&#x8BAD;&#x7EC3;&#x96C6;&#xFF0C;&#x4F59;&#x4E0B;&#x7684;&#x5B50;&#x96C6;&#x505A;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x6700;&#x7EC8;&#x8FD4;&#x56DE;k&#x4E2A;&#x8BAD;&#x7EC3;&#x7ED3;&#x679C;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002;&#x4EA4;&#x53C9;&#x9A8C;&#x8BC1;&#x6CD5;&#x8BC4;&#x4F30;&#x7ED3;&#x679C;&#x7684;&#x7A33;&#x5B9A;&#x6027;&#x548C;&#x4FDD;&#x771F;&#x6027;&#x5F88;&#x5927;&#x7A0B;&#x5EA6;&#x4E0A;&#x53D6;&#x51B3;&#x4E8E;k&#x7684;&#x53D6;&#x503C;&#x3002;&#x9002;&#x7528;&#x4E8E;&#x6570;&#x636E;&#x96C6;&#x4E0D;&#x662F;&#x7279;&#x522B;&#x5927;&#x65F6;&#x3002; &#x53C2;&#x6570;&#x548C;&#x8D85;&#x53C2;&#x6570;&#x5728;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E2D;&#xFF0C;&#x4F18;&#x5316;&#x53C8;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;&#x53C2;&#x6570;&#x4F18;&#x5316;&#x548C;&#x8D85;&#x53C2;&#x6570;&#x4F18;&#x5316;&#x3002;&#x6A21;&#x578B;f(x, &#x3B8;)&#x4E2D;&#x7684; &#x3B8; &#x79F0;&#x4E3A;&#x6A21;&#x578B;&#x7684;&#x53C2;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x4F18;&#x5316;&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x5B66;&#x4E60;&#x3002;&#x9664;&#x4E86;&#x53EF;&#x5B66;&#x4E60;&#x7684;&#x53C2;&#x6570; &#x3B8; &#x4E4B;&#x5916;&#xFF0C;&#x8FD8;&#x6709;&#x4E00;&#x7C7B;&#x53C2;&#x6570;&#x662F;&#x7528;&#x6765;&#x5B9A;&#x4E49;&#x6A21;&#x578B;&#x7ED3;&#x6784;&#x6216;&#x4F18;&#x5316;&#x7B56;&#x7565;&#x7684;&#xFF0C;&#x8FD9;&#x7C7B;&#x53C2;&#x6570;&#x53EB;&#x505A;&#x8D85;&#x53C2;&#x6570;&#xFF08;hyper-parameter&#xFF09;&#x3002; &#x5E38;&#x89C1;&#x7684;&#x8D85;&#x53C2;&#x6570;&#x5305;&#x62EC;&#xFF1A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7684;&#x6B65;&#x957F;&#xFF0C;&#x6B63;&#x5219;&#x9879;&#x7684;&#x7CFB;&#x6570;&#xFF0C;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x5C42;&#x6570;&#x7B49;&#x3002; &#x4E24;&#x8005;&#x7684;&#x672C;&#x8D28;&#x533A;&#x522B;&#x662F;&#x662F;&#x5426;&#x4EBA;&#x4E3A;&#x8BBE;&#x5B9A;&#x3002; &#x6B63;&#x5219;&#x5316;L1-Norm&#xFF1A;&#x53C2;&#x6570;&#x7EDD;&#x5BF9;&#x503C;&#x4E4B;&#x548C;&#x3002;$L&#x2019;(\theta)=L(\theta)+\lambda||\theta||_1$&#xFF0C;&#x5176;&#x4E2D;$||\theta||1=\sum{i=1}^n|\theta_i|$ &#x4F5C;&#x7528;&#xFF1A;&#x7279;&#x5F81;&#x7B5B;&#x9009;&#xFF0C;&#x628A;&#x5F97;&#x6700;&#x7EC8;&#x7684;&#x53C2;&#x6570;&#x4E3A;&#x7A00;&#x758F;&#x6027;&#x5411;&#x91CF;&#x3002; L2-Norm&#xFF1A;&#x53C2;&#x6570;&#x5E73;&#x65B9;&#x7684;&#x548C;&#x3002;$L&#x2019;(\theta)=L(\theta)+\lambda||\theta||_2$&#xFF0C;&#x5176;&#x4E2D;$||\theta||2=\sum{i=1}^n\theta_i^2$ &#x4F5C;&#x7528;&#xFF1A;&#x901A;&#x8FC7;&#x9650;&#x5236;&#x6A21;&#x578B;&#x590D;&#x6742;&#x5EA6; &#xFF0C;&#x4ECE;&#x800C;&#x907F;&#x514D;&#x8FC7;&#x62DF;&#x5408;&#xFF0C;&#x63D0;&#x9AD8;&#x6CDB;&#x5316;&#x80FD;&#x529B;&#x3002; Elastic Net: (L1 + L2)&#xFF1A;$L&#x2019;(\theta) = L(\theta) + \lambda\cdot[\rho \parallel\theta\parallel_1 + (1-\rho)\cdot\parallel\theta\parallel_2]$ &#x52A0;&#x5FEB;&#x5B66;&#x4E60;Feature Scaling/Normalization Rescaling (min-max normalization) &#x518D;&#x7F29;&#x653E;$$x&#x2019;=\frac {x-min(x)} {max(x)-min(x)}$$ Mean normalization &#x5747;&#x503C;&#x5F52;&#x4E00;&#x5316; $$x&#x2019;=\frac {x-average(x)} {max(x)-min(x)} $$ Standardization &#x6807;&#x51C6;&#x5316;$$x&#x2019;=\frac {x-average(x)} \sigma$$&#x5176;&#x4E2D;$\sigma$&#x662F;&#x6807;&#x51C6;&#x5DEE; Variants of Gradient Descent &#x4E0D;&#x540C;&#x79CD;&#x7C7B;&#x7684;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;Stochastic Gradient DescentSGD&#x53C8;&#x540D;&#x968F;&#x673A;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x3002;&#x6BCF;&#x6B21;&#x53EA;&#x7528;&#x4E00;&#x4E2A;&#x5B66;&#x4E60;&#x6570;&#x636E;&#x6765;&#x66F4;&#x65B0;&#x68AF;&#x5EA6;&#x3002;Use 1 example in each iteration&#x3002;&#x4F18;&#x70B9;&#xFF1A;&#x5FEB;&#x3002;BGD&#x66F4;&#x65B0;&#x4E00;&#x4E2A;&#x6B21;&#x7684;&#x65F6;&#x5019;&#xFF0C;SGD&#x80FD;&#x66F4;&#x65B0;&#x7684;&#x6B21;&#x6570;=Batch_size&#x3002;&#x7F3A;&#x70B9;&#xFF1A;&#x5F15;&#x5165;&#x4E86;&#x968F;&#x673A;&#x566A;&#x58F0;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x51FA;&#x73B0;&#x9707;&#x8361;&#x7684;&#x73B0;&#x8C61;&#x3002;&#x5F53;&#x76EE;&#x6807;&#x51FD;&#x6570;&#x975E;&#x51F8;&#x65F6;&#xFF0C;&#x53CD;&#x800C;&#x53EF;&#x4EE5;&#x4F7F;&#x5176;&#x9003;&#x79BB;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x70B9;&#x3002;&#x65E0;&#x6CD5;&#x5145;&#x5206;&#x5229;&#x7528;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x5E76;&#x884C;&#x80FD;&#x529B;&#x3002; Batch Gradient Descent&#x6279;&#x91CF;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x6CD5;&#x5728;&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x65F6;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x6837;&#x672C;&#x4E0A;&#x635F;&#x5931;&#x51FD;&#x6570;&#x7684;&#x68AF;&#x5EA6;&#x5E76;&#x6C42;&#x548C;&#x3002;Use all examples in each iteration&#x3002;&#x4F18;&#x70B9;&#xFF1A;&#x80FD;&#x4FDD;&#x8BC1;&#x671D;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x5411;&#x53BB;&#x4F18;&#x5316;&#xFF0C;&#x6613;&#x4E8E;&#x5E76;&#x884C;&#x5B9E;&#x73B0;&#x3002;&#x7F3A;&#x70B9;&#xFF1A;&#x6837;&#x672C;&#x6570;&#x5F88;&#x591A;&#x65F6;&#xFF0C;&#x4F1A;&#x5F88;&#x6162;&#x3002; Mini-batch Gradient Descent&#x5C0F;&#x6279;&#x91CF;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#xFF0C;SGD&#x548C;BGD&#x7684;&#x6298;&#x4E2D;&#x3002;&#x76EE;&#x524D;&#x6700;&#x5E38;&#x7528;&#x3002;Use b examples in each iteration&#x3002;&#x4F18;&#x70B9;&#xFF1A;&#x6536;&#x655B;&#x5FEB;&#xFF0C;&#x8BA1;&#x7B97;&#x5F00;&#x9500;&#x5C0F;&#x3002; &#x6539;&#x53D8;&#x5B66;&#x4E60;&#x7387;&#x592A;&#x5C0F;&#x5219;&#x6536;&#x655B;&#x6162;&#xFF0C;&#x592A;&#x5927;&#x5219;&#x4F1A;&#x9519;&#x8FC7;&#x6700;&#x4F73;&#x70B9;/&#x9707;&#x8361;&#x3002; &#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x6CD5;Vanilla Gradient Descent&#x4F20;&#x7EDF;&#x7684;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x7684;&#x65B9;&#x6CD5;&#x3002;$$\theta^{t+1}=\theta^t-\eta\nabla L(\theta^t)$$ AdaGradAdaGrad&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x65F6;&#x81EA;&#x9002;&#x5E94;&#x5730;&#x8C03;&#x6574;&#x6BCF;&#x4E2A;&#x53C2;&#x6570;&#x7684;&#x5B66;&#x4E60;&#x7387;&#x3002;&#x5728;&#x7B2C;t&#x8FED;&#x4EE3;&#x65F6;&#xFF0C;&#x5148;&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x53C2;&#x6570;&#x68AF;&#x5EA6;&#x5E73;&#x65B9;&#x7684;&#x7D2F;&#x8BA1;&#x503C;&#xFF0C;$g_i$&#x662F;&#x7B2C;$i$&#x6B21;&#x8FED;&#x4EE3;&#x65F6;&#x7684;&#x68AF;&#x5EA6;&#x3002;$$\theta^{t+1}=\theta^t-\frac \alpha {\sqrt{\sum ^t_{i=1}g_i^2+\epsilon}} g_t$$&#x5176;&#x4E2D;$\alpha$&#x662F;&#x521D;&#x59CB;&#x7684;&#x5B66;&#x4E60;&#x7387;&#xFF0C;$\epsilon$&#x662F;&#x4E3A;&#x4E86;&#x4FDD;&#x6301;&#x6570;&#x503C;&#x7A33;&#x5B9A;&#x6027;&#x800C;&#x8BBE;&#x7F6E;&#x7684;&#x975E;&#x5E38;&#x5C0F;&#x7684;&#x5E38;&#x6570;&#x3002;Adagrad&#x7B97;&#x6CD5;&#x7684;&#x7F3A;&#x70B9;&#x662F;&#x5728;&#x7ECF;&#x8FC7;&#x4E00;&#x5B9A;&#x6B21;&#x6570;&#x7684;&#x8FED;&#x4EE3;&#x4F9D;&#x7136;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x6700;&#x4F18;&#x70B9;&#x65F6;&#xFF0C;&#x7531;&#x4E8E;&#x8FD9;&#x65F6;&#x7684;&#x5B66;&#x4E60;&#x7387;&#x5DF2;&#x7ECF;&#x975E;&#x5E38;&#x5C0F;&#xFF0C;&#x5F88;&#x96BE;&#x518D;&#x7EE7;&#x7EED;&#x627E;&#x5230;&#x6700;&#x4F18;&#x70B9;&#x3002; RMSProp$$w^{t+1}=w^t-\frac \eta {\sigma^t}g^t \\sigma^t=\sqrt{\alpha(\sigma^{t-1})^2+(1-\alpha)(g^t)^2}$$$\alpha$&#x9700;&#x8981;&#x4E00;&#x5F00;&#x59CB;&#x8BBE;&#x5B9A;&#xFF0C;&#x8868;&#x793A;&#x8870;&#x51CF;&#x7CFB;&#x6570;&#x3002;$\sigma^0=g^0$ SGD with Momentum &#xFF08;SGM&#xFF09;&#x52A8;&#x91CF;&#x6CD5;&#xFF0C;&#x7528;&#x4E4B;&#x524D;&#x79EF;&#x7D2F;&#x52A8;&#x91CF;&#x6765;&#x66FF;&#x4EE3;&#x771F;&#x6B63;&#x7684;&#x68AF;&#x5EA6;&#x3002;&#x6BCF;&#x6B21;&#x8FED;&#x4EE3;&#x7684;&#x68AF;&#x5EA6;&#x53EF;&#x4EE5;&#x770B;&#x4F5C;&#x662F;&#x52A0;&#x901F;&#x5EA6;&#x3002;$$v^0=0\v^t=\lambda v^{t-1}-\eta\nabla L(\theta^{t-1})\\theta^t=\theta^{t-1}+v^t$$&#x5176;&#x4E2D;$\lambda$&#x662F;&#x52A8;&#x91CF;&#x56E0;&#x5B50;&#xFF0C;$\eta$&#x662F;&#x5B66;&#x4E60;&#x7387;&#x3002; SGD with Nesterov (NAG)&#x63A8;&#x5BFC;&#xFF1A;&#x7531;&#x524D;&#x9762;&#x7684;SGM&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;&#x5728;&#x8FDB;&#x884C;$\theta^t=\theta^{t-1}+v^t$&#x65F6;&#xFF0C;&#x628A;&#x4E24;&#x4E2A;&#x5206;&#x91CF;&#x52A0;&#x8D77;&#x6765;&#x7684;&#xFF0C;&#x4E8E;&#x662F;&#x8003;&#x8651;&#x5148;&#x8FDB;&#x884C;$\lambda v^{t-1}$&#x7684;&#x66F4;&#x65B0;&#xFF0C;&#x518D;&#x7528;&#x65B0;&#x7684;$\theta$&#x8BA1;&#x7B97;&#x68AF;&#x5EA6;&#x3002;&#x76F4;&#x63A5;&#x7ED9;&#x516C;&#x5F0F;&#xFF1A;$$v^t=\lambda v^{t-1}-\eta\nabla L(\theta^{t-1}+\lambda v^{i-1}) \\theta^t=\theta^{t-1}+v^t$$ &#x5206;&#x7C7B;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x7528;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x6A21;&#x578B;&#x89E3;&#x51B3;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7EBF;&#x6027;&#x56DE;&#x5F52;&#x89E3;&#x51B3;&#x4E8C;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x65E0;&#x6CD5;&#x89E3;&#x51B3;&#x591A;&#x5206;&#x7C7B;&#x7684;&#x95EE;&#x9898;&#x3002;&#x539F;&#x56E0;&#x662F;&#xFF1A;&#x9700;&#x8981;&#x4EBA;&#x4E3A;&#x7684;&#x5212;&#x5B9A;&#x533A;&#x95F4;&#xFF0C;&#x5F15;&#x5165;&#x8BEF;&#x5DEE;&#x3002;&#x5728;&#x635F;&#x5931;&#x51FD;&#x6570;&#x4E0A;&#xFF0C;MSE&#x65E0;&#x6CD5;&#x5F88;&#x597D;&#x5730;&#x8BC4;&#x4F30;&#x6A21;&#x578B;&#x3002; &#x4E3E;&#x4F8B;&#xFF1A;&#x5047;&#x5982;&#x6709;5&#x5143;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#xFF0C;class0~class4&#xFF0C;&#x5982;&#x679C;&#x6B63;&#x786E;&#x5206;&#x7C7B;&#x662F;class4,&#x4F46;&#x662F;&#x9884;&#x6D4B;&#x5230;&#x4E86;class1&#xFF0C;&#x548C;&#x9884;&#x6D4B;&#x5230;&#x4E86;class3&#x3002;&#x6839;&#x636E;MSE&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x3002;&#x8FD9;&#x5C31;&#x65E0;&#x6CD5;&#x5F88;&#x597D;&#x5730;&#x533A;&#x5206;&#x4E86;&#x3002; &#x4E3A;&#x4EC0;&#x4E48;&#x4F7F;&#x7528;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x800C;&#x4E0D;&#x7528;&#x5747;&#x65B9;&#x5DEE;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF1F;&#x5982;&#x679C;&#x7528;&#x5747;&#x65B9;&#x5DEE;&#x635F;&#x5931;&#x51FD;&#x6570;&#xFF0C;&#x5728;too correct &#x548C;too wrong &#x7684;&#x65F6;&#x5019;&#xFF0C;&#x68AF;&#x5EA6;&#x592A;&#x5C0F;&#x3002;$$f_{w,b}(x)=\sigma(\sum_iw_ix_i+b) \L(f)=\frac1 2\sum_n(f_{w,b}(x^n)-\hat y^n)^2 \\nabla L(\theta)=(f_{w,b}(x)-\hat y)f_{w,b}(x)(1-f_{w,b}(x))x_i$$&#x6240;&#x4EE5;&#x79BB;&#x76EE;&#x6807;&#x5F88;&#x8FDC;&#x548C;&#x79BB;&#x76EE;&#x6807;&#x5F88;&#x8FD1;&#x7684;&#x65F6;&#x5019;&#xFF0C;$\frac{\partial L}{w_i}=0$&#x5BFC;&#x81F4;&#x66F4;&#x65B0;&#x5F88;&#x6162;&#x3002; &#x7EA7;&#x8054;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x6A21;&#x578B;&#x591A;&#x4E2A;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x8FDB;&#x884C;&#x7EA7;&#x8054;&#xFF0C;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x8F6C;&#x6362;&#x3002;&#x53EF;&#x4EE5;&#x540E;&#x9762;&#x518D;&#x8DDF;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#x3002;&#x7EA7;&#x8054;&#x903B;&#x8F91;&#x56DE;&#x5F52;&#x6A21;&#x578B;&#x662F;&#x6DF1;&#x5EA6;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x96CF;&#x5F62;&#x3002; &#x4EA4;&#x53C9;&#x71B5;&#x548C;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x4EA4;&#x53C9;&#x71B5;$$H(p,q)=-\sum_xp(x)log\ q(x)$$&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;$$L(\theta)=\frac 1NH(p,q)$$&#x4EE5;&#x4E8C;&#x5143;&#x5206;&#x7C7B;&#x4E3A;&#x4F8B;&#x3002;&#x5206;&#x4E3A;Class0&#x548C;Class1&#xFF0C;&#x5982;&#x679C;&#x662F;Class0&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x6807;&#x7B7E;&#x662F;[1,0]&#xFF0C;&#x5982;&#x679C;&#x662F;CLass1&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;[0,1]&#x3002;&#x73B0;&#x6709;&#x9884;&#x6D4B;&#x8BA4;&#x4E3A;&#x4ED6;&#x662F;Class0&#x7684;&#x6982;&#x7387;&#x65F6;f(x)&#xFF0C;&#x5219;&#x6709;&#x6807;&#x7B7E;[f(x)&#xFF0C;1-f(x)]&#xFF0C;&#x5982;&#x679C;&#x771F;&#x5B9E;&#x503C;&#x662F;[1,0]&#x3002;&#x5219;&#x4ED6;&#x4FE9;&#x7684;&#x4EA4;&#x53C9;&#x71B5;&#x662F;1*log f(x)+0*log(1-f(x))&#x3002;&#x4E8E;&#x662F;&#x9488;&#x5BF9;&#x4F2F;&#x52AA;&#x5229;&#x5206;&#x5E03;&#xFF0C;&#x5373;0-1&#x4E8C;&#x9879;&#x5206;&#x5E03;&#xFF0C;&#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x662F;$$l(f(x^{(n)}),\hat y^{(n)})=&#x2212;\frac 1 N\sum[\hat y^{(n)}logf(x^{(n)})+(1&#x2212;\hat y^{(n)})log(1&#x2212;f(x^{(n)}))]$$$log$&#x7684;&#x5E95;&#x6570;&#x4E3A;2&#xFF0C;e&#xFF0C;10&#x5747;&#x53EF;&#x3002;&#x6839;&#x636E;&#x5E95;&#x6570;&#x4E0D;&#x540C;&#xFF0C;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x7684;&#x5355;&#x4F4D;&#x4E0D;&#x540C;&#xFF0C;&#x4F46;&#x662F;&#x90FD;&#x8868;&#x8FBE;&#x8BEF;&#x5DEE;&#x7684;&#x76F8;&#x5BF9;&#x5927;&#x5C0F;&#x3002;&#x5DEE;&#x4E86;&#x4E00;&#x4E2A;&#x5E38;&#x6570;&#x9879;&#x7CFB;&#x6570;&#x800C;&#x5DF2;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x6362;&#x5E95;&#x516C;&#x5F0F;&#x8BC1;&#x660E;&#x3002; &#x4E3E;&#x4E2A;&#x6817;&#x5B50;&#xFF1A;&#x5434;&#x4EA6;&#x51E1;&#x66FE;&#x5531;&#x8FC7;&#xFF0C;&#x4F60;&#x770B;&#x8FD9;&#x4E2A;&#x9762;&#x5B83;&#x53C8;&#x957F;&#x53C8;&#x5BBD;&#xFF0C;&#x5C31;&#x50CF;&#x8FD9;&#x4E2A;&#x7897;&#x5B83;&#x53C8;&#x5927;&#x53C8;&#x5706;&#x3002;&#x90A3;&#x4E48;&#x5BF9;&#x4E8E;&#x9762;&#xFF0C;&#x4ED6;&#x7684;Label=&#x3010;1,1,0,0&#x3011;&#xFF0C;&#x5BF9;&#x4E8E;&#x7897;&#xFF0C;Label=&#x3010;0,0,1,1&#x3011;&#xFF0C;&#x73B0;&#x5728;&#x6709;&#x4E00;&#x4E2A;batch_size=2&#x7684;&#x6D4B;&#x8BD5;&#x96C6;&#xFF0C;&#x5BF9;&#x4E00;&#x4E2A;&#x9762;&#x7684;&#x9884;&#x6D4B;&#x7684;&#x7ED3;&#x679C;&#x4E3A;&#x3010;1,0.1,1,0.1&#x3011;&#xFF0C;&#x5BF9;&#x4E00;&#x4E2A;&#x7897;&#x7684;&#x9884;&#x6D4B;&#x503C;&#x662F;&#x3010;1,1,1,0.1&#x3011;&#xFF0C;&#x5219;&#x4EE5;&#x4EA4;&#x53C9;&#x71B5;&#x4F5C;&#x4E3A;&#x635F;&#x5931;&#x51FD;&#x6570;&#x7684;&#x8BDD;&#xFF0C;&#x8FD9;&#x4E2A;&#x635F;&#x5931;&#x51FD;&#x6570;&#x7684;&#x503C;&#x662F;&#x591A;&#x5C11;&#xFF1F; &#x5BF9;&#x4E8E;&#x9762;&#xFF0C;&#x635F;&#x5931;&#x503C;&#x662F;&#xFF1A;$-(1log1+1log0.1+0log1+0log0.1)$&#x5BF9;&#x4E8E;&#x7897;&#xFF0C;&#x635F;&#x5931;&#x503C;&#x662F;&#xFF1A;$-(0log1+0log1+1log1+1log0.1)$&#x603B;&#x635F;&#x5931;&#x503C;=&#x9762;+&#x7897; &#x6709;&#x4E2A;&#x5730;&#x65B9;&#x9700;&#x8981;&#x89E3;&#x91CA;&#x4E00;&#x4E0B;&#xFF0C;&#x5982;&#x679C;&#x9884;&#x6D4B;&#x7684;&#x503C;&#x4E3A;&#x3010;1,1,1,1&#x3011;&#xFF0C;&#x90A3;&#x5C82;&#x4E0D;&#x662F;&#x4EA4;&#x53C9;&#x71B5;&#x4E3A;0&#xFF1F;&#x662F;&#x7684;&#x3002;&#x4F46;&#x662F;&#x4E00;&#x822C;&#x4F1A;&#x52A0;&#x4E0A;&#x4E00;&#x4E2A;&#x7EA6;&#x675F;&#x9879;&#xFF0C;&#x6BD4;&#x5982;&#x8BA9;4&#x4E2A;&#x503C;&#x52A0;&#x8D77;&#x6765;&#xFF0C;&#x6700;&#x5927;&#x4E0D;&#x5F97;&#x8D85;&#x8FC7;2&#x3002;&#x8FD9;&#x6837;&#xFF0C;&#x5206;&#x7C7B;&#x6B63;&#x786E;&#x7684;&#x6982;&#x7387;&#x8D8A;&#x9AD8;&#xFF0C;&#x4EA4;&#x53C9;&#x71B5;&#x8D8A;&#x5C0F;&#xFF0C;&#x635F;&#x5931;&#x503C;&#x8D8A;&#x5C0F;&#x3002; SoftMax$$softmax(x_i)=\frac {e^{x_i}}{\sum^K_{k=1} e^{x_i}}$$ &#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x548C;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E09;&#x90E8;&#x66F2;&#x673A;&#x5668;&#x5B66;&#x4E60; &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x6A21;&#x578B; &#x7531;Loss &#x51FD;&#x6570;&#x8BC4;&#x4F30;&#x6027;&#x80FD;&#xFF08;&#x5236;&#x5B9A;&#x8BC4;&#x4EF7;&#x6307;&#x6807;&#xFF09; &#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x6700;&#x597D;&#x7684;&#x51FD;&#x6570; &#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x4E09;&#x90E8;&#x66F2;&#xFF0C;&#x5373;&#x628A;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7684;&#x7B2C;&#x4E00;&#x6B65;&#x6539;&#x4E3A;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;network structure &#x53CD;&#x5411;&#x4F20;&#x64AD;Forward Pass&#x7528;&#x4E8E;&#x8BA1;&#x7B97;&#x6BCF;&#x4E2A;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E0B;&#x4E00;&#x4E2A;&#x795E;&#x7ECF;&#x5143;&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x5373;$a=\frac {\partial z}{\partial w}$&#x7528;&#x4E8E;&#x8BA1;&#x7B97;Loss&#x3002;&#x7528;&#x4E8E;&#x9884;&#x6D4B;&#x8F93;&#x51FA;&#xFF08;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x8BA1;&#x7B97;&#x6700;&#x540E;&#x4E00;&#x5C42;&#x7684;&#x8F93;&#x51FA;&#xFF09; Backward Pass&#x7528;&#x4E8E;&#x5BF9;&#x6BCF;&#x4E00;&#x5C42;&#x8BA1;&#x7B97;$\frac{\partial l}{\partial w}$&#xFF0C;&#x6765;&#x8BA1;&#x7B97;&#x68AF;&#x5EA6;&#x4E0B;&#x964D;&#x3002;&#x5BF9;&#x4E8E;&#x8F93;&#x51FA;&#x5C42;&#xFF0C;&#x6839;&#x636E;&#x8F93;&#x51FA;&#xFF0C;&#x7531;&#x94FE;&#x5F0F;&#x6CD5;&#x5219;&#x76F4;&#x63A5;&#x8BA1;&#x7B97;&#x3002;&#x5BF9;&#x4E8E;&#x975E;&#x8F93;&#x51FA;&#x5C42;&#xFF0C;&#x6839;&#x636E;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x6765;&#x7684;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x3002; Vanishing Gradient Problem&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x8BEF;&#x5DEE;&#x4ECE;&#x8F93;&#x51FA;&#x5C42;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x65F6;&#xFF0C;&#x5728;&#x6BCF;&#x4E00;&#x5C42;&#x90FD;&#x8981;&#x4E58;&#x4EE5;&#x8BE5;&#x5C42;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;&#x5BFC;&#x6570;&#x3002;&#x82E5;&#x8BE5;&#x5BFC;&#x6570;&#x5C0F;&#x4E8E;1&#xFF0C;&#x5219;&#x8BEF;&#x5DEE;&#x7ECF;&#x8FC7;&#x6BCF;&#x4E00;&#x5C42;&#x4F20;&#x9012;&#x90FD;&#x4F1A;&#x4E0D;&#x65AD;&#x8870;&#x51CF;&#xFF0C;&#x5F53;&#x7F51;&#x7EDC;&#x5C42;&#x6570;&#x5F88;&#x6DF1;&#x65F6;&#xFF0C;&#x68AF;&#x5EA6;&#x5C31;&#x4F1A;&#x4E0D;&#x505C;&#x7684;&#x8870;&#x51CF;&#xFF0C;&#x751A;&#x81F3;&#x6D88;&#x5931;&#xFF0C;&#x4F7F;&#x5F97;&#x6574;&#x4E2A;&#x7F51;&#x7EDC;&#x5F88;&#x96BE;&#x8BAD;&#x7EC3;&#x3002;&#x8FD9;&#x5C31;&#x662F;&#x6240;&#x8C13;&#x7684;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#x3002; &#x68AF;&#x5EA6;&#x7206;&#x70B8;&#x76F8;&#x6BD4;&#x8F83;&#x4E8E;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#xFF0C;&#x5982;&#x679C;&#x5BFC;&#x6570;&#x5927;&#x4E8E;1&#xFF0C;&#x5219;&#x8FDE;&#x4E58;&#x4F1A;&#x4E0D;&#x65AD;&#x589E;&#x52A0;&#xFF0C;&#x5BFC;&#x81F4;&#x7206;&#x70B8;&#x3002; &#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x89E3;&#x51B3;&#x529E;&#x6CD5;: &#x6539;&#x6362;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#xFF0C;eg&#xFF1A;ReLU &#x9488;&#x5BF9;RNN&#xFF1A;&#x5F15;&#x5165;&#x7EBF;&#x6027;&#x5206;&#x91CF;+&#x95E8;&#x63A7;&#x673A;&#x5236;&#xFF0C;eg&#xFF1A;LSTM &#x6539;&#x6362;&#x7F51;&#x7EDC;&#x6A21;&#x578B; &#x8BBE;&#x7F6E;&#x4E0D;&#x540C;&#x7684;&#x5B66;&#x4E60;&#x7387; &#x68AF;&#x5EA6;&#x622A;&#x65AD;&#xFF1A;&#x89E3;&#x51B3;&#x68AF;&#x5EA6;&#x7206;&#x70B8;&#x3002; RNN&#x968F;&#x65F6;&#x95F4;&#x53CD;&#x5411;&#x4F20;&#x64AD;BPTTBPTT&#x7B97;&#x6CD5;&#x5C06;&#x5FAA;&#x73AF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x770B;&#x4F5C;&#x662F;&#x4E00;&#x4E2A;&#x5C55;&#x5F00;&#x7684;&#x591A;&#x5C42;&#x524D;&#x9988;&#x7F51;&#x7EDC;&#xFF0C;&#x5176;&#x4E2D;&#x201C;&#x6BCF;&#x4E00;&#x5C42;&#x201D;&#x5BF9;&#x5E94;&#x5FAA;&#x73AF;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x201C;&#x6BCF;&#x4E2A;&#x65F6;&#x523B;&#x201D;&#x3002;&#x8FD9;&#x6837;&#xFF0C;&#x5FAA;&#x73AF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x5C31;&#x53EF;&#x4EE5;&#x6309;&#x6309;&#x7167;&#x524D;&#x9988;&#x7F51;&#x7EDC;&#x4E2D;&#x7684;&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x7B97;&#x6CD5;&#x8FDB;&#x884C;&#x8BA1;&#x7B97;&#x53C2;&#x6570;&#x68AF;&#x5EA6;&#x3002;&#x5728;&#x201C;&#x5C55;&#x5F00;&#x201D;&#x7684;&#x524D;&#x9988;&#x7F51;&#x7EDC;&#x4E2D;&#xFF0C;&#x6240;&#x6709;&#x5C42;&#x7684;&#x53C2;&#x6570;&#x662F;&#x5171;&#x4EAB;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x53C2;&#x6570;&#x7684;&#x771F;&#x5B9E;&#x68AF;&#x5EA6;&#x662F;&#x5C06;&#x6240;&#x6709;&#x201C;&#x5C55;&#x5F00;&#x5C42;&#x201D;&#x7684;&#x53C2;&#x6570;&#x68AF;&#x5EA6;&#x4E4B;&#x548C;&#x3002;&#x5219;&#x6574;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;$L$&#x662F;&#x6BCF;&#x4E2A;&#x65F6;&#x523B;&#xFF0C;&#x635F;&#x5931;&#x51FD;&#x6570;$L^t$&#x7684;&#x548C;&#x3002;$L$&#x5173;&#x4E8E;&#x53C2;&#x6570;$\theta$&#x7684;&#x68AF;&#x5EA6;&#x4E3A;&#xFF0C;&#x6BCF;&#x4E2A;&#x65F6;&#x523B;&#x635F;&#x5931;$L^t$&#x5BF9;&#x53C2;&#x6570;$\theta$&#x7684;&#x504F;&#x5BFC;&#x6570;&#x7684;&#x548C;&#x3002; &#x8BB0;$z_k=Uh_{k-1}+Wx_k+b$&#x4E3A;&#x7B2C;k&#x65F6;&#x523B;&#x7684;&#x51C0;&#x8F93;&#x5165;&#xFF0C;$h_k=\sigma(z_k)$&#x8868;&#x793A;k&#x65F6;&#x523B;&#x7684;&#x8F93;&#x51FA;&#x5B9A;&#x4E49;$\delta_{t,k}=\frac {\partial L_t}{\partial z_k}$&#x4E3A;&#x7B2C;t&#x65F6;&#x523B;&#x7684;&#x635F;&#x5931;&#x5BF9;&#x7B2C;k&#x65F6;&#x523B;&#x9690;&#x85CF;&#x795E;&#x7ECF;&#x5C42;&#x7684;&#x7ECF;&#x8F93;&#x5165;$z_k$&#x7684;&#x5BFC;&#x6570;&#x5219;&#xFF1A;$$\begin{align} \delta_{t,k}&amp;=\frac {\partial L_t}{\partial z_k} \&amp;=\frac{\partial h_k}{\partial z_k}\frac {\partial z_{k+1}}{\partial h_k}\frac{\partial L_t}{\partial z_{k+1}}\end{align}$$ $$\delta_{t,k}=\frac {\partial L_t}{\partial z_k}=\frac{\partial h_k}{\partial z_k}\frac {\partial z_{k+1}}{\partial h_k}\frac{\partial L_t}{\partial z_{k+1}}$$&#x5219;&#x6574;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;$L$&#x5BF9;$U,W,b$&#x7684;&#x68AF;&#x5EA6;:$$\frac {\partial L}{\partial U}=\sum^T_{t=1}\sum^t_{k=1}\frac{\partial L_t}{\partial z_k} h_{k-1} \\frac {\partial L}{\partial W}=\sum^T_{t=1}\sum^t_{k=1}\frac{\partial L_t}{\partial z_k} x_{k-1} \\frac {\partial L}{\partial b}=\sum^T_{t=1}\sum^t_{k=1}\frac{\partial L_t}{\partial z_k}$$ &#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x5F62;&#x5F0F;&#x5316;&#x7684;&#x8BB0;$$\gamma=\frac{\partial h_k}{\partial z_k}\frac {\partial z_{k+1}}{\partial h_k}$$ &#x5219;$$\delta_{t,k}=\gamma^{t-k}\delta_{t,t}$$&#xFF08;&#x5176;&#x5B9E;&#x8FD9;&#x91CC;&#x9762;&#x6BCF;&#x4E2A;$\delta$&#x4E0D;&#x4E00;&#x6837;&#x3002;&#xFF09;&#x4E8E;&#x662F;&#x5728;$\gamma&gt;1$&#x5F53;$t-K\rightarrow\infty$&#x4F1A;&#x9020;&#x6210;&#x68AF;&#x5EA6;&#x7206;&#x70B8;&#xFF08;&#x68AF;&#x5EA6;&#x622A;&#x65AD;&#x53EF;&#x89E3;&#x51B3;&#xFF09;&#x3002;&#x76F8;&#x53CD;&#xFF0C;$\gamma&lt;1$&#x4F1A;&#x51FA;&#x73B0;&#x7C7B;&#x4F3C;&#x524D;&#x9988;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7684;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x95EE;&#x9898;&#x3002; &#x5728;RNN&#x4E2D;&#xFF0C;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x4E0D;&#x662F;&#x8BF4;$\frac {\partial L_t}{\partial U}$&#x7684;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x4E86;&#xFF0C;&#x800C;&#x662F;$\frac {\partial L_t}{\partial h_k}$&#x7684;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x4E86;&#xFF08;&#x5F53;$t-k$&#x6BD4;&#x8F83;&#x5927;&#x7684;&#x65F6;&#x5019;&#xFF09;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x53C2;&#x6570;$U$&#x7684;&#x66F4;&#x65B0;&#x4E3B;&#x8981;&#x9760;&#x5F53;&#x524D;&#x65F6;&#x523B;$k$&#x7684;&#x524D;&#x51E0;&#x4E2A;&#x76F8;&#x90BB;&#x72B6;&#x6001;$h_k$&#x8FDB;&#x884C;&#x66F4;&#x65B0;&#xFF0C;&#x957F;&#x8DDD;&#x79BB;&#x7684;&#x72B6;&#x6001;&#x5BF9;$U$&#x6CA1;&#x6709;&#x5F71;&#x54CD;&#x3002; &#x7531;&#x4E8E;&#x68AF;&#x5EA6;&#x6D88;&#x5931;/&#x68AF;&#x5EA6;&#x7206;&#x70B8;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;RNN&#x53EA;&#x80FD;&#x5B66;&#x4E60;&#x5230;&#x77ED;&#x671F;&#x7684;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#xFF0C;&#x6240;&#x4EE5;&#x53C8;&#x53EB;&#x957F;&#x671F;&#x4F9D;&#x8D56;&#x95EE;&#x9898;&#x3002; &#x89E3;&#x51B3;&#x529E;&#x6CD5;&#x6DFB;&#x52A0;&#x7EBF;&#x6027;&#x5206;&#x91CF;&#xFF0C;&#x6BD4;&#x5982;$h_t=h_{t-1}+g(x_t,h_{t-1};\theta)$ &#x4F46;&#x662F;&#x8FD9;&#x53C8;&#x4F1A;&#x51FA;&#x73B0;&#x65B0;&#x7684;&#x95EE;&#x9898;&#x2014;&#x2014;&#x8BB0;&#x5FC6;&#x5BB9;&#x91CF;&#x95EE;&#x9898;&#xFF0C;&#x968F;&#x7740;$h_t$&#x4E0D;&#x65AD;&#x7D2F;&#x79EF;&#x5B58;&#x50A8;&#x65B0;&#x7684;&#x8F93;&#x5165;&#x4FE1;&#x606F;&#xFF0C;&#x4F1A;&#x53D1;&#x751F;&#x9971;&#x548C;&#x73B0;&#x8C61;&#x3002;&#x5047;&#x8BBE; $g(&#xB7;)$&#x4E3A; logistic&#x51FD;&#x6570;&#xFF0C;&#x5219;&#x968F;&#x7740;&#x65F6;&#x95F4; $t$&#x7684;&#x589E;&#x957F;&#xFF0C;$ h_t$ &#x4F1A;&#x53D8;&#x5F97;&#x8D8A;&#x6765;&#x8D8A;&#x5927;&#xFF0C;&#x4ECE;&#x800C;&#x5BFC;&#x81F4;$h$&#x53D8;&#x5F97;&#x9971;&#x548C;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x9690;&#x85CF;&#x72B6;&#x6001;$h_t$ &#x53EF;&#x4EE5;&#x5B58;&#x50A8;&#x7684;&#x4FE1;&#x606F;&#x662F;&#x6709;&#x9650;&#x7684;&#xFF0C;&#x968F;&#x7740;&#x8BB0;&#x5FC6;&#x5355;&#x5143;&#x5B58;&#x50A8;&#x7684;&#x5185;&#x5BB9;&#x8D8A;&#x6765;&#x8D8A;&#x591A;&#xFF0C;&#x5176;&#x4E22;&#x5931;&#x7684;&#x4FE1;&#x606F;&#x4E5F;&#x8D8A;&#x6765;&#x8D8A;&#x591A;&#x3002; &#x56E0;&#x6B64;&#x9700;&#x8981;&#x5F15;&#x5165;&#x95E8;&#x63A7;&#x673A;&#x5236;&#x6765;&#x63A7;&#x5236;&#x4FE1;&#x606F;&#x79EF;&#x7D2F;&#x7684;&#x901F;&#x5EA6;&#xFF0C;&#x5305;&#x62EC;&#x6709;&#x9009;&#x62E9;&#x7684;&#x52A0;&#x5165;&#x65B0;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5E76;&#x6709;&#x9009;&#x62E9;&#x5730;&#x9057;&#x5FD8;&#x4E4B;&#x524D;&#x79EF;&#x7D2F;&#x7684;&#x4FE1;&#x606F;&#x3002; LSTM&#x4E4B;&#x6240;&#x4EE5;&#x80FD;&#x89E3;&#x51B3;&#x68AF;&#x5EA6;&#x6D88;&#x5931;/&#x68AF;&#x5EA6;&#x7206;&#x70B8;&#x95EE;&#x9898;&#xFF0C;&#x5173;&#x952E;&#x5728;&#x4E8E; &#x6DFB;&#x52A0;&#x4E86;&#x7EBF;&#x6027;&#x5206;&#x91CF; &#x5F15;&#x5165;&#x4E86;&#x95E8;&#x63A7;&#x673A;&#x5236; &#x800C;&#x4E0D;&#x4EC5;&#x4EC5;&#x662F;&#x56E0;&#x4E3A;&#x52A0;&#x5165;&#x4E86;cell&#x3002; &#x95E8;&#x63A7;&#x5FAA;&#x73AF;&#x5355;&#x5143;&#x7F51;&#x7EDC;&#xFF08;GRU&#xFF09;&#x6CA1;&#x6709;&#x8BB0;&#x5FC6;&#x4F53;cell&#xFF0C;&#x4F46;&#x662F;&#x6709;&#x95E8;&#x63A7;&#x673A;&#x5236;&#x548C;&#x7EBF;&#x6027;&#x5206;&#x91CF;&#xFF0C;&#x6240;&#x4EE5;&#x4ECD;&#x7136;&#x53EF;&#x4EE5;&#x89E3;&#x51B3;&#x68AF;&#x5EA6;&#x6D88;&#x5931;&#x3002; &#x5B9E;&#x65F6;&#x5FAA;&#x73AF;&#x5B66;&#x4E60;RTRL&#x901A;&#x8FC7;&#x524D;&#x5411;&#x4F20;&#x64AD;&#x8BA1;&#x7B97;&#x68AF;&#x5EA6;&#xFF0C;&#x4ECD;&#x7136;&#x4F1A;&#x6709;&#x68AF;&#x5EA6;&#x6D88;&#x5931;/&#x68AF;&#x5EA6;&#x7206;&#x70B8;&#x95EE;&#x9898;&#x3002; LSTM&#x7ED3;&#x6784;&#x5728;&#x4E0A;&#x56FE;&#x4E2D;&#xFF0C;&#x4E09;&#x4E2A;&#x95E8;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x5E38;&#x5E38;&#x662F;Logistic&#x51FD;&#x6570;&#xFF08;&#x6A2A;&#x7740;&#x7684;&#xFF09;&#x3002;&#x7AD6;&#x7740;&#x7684;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;$g,h$&#x7ECF;&#x5E38;&#x662F;&#x662F;$tanh$&#x51FD;&#x6570; &#x5176;&#x4E2D;z&#x662F;&#x7528;&#x4E8E;&#x8BA1;&#x7B97;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x5411;&#x91CF;&#xFF0C;z&#x662F;input+lstm_output&#x7EC4;&#x6210;&#x7684;&#x8054;&#x5408;&#x5411;&#x91CF;&#x3002; CNN &#x5377;&#x79EF;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x7279;&#x70B9;&#x5377;&#x79EF;&#x5C42; &#x5C40;&#x90E8;&#x8FDE;&#x63A5;&#xFF1A;&#x5728;&#x5377;&#x79EF;&#x5C42;&#xFF08;&#x5047;&#x8BBE;&#x662F;&#x7B2C; $l$ &#x5C42;&#xFF09;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x795E;&#x7ECF;&#x5143;&#x90FD;&#x53EA;&#x548C;&#x4E0B;&#x4E00;&#x5C42;&#xFF08;&#x7B2C; $l &#x2212; 1$&#x5C42;&#xFF09;&#x4E2D;&#x67D0;&#x4E2A;&#x5C40;&#x90E8;&#x7A97;&#x53E3;&#x5185;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x76F8;&#x8FDE;&#xFF0C;&#x6784;&#x6210;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x8FDE;&#x63A5;&#x7F51;&#x7EDC; &#x6743;&#x91CD;&#x5171;&#x4EAB;&#xFF1A;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#x7684;&#x6EE4;&#x6CE2;&#x5668; $w^l$ &#x5BF9;&#x4E8E;&#x7B2C; $l$ &#x5C42;&#x7684;&#x6240;&#x6709;&#x7684;&#x795E;&#x7ECF;&#x5143;&#x90FD;&#x662F;&#x76F8;&#x540C;&#x7684;&#x3002; &#x7531;&#x4E8E;&#x5C40;&#x90E8;&#x8FDE;&#x63A5;&#x548C;&#x6743;&#x91CD;&#x5171;&#x4EAB;&#xFF0C;&#x5377;&#x79EF;&#x5C42;&#x7684;&#x53C2;&#x6570;&#x53EA;&#x6709;&#x4E00;&#x4E2A; $m$&#x7EF4;&#x7684;&#x6743;&#x91CD;$ w^l $&#x548C; 1&#x7EF4;&#x7684;&#x504F;&#x7F6E;$b^l$ &#x6C47;&#x805A;&#x5C42;/&#x6C60;&#x5316;&#x5C42;/Pooling Layer &#x5B50;&#x91C7;&#x6837; &#x5377;&#x79EF;&#x5C42;&#x4F5C;&#x7528;&#xFF1A;&#x63D0;&#x53D6;&#x4E00;&#x4E2A;&#x5C40;&#x90E8;&#x533A;&#x57DF;&#x7684;&#x7279;&#x5F81;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x5377;&#x79EF;&#x6838;&#x76F8;&#x5F53;&#x4E8E;&#x4E0D;&#x540C;&#x7684;&#x7279;&#x5F81;&#x63D0;&#x53D6;&#x5668;&#x3002; &#x6C47;&#x805A;&#x5C42;/&#x6C60;&#x5316;&#x5C42;/pooling layer&#x4F5C;&#x7528;&#xFF1A;&#x8FDB;&#x884C;&#x7279;&#x5F81;&#x9009;&#x62E9;&#xFF0C;&#x964D;&#x4F4E;&#x7279;&#x5F81;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x4ECE;&#x800C;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x6570;&#x91CF;&#x3002; &#x5E38;&#x7528;&#x7684;&#x6C47;&#x805A;&#x51FD;&#x6570;&#xFF1A;&#x6700;&#x4F73;&#x6C47;&#x805A;&#xFF0C;&#x5E73;&#x5747;&#x6C47;&#x805A;&#x3002; &#x9632;&#x6B62;&#x8FC7;&#x62DF;&#x5408; &#x5728;&#x5377;&#x79EF;&#x5C42;&#x4E4B;&#x540E;&#x52A0;&#x4E00;&#x4E2A;&#x6C47;&#x805A;&#x5C42;&#xFF0C;&#x964D;&#x4F4E;&#x7279;&#x5F81;&#x7EF4;&#x5EA6; &#x589E;&#x52A0;&#x5377;&#x79EF;&#x6B65;&#x957F;&#xFF0C;&#x964D;&#x4F4E;&#x7279;&#x5F81;&#x7EF4;&#x5EA6; &#x53C2;&#x6570;&#x5B66;&#x4E60;&#x53EA;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x5377;&#x79EF;&#x5C42;&#x7684;&#x68AF;&#x5EA6;&#x3002; &#x6742;&#x9879;Dropout&#x968F;&#x673A;&#x5931;&#x6D3B;&#x3002;&#x6CE8;&#x610F;&#xFF1A;&#x5982;&#x679C;dropout rate=p%&#x3002;&#x5728;&#x8BA1;&#x7B97;weight&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8981;&#x4E58;&#x4EE5;&#xFF08;1-p%&#xFF09;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x6B21;&#x6CA1;&#x66F4;&#x65B0;&#x5230;&#xFF0C;&#x5C31;&#x4E0B;&#x6B21;&#x518D;&#x66F4;&#x65B0;&#x3002; MaxoutReLU&#x5168;&#x79F0;&#xFF1A;Rectified Linear Unit&#xFF0C;&#x7EBF;&#x6027;&#x6574;&#x6D41;&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x4E0B;&#x56FE;&#x6240;&#x793A;&#xFF1A;ReLU&#x7684;&#x53D8;&#x79CD; &#x540D;&#x8BCD;&#x89E3;&#x91CA;Epoch&#x3001; Iteration&#x3001;Batch_size&#x3001; Batch_numEpoch&#xFF1A;&#x4E00;&#x4E2A;Epoch&#x610F;&#x5473;&#x7740;&#x4F1A;&#x4F7F;&#x7528;&#x4E00;&#x6B21;&#x8BAD;&#x7EC3;&#x96C6;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6837;&#x4F8B;&#x3002;Batch_size&#xFF1A;&#x6BCF;&#x4E00;&#x6279;&#x7684;&#x5927;&#x5C0F;&#x3002;&#x5728;&#x4E00;&#x6B21;&#x524D;&#x5411;&#x4F20;&#x64AD;/&#x53CD;&#x5411;&#x4F20;&#x64AD;&#x4E2D;&#xFF0C;&#x6279;&#x91CF;&#x7684;&#x5927;&#x5C0F;&#x3002;Iteration&#xFF1A;&#x68AF;&#x5EA6;&#x66F4;&#x65B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x603B;&#x8FC7;&#x5DF2;&#x7ECF;&#x4F7F;&#x7528;&#x4E86;&#x591A;&#x5C11;&#x4E2A;batch&#x3002;batch_num&#xFF1A;&#x6BCF;&#x6B21;&#x4F7F;&#x7528;Batch_size&#x4E2A;&#x6570;&#x636E;&#xFF0C;&#x9700;&#x8981;batch_num&#x6B21;&#x8FED;&#x4EE3;&#x5B8C;&#x4E00;&#x4E2A;epoch&#x3002; $batch_num=\frac{&#x6D4B;&#x8BD5;&#x96C6;&#x6570;&#x91CF;}{Batch_size}$&#x4E3E;&#x4F8B;&#xFF1A;&#x6709;1000&#x4E2A;&#x6837;&#x4F8B;&#xFF0C;&#x8BBE;&#x7F6E;batch_size=500&#xFF0C;&#x5219;&#x9700;&#x8981;batch_num=2&#x6765;&#x8BA1;&#x7B97;&#x4E00;&#x4E2A;Epoch&#x3002; &#x5F15;&#x7528;&#x6392;&#x540D;&#x4E0D;&#x5206;&#x5148;&#x540E;&#x9648;&#x5EFA;&#x864E;&#x7684;&#x535A;&#x5BA2;&#x67EF;&#x5EF6;&#x6770;&#x7684;&#x535A;&#x5BA2;&#x6BD4;Momentum&#x66F4;&#x5FEB;&#xFF1A;&#x63ED;&#x5F00;Nesterov Accelerated Gradient&#x7684;&#x771F;&#x9762;&#x76EE;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E0E;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x4E2D;&#x79D1;&#x5927;&#x8F6F;&#x9662;-&#x4F59;&#x8273;&#x73AE; &#x81F4;&#x8C22;&#x6392;&#x540D;&#x4E0D;&#x5206;&#x5148;&#x540E;&#x4F59;&#x8273;&#x73AE;&#x8001;&#x5E08;&#xFF0C;&#x8D75;&#x632F;&#x521A;&#x8001;&#x5E08;&#xFF0C;&#x82CF;&#x7490;&#x5CA9;&#xFF0C;&#x67EF;&#x5EF6;&#x6770;&#xFF0C;&#x9648;&#x5EFA;&#x864E;&#x3002; &#x798F;&#x5229; https://qcloud.coding.net/s/0438a9fe-bb37-4fc7-9ddd-af8d786f9558]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>笔记</tag>
        <tag>人工智能</tag>
        <tag>复习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[智能机器人 LAB1]]></title>
    <url>%2F%2Fposts%2F113ef49f%2F</url>
    <content type="text"><![CDATA[&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;-LAB1 &#x5B9E;&#x9A8C;&#x62A5;&#x544A;&#x5982;&#x6709;&#x9519;&#x8BEF;&#xFF0C;&#x8BF7;&#x591A;&#x591A;&#x6279;&#x8BC4;&#x6307;&#x6B63;&#xFF0C;&#x4E0D;&#x80DC;&#x611F;&#x6FC0;&#x3002; &#x4EE3;&#x7801; &#x7528;&#x81EA;&#x5DF1;&#x7684;&#x8BDD;&#x7ED9;&#x51FA;&#x4E0A;&#x8FF0;&#x5404;&#x6B65;&#x9AA4;&#x6240;&#x8C03;&#x7528;&#x51FD;&#x6570; API &#x7684;&#x539F;&#x7406;&#x7406;&#x89E3;&#xFF0C;&#x4EE3;&#x7801;&#x5206;&#x6790;&#x548C;&#x5B9E;&#x9A8C;&#x7ED3;&#x679C;&#x521D;&#x59CB;&#x5316;&#x6570;&#x636E;123456789#&#x6355;&#x83B7;&#x76F8;&#x673A;&#x6570;&#x636E;self.cam = video.create_capture(0)cv2.namedWindow(&apos;camshift&apos;)#&#x52A0;&#x8F7D;&#x56FE;&#x7247;&#x6570;&#x636E;&#xFF0C;&#x6839;&#x636E;&#x8FD9;&#x5F20;&#x56FE;&#x7247;&#x4E2D;&#x7684;&#x989C;&#x8272;&#x5206;&#x5E03;&#x53BB;&#x641C;&#x5BFB;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x533A;&#x57DF;self.roi = cv2.imread(&apos;fense.jpg&apos;)self.selection = Noneself.tracking_state = 0self.show_backproj = False &#x8BBE;&#x5B9A;&#x641C;&#x5BFB;&#x7684;&#x521D;&#x59CB;&#x5316;&#x7A97;&#x53E3;123self.selection = (40, 54, 296, 230)self.tracking_state = 1#&#x5373;&#x4EE5;[40~296,54~230]&#x8FD9;&#x4E2A;&#x7A97;&#x53E3;&#x4E3A;&#x521D;&#x59CB;&#x5316;&#x7A97;&#x53E3;&#xFF0C;&#x5F00;&#x59CB;&#x641C;&#x5BFB; &#x83B7;&#x53D6;&#x76F8;&#x673A;&#x6570;&#x636E;12345#&#x8BFB;&#x53D6;&#x76F8;&#x673A;&#x7684;&#x6570;&#x636E;&#x6D41;ret, self.frame = self.cam.read()#&#x5BF9;&#x83B7;&#x53D6;&#x7684;&#x76F8;&#x673A;&#x6570;&#x636E;&#x4F5C;&#x6DF1;&#x590D;&#x5236;#vis&#x4F5C;&#x4E3A;&#x76F8;&#x673A;&#x89C6;&#x9891;&#x7684;&#x4E00;&#x4E2A;&#x5907;&#x4EFD;&#xFF0C;&#x505A;&#x6DF1;&#x590D;&#x5236;&#xFF0C;&#x7528;&#x4E8E;&#x663E;&#x793A;&#x8F93;&#x51FA;vis = self.frame.copy() &#x989C;&#x8272;&#x7A7A;&#x95F4;&#x8F6C;&#x6362;1234567#&#x989C;&#x8272;&#x7A7A;&#x95F4;&#x8F6C;&#x6362;&#xFF0C;flag&#x51B3;&#x5B9A;&#x8F6C;&#x6362;&#x7C7B;&#x578B;&#xFF0C;cv2.COLOR_BGR2HSV&#x4E3A;BGR&#x8F6C;HSV&#x7A7A;&#x95F4;#HSV &#x4E3A;&#x8272;&#x76F8;&#xFF0C;&#x9971;&#x548C;&#x5EA6;&#xFF0C;&#x660E;&#x5EA6;#RGB&#x989C;&#x8272;&#x7A7A;&#x95F4;&#x5BF9;&#x5149;&#x7167;&#x4EAE;&#x5EA6;&#x53D8;&#x5316;&#x8F83;&#x4E3A;&#x654F;&#x611F;&#xFF0C;#&#x4E3A;&#x4E86;&#x51CF;&#x5C11;&#x6B64;&#x53D8;&#x5316;&#x5BF9;&#x8DDF;&#x8E2A;&#x6548;&#x679C;&#x7684;&#x5F71;&#x54CD;&#xFF0C;&#x9996;&#x5148;&#x5C06;&#x56FE;&#x50CF;&#x4ECE;RGB&#x7A7A;&#x95F4;&#x8F6C;&#x6362;&#x5230;HSV&#x7A7A;&#x95F4;&#x3002;hsv = cv2.cvtColor(self.frame, cv2.COLOR_BGR2HSV)#&#x8F93;&#x51FA;&#x7785;&#x7785;cv2.imshow(&apos;hsv&apos;, hsv) &#x8BBE;&#x7F6E;&#x63A9;&#x6A21;&#x53EA;&#x9760;&#x56FE;&#x7247;&#x4E2D;&#x7684;&#x989C;&#x8272;&#x5206;&#x5E03;&#xFF0C;&#x5F80;&#x5F80;&#x7CBE;&#x5EA6;&#x4E0D;&#x591F;&#xFF0C;&#x73B0;&#x5728;&#x901A;&#x8FC7;&#x6DFB;&#x52A0;&#x63A9;&#x6A21;&#xFF0C;&#x63D0;&#x53D6;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x533A;&#x57DF;&#xFF0C;&#x63D0;&#x9AD8;&#x7CBE;&#x5EA6;&#x3002; &#x63A9;&#x6A21;&#x7684;&#x4F5C;&#x7528;&#xFF1A; &#x63D0;&#x53D6;&#x611F;&#x5174;&#x8DA3;&#x533A;,&#x7528;&#x9884;&#x5148;&#x5236;&#x4F5C;&#x7684;&#x611F;&#x5174;&#x8DA3;&#x533A;&#x63A9;&#x6A21;&#x4E0E;&#x5F85;&#x5904;&#x7406;&#x56FE;&#x50CF;&#x76F8;&#x4E58;,&#x5F97;&#x5230;&#x611F;&#x5174;&#x8DA3;&#x533A;&#x56FE;&#x50CF;,&#x611F;&#x5174;&#x8DA3;&#x533A;&#x5185;&#x56FE;&#x50CF;&#x503C;&#x4FDD;&#x6301;&#x4E0D;&#x53D8;,&#x800C;&#x533A;&#x5916;&#x56FE;&#x50CF;&#x503C;&#x90FD;&#x4E3A;0 &#x5C4F;&#x853D;&#x4F5C;&#x7528;,&#x7528;&#x63A9;&#x6A21;&#x5BF9;&#x56FE;&#x50CF;&#x4E0A;&#x67D0;&#x4E9B;&#x533A;&#x57DF;&#x4F5C;&#x5C4F;&#x853D;,&#x4F7F;&#x5176;&#x4E0D;&#x53C2;&#x52A0;&#x5904;&#x7406;&#x6216;&#x4E0D;&#x53C2;&#x52A0;&#x5904;&#x7406;&#x53C2;&#x6570;&#x7684;&#x8BA1;&#x7B97;,&#x6216;&#x4EC5;&#x5BF9;&#x5C4F;&#x853D;&#x533A;&#x4F5C;&#x5904;&#x7406;&#x6216;&#x7EDF;&#x8BA1;&#x3002; &#x7ED3;&#x6784;&#x7279;&#x5F81;&#x63D0;&#x53D6;,&#x7528;&#x76F8;&#x4F3C;&#x6027;&#x53D8;&#x91CF;&#x6216;&#x56FE;&#x50CF;&#x5339;&#x914D;&#x65B9;&#x6CD5;&#x68C0;&#x6D4B;&#x548C;&#x63D0;&#x53D6;&#x56FE;&#x50CF;&#x4E2D;&#x4E0E;&#x63A9;&#x6A21;&#x76F8;&#x4F3C;&#x7684;&#x7ED3;&#x6784;&#x7279;&#x5F81;&#x3002; &#x7279;&#x6B8A;&#x5F62;&#x72B6;&#x56FE;&#x50CF;&#x7684;&#x5236;&#x4F5C;&#x3002;&#x7528;&#x9009;&#x5B9A;&#x7684;&#x56FE;&#x50CF;&#x3001;&#x56FE;&#x5F62;&#x6216;&#x7269;&#x4F53;,&#x5BF9;&#x5F85;&#x5904;&#x7406;&#x7684;&#x56FE;&#x50CF;(&#x5168;&#x90E8;&#x6216;&#x5C40;&#x90E8;)&#x8FDB;&#x884C;&#x906E;&#x6321;,&#x6765;&#x63A7;&#x5236;&#x56FE;&#x50CF;&#x5904;&#x7406;&#x7684;&#x533A;&#x57DF;&#x6216;&#x5904;&#x7406;&#x8FC7;&#x7A0B;&#x3002;&#x7528;&#x4E8E;&#x8986;&#x76D6;&#x7684;&#x7279;&#x5B9A;&#x56FE;&#x50CF;&#x6216;&#x7269;&#x4F53;&#x79F0;&#x4E3A;&#x63A9;&#x6A21;&#x6216;&#x6A21;&#x677F;&#x3002; &#x5177;&#x4F53;&#x989C;&#x8272;&#x7A7A;&#x95F4;&#x7684;&#x8303;&#x56F4;&#x8BE6;&#x89C1;&#x989C;&#x8272;&#x73AF;&#x3002;12345#&#x8BBE;&#x7F6E;&#x9608;&#x503C;&#xFF0C;&#x4E09;&#x901A;&#x9053;&#x4F4E;&#x4E8E;(0,60,32)&#x7684;&#x7F6E;&#x4E3A;0&#xFF0C;&#x9AD8;&#x4E8E;(180,255,255)&#x7684;&#x7F6E;&#x4E3A;0&#xFF0C;&#x5728;&#x4ED6;&#x4FE9;&#x4E4B;&#x95F4;&#x7684;&#xFF0C;&#x8BBE;&#x4E3A;255#&#x9608;&#x503C;&#x6539;&#x4E3A;&#x68C0;&#x6D4B;&#x504F;&#x7EA2;&#x8272;&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x6839;&#x636E;&#x9608;&#x503C;&#x8FDB;&#x884C;&#x63A9;&#x819C;&#xFF0C;mask = cv2.inRange(hsv, np.array((0., 0., 213.)), np.array((255., 128., 255.))) #&#x504F;&#x7EA2;&#x8272;&#x7684;#&#x73B0;&#x5728;&#xFF0C;mask&#x662F;&#x4E00;&#x4E2A;&#x53EA;&#x6709;&#x9ED1;&#x767D;&#x7684;&#x56FE;&#x50CF;&#x6D41;&#xFF0C;&#x8FDB;&#x884C;&#x63A9;&#x6A21;&#x540E;&#xFF0C;&#x4E8C;&#x503C;&#x5316;&#x4E86;&#x3002;cv2.imshow(&apos;mask&apos;, mask) &#x8BBE;&#x5B9A;&#x521D;&#x59CB;&#x7684;&#x641C;&#x7D22;&#x7A97;&#x53E3;12x0, y0, x1, y1 = self.selectionself.track_window = (x0, y0, x1-x0, y1-y0) #&#xFF08;40,54&#xFF0C;256,176&#xFF09;&#x521D;&#x59CB;&#x5316;&#x6846;&#x7684;&#x8303;&#x56F4; &#x8BA1;&#x7B97;&#x76F4;&#x65B9;&#x56FE;1234567891011121314151617181920212223242526272829303132333435#roi&#x662F;&#x8BFB;&#x5165;&#x7684;&#x56FE;&#x7247;&#xFF0C;hsv_roi = cv2. cvtColor(roi,cv2. COLOR_BGR2HSV)#&#x8BFB;&#x5165;&#x7684;&#x56FE;&#x7247;&#x4E5F;&#x8981;&#x8FDB;&#x884C;&#x63A9;&#x6A21;&#x5904;&#x7406;mask_roi = cv2.inRange(hsv_roi, np.array((0., 0., 213.)), np.array((255., 128., 255.)))#mask_roi = cv2.inRange(hsv_roi, np.array((0., 60., 32.)), np.array((180., 255., 255.)))#&#x7785;&#x4F60;&#x548B;&#x5730;cv2.namedWindow(&quot;mask_roi&quot;)cv2.imshow(&apos;mask_roi&apos;, mask_roi)#&#x4E00;&#x7EF4;&#x76F4;&#x65B9;&#x56FE;#cv2.calcHist&#x662F;&#x76F4;&#x65B9;&#x56FE;&#x8BA1;&#x7B97;&#x51FD;&#x6570;##################&#x76F4;&#x65B9;&#x56FE;#################################&#x51FD;&#x6570;&#x539F;&#x578B;##################cv2.calcHist(images, channels, mask, histSize, ranges[, hist[, accumulate ]]) #&#x8FD4;&#x56DE;hist#&#x4E3E;&#x4F8B;&#x8BF4;&#x660E;&#xFF1A;#image = cv2.imread(&quot;D:/histTest.jpg&quot;, 0)#hist = cv2.calcHist([image],#[0], #&#x4F7F;&#x7528;&#x7684;&#x901A;&#x9053;#None, #&#x6CA1;&#x6709;&#x4F7F;&#x7528;mask#[256], #HistSize#[0.0,255.0]) #&#x76F4;&#x65B9;&#x56FE;&#x67F1;&#x7684;&#x8303;&#x56F4;hist = cv2.calcHist( [hsv_roi], [0], mask_roi, [16], [0, 180] )#hist.shape=(16,1)#H-S&#x8054;&#x5408;&#x4E8C;&#x7EF4;&#x76F4;&#x65B9;&#x56FE; hist2 = cv2.calcHist( [hsv_roi], [0,1],None, [16,24], [0, 180,0 , 255] )#hist2 = cv2.calcHist( [hsv_roi], [0,2],None, [18,24], [0, 180,0 , 255] )#&#x5F52;&#x4E00;&#x5316;&#xFF0C;&#x8BA9;&#x6700;&#x5927;&#x503C;&#x662F;255cv2.normalize(hist, hist, 0, 255, cv2.NORM_MINMAX);#&#x8F6C;&#x6362;&#x4E3A;&#x4E00;&#x7EF4;&#x5417;&#xFF1F;&#x56E0;&#x4E3A;reshape(-1)&#x662F;&#x6839;&#x636E;&#x5176;&#x4ED6;&#x7684;&#x7EF4;&#x5EA6;&#x6765;&#x7B97;&#x8FD9;&#x4E2A;&#x8FD9;&#x4E2A;&#x7EF4;&#x5EA6;self.hist = hist.reshape(-1)#&#x4E8C;&#x7EF4;&#x76F4;&#x65B9;&#x56FE;&#x663E;&#x793A;plt.imshow(hist2,interpolation = &apos;nearest&apos;)plt.show()self.show_hist() &#x53CD;&#x5411;&#x6295;&#x5F71;123456789101112131415161718192021222324252627#&#x628A;selection = None &#x8FD9;&#x6837;&#x5C31;&#x4E0D;&#x518D;&#x8FDB;&#x884C;&#x7B2C;&#x4E00;&#x6B65;&#x4E86;self.selection = None#cv2.calcBackProject&#x76F4;&#x65B9;&#x56FE;&#x53CD;&#x5411;&#x6295;&#x5F71;&#x3002;#&#x53CD;&#x5411;&#x6295;&#x5F71;&#x53EF;&#x4EE5;&#x7528;&#x6765;&#x505A;&#x56FE;&#x50CF;&#x5206;&#x5272;&#xFF0C;&#x5BFB;&#x627E;&#x611F;&#x5174;&#x8DA3;&#x533A;&#x95F4;&#x3002;&#x5B83;&#x4F1A;&#x8F93;&#x51FA;&#x4E0E;&#x8F93;&#x5165;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#x76F8;&#x540C;&#x7684;&#x56FE;&#x50CF;&#xFF0C;#&#x6BCF;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x503C;&#x4EE3;&#x8868;&#x4E86;&#x8F93;&#x5165;&#x56FE;&#x50CF;&#x4E0A;&#x5BF9;&#x5E94;&#x70B9;&#x5C5E;&#x4E8E;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#x7684;&#x6982;&#x7387;&#xFF0C;&#x6982;&#x7387;&#x8D8A;&#x9AD8;&#xFF0C;&#x8D8A;&#x4EAE;&#x3002;#&#x7B80;&#x8A00;&#x4E4B;&#xFF0C;&#x8F93;&#x51FA;&#x56FE;&#x50CF;&#x4E2D;&#x50CF;&#x7D20;&#x503C;&#x8D8A;&#x9AD8;&#x7684;&#x70B9;&#x8D8A;&#x53EF;&#x80FD;&#x4EE3;&#x8868;&#x60F3;&#x8981;&#x67E5;&#x627E;&#x7684;&#x76EE;&#x6807;&#x3002;#&#x76F4;&#x65B9;&#x56FE;&#x6295;&#x5F71;&#x7ECF;&#x5E38;&#x4E0E;camshift&#xFF08;&#x8FFD;&#x8E2A;&#x7B97;&#x6CD5;&#xFF09;&#x7B97;&#x6CD5;&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#x3002; #&#x7136;&#x540E;&#x5BF9;&#x5176;&#x4E2D;&#x7684;H&#x5206;&#x91CF;(&#x8272;&#x8C03;)&#x4F5C;&#x76F4;&#x65B9;&#x56FE;&#xFF0C;#&#x5728;&#x76F4;&#x65B9;&#x56FE;&#x4E2D;&#x4EE3;&#x8868;&#x4E86;&#x4E0D;&#x540C;H&#x5206;&#x91CF;&#x503C;&#x51FA;&#x73B0;&#x7684;&#x6982;&#x7387;&#x6216;&#x8005;&#x50CF;&#x7D20;&#x4E2A;&#x6570;&#xFF0C;#&#x5C31;&#x662F;&#x8BF4;&#x53EF;&#x4EE5;&#x67E5;&#x627E;&#x51FA;H&#x5206;&#x91CF;&#x5927;&#x5C0F;&#x4E3A;h&#x7684;&#x6982;&#x7387;&#x6216;&#x8005;&#x50CF;&#x7D20;&#x4E2A;&#x6570;&#xFF0C;&#x5373;&#x5F97;&#x5230;&#x4E86;&#x989C;&#x8272;&#x6982;&#x7387;&#x67E5;&#x627E;&#x8868;&#x3002;#&#x5C06;&#x56FE;&#x50CF;&#x4E2D;&#x6BCF;&#x4E2A;&#x50CF;&#x7D20;&#x7684;&#x503C;&#x7528;&#x5176;&#x989C;&#x8272;&#x51FA;&#x73B0;&#x7684;&#x6982;&#x7387;&#x5BF9;&#x66FF;&#x6362;&#xFF0C;&#x5C31;&#x5F97;&#x5230;&#x4E86;&#x989C;&#x8272;&#x6982;&#x7387;&#x5206;&#x5E03;&#x56FE;&#x3002;#&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x5C31;&#x53EB;&#x53CD;&#x5411;&#x6295;&#x5F71;&#xFF0C;&#x989C;&#x8272;&#x6982;&#x7387;&#x5206;&#x5E03;&#x56FE;&#x662F;&#x4E00;&#x4E2A;&#x7070;&#x5EA6;&#x56FE;&#x50CF;&#x3002;#&#x5F97;&#x5230;&#x7684;&#x662F;&#x4E00;&#x4E2A;&#x6982;&#x7387;&#x56FE;prob = cv2.calcBackProject([hsv], [0], self.hist, [0, 180], 1)cv2.namedWindow(&quot;prob1&quot;)#&#x663E;&#x793A;&#x6982;&#x7387;&#x56FE;1cv2.imshow(&apos;prob1&apos;, prob)#&#x4E0E;&#x63A9;&#x819C;&#x76F8;&#x4E0E;prob &amp;= maskcv2.namedWindow(&quot;prob2&quot;)#&#x663E;&#x793A;&#x6982;&#x7387;&#x56FE;2cv2.imshow(&apos;prob2&apos;, prob) &#x641C;&#x5BFB;&#x5E76;&#x8DDF;&#x8E2A;&#x533A;&#x57DF;1234567891011121314151617181920212223242526#&#x8BBE;&#x5B9A;&#x7EC8;&#x6B62;&#x6761;&#x4EF6;#&#x8981;&#x4E48;&#x662F;&#x8FED;&#x4EE3;10&#x6B21;&#xFF0C;&#x8981;&#x4E48;&#x662F;&#x79FB;&#x52A8;&#x53EA;&#x662F;&#x5C11;&#x4E00;&#x4E2A;&#x50CF;&#x7D20;&#x70B9;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x6761;&#x4EF6;&#x6210;&#x7ACB;&#x4E00;&#x4E2A;&#x5373;&#x53EF;&#x3002;term_crit = ( cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 1 )#CamShift&#x7B97;&#x6CD5;&#x7684;&#x5168;&#x79F0;&#x662F;&quot;Continuously Adaptive Mean-SHIFT&quot;&#xFF0C;&#x5373;&#xFF1A;&#x8FDE;&#x7EED;&#x81EA;&#x9002;&#x5E94;&#x7684;MeanShift&#x7B97;&#x6CD5;&#x3002;#&#x5176;&#x57FA;&#x672C;&#x601D;&#x60F3;&#x662F;&#x5BF9;&#x89C6;&#x9891;&#x5E8F;&#x5217;&#x7684;&#x6240;&#x6709;&#x56FE;&#x50CF;&#x5E27;&#x90FD;&#x4F5C;MeanShift&#x8FD0;&#x7B97;&#xFF0C;#&#x5E76;&#x5C06;&#x4E0A;&#x4E00;&#x5E27;&#x7684;&#x7ED3;&#x679C;&#xFF08;&#x5373;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#x7684;&#x4E2D;&#x5FC3;&#x4F4D;&#x7F6E;&#x548C;&#x7A97;&#x53E3;&#x5927;&#x5C0F;&#xFF09;&#x4F5C;&#x4E3A;&#x4E0B;&#x4E00;&#x5E27;MeanShift&#x7B97;&#x6CD5;&#x7684;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#x7684;&#x521D;&#x59CB;&#x503C;&#xFF0C;#&#x5982;&#x6B64;&#x8FED;&#x4EE3;&#x4E0B;&#x53BB;&#x3002;#&#x7B97;&#x6CD5;&#x8FC7;&#x7A0B;&#x4E3A;&#xFF1A;#(1).&#x521D;&#x59CB;&#x5316;&#x641C;&#x7D22;&#x7A97;#(2).&#x8BA1;&#x7B97;&#x641C;&#x7D22;&#x7A97;&#x7684;&#x989C;&#x8272;&#x6982;&#x7387;&#x5206;&#x5E03;&#xFF08;&#x53CD;&#x5411;&#x6295;&#x5F71;&#xFF09;#(3).&#x8FD0;&#x884C;meanshift&#x7B97;&#x6CD5;&#xFF0C;&#x83B7;&#x5F97;&#x641C;&#x7D22;&#x7A97;&#x65B0;&#x7684;&#x5927;&#x5C0F;&#x548C;&#x4F4D;&#x7F6E;&#x3002;#(4).&#x5728;&#x4E0B;&#x4E00;&#x5E27;&#x89C6;&#x9891;&#x56FE;&#x50CF;&#x4E2D;&#x7528;(3)&#x4E2D;&#x7684;&#x503C;&#x91CD;&#x65B0;&#x521D;&#x59CB;&#x5316;&#x641C;&#x7D22;&#x7A97;&#x7684;&#x5927;&#x5C0F;&#x548C;&#x4F4D;&#x7F6E;&#xFF0C;&#x518D;&#x8DF3;&#x8F6C;&#x5230;(2)&#x7EE7;&#x7EED;&#x8FDB;&#x884C;&#x3002;track_box, self.track_window = cv2.CamShift(prob, self.track_window, term_crit)#&#x5927;&#x5C0F;&#x8BA1;&#x7B97;&#xFF1A;#&#x96F6;&#x9636;&#x77E9;&#x662F;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#x5185;&#x6240;&#x6709;&#x50CF;&#x7D20;&#x7684;&#x79EF;&#x5206;&#xFF0C;&#x5373;&#x6240;&#x6709;&#x50CF;&#x7D20;&#x503C;&#x4E4B;&#x548C;&#xFF0C;&#x7269;&#x7406;&#x4E0A;&#x7684;&#x610F;&#x4E49;&#x662F;&#x8BA1;&#x7B97;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#x7684;&#x5C3A;&#x5BF8;&#x3002;#&#x7ECF;&#x8FC7;&#x76EE;&#x6807;&#x7684;H&#x5206;&#x91CF;&#x76F4;&#x65B9;&#x56FE;&#x53CD;&#x5411;&#x6295;&#x5F71;&#x540E;&#xFF0C;&#x76EE;&#x6807;&#x533A;&#x57DF;&#x7684;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#x5927;&#x90E8;&#x5206;&#x50CF;&#x7D20;&#x503C;&#x5F52;&#x4E00;&#x5316;&#x540E;&#x5E94;&#x8BE5;&#x662F;&#x6700;&#x5927;&#x503C;255&#xFF0C;#&#x5982;&#x679C;&#x8BA1;&#x7B97;&#x51FA;&#x6765;&#x96F6;&#x9636;&#x77E9;&#x5927;&#x4E8E;&#x67D0;&#x4E00;&#x9608;&#x503C;&#xFF0C;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x6B64;&#x65F6;&#x76EE;&#x6807;&#x94FA;&#x6EE1;&#x4E86;&#x6574;&#x4E2A;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#xFF0C;#&#x6709;&#x7406;&#x7531;&#x8BA4;&#x4E3A;&#x5728;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#x4E4B;&#x5916;&#x7684;&#x533A;&#x57DF;&#x8FD8;&#x5B58;&#x5728;&#x76EE;&#x6807;&#x533A;&#x57DF;&#xFF0C;&#x9700;&#x8981;&#x589E;&#x5927;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#x7684;&#x5C3A;&#x5BF8;&#xFF1B;#&#x76F8;&#x5E94;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x96F6;&#x9636;&#x77E9;&#x5C0F;&#x4E8E;&#x67D0;&#x4E00;&#x9608;&#x503C;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x7F29;&#x5C0F;&#x641C;&#x7D22;&#x7A97;&#x53E3;&#x7684;&#x5C3A;&#x5BF8;&#xFF0C;#&#x5982;&#x6B64;&#x4E00;&#x6765;&#xFF0C;&#x5F53;&#x76EE;&#x6807;&#x7684;&#x5927;&#x5C0F;&#x53D1;&#x751F;&#x53D8;&#x5316;&#x7684;&#x65F6;&#x5019;&#xFF0C;CamShift&#x7B97;&#x6CD5;&#x5C31;&#x53EF;&#x4EE5;&#x81EA;&#x9002;&#x5E94;&#x7684;&#x8C03;&#x6574;&#x76EE;&#x6807;&#x533A;&#x57DF;&#x8FDB;&#x884C;&#x8DDF;&#x8E2A;&#x3002;#&#x8FD4;&#x56DE;&#x503C;&#xFF1A;&#x8FD4;&#x56DE;&#x7684;track_box&#x53EF;&#x7528;&#x4E8E;&#x753B;&#x692D;&#x5706;#&#x4E94;&#x4E2A;&#x53C2;&#x6570;&#xFF1A;&#x692D;&#x5706;&#x4E2D;&#x5FC3;&#xFF0C;&#x534A;&#x957F;&#x8F74;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x692D;&#x5706;&#x65CB;&#x8F6C;&#x7684;&#x89D2;&#x5EA6;&#xFF0C;&#x692D;&#x5706;&#x7684;&#x8D77;&#x59CB;&#x89D2;&#x5EA6;&#xFF0C;&#x692D;&#x5706;&#x7684;&#x7ED3;&#x675F;&#x89D2;&#x5EA6; &#x4EE5;&#x692D;&#x5706;&#x8868;&#x793A;&#x8BC6;&#x522B;&#x7684;&#x533A;&#x57DF;123456789try: #&#x753B;&#x692D;&#x5706; #&#x4E94;&#x4E2A;&#x53C2;&#x6570;&#xFF1A;&#x692D;&#x5706;&#x4E2D;&#x5FC3;&#xFF0C;&#x534A;&#x957F;&#x8F74;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x692D;&#x5706;&#x65CB;&#x8F6C;&#x7684;&#x89D2;&#x5EA6;&#xFF0C;&#x692D;&#x5706;&#x7684;&#x8D77;&#x59CB;&#x89D2;&#x5EA6;&#xFF0C;&#x692D;&#x5706;&#x7684;&#x7ED3;&#x675F;&#x89D2;&#x5EA6; cv2.ellipse(vis, track_box, (0, 0, 255), 2)# &#x8F93;&#x51FA;&#x692D;&#x5706;&#x7684;&#x53C2;&#x6570; a = str(track_box[0][0])+&quot; &quot;+str(track_box[0][1])+&quot; &quot;+str(round(track_box[1][0],2))\ +&quot; &quot;+str(round(track_box[1][1],2))+&quot; &quot;+str(round(track_box[2],2))+&quot;\r\n&quot; print( a) except: print( track_box) &#x663E;&#x793A;&#x539F;&#x59CB;&#x56FE;&#x50CF;1cv2.imshow(&apos;camshift&apos;, vis) &#x8BBE;&#x5B9A;&#x63A7;&#x5236;&#x6309;&#x952E;123ch = 0xFF &amp; cv2.waitKey(5)if ch == 27: break #ESC=&#x9000;&#x51FA; &#x622A;&#x56FE;&#x5728;&#x524D;&#x4E24;&#x5F20;&#x56FE;&#x4E2D;&#xFF0C;&#x6211;&#x628A;&#x6211;&#x81EA;&#x5DF1;&#x6263;&#x6389;&#x4E86;&#x3002;&#x7B2C;&#x4E00;&#x6392;&#x5DE6;&#x59CB;&#xFF1A;&#x539F;&#x59CB;&#x56FE;&#xFF0C;&#x8F6C;&#x4E3A;HSV&#x8272;&#x57DF;&#x540E;&#x7684;&#x56FE;&#xFF0C;&#x8FDB;&#x884C;&#x63A9;&#x6A21;&#x540E;&#x7684;&#x56FE;&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x6211;&#x7684;&#x4E5F;&#x5728;&#x989C;&#x8272;&#x8303;&#x56F4;&#x5185;&#x3002;&#x57FA;&#x51C6;&#x56FE;&#x8FDB;&#x884C;&#x63A9;&#x6A21;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF08;&#x5168;&#x767D;&#xFF09;&#x3002; &#x7B2C;&#x4E8C;&#x6392;&#x5DE6;&#x59CB;&#xFF1A;&#x5BF9;&#x56FE;&#x50CF;&#x8FDB;&#x884C;&#x53D6;&#x53CD;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x6839;&#x636E;&#x76F4;&#x65B9;&#x56FE;&#x7B97;&#x51FA;&#x7684;&#x6982;&#x7387;&#x56FE;1&#xFF0C;&#x6982;&#x7387;&#x56FE;1&#x548C;&#x63A9;&#x6A21;&#x540E;&#x7684;&#x56FE;&#xFF0C;&#x5373;maks&#x8FDB;&#x884C;&#x76F8;&#x4E0E;&#x540E;&#xFF0C;&#x5F97;&#x5230;&#x7684;&#x6982;&#x7387;&#x56FE;2&#x3002;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x6982;&#x7387;&#x56FE;2&#x5C31;&#x6BD4;&#x8F83;&#x7CBE;&#x786E;&#x4E86;&#x3002; &#x56DE;&#x7B54;&#x95EE;&#x9898;&#x4EC0;&#x4E48;&#x662F;&#x56FE;&#x50CF;&#x7684;&#x76F4;&#x65B9;&#x56FE;&#xFF1F;&#x56FE;&#x50CF;&#x76F4;&#x65B9;&#x56FE;&#xFF08;&#x82F1;&#x8BED;&#xFF1A;Image Histogram&#xFF09;&#x662F;&#x7528;&#x4EE5;&#x8868;&#x793A;&#x6570;&#x5B57;&#x56FE;&#x50CF;&#x4E2D;&#x4EAE;&#x5EA6;&#x5206;&#x5E03;&#x7684;&#x76F4;&#x65B9;&#x56FE;&#xFF0C;&#x6807;&#x7ED8;&#x4E86;&#x56FE;&#x50CF;&#x4E2D;&#x6BCF;&#x4E2A;&#x4EAE;&#x5EA6;&#x503C;&#x7684;&#x50CF;&#x7D20;&#x6570;&#x3002;&#x53EF;&#x4EE5;&#x501F;&#x52A9;&#x89C2;&#x5BDF;&#x8BE5;&#x76F4;&#x65B9;&#x56FE;&#x4E86;&#x89E3;&#x9700;&#x8981;&#x5982;&#x4F55;&#x8C03;&#x6574;&#x4EAE;&#x5EA6;&#x5206;&#x5E03;&#x3002;&#x8FD9;&#x79CD;&#x76F4;&#x65B9;&#x56FE;&#x4E2D;&#xFF0C;&#x6A2A;&#x5750;&#x6807;&#x7684;&#x5DE6;&#x4FA7;&#x4E3A;&#x7EAF;&#x9ED1;&#x3001;&#x8F83;&#x6697;&#x7684;&#x533A;&#x57DF;&#xFF0C;&#x800C;&#x53F3;&#x4FA7;&#x4E3A;&#x8F83;&#x4EAE;&#x3001;&#x7EAF;&#x767D;&#x7684;&#x533A;&#x57DF;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x4E00;&#x5F20;&#x8F83;&#x6697;&#x56FE;&#x7247;&#x7684;&#x56FE;&#x50CF;&#x76F4;&#x65B9;&#x56FE;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x591A;&#x96C6;&#x4E2D;&#x4E8E;&#x5DE6;&#x4FA7;&#x548C;&#x4E2D;&#x95F4;&#x90E8;&#x5206;&#xFF1B;&#x800C;&#x6574;&#x4F53;&#x660E;&#x4EAE;&#x3001;&#x53EA;&#x6709;&#x5C11;&#x91CF;&#x9634;&#x5F71;&#x7684;&#x56FE;&#x50CF;&#x5219;&#x76F8;&#x53CD;&#x3002; &#x8BA1;&#x7B97;&#x673A;&#x89C6;&#x89C9;&#x9886;&#x57DF;&#x5E38;&#x501F;&#x52A9;&#x56FE;&#x50CF;&#x76F4;&#x65B9;&#x56FE;&#x6765;&#x5B9E;&#x73B0;&#x56FE;&#x50CF;&#x7684;&#x4E8C;&#x503C;&#x5316;&#x3002; HSV &#x7A7A;&#x95F4;&#x901A;&#x8FC7;&#x54EA;&#x51E0;&#x4E2A;&#x7EF4;&#x5EA6;&#x8868;&#x8FBE;&#x989C;&#x8272;&#x5206;&#x5E03;HSV &#x4E3A;&#x8272;&#x76F8;&#xFF0C;&#x9971;&#x548C;&#x5EA6;&#xFF0C;&#x660E;&#x5EA6;&#x3002;&#x901A;&#x8FC7;&#x4ED6;&#x4EEC;&#x6765;&#x8868;&#x8FBE;&#x989C;&#x8272;&#x5206;&#x5E03;&#x3002;]]></content>
      <categories>
        <category>智能机器人</category>
      </categories>
      <tags>
        <tag>实验报告</tag>
        <tag>C++</tag>
        <tag>OpenCV</tag>
        <tag>物体检测</tag>
        <tag>掩模</tag>
        <tag>颜色空间</tag>
        <tag>直方图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[智能机器人 HW2]]></title>
    <url>%2F%2Fposts%2F7b01dffb%2F</url>
    <content type="text"><![CDATA[&#x667A;&#x80FD;&#x673A;&#x5668;&#x4EBA;&#x7B2C;&#x4E8C;&#x6B21;&#x4F5C;&#x4E1A; Q1&#x7ED9;&#x51FA;Linux&#x7CFB;&#x7EDF;&#x5B89;&#x88C5;&#x540E;&#x7684;&#x622A;&#x56FE; &#x7ED9;&#x51FA;&#x7CFB;&#x7EDF;&#x6839;&#x76EE;&#x5F55;&#x7684;&#x529F;&#x80FD;&#x8BF4;&#x660E; / &#x4E3A;&#x6839;&#x76EE;&#x5F55;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x76EE;&#x5F55;&#x90FD;&#x6302;&#x5728;&#x5176;&#x4E0B;&#x3002; /bin &#x5305;&#x542B;&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;&#xFF0C;&#x5373;&#x53EF;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x3002;&#x4ED6;&#x4EEC;&#x662F;&#x5F15;&#x5BFC;&#x542F;&#x52A8;&#x6240;&#x9700;&#x7684;&#x547D;&#x4EE4;&#x6216;&#x8005;&#x666E;&#x901A;&#x7528;&#x6237;&#x4F1A;&#x4F7F;&#x7528;&#x7684;&#x547D;&#x4EE4;&#x3002;bin&#x662F;binary&#x7684;&#x7B80;&#x79F0;&#x3002;&#x6545;&#x8BE5;&#x76EE;&#x5F55;&#x5B58;&#x653E;&#x7684;&#x90FD;&#x662F;&#x4E8C;&#x8FDB;&#x5236;&#x53EF;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x3002; /boot &#x8BE5;&#x76EE;&#x5F55;&#x5B58;&#x653E;&#x5F15;&#x5BFC;&#x52A0;&#x8F7D;&#x5668;(bootstraploader)&#x4F7F;&#x7528;&#x7684;&#x6587;&#x4EF6;&#x3002; /cdrom &#x8BE5;&#x76EE;&#x5F55;&#x5728;&#x521A;&#x5B89;&#x88C5;&#x7CFB;&#x7EDF;&#x7684;&#x65F6;&#x5019;&#x662F;&#x7A7A;&#x7684;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x5149;&#x9A71;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x6302;&#x5728;&#x8FD9;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B; /dev&#x5B58;&#x653E;&#x8BBE;&#x5907;&#x6587;&#x4EF6;&#xFF0C;&#x5373;&#x8BBE;&#x5907;&#x9A71;&#x52A8;&#x7A0B;&#x5E8F;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x8FD9;&#x4E9B;&#x6587;&#x4EF6;&#x6765;&#x8BBF;&#x95EE;&#x5916;&#x8BBE;&#x3002; /etc&#x8BE5;&#x76EE;&#x5F55;&#x5B58;&#x653E;&#x5404;&#x79CD;&#x7CFB;&#x7EDF;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x3002;&#x4F8B;&#x5982;&#xFF1A;./etc/passwd &#x5B58;&#x653E;&#x7528;&#x6237;&#x6570;&#x636E;&#x5E93;&#xFF0C;&#x5176;&#x4E2D;&#x7684;&#x57DF;&#x7ED9;&#x51FA;&#x4E86;&#x7528;&#x6237;&#x540D;&#x3001;&#x771F;&#x5B9E;&#x59D3;&#x540D;&#x3001;&#x7528;&#x6237;&#x8D77;&#x59CB;&#x76EE;&#x5F55;&#x3001;&#x52A0;&#x5BC6;&#x53E3;&#x4EE4;&#x548C;&#x7528;&#x6237;&#x7684;&#x5176;&#x4ED6;&#x4FE1;&#x606F;&#xFF1B;/etc/group &#x8BF4;&#x660E;&#x7EC4;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5305;&#x62EC;&#x7EC4;&#x7684;&#x5404;&#x79CD;&#x6570;&#x636E;&#xFF1B;/etc/fstab &#x5B9A;&#x542F;&#x52A8;&#x65F6;&#x9700;&#x8981;&#x81EA;&#x52A8;&#x5B89;&#x88C5;&#x7684;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#x5217;&#x8868;&#x3002;&#x4E5F;&#x5305;&#x62EC;&#x7528;swapon -a&#x542F;&#x7528;&#x7684;swap&#x533A;&#x7684;&#x4FE1;&#x606F;&#x3002; /home&#x7528;&#x6237;&#x4E3B;&#x76EE;&#x5F55;&#xFF0C;&#x4EE5;&#x767B;&#x5F55;&#x7528;&#x6237;&#x540D;&#x4F5C;&#x4E3A;&#x6587;&#x4EF6;&#x5939;&#x540D;&#x7684;&#x5404;&#x6587;&#x4EF6;&#x5939;&#x3002; /lib&#x5B58;&#x653E;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x65F6;&#x6240;&#x9700;&#x8981;&#x7684;&#x5E93;&#x6587;&#x4EF6;&#x3002; /media&#x5A92;&#x4F53;&#x6587;&#x4EF6;&#x3002; /mnt&#x5B89;&#x88C5;&#x8F6F;&#x76D8;&#xFF0C;&#x5149;&#x76D8;&#xFF0C;u&#x76D8;&#x7684;&#x6302;&#x8F7D;&#x70B9; /opt&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x5B58;&#x653E;&#x90A3;&#x4E9B;&#x53EF;&#x9009;&#x7684;&#x7A0B;&#x5E8F;&#x3002;&#x6BD4;&#x5982;FireFox&#x7684;&#x6D4B;&#x8BD5;&#x7248;&#x3002; /proc&#x662F;&#x4E00;&#x4E2A;&#x865A;&#x62DF;&#x76EE;&#x5F55;&#xFF0C;&#x5B58;&#x653E;&#x5F53;&#x524D;&#x5185;&#x5B58;&#x7684;&#x6620;&#x50CF;&#xFF0C;&#x7531;&#x5185;&#x6838;&#x81EA;&#x52A8;&#x4EA7;&#x751F; /root&#x8D85;&#x7EA7;&#x7528;&#x6237;&#x7684;&#x4E2A;&#x4EBA;&#x4E3B;&#x76EE;&#x5F55; /run&#x662F;&#x4E00;&#x4E2A;&#x4E34;&#x65F6;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#xFF0C;&#x5B58;&#x50A8;&#x7CFB;&#x7EDF;&#x542F;&#x52A8;&#x4EE5;&#x6765;&#x7684;&#x4FE1;&#x606F;&#x3002;&#x5F53;&#x7CFB;&#x7EDF;&#x91CD;&#x542F;&#x65F6;&#xFF0C;&#x8FD9;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x6587;&#x4EF6;&#x5E94;&#x8BE5;&#x88AB;&#x5220;&#x6389;&#x6216;&#x6E05;&#x9664;&#x3002; /sbin&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x547D;&#x4EE4;&#xFF0C;&#x5B58;&#x653E;&#x7684;&#x662F;&#x7CFB;&#x7EDF;&#x7BA1;&#x7406;&#x5458;&#x4F7F;&#x7528;&#x7684;&#x7BA1;&#x7406;&#x7A0B;&#x5E8F;&#x3002; /snap&#x5B58;&#x50A8;&#x7684;&#x662F;snap&#x7A0B;&#x5E8F;&#x7684;&#x8BBE;&#x7F6E;&#x4FE1;&#x606F;&#x3002; /srv&#x201C;service&#x201D;&#x7684;&#x7F29;&#x5199;&#xFF0C;&#x662F;&#x4E00;&#x4E9B;&#x7F51;&#x7EDC;&#x670D;&#x52A1;&#x542F;&#x52A8;&#x540E;&#xFF0C;&#x8FD9;&#x4E9B;&#x670D;&#x52A1;&#x6240;&#x9700;&#x8981;&#x53D6;&#x7528;&#x7684;&#x6570;&#x636E;&#x76EE;&#x5F55;&#x3002;&#x5E38;&#x89C1;&#x7684;&#x670D;&#x52A1;&#x4F8B;&#x5982; WWW&#xFF0C;FTP &#x7B49;&#x3002; /sys&#x865A;&#x62DF;&#x6587;&#x4EF6;&#x7CFB;&#x7EDF;&#xFF0C;&#x4E3B;&#x8981;&#x8BB0;&#x5F55;&#x4E0E;&#x5185;&#x6838;&#x76F8;&#x5173;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5305;&#x62EC;&#x76EE;&#x524D;&#x5DF2;&#x52A0;&#x8F7D;&#x7684;&#x5185;&#x6838;&#x6A21;&#x5757;&#x4E0E;&#x5185;&#x6838;&#x68C0;&#x6D4B;&#x5230;&#x7684;&#x786C;&#x4EF6;&#x8BBE;&#x5907;&#x4FE1;&#x606F;&#xFF0C;&#x540C;&#x6837;&#x4E0D;&#x5360;&#x786C;&#x76D8;&#x5BB9;&#x91CF;&#x3002; /tmp&#x4E00;&#x822C;&#x7528;&#x6237;&#x6216;&#x8005;&#x662F;&#x6B63;&#x5728;&#x6267;&#x884C;&#x7684;&#x7A0B;&#x5E8F;&#x6682;&#x65F6;&#x653E;&#x7F6E;&#x6587;&#x4EF6;&#x7684;&#x5730;&#x65B9;&#x3002; /usr&#x5168;&#x7A0B;&#x4E3A;UNIX Software Resource. &#x201C;Unix &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x8F6F;&#x4EF6;&#x8D44;&#x6E90;&#x201D; &#x6240;&#x653E;&#x7F6E;&#x7684;&#x76EE;&#x5F55;&#xFF0C;&#x4E0D;&#x662F;&#x7528;&#x6237;&#x6570;&#x636E;&#x3002;FHS &#x5EFA;&#x8BAE;&#x6240;&#x6709;&#x7684;&#x8F6F;&#x4EF6;&#x5F00;&#x53D1;&#x8005;&#x5E94;&#x8BE5;&#x5C06;&#x4ED6;&#x4EEC;&#x7684;&#x6570;&#x636E;&#x5408;&#x7406;&#x7684;&#x653E;&#x7F6E;&#x5230;&#x8FD9;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x5B50;&#x76EE;&#x5F55;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x81EA;&#x884C;&#x65B0;&#x5EFA;&#x8BE5;&#x8F6F;&#x4EF6;&#x81EA;&#x5DF1;&#x72EC;&#x7ACB;&#x7684;&#x76EE;&#x5F55;&#x3002; /var&#x4E3B;&#x8981;&#x5B58;&#x653E;&#x5E38;&#x6001;&#x6027;&#x53D8;&#x52A8;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5305;&#x62EC;&#x7F13;&#x5B58;&#xFF0C;&#x767B;&#x5F55;&#x6587;&#x4EF6;&#x4EE5;&#x53CA;&#x8F6F;&#x4EF6;&#x8FD0;&#x884C;&#x6240;&#x4EA7;&#x751F;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x7CFB;&#x7EDF;&#x4E00;&#x822C;&#x8FD0;&#x884C;&#x65F6;&#x8981;&#x6539;&#x53D8;&#x7684;&#x6570;&#x636E;&#x3002;&#x901A;&#x5E38;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x6240;&#x5728;&#x7684;&#x76EE;&#x5F55;&#x7684;&#x5927;&#x5C0F;&#x662F;&#x8981;&#x7ECF;&#x5E38;&#x53D8;&#x5316;&#x6216;&#x6269;&#x5145;&#x7684;&#x3002; Q2&#x5B8C;&#x6574;&#x6587;&#x4EF6; &#x6587;&#x4EF6;&#x7ED3;&#x6784;&#x6839;&#x76EE;&#x5F55;&#x4E0B;&#x5305;&#x62EC;&#x4E09;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#xFF1A;include&#x3001;src&#x3001;build&#xFF0C;&#x5176;&#x4E2D;build&#x4E3A;&#x7A7A;&#x3002;&#x53E6;&#x6709;&#x4E00;&#x4E2A;CMakeLists.txt&#x3002; ./CMakeLists.txt&#x5185;&#x5BB9;&#xFF1A;1234#&#x8BBE;&#x5B9A;&#x5DE5;&#x7A0B;&#x540D;&#x5B57;PROJECT(Robot_HW2)#&#x6DFB;&#x52A0;&#x5B50;&#x76EE;&#x5F55;ADD_SUBDIRECTORY(src include) /include&#x6587;&#x4EF6;&#x5939;&#x5185;&#x5BB9;&#xFF1B;&#x6709;&#x4E00;&#x4E2A;hello.h&#x3002; ./include/hello.h&#x5185;&#x5BB9;&#x4E3A;12#pragma oncevoid sayHello(); /src&#x6587;&#x4EF6;&#x5939;&#x5185;&#x5BB9;&#xFF1A;&#x4E24;&#x4E2A;.c&#x6587;&#x4EF6;&#xFF0C;&#x4E00;&#x4E2A;CMakeLists.txt&#x3002;./src/CMakeLists.txt&#x7684;&#x5185;&#x5BB9;&#x4E3A;&#xFF1A;123456789101112131415161718PROJECT(Robot_HW2)#&#x53C2;&#x8003;&#x793A;&#x4F8B;&#x4EE3;&#x7801;&#xFF0C;&#x7F16;&#x8BD1; include/hello.h &#x548C; src/hello.c &#x6784;&#x6210; libhello.so &#x5E93;&#x3002;#&#x6DFB;&#x52A0;include&#x7684;&#x5730;&#x5740;INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/include)SET(LIBHELLO_SRC hello.c)ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})#&#x8BBE;&#x7F6E;&#x5B58;&#x653E;&#x5730;&#x5740;SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)#&#x2F42;&#x4EF6; useHello.c &#x4E2D;&#x542B;&#x6709;&#x2F00;&#x4E2A; main &#x51FD;&#x6570;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x7F16;&#x8BD1;&#x6210;&#x2F00;&#x4E2A;&#x53EF;&#x6267;&#x2F8F;&#x2F42;&#x4EF6;&#xFF0C;&#x540D;&#x4E3A;&#x201C;sayhello&#x201D;&#x3002;#&#x4E8C;&#x8FDB;&#x5236;&#x6587;&#x4EF6;ADD_EXECUTABLE(sayhello useHello.c hello.c)#&#x8BBE;&#x7F6E;&#x5B58;&#x653E;&#x5730;&#x5740;SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/bin)#&#x5B89;&#x88C5;#hello.h &#x653E;&#x2F84;/usr/local/include/&#x4E0B;&#xFF0C;&#x5C06; libhello.so &#x653E;&#x2F84;/usr/local/lib/&#x4E0B;#CMAKE_INSTALL_PREFIX &#x7684;&#x9ED8;&#x8BA4;&#x5B9A;&#x4E49;&#x662F;/usr/localINSTALL(FILES ${CMAKE_SOURCE_DIR}/include/hello.h DESTINATION include)INSTALL(TARGETS hello LIBRARY DESTINATION /usr/local/lib) ./src/hello.c&#x7684;&#x5185;&#x5BB9;&#x4E3A;&#xFF1A;1234567#include &quot;hello.h&quot;#include &lt;stdio.h&gt;void sayHello(){ printf(&quot;Hello\n&quot;);} ./src/useHello.c&#x7684;&#x5185;&#x5BB9;&#x4E3A;&#xFF1A;12345#include &quot;hello.h&quot;int main( int argc, char** argv ) { sayHello();} &#x8FD0;&#x884C;&#x53CA;&#x7ED3;&#x679C;&#x5728;build&#x76EE;&#x5F55;&#x4E0B;&#x6267;&#x884C;&#x547D;&#x4EE4;1cmake .. &#x7ED3;&#x679C;&#x5982;&#x56FE; &#x6267;&#x884C;1sudo make install &#x4E4B;&#x540E;&#xFF0C;&#x7ED3;&#x679C;&#x5982;&#x56FE; &#x67E5;&#x770B;&#x5728;./lib&#x4E0B;&#x751F;&#x6210;&#x7684;libhello.so&#x6587;&#x4EF6; &#x8FD0;&#x884C;&#x5728;./bin&#x4E0B;&#x7684;sayhello&#x6587;&#x4EF6; &#x67E5;&#x770B;&#x88AB;&#x5B89;&#x88C5;&#x7684;&#x5934;&#x6587;&#x4EF6;&#x548C;&#x5E93;&#x6587;&#x4EF6; Q3&#x7ED9;&#x51FA;&#x9F50;&#x6B21;&#x5750;&#x6807;&#x77E9;&#x9635;&#x3001;&#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x3001;&#x6B27;&#x62C9;&#x89D2;&#x3001;&#x56DB;&#x5143;&#x6570;&#x8FD9;&#x56DB;&#x4E2A;&#x5E38;&#x7528;&#x59FF;&#x6001;&#x63CF;&#x8FF0;&#x53D8;&#x91CF;&#x7684;&#x6570;&#x636E;&#x5B9A;&#x4E49; &#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x65B9;&#x5411;&#x4E3A;&#x65CB;&#x8F6C;&#x8F74;&#xFF0C;&#x957F;&#x5EA6;&#x4E3A;&#x65CB;&#x8F6C;&#x8FC7;&#x7684;&#x89D2;&#x5EA6;&#x3002;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF1A;AngleAxis&#x3002;&#x7531;&#x4E8E;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x662F;double&#xFF0C;&#x6240;&#x4EE5;&#x63D0;&#x4F9B;typedef&#xFF1A;1typedef AngleAxis&lt;double&gt; AngleAxisd; &#x5BF9;&#x4E8E;AngleAxis&#x7684;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718192021class AngleAxis : public RotationBase&lt;AngleAxis&lt;_Scalar&gt;,3&gt;{ typedef RotationBase&lt;AngleAxis&lt;_Scalar&gt;,3&gt; Base;public: using Base::operator*; enum { Dim = 3 }; /** the scalar type of the coefficients */ typedef _Scalar Scalar; typedef Matrix&lt;Scalar,3,3&gt; Matrix3; typedef Matrix&lt;Scalar,3,1&gt; Vector3; typedef Quaternion&lt;Scalar&gt; QuaternionType;protected: Vector3 m_axis; Scalar m_angle;.... &#x7701;&#x7565;&#x8FDB;&#x4E00;&#x6B65;&#x9012;&#x5F52;&#x67E5;&#x770B;&#x5143;&#x7D20;&#x5185;&#x5BB9;&#x3002; &#x4EE5;&#x4F8B;&#x7A0B;&#x4E2D;&#x7684;12Eigen::AngleAxisd rotation_vector(M_PI / 4, Eigen::Vector3d(0, 0, 1)); //&#x6CBF; Z &#x8F74;&#x65CB;&#x8F6C; 45 &#x5EA6; &#x4E3A;&#x4F8B;&#x3002; &#x6267;&#x884C;&#x540E;&#xFF0C;&#x5728;m_angle&#x4E2D;&#x5B58;&#x653E;&#x7684;&#x662F;&#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x4F8B;&#x7A0B;&#x4E2D;&#x5B9A;&#x4E49;&#x7684;&#x662F;M_PI/4&#xFF0C;&#x5373;&#x65CB;&#x8F6C;&#x4E86;45&#x5EA6;&#x3002;&#x65CB;&#x8F6C;&#x8F74;&#x662F;(0,0,1)&#xFF0C;&#x5373;Z&#x8F74;&#x3002;&#x5B58;&#x653E;&#x5728;m_axis-&gt;m_storage-&gt;m_data&#x4E2D;&#x3002; &#x901A;&#x8FC7;&#x8C03;&#x7528;.matrix()&#x51FD;&#x6570;&#xFF0C;&#x628A;&#x65CB;&#x8F6C;&#x5411;&#x91CF;&#x8F6C;&#x4E3A;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#xFF0C;&#x7531;&#x4E8E;&#x53EA;&#x662F;&#x5355;&#x7EAF;&#x7684;&#x65CB;&#x8F6C;&#xFF0C;&#x4E0D;&#x6D89;&#x53CA;&#x5E73;&#x79FB;&#x53D8;&#x6362;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x7ED5;Z&#x8F74;&#x65CB;&#x8F6C;&#x7684;&#x516C;&#x5F0F;&#x662F;&#xFF1A; &#x8FD9;&#x91CC;$\theta=45&#xB0;$&#x3002;&#x56E0;&#x6B64;&#x7ED3;&#x679C;&#x5982;&#x56FE;&#xFF1A; &#x65CB;&#x8F6C;&#x65B9;&#x5411;&#x7684;&#x5224;&#x5B9A;&#xFF1A;&#x53F3;&#x624B;&#x5927;&#x62C7;&#x6307;&#x4E3A;&#x8F74;&#xFF0C;&#x56DB;&#x4E2A;&#x624B;&#x6307;&#x5934;&#x6307;&#x5411;&#x7684;&#x65B9;&#x5411;&#x4E3A;&#x65CB;&#x8F6C;&#x65B9;&#x5411;&#xFF08;&#x6211;&#x6CA1;&#x67E5;&#x5230;&#x8FD9;&#x4E2A;&#x5B9A;&#x7406;&#x53EB;&#x4EC0;&#x4E48;&#xFF09;&#x3002;&#x5373;&#xFF0C;&#x6240;&#x7ED5;&#x7684;&#x65CB;&#x8F6C;&#x8F74;&#x662F;&#x6709;&#x65B9;&#x5411;&#x7684;&#x3002; &#x6B27;&#x62C9;&#x89D2;&#x5C06;&#x65CB;&#x8F6C;&#x5206;&#x89E3;&#x4E3A;&#x4E09;&#x4E2A;&#x65B9;&#x5411;&#x4E0A;&#x7684;&#x8F6C;&#x52A8;&#xFF0C;&#x6700;&#x5E38;&#x7528;&#x7684;&#x662F;ZYX&#x987A;&#x5E8F;&#xFF0C;&#x5373;roll pitch yaw&#x987A;&#x5E8F;&#x3002; &#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x5B9A;&#x4E49;&#xFF1A;1typedef Eigen::Matrix&lt;double,3,1&gt; Eigen::Vector3d &#x5373;&#x662F;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x90FD;&#x662F;double&#x7C7B;&#x578B;&#xFF0C;3*1&#x7684;&#x77E9;&#x9635;&#x3002; 1rotation_matrix.eulerAngles(2, 1, 0); &#x662F;&#x5C06;&#x4E00;&#x4E2A;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x6309;Z-Y-X&#x7684;&#x987A;&#x5E8F;&#x8F6C;&#x6362;&#x6210;&#x4E00;&#x4E2A;&#x6B27;&#x62C9;&#x89D2;&#x3002; &#x77E9;&#x9635;&#x4E2D;&#x4E09;&#x4E2A;&#x53C2;&#x6570;&#x8868;&#x793A;&#x5728;&#x8BE5;&#x65CB;&#x8F6C;&#x8F74;&#x4E0A;&#x65CB;&#x8F6C;&#x7684;&#x89D2;&#x5EA6;&#xFF0C;&#x91C7;&#x7528;&#x5F27;&#x5EA6;&#x5236;&#x3002;&#x5373;180&#xB0;=&#x3C0;&#x3002; &#x56DB;&#x5143;&#x6570;&#x57FA;&#x672C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#xFF1A;Quaternion&#x3002;&#x7531;&#x4E8E;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x662F;double&#xFF0C;&#x6240;&#x4EE5;&#x63D0;&#x4F9B;typedef&#xFF1A;1typedef Quaternion&lt;double&gt; Quaterniond; &#x5BF9;&#x4E8E;Quaternion&#x7684;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A;123456789101112class Quaternion : public QuaternionBase&lt;Quaternion&lt;_Scalar,_Options&gt; &gt;{public: typedef QuaternionBase&lt;Quaternion&lt;_Scalar,_Options&gt; &gt; Base; enum { NeedsAlignment = internal::traits&lt;Quaternion&gt;::Alignment&gt;0 }; typedef _Scalar Scalar; EIGEN_INHERIT_ASSIGNMENT_OPERATORS(Quaternion) using Base::operator*=;.... &#x5B9A;&#x4E49;&#x53D8;&#x91CF;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x628A;&#x4E00;&#x4E2A;&#x4E09;&#x7EF4;&#x65CB;&#x8F6C;&#x5411;&#x91CF;/&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x8D4B;&#x503C;&#x7ED9;&#x56DB;&#x5143;&#x6570;&#x3002;&#x5373;&#x5982;&#x4E0B;&#xFF1A;1234// &#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x628A;AngleAxis&#x8D4B;&#x503C;&#x7ED9;&#x56DB;&#x5143;&#x6570;&#xFF0C;&#x53CD;&#x4E4B;&#x4EA6;&#x7136;Eigen::Quaterniond q = Eigen::Quaterniond(rotation_vector);// &#x4E5F;&#x53EF;&#x4EE5;&#x628A;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x8D4B;&#x7ED9;&#x5B83;q = Eigen::Quaterniond(rotation_matrix); &#x56DB;&#x5143;&#x6570;&#x8F6C;&#x4E09;&#x7EF4;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x7684;&#x5173;&#x7CFB;&#x4E3A;&#xFF1A;&#x4E09;&#x7EF4;&#x77E9;&#x9635;&#x8F6C;&#x56DB;&#x5143;&#x6570;&#x7684;&#x5173;&#x7CFB;&#x4E3A;&#xFF1A; &#x4F7F;&#x7528;&#x56DB;&#x5143;&#x6570;&#x53D8;&#x6362;&#x4E00;&#x4E2A;&#x4E09;&#x7EF4;&#x5411;&#x91CF;&#xFF0C;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x91CD;&#x8F7D;&#x7684;&#x4E58;&#x6CD5;&#x5373;&#x53EF;&#xFF1A;12// &#x4F7F;&#x7528;&#x56DB;&#x5143;&#x6570;&#x65CB;&#x8F6C;&#x4E00;&#x4E2A;&#x5411;&#x91CF;&#xFF0C;&#x4F7F;&#x7528;&#x91CD;&#x8F7D;&#x7684;&#x4E58;&#x6CD5;&#x5373;&#x53EF;v_rotated = q * v; // &#x6CE8;&#x610F;&#x6570;&#x5B66;&#x4E0A;&#x662F;qvq^{-1} &#x5176;&#x4E2D;v&#x662F;&#x4E00;&#x4E2A;&#x4E09;&#x7EF4;&#x5411;&#x91CF;(1,0,0)&#xFF0C;&#x5373;&#x5B9A;&#x4E49;&#x4E3A;&#xFF1A;1Eigen::Vector3d v(1, 0, 0); &#x9F50;&#x6B21;&#x5750;&#x6807;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x5B9A;&#x4E49;&#xFF1A;1typedef Eigen::Transform&lt;double,3,1&gt; Eigen::Isometry3d Transform&#x7684;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#xFF1A;123456789101112131415161718192021template&lt;typename _Scalar, int _Dim, int _Mode, int _Options&gt;class Transform{public: EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE(_Scalar, _Dim==Dynamic ? Dynamic : (_Dim+1)*(_Dim+1)) enum { Mode = _Mode, Options = _Options, Dim = _Dim, ///&lt; space dimension in which the transformation holds HDim = _Dim+1, ///&lt; size of a respective homogeneous vector Rows = int(Mode)==(AffineCompact) ? Dim : HDim };...protected: MatrixType m_matrix;... &#x521D;&#x59CB;&#x5316;&#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#xFF1A;1Eigen::Isometry3d T = Eigen::Isometry3d::Identity(); &#x8BE5;&#x8BED;&#x53E5;&#x5C06;&#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#x53D8;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x4E3B;&#x5BF9;&#x89D2;&#x7EBF;&#x4E3A;1&#xFF0C;&#x5176;&#x4F59;&#x4E3A;0&#x7684;4*4&#x7684;&#x77E9;&#x9635;&#x3002; &#x8D4B;&#x503C;&#x64CD;&#x4F5C;&#xFF1A;12T.rotate(rotation_vector); // &#x6309;&#x7167;rotation_vector&#x8FDB;&#x884C;&#x65CB;&#x8F6C;T.pretranslate(Eigen::Vector3d(1, 3, 4)); // &#x628A;&#x5E73;&#x79FB;&#x5411;&#x91CF;&#x8BBE;&#x6210;(1,3,4) &#x5373;&#x65CB;&#x8F6C;&#x8F74;&#x53CA;&#x65CB;&#x8F6C;&#x89D2;&#x7531;&#x4E4B;&#x524D;&#x7684;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#x6240;&#x5B9A;&#x4E49;&#xFF0C;&#x8F74;&#x662F;Z&#x6B63;&#x65B9;&#x5411;&#xFF0C;&#x503C;&#x662F;&#x3C0;/4&#x3002; &#x5E73;&#x79FB;&#x5411;&#x91CF;&#x8D4B;&#x503C;&#x4E3A;(1,3,4)&#x3002; &#x5219;&#x8FDB;&#x884C;&#x53D8;&#x6362;&#x4E3A;1Eigen::Vector3d v_transformed = T * v; // &#x76F8;&#x5F53;&#x4E8E;R*v+t Q3_2&#x8FD0;&#x884C;&#x622A;&#x56FE; Q4&#x5185;&#x5B58;&#x5360;&#x7528; 3&#x7EF4;&#x65CB;&#x8F6C;&#x5411;&#x91CF;&#xFF1A;32&#x5B57;&#x8282; &#x9F50;&#x6B21;&#x53D8;&#x6362;&#x77E9;&#x9635;&#xFF1A;128&#x5B57;&#x8282; &#x6B27;&#x62C9;&#x89D2;&#xFF1A;24&#x5B57;&#x8282; &#x56DB;&#x5143;&#x6570;&#xFF1A;32&#x5B57;&#x8282; &#x4E09;&#x7EF4;&#x65CB;&#x8F6C;&#x77E9;&#x9635;&#xFF1A;72&#x5B57;&#x8282; &#x5176;&#x4E2D;&#xFF0C;&#x5143;&#x7D20;&#x7C7B;&#x578B;&#x5747;&#x4E3A;double&#x7C7B;&#x578B;&#x3002; &#x52A8;&#x6001;&#x5E93;&#x4E0E;&#x9759;&#x6001;&#x5E93;&#x7684;&#x533A;&#x522B;&#x4E8C;&#x8005;&#x7684;&#x4E0D;&#x540C;&#x70B9;&#x5728;&#x4E8E;&#x4EE3;&#x7801;&#x88AB;&#x8F7D;&#x5165;&#x7684;&#x65F6;&#x523B;&#x4E0D;&#x540C;&#x3002; &#x9759;&#x6001;&#x5E93;&#x5728;&#x7A0B;&#x5E8F;&#x7F16;&#x8BD1;&#x65F6;&#x4F1A;&#x88AB;&#x8FDE;&#x63A5;&#x5230;&#x76EE;&#x6807;&#x4EE3;&#x7801;&#x4E2D;&#xFF0C;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x65F6;&#x5C06;&#x4E0D;&#x518D;&#x9700;&#x8981;&#x8BE5;&#x9759;&#x6001;&#x5E93;&#x3002;&#x52A8;&#x6001;&#x5E93;&#x5728;&#x7A0B;&#x5E8F;&#x7F16;&#x8BD1;&#x65F6;&#x5E76;&#x4E0D;&#x4F1A;&#x88AB;&#x8FDE;&#x63A5;&#x5230;&#x76EE;&#x6807;&#x4EE3;&#x7801;&#x4E2D;&#xFF0C;&#x800C;&#x662F;&#x5728;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x662F;&#x624D;&#x88AB;&#x8F7D;&#x5165;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x65F6;&#x8FD8;&#x9700;&#x8981;&#x52A8;&#x6001;&#x5E93;&#x5B58;&#x5728;&#x3002;&#x5982;&#x679C;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x5982;&#x679C;&#x8C03;&#x7528;&#x76F8;&#x540C;&#x7684;&#x52A8;&#x6001;&#x5E93;,&#x90A3;&#x4E48;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x53EA;&#x9700;&#x8981;&#x6709;&#x4E00;&#x4EFD;&#x8BE5;&#x52A8;&#x6001;&#x5E93;(&#x5171;&#x4EAB;&#x5E93;)&#x7684;&#x5B9E;&#x4F8B;&#x3002; main&#x7684;&#x4E24;&#x4E2A;&#x53C2;&#x6570;argc&#x548C;argv&#x7528;&#x4E8E;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x628A;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x4F20;&#x5165;&#x4E3B;&#x7A0B;&#x5E8F;&#x3002;&#x5176;&#x4E2D;ARG&#x662F;&#x6307;arguments&#xFF0C;&#x5373;&#x53C2;&#x6570;&#x3002; int argc&#xFF1A;&#x82F1;&#x6587;&#x540D;&#x4E3A;arguments count(&#x53C2;&#x6570;&#x8BA1;&#x6570;)count of cmd line args&#xFF0C;&#x8FD0;&#x884C;&#x7A0B;&#x5E8F;&#x4F20;&#x9001;&#x7ED9;main&#x51FD;&#x6570;&#x7684;&#x547D;&#x4EE4;&#x884C;&#x53C2;&#x6570;&#x603B;&#x4E2A;&#x6570;&#xFF0C;&#x5305;&#x62EC;&#x53EF;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x540D;&#xFF0C;&#x5176;&#x4E2D;&#x5F53;argc=1&#x65F6;&#x8868;&#x793A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x540D;&#x79F0;&#xFF0C;&#x6B64;&#x65F6;&#x5B58;&#x50A8;&#x5728;argv[0]&#x4E2D;&#x3002; char **argv&#xFF1A;&#x82F1;&#x6587;&#x540D;&#x4E3A;arguments value/vector(&#x53C2;&#x6570;&#x503C;)pointer to table of cmd line args&#xFF0C;&#x5B57;&#x7B26;&#x4E32;&#x6570;&#x7EC4;&#xFF0C;&#x7528;&#x6765;&#x5B58;&#x653E;&#x6307;&#x5411;&#x5B57;&#x7B26;&#x4E32;&#x53C2;&#x6570;&#x7684;&#x6307;&#x9488;&#x6570;&#x7EC4;&#xFF0C;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x6307;&#x5411;&#x4E00;&#x4E2A;&#x53C2;&#x6570;&#xFF0C;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x53C2;&#x6570;&#xFF0C;&#x5176;&#x957F;&#x5EA6;&#x4E3A;argc&#x3002;&#x6570;&#x7EC4;&#x4E0B;&#x6807;&#x4ECE;0&#x5F00;&#x59CB;,argv[argc]=NULL&#x3002; argv[0] &#x6307;&#x5411;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x65F6;&#x7684;&#x5168;&#x8DEF;&#x5F84;&#x540D;argv[1] &#x6307;&#x5411;&#x7A0B;&#x5E8F;&#x5728;DOS&#x547D;&#x4EE4;&#x4E2D;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x540D;&#x540E;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;argv[2] &#x6307;&#x5411;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x540D;&#x540E;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x2026;&#x2026;argv[argc] &#x4E3A;NULL&#x3002; TODO &#x6DFB;&#x52A0;&#x4F5C;&#x4E1A;&#x8BE6;&#x7EC6;&#x8BF4;&#x660E;&#x3002; &#x6DFB;&#x52A0;Cmake&#x5B66;&#x4E60;&#x6587;&#x6863;&#x3002;]]></content>
      <categories>
        <category>智能机器人</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Eigen</tag>
        <tag>C++</tag>
        <tag>Cmake</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy笔记]]></title>
    <url>%2F%2Fposts%2Fd169ac38%2F</url>
    <content type="text"><![CDATA[numpy&#x7B14;&#x8BB0;&#x5408;&#x96C6;&#xFF0C;&#x5177;&#x4F53;&#x5C0F;&#x95EE;&#x9898;&#x4EE5;&#x4E00;&#x7EA7;&#x6807;&#x9898;&#x7ED9;&#x51FA;&#x3002; arrayarray&#x662F;&#x5C06;&#x4E00;&#x4E2A;&#x5217;&#x8868;&#x8F6C;&#x4E3A;numpy&#x7684;&#x6570;&#x7EC4;&#x3002; &#x4F8B;&#x5B50;&#xFF1A;12a=np.array([[1,2],[1,2],[2,3]])print(a) &#x8F93;&#x51FA;&#xFF1A;123[[1 2] [1 2][2 3]] shapeshape&#x662F;&#x8F93;&#x51FA;&#x6570;&#x7EC4;&#x7684;&#x683C;&#x5F0F;&#x3002;1234a=np.array([[1,2],[1,2],[2,3]])print(a.shape)print(a.shape[0])print(a.shape[1]) &#x8F93;&#x51FA;123(3, 2)32 ones&#x6784;&#x5EFA;&#x5143;&#x7D20;&#x90FD;&#x662F;1&#x7684;&#x6570;&#x7EC4;&#x3002;123a=np.array([[1,2],[1,2],[2,3]])b=np.ones((a.shape[0],1))print(b) &#x8F93;&#x51FA;123[[1.] [1.][1.]] concatenate&#x5408;&#x5E76;&#x6570;&#x7EC4;&#xFF0C;&#x53C2;&#x6570;&#x8868;&#x793A;&#x5408;&#x5E76;&#x7684;&#x7EF4;&#x5EA6;&#x3002;1234a = np.array([[1, 2], [3, 4]])b = np.array([[5, 6]])c = np.concatenate((a, b), axis=0)print(c) &#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x628A;a,b&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#xFF0C;&#x5728;&#x4E00;&#x7EF4;&#x4E0A;&#x8FDB;&#x884C;&#x5408;&#x5E76;&#x3002; &#x8F93;&#x51FA;123[[1 2] [3 4] [5 6]] argmaxnumpy.argmax(a, axis=None, out=None) &#x8FD4;&#x56DE;&#x6CBF;&#x8F74;axis&#x6700;&#x5927;&#x503C;&#x7684;&#x7D22;&#x5F15;&#x3002; &#x53C2;&#x6570;&#x5982;&#x4E0B;&#xFF1A; a : array_like &#x6570;&#x7EC4; axis : int, &#x53EF;&#x9009; &#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x7D22;&#x5F15;&#x7684;&#x662F;&#x5E73;&#x94FA;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x5426;&#x5219;&#x6CBF;&#x6307;&#x5B9A;&#x7684;&#x8F74;&#x3002; out : array, &#x53EF;&#x9009; &#x5982;&#x679C;&#x63D0;&#x4F9B;&#xFF0C;&#x7ED3;&#x679C;&#x4EE5;&#x5408;&#x9002;&#x7684;&#x5F62;&#x72B6;&#x548C;&#x7C7B;&#x578B;&#x88AB;&#x63D2;&#x5165;&#x5230;&#x6B64;&#x6570;&#x7EC4;&#x4E2D;&#x3002; &#x8FD4;&#x56DE;&#x503C; index_array : ndarray of ints &#x7D22;&#x5F15;&#x6570;&#x7EC4;&#x3002;&#x5B83;&#x5177;&#x6709;&#x4E0E;a.shape&#x76F8;&#x540C;&#x7684;&#x5F62;&#x72B6;&#xFF0C;&#x5176;&#x4E2D;axis&#x88AB;&#x79FB;&#x9664;&#x3002; &#x4F8B;&#x5B50;1234567891011121314151617a = np.array([ [ [1, 5, 5, 2], [9, -6, 2, 8], [-3, 7, -9, 1] ], [ [-1, 5, -5, 2], [9, 6, 2, 8], [3, 7, 9, 1] ] ])t1=np.argmax(a,axis=0)t2=np.argmax(a,axis=1)t3=np.argmax(a,axis=2) &#x8FD9;&#x91CC;&#x7684;a&#x7684;shape&#x662F;&#xFF08;2,3,4&#xFF09;&#xFF0C;&#x5F88;&#x597D;&#x770B;&#xFF0C;a&#x7684;&#x6700;&#x5927;&#x7684;&#x62EC;&#x53F7;&#x91CC;&#xFF0C;&#x6709;&#x4E24;&#x4E2A;&#x62EC;&#x53F7;&#xFF0C;&#x5373;&#x7B2C;&#x4E00;&#x7EF4;&#x6709;2&#x4E2A;&#xFF0C;&#x518D;&#x7136;&#x540E;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x62EC;&#x53F7;&#x91CC;&#x6709;&#x4E09;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5373;&#x7B2C;&#x4E8C;&#x7EF4;&#x662F;3&#xFF0C;&#x518D;&#x7136;&#x540E;&#xFF0C;&#x7B2C;&#x4E09;&#x4E2A;&#x62EC;&#x53F7;&#x91CC;&#x6709;4&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x5373;&#x7B2C;&#x4E09;&#x7EF4;&#x662F;4. &#x73B0;&#x5728;&#x6C42;t1&#xFF0C;t2,t3 &#x5219;&#xFF0C;t1&#x7684;shape&#x662F;&#xFF08;3,4&#xFF09;&#xFF0C;&#x6B63;&#x597D;&#x662F;&#x628A;&#x7B2C;&#x4E00;&#x7EF4;&#x53BB;&#x6389;&#x4E4B;&#x540E;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x7EF4;&#x5EA6;&#xFF0C;&#x4E4B;&#x524D;&#x662F;&#xFF08;2,3,4&#xFF09;&#xFF0C;&#x53BB;&#x6389;2&#x4E4B;&#x540E;&#xFF0C;&#x5269;&#x4E0B;&#xFF08;3,4&#xFF09;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x5C31;&#x662F;{0,1}&#xFF0C;&#x56E0;&#x4E3A;&#x7B2C;&#x4E00;&#x7EF4;&#x53EA;&#x6709;&#x4E24;&#x4E2A;&#x561B;&#x8BA1;&#x7B97;&#x65B9;&#x6CD5;&#x4E5F;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5206;&#x522B;&#x8BA1;&#x7B97;a[0][i][j]&#x548C;a[1][i][j]&#x5BF9;&#x5E94;&#x7684;&#x6700;&#x5927;&#x7684;&#x6570;&#xFF0C;&#x6700;&#x540E;&#x7B97;&#x4E0B;&#x6765;&#xFF0C;&#x662F;123[[0 0 0 0] [0 1 0 0][1 0 1 0]] &#x8BA1;&#x7B97;t2&#xFF1A; t2&#x7684;shape&#x662F;&#xFF08;2,4&#xFF09;&#xFF0C;&#x6B63;&#x597D;&#x662F;&#x53BB;&#x6389;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EF4;&#x5EA6;&#xFF0C;&#x53D6;&#x503C;&#x4E5F;&#x662F;{0,1,2}&#x5BF9;&#x5E94;&#x7684;&#x662F;a[i][0][j]&#xFF0C;a[i][1][j]&#xFF0C;a[i][2][j]&#x6700;&#x5927;&#x7684;&#x503C;&#x3002;&#x6700;&#x540E;&#x7B97;&#x4E0B;&#x6765;&#xFF0C;t2&#x7684;&#x503C;&#x662F;12[[1 2 0 1][1 2 2 1]] &#x540C;&#x7406;&#xFF0C;t3&#x7684;&#x503C;&#x662F;&#xFF1A;12[[1 0 1][1 0 2]]]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>numpy</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[李宏毅机器学习HW1-PM2.5预测]]></title>
    <url>%2F%2Fposts%2F8cf3bdf%2F</url>
    <content type="text"><![CDATA[&#x539F;&#x7406;&#x5206;&#x6790;&#x53CA;&#x4EE3;&#x7801;&#x8BE6;&#x89E3; &#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x601D;&#x8DEF;&#x5206;&#x6790;&#x6570;&#x636E;&#x5206;&#x6790;&#x3B5;=(&#xB4;&#x3BF;&#xFF40;*)))&#x5509;&#xFF0C;&#x8003;&#x5B8C;&#x8BD5;&#x518D;&#x5199;&#x5427;&#x3002; 12.12&#x66F4;&#x65B0;&#xFF1A;&#x3B5;=(&#xB4;&#x3BF;&#xFF40;*)))&#x5509;&#xFF0C;&#x653E;&#x5047;&#x4E86;&#x518D;&#x5199;&#x5427;&#x3002;]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[机器学习笔记]]></title>
    <url>%2F%2Fposts%2Fb1b54fd%2F</url>
    <content type="text"><![CDATA[&#x673A;&#x5668;&#x5B66;&#x4E60;&#x7B14;&#x8BB0;&#x5408;&#x96C6;&#xFF0C;&#x5177;&#x4F53;&#x5C0F;&#x95EE;&#x9898;&#x4EE5;&#x4E00;&#x7EA7;&#x6807;&#x9898;&#x7ED9;&#x51FA;&#x3002; Sigmoid&#x51FD;&#x6570;&#x73B0;&#x5728;&#x597D;&#x591A;&#x4EBA;&#x8BA4;&#x4E3A;Sigmoid&#x51FD;&#x6570;&#x662F;&#xFF1A;$$\sigma(x) = \frac1 {1+exp(-x)}$$&#x5176;&#x5B9E;&#x8FD9;&#x79CD;&#x8BF4;&#x6CD5;&#x4E0D;&#x51C6;&#x786E;&#xFF0C;&#x5728;&#x7EF4;&#x57FA;&#x767E;&#x79D1;Sigmoid Function&#x7684;&#x5B9A;&#x4E49;&#x91CC;&#xFF0C;&#x8BF4;&#x660E;&#x4E86;Sigmoid&#x7684;&#x5B9A;&#x4E49;&#x662F;&#xFF1A; A sigmoid function is a bounded, differentiable, real function that is defined for all real input values and has a non-negative derivative at each point. &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;Sigmoid&#x51FD;&#x6570;&#x662F;&#x6709;&#x754C;&#xFF0C;&#x53EF;&#x5FAE;&#x7684;&#x5B9E;&#x51FD;&#x6570;&#xFF0C;&#x5B9A;&#x4E49;&#x57DF;&#x662F;$R$&#xFF0C;&#x5E76;&#x4E14;&#x5728;&#x6BCF;&#x4E2A;&#x70B9;&#x90FD;&#x5177;&#x6709;&#x975E;&#x8D1F;&#x5BFC;&#x6570;&#x3002; &#x90A3;&#x524D;&#x9762;&#x8BF4;&#x7684;$\sigma(x)$&#x7684;&#x51C6;&#x786E;&#x540D;&#x5B57;&#x5176;&#x5B9E;&#x662F;$Logistic$&#x51FD;&#x6570;&#x3002; &#x5176;&#x5B9E;&#x8FD8;&#x6709;&#x5F88;&#x591A;Sigmoid&#x578B;&#x51FD;&#x6570;&#xFF0C;&#x6BD4;&#x5982;tanh&#x51FD;&#x6570;:$$tanh(x) = \frac{exp(x)-exp(-x)} {exp(x)+exp(-x)}$$&#x90A3;&#x4E48;&#xFF0C;&#x4F7F;&#x7528;&#x4E86;$Logistic$&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;Regression&#xFF0C;&#x5C31;&#x53EB;&#x505A;Logistic Regression&#x3002;&#x4F7F;&#x7528;softmax&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x6FC0;&#x6D3B;&#x51FD;&#x6570;&#x7684;Regression&#xFF0C;&#x5C31;&#x53EB;Softmax Regression&#xFF0C;&#x540D;&#x5B57;&#x5C31;&#x662F;&#x8FD9;&#x4E48;&#x6765;&#x7684;&#x3002; Pooling&#x7684;&#x7FFB;&#x8BD1;&#x95EE;&#x9898;&#x8FD9;&#x91CC;&#x5C31;&#x8981;&#x5410;&#x69FD;&#x90A3;&#x4E9B;&#x7FFB;&#x8BD1;&#x4EBA;&#x5458;&#x4E86;&#xFF0C;&#x82F1;&#x8BED;&#x4E0D;&#x597D;&#x5C31;&#x522B;&#x778E;jb&#x7FFB;&#x8BD1;&#x3002; Pool&#x4E00;&#x8BCD;&#xFF0C;&#x4E0D;&#x4EC5;&#x6709;&#x201C;&#x6C60;&#x5858;&#x201D;&#x7684;&#x610F;&#x601D;&#xFF0C;&#x8FD8;&#x6709;&#x201C;&#x6C47;&#x805A;&#xFF0C;&#x805A;&#x5408;&#xFF0C;&#x805A;&#x62E2;&#x201D;&#x7684;&#x610F;&#x601D;&#x3002;&#x6240;&#x4EE5;&#x628A;Pooling Layer&#x7FFB;&#x8BD1;&#x6210;&#x201C;&#x6C60;&#x5316;&#x5C42;&#x201D;&#xFF0C;&#x7EAF;&#x5C5E;&#x4E0D;&#x660E;&#x767D;&#x5355;&#x8BCD;&#x610F;&#x601D;&#x778E;jb&#x7FFB;&#x8BD1;&#x3002;&#x6211;&#x8BA4;&#x4E3A;&#x590D;&#x65E6;&#x5927;&#x5B66;&#x90B1;&#x9521;&#x9E4F;&#x8001;&#x5E08;&#x7FFB;&#x8BD1;&#x7684;&#x5C31;&#x975E;&#x5E38;&#x597D;&#xFF0C;&#x7FFB;&#x8BD1;&#x6210;&#x201C;&#x6C47;&#x805A;&#x5C42;&#x201D;&#xFF0C;&#x4E00;&#x770B;&#x5C31;&#x660E;&#x767D;&#x4E86;&#x662F;&#x548B;&#x56DE;&#x4E8B;&#x4E86;&#x6709;&#x6728;&#x6709;&#x3002;&#x8FD9;&#x5C31;&#x662F;&#x7FFB;&#x8BD1;&#x7684;&#x529B;&#x91CF;&#x3002; &#x6BD5;&#x7ADF;&#xFF0C;&#x8BF4;&#x4E00;&#x4E2A;&#x7537;&#x4EBA;&#x201C;&#x957F;&#xFF08;zhang&#xFF09;&#x5F97;&#x5413;&#x4EBA;&#x201D;&#x548C;&#x201C;&#x957F;&#xFF08;chang&#xFF09;&#x5F97;&#x5413;&#x4EBA;&#x201D;&#x610F;&#x601D;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x3002; &#x635F;&#x5931;&#x51FD;&#x6570;&#x3001;&#x671F;&#x671B;&#x98CE;&#x9669;&#x3001;&#x7ECF;&#x9A8C;&#x98CE;&#x9669;&#x3001;&#x7ED3;&#x6784;&#x98CE;&#x9669;&#x635F;&#x5931;&#x51FD;&#x6570;&#x635F;&#x5931;&#x51FD;&#x6570;&#x662F;&#x4E00;&#x4E2A;&#x975E;&#x8D1F;&#x5B9E;&#x6570;&#x51FD;&#x6570;&#xFF0C;&#x7528;&#x6765;&#x91CF;&#x5316;&#x6A21;&#x578B;&#x9884;&#x6D4B;&#x548C;&#x771F;&#x5B9E;&#x6807;&#x7B7E;&#x4E4B;&#x95F4;&#x7684;&#x5DEE;&#x5F02;&#x3002;&#x5E38;&#x7528;&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;&#x6709;&#xFF1A; 0-1&#x635F;&#x5931;&#x51FD;&#x6570;$$L(y,f(x,\theta))=\left{\begin{aligned}0&amp; &amp;if\ \ y=f(x,\theta) \1&amp; &amp;if\ \ y \neq f(x,\theta) \\end{aligned}\right.=I(y \neq f(x,\theta))$$&#x5176;&#x4E2D;&#xFF0C;$I(&#xB7;)$&#x662F;&#x6307;&#x793A;&#x51FD;&#x6570;&#x3002; &#x5E73;&#x65B9;&#x635F;&#x5931;&#x51FD;&#x6570;&#x7ECF;&#x5E38;&#x7528;&#x5728;&#x9884;&#x6D4B;&#x6807;&#x7B7E; y&#x4E3A;&#x5B9E;&#x6570;&#x503C;&#x7684;&#x4EFB;&#x52A1;&#x4E2D;&#x3002;$$L(y,f(x,\theta))=\frac 12(y-f(x,\theta))^2$$&#x5E73;&#x65B9;&#x635F;&#x5931;&#x51FD;&#x6570;&#x4E00;&#x822C;&#x4E0D;&#x7528;&#x4E8E;&#x5206;&#x7C7B;&#x95EE;&#x9898;&#x3002; &#x4EA4;&#x53C9;&#x71B5;&#x635F;&#x5931;&#x51FD;&#x6570;&#x5BF9;&#x4E8E;&#x4E24;&#x4E2A;&#x6982;&#x7387;&#x5206;&#x5E03;&#xFF0C;&#x4E00;&#x822C;&#x53EF;&#x4EE5;&#x7528;&#x4EA4;&#x53C9;&#x71B5;&#x6765;&#x8861;&#x91CF;&#x5B83;&#x4EEC;&#x7684;&#x5DEE;&#x5F02;&#x3002;$$L(y,f(x,\theta))=-\sum_{c=1}^Cy_clogf_c(x,\theta)$$ &#x671F;&#x671B;&#x98CE;&#x9669;&#x8BC4;&#x4EF7;&#x4E00;&#x4E2A;&#x6A21;&#x578B;$f(x,\theta)$&#x7684;&#x597D;&#x574F;&#xFF0C;&#x6700;&#x4F73;&#x7684;&#x6307;&#x6807;&#x662F;&#x671F;&#x671B;&#x98CE;&#x9669;&#xFF0C;&#x671F;&#x671B;&#x98CE;&#x9669;&#x662F;&#x4E00;&#x4E2A;&#x5168;&#x5C40;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x8868;&#x793A;&#x7684;&#x662F;&#x51B3;&#x7B56;&#x51FD;&#x6570;&#x5BF9;&#x4E8E;&#x6240;&#x6709;&#x7684;&#x6837;&#x672C;&lt;x,y&gt;&#x9884;&#x6D4B;&#x80FD;&#x529B;&#x7684;&#x5927;&#x5C0F;&#x3002;$$R(\theta)=E_{(x,y)\sim p_r(x,y)}[L(y,f(x,\theta))]$$&#x5176;&#x4E2D;&#xFF0C;$p_r(x,y)$&#x662F;&#x771F;&#x5B9E;&#x7684;&#x6570;&#x636E;&#x5206;&#x5E03;&#x3002;$L(y,f(x,\theta))$&#x662F;&#x635F;&#x5931;&#x51FD;&#x6570;.&#x7406;&#x60F3;&#x7684;&#x6A21;&#x578B;&#xFF08;&#x51B3;&#x7B56;&#xFF09;&#x51FD;&#x6570;&#x5E94;&#x8BE5;&#x662F;&#x8BA9;&#x6240;&#x6709;&#x7684;&#x6837;&#x672C;&#x7684;&#x635F;&#x5931;&#x51FD;&#x6570;&#x6700;&#x5C0F;&#x7684;&#xFF0C;&#x5373;&#x671F;&#x671B;&#x98CE;&#x9669;&#x6700;&#x5C0F;&#x3002; &#x7ECF;&#x9A8C;&#x98CE;&#x9669;&#x7531;&#x4E8E;&#x671F;&#x671B;&#x98CE;&#x9669;&#x8981;&#x7528;&#x5230;&#x771F;&#x5B9E;&#x7684;&#x6570;&#x636E;&#x5206;&#x5E03;&#xFF0C;&#x8FD9;&#x4E2A;&#x5F80;&#x5F80;&#x662F;&#x4E0D;&#x73B0;&#x5B9E;&#x7684;&#xFF08;&#x5E9F;&#x8BDD;&#xFF0C;&#x77E5;&#x9053;&#x771F;&#x5B9E;&#x7684;&#x6570;&#x636E;&#x5206;&#x5E03;&#x5C31;&#x4E0D;&#x7528;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x4E86;&#xFF09;&#x3002; &#x56E0;&#x6B64;&#x5C31;&#x7528;&#x5C40;&#x90E8;&#x4EE3;&#x66FF;&#x6574;&#x4F53;&#x7684;&#x601D;&#x60F3;&#xFF0C;&#x7528;&#x5C40;&#x90E8;&#x6700;&#x4F18;&#x9884;&#x6D4B;&#x5168;&#x5C40;&#x6700;&#x4F18;&#x3002;&#x8FD9;&#x5C31;&#x662F;&#x7ECF;&#x9A8C;&#x98CE;&#x9669;&#x6700;&#x5C0F;&#x5316;&#x7684;&#x7406;&#x8BBA;&#x57FA;&#x7840;&#x3002; &#x7ECF;&#x9A8C;&#x98CE;&#x9669;&#x4E2D;&#xFF0C;&#x8BA1;&#x7B97;&#x7684;&#x662F;&#x4EC5;&#x5728;&#x8BAD;&#x7EC3;&#x96C6;&#x4E0A;&#x7684;&#x5E73;&#x5747;&#x635F;&#x5931;&#x3002;$$R_D^{emp}=\frac 1N\sum_{n=1}^NL(\hat{y}^{(n)},f(x^{(n)},\theta))$$&#x7531;&#x5927;&#x6570;&#x5B9A;&#x5F8B;&#xFF0C;&#x5F53;&#x8BAD;&#x7EC3;&#x96C6;&#x7684;&#x5927;&#x5C0F;$|D|$&#x8D8B;&#x5411;&#x4E8E;&#x65E0;&#x7A77;&#x5927;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x7ECF;&#x9A8C;&#x98CE;&#x9669;&#x5C31;&#x8D8B;&#x5411;&#x4E8E;&#x671F;&#x671B;&#x98CE;&#x9669;&#x3002;&#x7136;&#x800C;&#x5728;&#x901A;&#x5E38;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6CA1;&#x6709;&#x65E0;&#x9650;&#x591A;&#x7684;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#xFF0C;&#x5E76;&#x4E14;&#x8BAD;&#x7EC3;&#x6837;&#x672C;&#x5F80;&#x5F80;&#x662F;&#x771F;&#x5B9E;&#x6570;&#x636E;&#x7684;&#x4E00;&#x4E2A;&#x5F88;&#x5C0F;&#x7684;&#x5B50;&#x96C6;&#x6216;&#x8005;&#x5305;&#x542B;&#x4E00;&#x5B9A;&#x7684;&#x566A;&#x58F0;&#x6570;&#x636E;&#xFF0C;&#x4E0D;&#x80FD;&#x5F88;&#x597D;&#x5730;&#x53CD;&#x6620;&#x5168;&#x90E8;&#x6570;&#x636E;&#x7684;&#x771F;&#x5B9E;&#x5206;&#x5E03;&#x3002;&#x7ECF;&#x9A8C;&#x98CE;&#x9669;&#x6700;&#x5C0F;&#x5316;&#x539F;&#x5219;&#x5F88;&#x5BB9;&#x6613;&#x5BFC;&#x81F4;&#x6A21;&#x578B;&#x5728;&#x8BAD;&#x7EC3;&#x96C6;&#x4E0A;&#x9519;&#x8BEF;&#x7387;&#x5F88;&#x4F4E;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x672A;&#x77E5;&#x6570;&#x636E;&#x4E0A;&#x9519;&#x8BEF;&#x7387;&#x5F88;&#x9AD8;&#x3002;&#x8FD9;&#x5C31;&#x662F;&#x6240;&#x8C13;&#x7684;&#x8FC7;&#x62DF;&#x5408;&#xFF08;Overfitting&#xFF09;&#x3002; &#x7ED3;&#x6784;&#x98CE;&#x9669;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x8FC7;&#x62DF;&#x5408;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4E00;&#x822C;&#x5728;&#x7ED3;&#x6784;&#x98CE;&#x9669;&#x6700;&#x5C0F;&#x5316;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#xFF0C;&#x518D;&#x5F15;&#x5165;&#x53C2;&#x6570;&#x7684;&#x6B63;&#x5219;&#x5316;&#xFF08;regularization&#xFF09;&#xFF0C;&#x6765;&#x9650;&#x5236;&#x6A21;&#x578B;&#x7684;&#x80FD;&#x529B;&#xFF0C;&#x4F7F;&#x5176;&#x4E0D;&#x8981;&#x8FC7;&#x5EA6;&#x7684;&#x6700;&#x5C0F;&#x5316;&#x7ECF;&#x9A8C;&#x98CE;&#x9669;&#x3002;&#x5728;&#x7ECF;&#x9A8C;&#x98CE;&#x9669;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x52A0;&#x4E00;&#x4E2A;&#x6B63;&#x5219;&#x5316;&#x9879;&#xFF0C;&#x5C31;&#x6784;&#x6210;&#x4E86;&#x7ED3;&#x6784;&#x98CE;&#x9669;&#x3002;$$R_D^{struct}=\frac 1N\sum_{n=1}^NL(\hat{y}^{(n)},f(x^{(n)},\theta))+\frac 12\lambda||\theta||^2$$&#x5176;&#x4E2D;$||\theta||$&#x662F;&#x2113;2&#x8303;&#x6570;&#x7684;&#x6B63;&#x5219;&#x5316;&#x9879;&#xFF0C;&#x7528;&#x6765;&#x51CF;&#x5C11;&#x53C2;&#x6570;&#x7A7A;&#x95F4;&#xFF0C;&#x907F;&#x514D;&#x8FC7;&#x62DF;&#x5408;&#xFF0C;$\lambda$&#x7528;&#x6765;&#x63A7;&#x5236;&#x6B63;&#x5219;&#x5316;&#x7684;&#x5F3A;&#x5EA6;&#x3002; &#x6B63;&#x5219;&#x5316;&#x9879;&#x4E5F;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x5176;&#x5B83;&#x51FD;&#x6570;&#xFF0C;&#x6BD4;&#x5982; &#x2113;1 &#x8303;&#x6570;&#x3002; &#x2113;1 &#x8303;&#x6570;&#x7684;&#x5F15;&#x5165;&#x901A;&#x5E38;&#x4F1A;&#x4F7F;&#x5F97;&#x53C2;&#x6570;&#x6709;&#x4E00;&#x5B9A;&#x7A00;&#x758F;&#x6027;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x5F88;&#x591A;&#x7B97;&#x6CD5;&#x4E2D;&#x4E5F;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#x3002;&#x5728;&#x8D1D;&#x53F6;&#x65AF;&#x5B66;&#x4E60;&#x7684;&#x89D2;&#x5EA6;&#x6765;&#x8BB2;&#xFF0C;&#x6B63;&#x5219;&#x5316;&#x662F;&#x5047;&#x8BBE;&#x4E86;&#x53C2;&#x6570;&#x7684;&#x5148;&#x9A8C;&#x5206;&#x5E03;&#xFF0C;&#x4E0D;&#x5B8C;&#x5168;&#x4F9D;&#x8D56;&#x8BAD;&#x7EC3;&#x6570;&#x636E;&#x3002; &#x8FC7;&#x62DF;&#x5408;&#x7684;&#x5B9A;&#x4E49;&#x770B;&#x8D77;&#x6765;&#x5F88;&#x7B80;&#x5355;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x770B;&#x4E86;&#x5F88;&#x591A;&#x6750;&#x6599;&#xFF0C;&#x90FD;&#x6CA1;&#x6709;&#x5BF9;&#x8FC7;&#x62DF;&#x5408;&#x6709;&#x4E00;&#x4E2A;&#x5F88;&#x597D;&#x7684;&#x5B9A;&#x4E49;&#x3002;&#x5927;&#x591A;&#x90FD;&#x662F;&#x7ED9;&#x4E86;&#x4E00;&#x4E2A;&#x5F62;&#x5F0F;&#x5316;&#x7684;&#x63CF;&#x8FF0;&#xFF0C;&#x5BB9;&#x6613;&#x7406;&#x89E3;&#xFF0C;&#x4F46;&#x662F;&#x603B;&#x611F;&#x89C9;&#x5C11;&#x4E86;&#x70B9;&#x4EC0;&#x4E48;&#x3002; &#x5C31;&#x597D;&#x50CF;&#x8BB2;&#x51FD;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x6709;&#x4ECE;&#x96C6;&#x5408;&#xFF0C;&#x6620;&#x5C04;&#x7684;&#x89D2;&#x5EA6;&#x53BB;&#x7ED9;&#x5B9A;&#x4E00;&#x6837;&#x3002;&#x8BFB;&#x8D77;&#x6765;&#x4E0D;&#x723D;&#x3002;&#x770B;&#x4E86;&#x590D;&#x65E6;&#x90B1;&#x9521;&#x9E4F;&#x8001;&#x5E08;&#x7684;&#x300A;&#x795E;&#x7ECF;&#x7F51;&#x7EDC;&#x4E0E;&#x673A;&#x5668;&#x5B66;&#x4E60;&#x300B;&#xFF0C;&#x4ED6;&#x7ED9;&#x4E86;&#x8FC7;&#x62DF;&#x5408;&#x7684;&#x5B9A;&#x4E49;&#x3002;&#x6458;&#x5F55;&#x5982;&#x4E0B;&#xFF1A; &#x8FC7;&#x62DF;&#x5408;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x5047;&#x8BBE;&#x7A7A;&#x95F4; $F$&#xFF0C;&#x4E00;&#x4E2A;&#x5047;&#x8BBE; $f$ &#x5C5E;&#x4E8E; $F$&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x5176;&#x4ED6;&#x7684;&#x5047;&#x8BBE; $f&#x2032;$ &#x4E5F;&#x5C5E;&#x4E8E; $F$, &#x4F7F;&#x5F97;&#x5728;&#x8BAD;&#x7EC3;&#x96C6;&#x4E0A; $f$ &#x7684;&#x635F;&#x5931;&#x6BD4; $f&#x2032;$ &#x5C0F;&#xFF0C;&#x4F46;&#x5728;&#x6574;&#x4E2A;&#x6837;&#x672C;&#x7A7A;&#x95F4;&#x4E0A; $f&#x2032;$ &#x6BD4; $f$ &#x7684;&#x635F;&#x5931;&#x5C0F;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x8BF4;&#x5047;&#x8BBE; $f$ &#x8FC7;&#x5EA6;&#x62DF;&#x5408;&#x8BAD;&#x7EC3;&#x6570;&#x636E;[Mitchell, 1997]&#x3002;]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo下添加图片]]></title>
    <url>%2F%2Fposts%2F2ebc16fd%2F</url>
    <content type="text"><![CDATA[&#x5728;Hexo&#x4E0B;&#x4EE5;Markdown&#x8BED;&#x6CD5;&#x6DFB;&#x52A0;&#x56FE;&#x7247;MarkDown&#x8BED;&#x6CD5;&#x6DFB;&#x52A0;&#x56FE;&#x7247;&#x7684;&#x8BED;&#x6CD5;&#x4E3A;1![&#x56FE;&#x7247;&#x63CF;&#x8FF0;](&#x56FE;&#x7247;&#x5730;&#x5740;) &#x5F00;&#x542F;post_asset_folder&#x7531;&#x4E8E;&#x628A;&#x6240;&#x6709;&#x56FE;&#x7247;&#x653E;&#x5728;&#x4E00;&#x8D77;&#x4F1A;&#x5F88;&#x4E71;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x7AD9;&#x70B9;&#x914D;&#x7F6E;&#x6587;&#x4EF6;config.yml&#x91CC;&#xFF0C;&#x5F00;&#x542F;post_asset_folder&#x3002;&#x5F53;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x7BA1;&#x7406;&#x529F;&#x80FD;&#x6253;&#x5F00;&#x540E;&#xFF0C;Hexo&#x5C06;&#x4F1A;&#x5728;&#x4F60;&#x6BCF;&#x4E00;&#x6B21;&#x901A;&#x8FC7;1hexo new [layout] &lt;title&gt; &#x521B;&#x5EFA;&#x65B0;&#x6587;&#x7AE0;&#x65F6;&#x81EA;&#x52A8;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x3002;&#x8FD9;&#x4E2A;&#x8D44;&#x6E90;&#x6587;&#x4EF6;&#x5939;&#x5C06;&#x4F1A;&#x6709;&#x4E0E;&#x8FD9;&#x4E2A; markdown &#x6587;&#x4EF6;&#x4E00;&#x6837;&#x7684;&#x540D;&#x5B57;&#x3002;&#x5C06;&#x6240;&#x6709;&#x4E0E;&#x4F60;&#x7684;&#x6587;&#x7AE0;&#x6709;&#x5173;&#x7684;&#x8D44;&#x6E90;&#x653E;&#x5728;&#x8FD9;&#x4E2A;&#x5173;&#x8054;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#x4E4B;&#x540E;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x76F8;&#x5BF9;&#x8DEF;&#x5F84;&#x6765;&#x5F15;&#x7528;&#x5B83;&#x4EEC;&#x3002; &#x5B89;&#x88C5;&#x63D2;&#x4EF6;1npm install hexo-asset-image@0.0.2 --save &#x6CE8;&#x610F;&#xFF1A;&#x8FD9;&#x4E2A;&#x63D2;&#x4EF6;&#x7684;&#x6700;&#x65B0;&#x7248;&#x672C;&#x662F;0.0.3&#xFF0C;&#x4F46;&#x662F;0.0.3&#x7248;&#x672C;&#x6709;Bug&#xFF0C;&#x6240;&#x4EE5;&#x4E00;&#x5B9A;&#x8981;&#x5B89;&#x88C5;0.0.2&#x7248;&#x672C;&#x3002; &#x5F15;&#x7528;&#x56FE;&#x7247;&#x6309;&#x7167;&#x5982;&#x4E0B;MarkDown&#x8BED;&#x6CD5;&#x5373;&#x53EF;&#x63D2;&#x5165;&#x56FE;&#x7247;1![&#x56FE;&#x7247;&#x63CF;&#x8FF0;](/&#x535A;&#x6587;&#x7684;&#x540D;&#x5B57;/&#x56FE;&#x7247;&#x540D;.jpg) &#x6BD4;&#x5982;1![&#x56FE;&#x7247;&#x63CF;&#x8FF0;](/hexo&#x4E0B;&#x6DFB;&#x52A0;&#x56FE;&#x7247;/&#x7B2C;&#x4E00;&#x5F20;&#x56FE;.jpg) &#x6309;&#x5982;&#x4E0A;&#x6240;&#x8FF0;&#x63D2;&#x5165;&#x56FE;&#x7247;&#xFF0C;&#x652F;&#x6301;MarkDown&#x9884;&#x89C8;&#x7684;&#x540C;&#x65F6;&#xFF0C;&#x4E0A;&#x4F20;&#x5230;Hexo&#x535A;&#x5BA2;&#x4E2D;&#x3002;&#x6CE8;&#x610F;&#x540E;&#x7F00;&#x540D;&#x533A;&#x5206;&#x5927;&#x5C0F;&#x5199;&#xFF0C;&#x5373;png&#x4E0E;PNG&#x4E0D;&#x540C;&#x3002;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>图片</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下转换网易云音乐ncm格式为mp3]]></title>
    <url>%2F%2Fposts%2F85a86f5b%2F</url>
    <content type="text"><![CDATA[ncm&#x662F;&#x7F51;&#x6613;&#x4E91;&#x97F3;&#x4E50;&#x7684;&#x4E13;&#x7528;&#x683C;&#x5F0F;&#xFF0C;ncm&#x52A0;&#x5BC6;&#x7684;&#x97F3;&#x4E50;&#xFF0C;&#x53EA;&#x80FD;&#x5728;&#x4F1A;&#x5458;&#x6709;&#x6548;&#x671F;&#x5185;&#x4F7F;&#x7528;&#x3002;&#x672C;&#x6587;&#x4ECB;&#x7ECD;&#x4E00;&#x4E2A;&#x53EF;&#x4EE5;&#x628A;ncm&#x683C;&#x5F0F;&#x7684;&#x97F3;&#x4E50;&#x8F6C;&#x4E3A;MP3&#x683C;&#x5F0F;&#x7684;&#x5DE5;&#x5177; &#x4E0B;&#x8F7D;&#x5730;&#x5740;&#x4E0B;&#x8F7D;&#x5730;&#x5740; &#x4F7F;&#x7528;&#x65B9;&#x6CD5; &#x9009;&#x62E9;ncm&#x6587;&#x4EF6;&#x6240;&#x5728;&#x7684;&#x6587;&#x4EF6;&#x5939;&#xFF0C;&#x62D6;&#x62FD;&#x5230;ncmdump.exe&#x4E0A; &#x9009;&#x62E9;ncm&#x6587;&#x4EF6;&#xFF0C;&#x62D6;&#x62FD;&#x5230;ncmdump.exe&#x4E0A; &#x6F14;&#x793A;&#x6279;&#x91CF;&#x8F6C;&#x6362; &#x6587;&#x4EF6;&#x5939;&#x6279;&#x91CF;&#x8F6C;&#x6362;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ncm</tag>
        <tag>mp3</tag>
        <tag>下载技巧</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[红黑树-C++语言实现]]></title>
    <url>%2F%2Fposts%2Fef3f5fdd%2F</url>
    <content type="text"><![CDATA[&#x7B97;&#x6CD5;&#x8BFE;&#x4E0A;&#x8001;&#x5E08;&#x8BB2;&#x4E86;&#x7EA2;&#x9ED1;&#x6811;&#x3002;&#x6839;&#x636E;&#x7F51;&#x4E0A;&#x5927;&#x795E;&#x7684;&#x6587;&#x7AE0;&#xFF0C;&#x81EA;&#x5DF1;&#x53C8;&#x6572;&#x4E86;&#x4E00;&#x904D;&#x3002;&#x6839;&#x636E; &#x7801;&#x56FE;&#x5E76;&#x8302;&#x7EA2;&#x9ED1;&#x6811;&#x81EA;&#x5DF1;&#x53C8;&#x6572;&#x4E86;&#x4E00;&#x904D;&#x3002; &#x7C7B;&#x7684;&#x5B9A;&#x4E49;RBTree.hpragma once#include&lt;iostream&gt;#include&lt;queue&gt;#include &lt;assert.h&gt;/*&#x7EA2;&#x9ED1;&#x6811;&#x662F;&#x4E00;&#x79CD;&#x81EA;&#x5E73;&#x8861;&#x7684;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#xFF0C;&#x5178;&#x578B;&#x7684;&#x7528;&#x9014;&#x662F;&#x5B9E;&#x73B0;&#x5173;&#x8054;&#x6570;&#x7EC4;&#x3002;&#x7EA2;&#x9ED1;&#x6811;&#x7531;&#x4EE5;&#x4E0B;5&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x9650;&#x5236;&#xFF1A;1. &#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x6216;&#x8005;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x6216;&#x8005;&#x662F;&#x7EA2;&#x8272;&#x3002;2. &#x6839;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#x3002;3. &#x6BCF;&#x4E2A;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF08;&#x7A7A;&#x8282;&#x70B9;&#xFF09;&#x662F;&#x9ED1;&#x8272;&#x3002;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x8868;&#x793A;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x8BBE;&#x7F6E;&#x54E8;&#x5175;&#x8282;&#x70B9;&#xFF08;Nil&#xFF09;&#x8868;&#x793A;&#x7A7A;&#x8282;&#x70B9;&#xFF0C;&#x6BCF;&#x4E2A;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x5168;&#x90FD;&#x6307;&#x5411;&#x5B83;&#xFF0C;&#x65B9;&#x4FBF;&#x8868;&#x793A;&#x3002;4. &#x5982;&#x679C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#x7684;&#xFF0C;&#x5219;&#x5B83;&#x7684;&#x5B50;&#x8282;&#x70B9;&#x5FC5;&#x987B;&#x662F;&#x9ED1;&#x8272;&#x7684;&#x3002;5. &#x4ECE;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x5230;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x5B50;&#x5B59;&#x8282;&#x70B9;&#x7684;&#x6240;&#x6709;&#x8DEF;&#x5F84;&#x4E0A;&#x5305;&#x542B;&#x76F8;&#x540C;&#x6570;&#x76EE;&#x7684;&#x9ED1;&#x8282;&#x70B9;&#x3002;&#x7531;&#x7EA6;&#x675F;&#x6761;&#x4EF6;5&#xFF0C;&#x53EF;&#x5F97;&#xFF1A;&#x4ECE;&#x6839;&#x5230;&#x6240;&#x6709;&#x6930;&#x5B50;&#x7684;&#x6700;&#x957F;&#x7684;&#x8DEF;&#x5F84;&#x4E0D;&#x591A;&#x4E8E;&#x6700;&#x77ED;&#x7684;&#x8DEF;&#x5F84;&#x7684;2&#x500D;&#x957F;&#xFF0C;&#x56E0;&#x6B64;&#x8FD9;&#x68F5;&#x6811;&#x5927;&#x81F4;&#x4E0A;&#x662F;&#x5E73;&#x8861;&#x7684;&#x3002;*//*&#x8FD9;&#x4E2A;class&#x91CC;&#xFF0C;&#x5BF9;&#x4E8E;&#x4E24;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x6BD4;&#x8F83;&#x7684;&#x8BED;&#x53E5;&#xFF0C;&#x6211;&#x628A;&#x5E38;&#x91CF;&#x503C;&#x5168;&#x90FD;&#x653E;&#x5728;&#x4E86;&#x5DE6;&#x8FB9;&#xFF0C;&#x9632;&#x6B62;&#x5C11;&#x5199;&#x4E00;&#x4E2A;&#x7B49;&#x53F7;&#x7684;&#x60C5;&#x51B5;&#x3002;*/class RBTree{private: typedef enum { RBT_COLOR_RED, RBT_COLOR_BLACK, }RBTColor; typedef struct __RBTreeNode { __RBTreeNode* pParent; __RBTreeNode* pLeft; __RBTreeNode* pRight; RBTColor Color; int Value; }RBTreeNode, *pRBTreeNode;private: void InsertFixUP(pRBTreeNode pInsertNode); //&#x63D2;&#x5165;InsertNode&#x4E4B;&#x540E;&#xFF0C;&#x8C03;&#x6574;&#x7EA2;&#x9ED1;&#x6811; void DeleteFixUp(pRBTreeNode pFixNode); //&#x5220;&#x9664;DeleteNode&#x4E4B;&#x540E;&#xFF0C;&#x8C03;&#x6574;&#x7EA2;&#x9ED1;&#x6811; void SingleLeft(pRBTreeNode &amp;pNode, pRBTreeNode &amp;newTop); //&#x5DE6;&#x65CB;&#x8F6C;&#xFF0C;&#x8FD4;&#x56DE;&#x65B0;&#x7684;&#x9876;&#x70B9; void SingleRight(pRBTreeNode &amp;pNode, pRBTreeNode &amp;newTop); //&#x53F3;&#x65CB;&#x8F6C;&#xFF0C;&#x8FD4;&#x56DE;&#x65B0;&#x7684;&#x9876;&#x70B9; void ReplaceParent(pRBTreeNode pBeReplacedNode, pRBTreeNode pReplaceNode); //&#x628A;pReplaceNode&#x7684;&#x7236;&#x8282;&#x70B9;&#x4FEE;&#x6539;&#x4E3A;pBeReplacedNode&#x7684; bool GetMinNode(pRBTreeNode pNode, pRBTreeNode &amp;pMinNode); //&#x83B7;&#x53D6;&#x6700;&#x5C0F;&#x7684;&#x8282;&#x70B9;public: RBTree(); ~RBTree(); bool FindElement(int Value); //&#x67E5;&#x627E;&#x6570;&#x636E;&#xFF0C;&#x627E;&#x5230;&#x8FD4;&#x56DE;true&#xFF0C;&#x5426;&#x5219;&#x8FD4;&#x56DE;false void BFS(); //&#x5E7F;&#x5EA6;&#x904D;&#x5386; bool isEmpty(); //&#x5224;&#x7A7A; bool GetMax(pRBTreeNode pNode, int &amp;MaxValue); //&#x83B7;&#x53D6;&#x6700;&#x5927;&#x503C; bool GetMin(pRBTreeNode pNode, int &amp;MinValue); //&#x83B7;&#x53D6;&#x6700;&#x5C0F;&#x503C; void DeleteElement(int DeleteValue); //&#x5220;&#x9664;&#x5236;&#x5B9A;&#x7684;&#x5143;&#x7D20; void InsertData(int InsertValue); //&#x63D2;&#x5165;private: pRBTreeNode pRoot; //&#x6839;&#x8282;&#x70B9;&#x6307;&#x9488; pRBTreeNode pNil; //&#x54E8;&#x5175;&#x8282;&#x70B9;};void RBTree::InsertFixUP(pRBTreeNode pInsertNode){ /* &#x63D2;&#x5165;&#x8282;&#x70B9;&#x540E;&#xFF0C;&#x5BF9;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x8C03;&#x6574;&#x64CD;&#x4F5C;&#xFF1A; &#x6839;&#x636E;&#x88AB;&#x63D2;&#x5165;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x53EF;&#x4EE5;&#x5C06;&#x60C5;&#x51B5;&#x5206;&#x4E09;&#x7C7B;&#x6765;&#x8BA8;&#x8BBA; 1. &#x88AB;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272; &#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x4F1A;&#x4EA7;&#x751F;&#x51B2;&#x7A81;&#xFF0C;&#x4E0D;&#x6EE1;&#x8DB3;&#x7EA6;&#x675F;&#x6761;&#x4EF6;5&#x3002; &#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x88AB;&#x63D2;&#x5165;&#x8282;&#x70B9;&#x662F;&#x4E00;&#x5B9A;&#x5B58;&#x5728;&#x975E;&#x7A7A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#xFF1B;&#x8FDB;&#x4E00;&#x6B65;&#x7684;&#x8BB2;&#xFF0C;&#x88AB;&#x63D2;&#x5165;&#x8282;&#x70B9;&#x4E5F;&#x4E00;&#x5B9A;&#x5B58;&#x5728;&#x53D4;&#x53D4;&#x8282;&#x70B9;(&#x5373;&#x4F7F;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x7A7A;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x89C6;&#x4E4B;&#x4E3A;&#x5B58;&#x5728;&#xFF0C;&#x7A7A;&#x8282;&#x70B9;&#x672C;&#x8EAB;&#x5C31;&#x662F;&#x9ED1;&#x8272;&#x8282;&#x70B9;)&#x3002; &#x4F9D;&#x636E;&quot;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;&quot;&#xFF0C;&#x5C06;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#x8FDB;&#x4E00;&#x6B65;&#x5212;&#x5206;&#x4E3A;3&#x79CD;&#x60C5;&#x51B5;&#x8FDB;&#x884C;&#x8BA8;&#x8BBA;&#x3002;&#x5904;&#x7406;&#x7684;&#x6838;&#x5FC3;&#x601D;&#x8DEF;&#x662F;&#xFF1A;&#x5C06;&#x7EA2;&#x8272;&#x7684;&#x8282;&#x70B9;&#x79FB;&#x5230;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x6839;&#x8282;&#x70B9;&#x8BBE;&#x7F6E;&#x4E3A;&#x9ED1;&#x8272;&#x3002; **&#x4EE5;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#x4E3A;&#x4F8B;** **&#x5BF9;&#x5E94;&#x7684;&#xFF0C;&#x82E5;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x65F6;&#xFF0C;&#x628A;&#x5BF9;&#x5E94;&#x7684;right&#x548C;left&#x4E92;&#x6362;&#x5373;&#x53EF;** 1.1 &#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#xFF0C;&#x4E14;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53E6;&#x4E00;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF08;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#xFF09;&#x4E5F;&#x662F;&#x7EA2;&#x8272;&#x3002; 1. &#x5C06;&#x201C;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x9ED1;&#x8272;&#x3002; 2. &#x5C06;&#x201C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x9ED1;&#x8272;&#x3002; 3. &#x5C06;&#x201C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x201C;&#x7EA2;&#x8272;&#x201D;&#x3002; 4. &#x5C06;&#x201C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x201C;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x201D;(&#x7EA2;&#x8272;&#x8282;&#x70B9;)&#xFF1B;&#x5373;&#xFF0C;&#x4E4B;&#x540E;&#x7EE7;&#x7EED;&#x5BF9;&#x201C;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x201D;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002; 1.2 &#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#xFF0C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x662F;&#x5176;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x3002; 1. &#x5C06;&#x201C;&#x7236;&#x8282;&#x70B9;&#x201D;&#x4F5C;&#x4E3A;&#x201C;&#x65B0;&#x7684;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x201D;&#x3002; 2. &#x4EE5;&#x201C;&#x65B0;&#x7684;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x201D;&#x4E3A;&#x652F;&#x70B9;&#x8FDB;&#x884C;&#x5DE6;&#x65CB;&#x3002; 1.3 &#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#xFF0C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x662F;&#x5176;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#x3002; 1. &#x5C06;&#x201C;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x201C;&#x9ED1;&#x8272;&#x201D;&#x3002; 2. &#x5C06;&#x201C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x201D;&#x8BBE;&#x4E3A;&#x201C;&#x7EA2;&#x8272;&#x201D;&#x3002; 3. &#x4EE5;&#x201C;&#x7956;&#x7236;&#x8282;&#x70B9;&#x201D;&#x4E3A;&#x652F;&#x70B9;&#x8FDB;&#x884C;&#x53F3;&#x65CB;&#x3002; 2. &#x88AB;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272; &#x4EC0;&#x4E48;&#x4E5F;&#x4E0D;&#x9700;&#x8981;&#x505A;&#x3002;&#x8282;&#x70B9;&#x88AB;&#x63D2;&#x5165;&#x540E;&#xFF0C;&#x4ECD;&#x7136;&#x662F;&#x7EA2;&#x9ED1;&#x6811;&#x3002; 3. &#x88AB;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x662F;&#x6839;&#x8282;&#x70B9;&#xFF1A; &#x76F4;&#x63A5;&#x628A;&#x6B64;&#x8282;&#x70B9;&#x6D82;&#x4E3A;&#x9ED1;&#x8272;&#x3002; */ pRBTreeNode pFixNode = pInsertNode;; //&#x5982;&#x679C;&#x7236;&#x8282;&#x70B9;&#x662F;&#x7EA2;&#x8272;&#x3002;&#xFF08;&#x6839;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x662F;Nil&#xFF0C;&#x4E3A;&#x9ED1;&#x8272;&#x3002;&#xFF09; while (RBT_COLOR_RED == pFixNode-&gt;pParent-&gt;Color) { //1. &#x5982;&#x679C;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x7684;&#x7236;&#x4EB2;&#x4E3A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50; if (pFixNode-&gt;pParent == pFixNode-&gt;pParent-&gt;pParent-&gt;pLeft) { //&#x83B7;&#x53D6;&#x53D4;&#x53D4;&#x8282;&#x70B9;(&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;) pRBTreeNode pUncle = pFixNode-&gt;pParent-&gt;pParent-&gt;pRight; //1.1 &#x5982;&#x679C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x60C5;&#x51B5;1.1.1 if (RBT_COLOR_RED == pUncle-&gt;Color) { //&#x628A;&#x7236;&#x8282;&#x70B9;&#x548C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x90FD;&#x6539;&#x4E3A;&#x9ED1;&#x8272; pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK; pUncle-&gt;Color = RBT_COLOR_BLACK; //&#x628A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x6539;&#x4E3A;&#x7EA2;&#x8272; pFixNode-&gt;pParent-&gt;pParent-&gt;Color = RBT_COLOR_RED; //&#x91CD;&#x65B0;&#x8BA1;&#x7B97;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7956;&#x7236;&#x8282;&#x70B9; pFixNode = pFixNode-&gt;pParent-&gt;pParent; } //1.2 &#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E0D;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x4E14;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x3002;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#xFF0C;&#x7A0D;&#x52A0;&#x5904;&#x7406;&#x53D8;&#x4F1A;&#x8F6C;&#x5316;&#x4E3A;&#x60C5;&#x51B5;1.3 else if (pFixNode == pFixNode-&gt;pParent-&gt;pRight) { //&#x4ECE;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#x65CB;&#x8F6C; pFixNode = pFixNode-&gt;pParent; //&#x8BB0;&#x5F55;&#x4E0B;&#x65B0;&#x7684;&#x9876;&#x70B9; pRBTreeNode pNewTop = nullptr; SingleLeft(pFixNode-&gt;pParent-&gt;pLeft, pNewTop); //&#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x8C03;&#x6574;&#x8282;&#x70B9; pFixNode = pNewTop-&gt;pLeft; } //1.3 &#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x9ED1;&#xFF0C;&#x4E14;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50; else if (pFixNode == pFixNode-&gt;pParent-&gt;pLeft) { //&#x628A;&#x7236;&#x8282;&#x70B9;&#x53D8;&#x6210;&#x9ED1;&#x8272; pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK; //&#x628A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x53D8;&#x6210;&#x7EA2;&#x8272; pFixNode-&gt;pParent-&gt;pParent-&gt;Color = RBT_COLOR_RED; //&#x4EE5;&#x7956;&#x7236;&#x8282;&#x70B9;&#x53F3;&#x65CB;&#x8F6C;(&#x6CE8;&#x610F;&#x5230;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;) pFixNode = pFixNode-&gt;pParent-&gt;pParent; //&#x8BB0;&#x5F55;&#x4E0B;&#x65B0;&#x7684;&#x9876;&#x70B9; pRBTreeNode pNewTop = nullptr; if (pRoot == pFixNode) { SingleRight(pRoot, pNewTop); } else if (pFixNode == pFixNode-&gt;pParent-&gt;pLeft) { SingleRight(pFixNode-&gt;pParent-&gt;pLeft, pNewTop); } else if (pFixNode == pFixNode-&gt;pParent-&gt;pRight) { SingleRight(pFixNode-&gt;pParent-&gt;pRight, pNewTop); } //&#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x8C03;&#x6574;&#x70B9; pFixNode = pNewTop-&gt;pLeft; } } //2. &#x5982;&#x679C;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x4E3A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#xFF0C;&#x76F8;&#x5BF9;&#x4E8E;1&#x4E2D;&#xFF0C;&#x628A;left&#x548C;right&#x4E92;&#x6362;&#x5373;&#x53EF; else if (pFixNode-&gt;pParent == pFixNode-&gt;pParent-&gt;pParent-&gt;pRight) { //&#x83B7;&#x53D6;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#xFF08;&#x7956;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#xFF09; pRBTreeNode pUncle = pFixNode-&gt;pParent-&gt;pParent-&gt;pLeft; //2.1 &#x5982;&#x679C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x7EA2;&#x8272; if (RBT_COLOR_RED == pUncle-&gt;Color) { //&#x628A;&#x7236;&#x8282;&#x70B9;&#x548C;&#x53D4;&#x53D4;&#x8282;&#x70B9;&#x90FD;&#x6539;&#x4E3A;&#x9ED1;&#x8272; pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK; pUncle-&gt;Color = RBT_COLOR_BLACK; //&#x628A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x6539;&#x4E3A;&#x7EA2;&#x8272; pFixNode-&gt;pParent-&gt;pParent-&gt;Color = RBT_COLOR_RED; //&#x91CD;&#x65B0;&#x8BA1;&#x7B97;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7956;&#x7236;&#x8282;&#x70B9; pFixNode = pFixNode-&gt;pParent-&gt;pParent; } //2.2 &#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7236;&#x4EB2;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#xFF0C;&#x5BF9;&#x5E94;&#x60C5;&#x51B5;1.2&#xFF08;&#x5DE6;&#x53F3;&#x4E92;&#x6362;&#xFF09; else if (pFixNode == pFixNode-&gt;pParent-&gt;pLeft) { //&#x4ECE;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x5F00;&#x59CB;&#x65CB;&#x8F6C; pFixNode = pFixNode-&gt;pParent; //&#x8BB0;&#x5F55;&#x4E0B;&#x65B0;&#x7684;&#x9876;&#x70B9; pRBTreeNode pNewTop = nullptr; SingleRight(pFixNode-&gt;pParent-&gt;pRight, pNewTop); //&#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x8C03;&#x6574;&#x8282;&#x70B9; pFixNode = pNewTop-&gt;pRight; } //2.3 &#x53D4;&#x53D4;&#x8282;&#x70B9;&#x4E3A;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x4E3A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#xFF0C;&#x5BF9;&#x5E94;&#x60C5;&#x51B5;1.3&#xFF08;&#x5DE6;&#x53F3;&#x4E92;&#x6362;&#xFF09; else if (pFixNode == pFixNode-&gt;pParent-&gt;pRight) { //&#x628A;&#x7236;&#x8282;&#x70B9;&#x53D8;&#x4E3A;&#x9ED1;&#x8272; pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK; //&#x628A;&#x7956;&#x7236;&#x8282;&#x70B9;&#x53D8;&#x4E3A;&#x7EA2;&#x8272; pFixNode-&gt;pParent-&gt;pParent-&gt;Color = RBT_COLOR_RED; //&#x5BF9;&#x7956;&#x7236;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x5DE6;&#x65CB;&#x8F6C;&#xFF08;&#x6CE8;&#x610F;&#x5230;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x60C5;&#x51B5;&#xFF09; pFixNode = pFixNode-&gt;pParent-&gt;pParent; //&#x8BB0;&#x5F55;&#x4E0B;&#x65B0;&#x8282;&#x70B9; pRBTreeNode pNewTop = nullptr; if (pRoot == pFixNode) { SingleLeft(pRoot, pNewTop); } else if (pFixNode == pFixNode-&gt;pParent-&gt;pLeft) { SingleLeft(pFixNode-&gt;pParent-&gt;pLeft, pNewTop); } else if (pFixNode == pFixNode-&gt;pParent-&gt;pRight) { SingleLeft(pFixNode-&gt;pParent-&gt;pRight, pNewTop); } //&#x91CD;&#x65B0;&#x8BBE;&#x7F6E;&#x8C03;&#x6574;&#x8282;&#x70B9; pFixNode = pNewTop-&gt;pRight; } } } //&#x6700;&#x540E;&#x628A;&#x6839;&#x8282;&#x70B9;&#x8BBE;&#x7F6E;&#x4E3A;&#x9ED1;&#x8272; pRoot-&gt;Color = RBT_COLOR_BLACK;}void RBTree::DeleteFixUp(pRBTreeNode pFixNode){ /* &#x6062;&#x590D;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x3002; */ while (pFixNode != pRoot&amp;&amp;RBT_COLOR_BLACK == pFixNode-&gt;Color) { //1. &#x5982;&#x679C;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x662F;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50; if (pFixNode == pFixNode-&gt;pParent-&gt;pLeft) { pRBTreeNode pBrotherNode = pFixNode-&gt;pParent-&gt;pRight; //&#x5144;&#x5F1F;&#x8282;&#x70B9; //1.1 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x5219;&#x53EA;&#x80FD;&#x8C03;&#x6574;&#x6210;&#x5176;&#x4ED6;&#x7684;&#x60C5;&#x51B5; if (RBT_COLOR_RED == pBrotherNode-&gt;Color) { //&#x628A;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x9ED1;&#x8272; pBrotherNode-&gt;Color = RBT_COLOR_BLACK; //&#x628A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x7EA2;&#x8272; pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_RED; //&#x4EE5;&#x7236;&#x8282;&#x70B9;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x65CB; pRBTreeNode pPivot = pFixNode-&gt;pParent; pRBTreeNode pNewTop = nullptr; //&#x5907;&#x4EFD;parent&#x7684;&#x6307;&#x9488;&#xFF0C;&#x56E0;&#x4E3A;&#x65CB;&#x8F6C;&#x64CD;&#x4F5C;&#x4F1A;&#x4FEE;&#x6539;parent&#x6307;&#x9488; pRBTreeNode pBackParent = pFixNode-&gt;pParent; if (pRoot == pPivot) { SingleLeft(pRoot, pNewTop); } else if (pPivot == pPivot-&gt;pParent-&gt;pLeft) { SingleLeft(pPivot-&gt;pParent-&gt;pLeft, pNewTop); } else if (pPivot == pPivot-&gt;pParent-&gt;pRight) { SingleLeft(pPivot-&gt;pParent-&gt;pRight, pNewTop); } //&#x6062;&#x590D;pFixNode&#x7684;parent&#x6307;&#x9488; pFixNode-&gt;pParent = pBackParent; } //1.2 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x53F3;&#x5B69;&#x5B50;&#x5747;&#x4E3A;&#x9ED1;&#x8272; else if (RBT_COLOR_BLACK == pBrotherNode-&gt;pLeft-&gt;Color&amp;&amp;RBT_COLOR_BLACK == pBrotherNode-&gt;pRight-&gt;Color) { //&#x628A;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x67D3;&#x6210;&#x7EA2;&#x8272; pBrotherNode-&gt;Color = RBT_COLOR_RED; //FixUpNode&#x4FEE;&#x6539;&#x4E3A;&#x7236;&#x4EB2;&#x8282;&#x70B9; pFixNode = pFixNode-&gt;pParent; } //1.3 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#x5E76;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x5DE6;&#x5B69;&#x5B50;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x53F3;&#x5B69;&#x5B50;&#x4E3A;&#x9ED1;&#x8272; else if (RBT_COLOR_RED == pBrotherNode-&gt;pLeft-&gt;Color&amp;&amp;RBT_COLOR_BLACK == pBrotherNode-&gt;pRight-&gt;Color) { //&#x4EA4;&#x6362;&#x989C;&#x8272; RBTColor tempNodeColor = pBrotherNode-&gt;pLeft-&gt;Color; pBrotherNode-&gt;pLeft-&gt;Color = pBrotherNode-&gt;Color; pBrotherNode-&gt;Color = tempNodeColor; //&#x5907;&#x4EFD;parent&#x7684;&#x6307;&#x9488;&#xFF0C;&#x56E0;&#x4E3A;&#x65CB;&#x8F6C;&#x64CD;&#x4F5C;&#x4F1A;&#x4FEE;&#x6539;parent&#x6307;&#x9488; pRBTreeNode pBackParent = pFixNode-&gt;pParent; //&#x4EE5;pBrotherNode&#x8FDB;&#x884C;&#x53F3;&#x65CB; pRBTreeNode pNewTop = nullptr; SingleRight(pBrotherNode-&gt;pParent-&gt;pRight, pNewTop); //&#x6062;&#x590D;pFixNode&#x7684;parent&#x6307;&#x9488; pFixNode-&gt;pParent = pBackParent; } //1.4 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#x53EF;&#x4EE5;&#x662F;&#x4EFB;&#x610F;&#x989C;&#x8272; else if (RBT_COLOR_RED == pBrotherNode-&gt;pRight-&gt;Color) { pBrotherNode-&gt;Color = pFixNode-&gt;pParent-&gt;Color; pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK; pBrotherNode-&gt;pRight-&gt;Color = RBT_COLOR_BLACK; //&#x4EE5;pFixNode-&gt;pParent&#x5DE6;&#x65CB; pRBTreeNode pPivot = pFixNode-&gt;pParent; pRBTreeNode pNewTop = nullptr; if (pRoot == pPivot) { SingleLeft(pPivot, pNewTop); } else if (pPivot == pPivot-&gt;pParent-&gt;pLeft) { SingleLeft(pPivot-&gt;pParent-&gt;pLeft, pNewTop); } else if (pPivot == pPivot-&gt;pParent-&gt;pRight) { SingleLeft(pPivot-&gt;pParent-&gt;pRight, pNewTop); } pFixNode = pRoot; } } //2. &#x5982;&#x679C;&#x8C03;&#x6574;&#x8282;&#x70B9;&#x662F;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50; else if (pFixNode == pFixNode-&gt;pParent-&gt;pRight) { pRBTreeNode pBrotherNode = pFixNode-&gt;pParent-&gt;pLeft; //2.1 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x4E3A;&#x7EA2;&#x8272;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x53EA;&#x80FD;&#x901A;&#x8FC7;&#x9009;&#x62E9;&#x8C03;&#x6574;&#x6210;&#x5176;&#x4ED6;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x518D;&#x6765;&#x5904;&#x7406; if (RBT_COLOR_RED == pBrotherNode-&gt;Color) { //&#x628A;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x9ED1;&#x8272; pBrotherNode-&gt;Color = RBT_COLOR_BLACK; //&#x628A;&#x7236;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x7EA2;&#x8272; pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_RED; //&#x4EE5;&#x7236;&#x8282;&#x70B9;&#x4E3A;&#x6839;&#xFF0C;&#x8FDB;&#x884C;&#x53F3;&#x65CB; pRBTreeNode pPivot = pFixNode-&gt;pParent; pRBTreeNode pNewTop = nullptr; //&#x540C;&#x6837;&#x5907;&#x4EFD;&#x7236;&#x8282;&#x70B9;&#x6307;&#x9488; pRBTreeNode pBackParent = pFixNode-&gt;pParent; // if (pRoot == pPivot) { SingleRight(pRoot, pNewTop); } else if (pPivot == pPivot-&gt;pParent-&gt;pLeft) { SingleRight(pPivot-&gt;pParent-&gt;pLeft, pNewTop); } else if (pPivot == pPivot-&gt;pParent-&gt;pRight) { SingleRight(pPivot-&gt;pParent-&gt;pRight, pNewTop); } //&#x6062;&#x590D;pFixNode&#x7684;Parent&#x6307;&#x9488; pFixNode-&gt;pParent = pBackParent; } //2.2 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x53F3;&#x5B69;&#x5B50;&#x5747;&#x4E3A;&#x9ED1;&#x8272; else if (RBT_COLOR_BLACK == pBrotherNode-&gt;pLeft-&gt;Color&amp;&amp;RBT_COLOR_BLACK == pBrotherNode-&gt;pRight-&gt;Color) { //&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6539;&#x4E3A;&#x7EA2;&#x8272; pBrotherNode-&gt;Color = RBT_COLOR_RED; //FixUpNode &#x4FEE;&#x6539;&#x4E3A;&#x7236;&#x8282;&#x70B9; pFixNode = pFixNode-&gt;pParent; } //2.3 &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x5E76;&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x53F3;&#x5B69;&#x5B50;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x5DE6;&#x5B69;&#x5B50;&#x4E3A;&#x9ED1;&#x8272; else if (RBT_COLOR_BLACK == pBrotherNode-&gt;pLeft-&gt;Color&amp;&amp;RBT_COLOR_RED == pBrotherNode-&gt;pRight-&gt;Color) { //&#x4EA4;&#x6362;&#x989C;&#x8272; RBTColor tempNodeColor = pBrotherNode-&gt;pRight-&gt;Color; pBrotherNode-&gt;pRight-&gt;Color = pBrotherNode-&gt;Color; pBrotherNode-&gt;Color = tempNodeColor; //&#x5907;&#x4EFD;parent&#x6307;&#x9488; pRBTreeNode pBackParent = pFixNode-&gt;pParent; //&#x4EE5;pBrotherNode&#x8FDB;&#x884C;&#x53F3;&#x65CB; pRBTreeNode pNewTop = nullptr; SingleLeft(pBrotherNode-&gt;pParent-&gt;pLeft, pNewTop); //&#x6062;&#x590D;pFixNode&#x7684;parent&#x6307;&#x9488; pFixNode-&gt;pParent = pBrotherNode; } //2.4. &#x5982;&#x679C;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x662F;&#x9ED1;&#x8272;,&#x4E14;&#x5144;&#x5F1F;&#x8282;&#x70B9;&#x5DE6;&#x5B69;&#x5B50;&#x662F;&#x7EA2;&#x8272;,&#x53F3;&#x5B69;&#x5B50;&#x989C;&#x8272;&#x4E0D;&#x9650; else if (RBT_COLOR_RED == pBrotherNode-&gt;pLeft-&gt;Color) { pBrotherNode-&gt;Color = pFixNode-&gt;pParent-&gt;Color; pFixNode-&gt;pParent-&gt;Color = RBT_COLOR_BLACK; pBrotherNode-&gt;pLeft-&gt;Color = RBT_COLOR_BLACK; pRBTreeNode pPivot = pFixNode-&gt;pParent; pRBTreeNode pNewTop = nullptr; if (pRoot == pPivot) { SingleRight(pPivot, pNewTop); } else if (pPivot == pPivot-&gt;pParent-&gt;pLeft) { SingleRight(pPivot-&gt;pParent-&gt;pLeft, pNewTop); } else if (pPivot == pPivot-&gt;pParent-&gt;pRight) { SingleRight(pPivot-&gt;pParent-&gt;pRight, pNewTop); } //&#x5728;&#x6267;&#x884C;&#x5B8C;&#x8FD9;&#x4E00;&#x6B65;&#x540E;&#xFF0C;&#x4E00;&#x5B9A;&#x4F1A;&#x8C03;&#x6574;&#x597D;&#xFF0C;&#x76F4;&#x63A5;&#x8BBE;&#x7F6E;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x4E0B;&#x6B21;&#x9000;&#x51FA; pFixNode = pRoot; } } } pFixNode-&gt;Color = RBT_COLOR_BLACK;}void RBTree::SingleLeft(pRBTreeNode &amp; pNode, pRBTreeNode &amp; newTop){ /* k2 k1 \ / \ k1 k2 N \ N */ pRBTreeNode k2 = pNode; pRBTreeNode k1 = pNode-&gt;pRight; k2-&gt;pRight = k1-&gt;pLeft; //&#x4FEE;&#x6539;k1&#x5DE6;&#x5B69;&#x5B50;&#x7684;&#x7236;&#x8282;&#x70B9; if (k1-&gt;pLeft) { k1-&gt;pLeft-&gt;pParent = k2; } k1-&gt;pLeft = k2; //&#x4FEE;&#x6539;k1&#x7684;&#x7236;&#x8282;&#x70B9; k1-&gt;pParent = pNode-&gt;pParent; //&#x4FEE;&#x6539;k2&#x7684;&#x7236;&#x8282;&#x70B9; k2-&gt;pParent = k1; //&#x8FD4;&#x56DE;&#x7ED3;&#x679C; pNode = k1; newTop = k1;}void RBTree::SingleRight(pRBTreeNode &amp; pNode, pRBTreeNode &amp; newTop){ /* k2 k1 / / \ k1 N k2 / N */ pRBTreeNode k2 = pNode; pRBTreeNode k1 = pNode-&gt;pLeft; k2-&gt;pLeft = k1-&gt;pRight; //&#x4FEE;&#x6539;k1&#x53F3;&#x5B69;&#x5B50;&#x7684;&#x7236;&#x8282;&#x70B9; if (k1-&gt;pRight) { k1-&gt;pRight-&gt;pParent = k2; } k1-&gt;pRight = k2; //&#x4FEE;&#x6539;k1&#x7684;&#x7236;&#x8282;&#x70B9; k1-&gt;pParent = pNode-&gt;pParent; //&#x4FEE;&#x6539;k2&#x7684;&#x7236;&#x8282;&#x70B9; k2-&gt;pParent = k1; //&#x8FD4;&#x56DE;&#x7ED3;&#x679C; pNode = k1; newTop = k1;}void RBTree::ReplaceParent(pRBTreeNode pBeReplacedNode, pRBTreeNode pReplaceNode){ //&#x66FF;&#x6362;&#x8282;&#x70B9;&#x5E76;&#x4FEE;&#x6539;&#x7236;&#x8282;&#x70B9;&#x7684;&#x64CD;&#x4F5C; //1. &#x5982;&#x679C;pBeReplacedNode&#x662F;&#x6839;&#x8282;&#x70B9; if (pBeReplacedNode == pRoot) { pRoot = pReplaceNode; } //2. &#x5982;&#x679C;pBeReplacedNode&#x662F;&#x7236;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B69;&#x5B50; else if (pBeReplacedNode == pBeReplacedNode-&gt;pParent-&gt;pLeft) { pBeReplacedNode-&gt;pParent-&gt;pLeft = pReplaceNode; } //3. &#x5982;&#x679C;pBeReplacedNode&#x662F;&#x7236;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B69;&#x5B50; else if (pBeReplacedNode == pBeReplacedNode-&gt;pParent-&gt;pRight) { pBeReplacedNode-&gt;pParent-&gt;pRight = pReplaceNode; } //4. &#x4FEE;&#x6539;pReplaceNode&#x7684;&#x7236;&#x4EB2;&#x8282;&#x70B9; pReplaceNode-&gt;pParent = pBeReplacedNode-&gt;pParent;}bool RBTree::GetMinNode(pRBTreeNode pNode, pRBTreeNode &amp; pMinNode){ if (nullptr == pNode || pNode == pNil) return false; pRBTreeNode pPreNode = pNode-&gt;pParent; while (pNil != pNode) { pPreNode = pNode; pNode = pNode-&gt;pLeft; } pMinNode = pPreNode; return true;}RBTree::RBTree(){ pRoot = nullptr; pNil = new RBTreeNode(); pNil-&gt;pLeft = nullptr; pNil-&gt;pRight = nullptr; pNil-&gt;pParent = nullptr; pNil-&gt;Color = RBT_COLOR_BLACK; pNil-&gt;Value = 0xFFFFFFFF;}RBTree::~RBTree(){ if (!isEmpty()) { std::queue&lt;pRBTreeNode&gt;nodeQue; nodeQue.push(pRoot); //&#x6839;&#x8282;&#x70B9;&#x5165;&#x961F; while (!nodeQue.empty()) //&#x961F;&#x5217;&#x975E;&#x7A7A; { pRBTreeNode pNode = nodeQue.front(); pRBTreeNode pLeft = pNode-&gt;pLeft; pRBTreeNode pRight = pNode-&gt;pRight; //&#x51FA;&#x961F;&#x91CA;&#x653E;&#x8D44;&#x6E90; nodeQue.pop(); if (pLeft != pNil)nodeQue.push(pLeft); if (pRight != pNil)nodeQue.push(pRight); } } if (pNil) //&#x5982;&#x679C;&#x662F;&#x7A7A;&#x8282;&#x70B9; { delete pNil; pNil = nullptr; }}bool RBTree::FindElement(int Value){ if (isEmpty()) { return false; } pRBTreeNode pCurrent = pRoot; while (pNil != pCurrent) { if (Value&lt;pCurrent-&gt;Value) { pCurrent = pCurrent-&gt;pLeft; } else if (Value&gt;pCurrent-&gt;Value) { pCurrent = pCurrent-&gt;pRight; } else { return true; } } return false;}void RBTree::BFS(){ if (isEmpty())return; std::queue&lt;pRBTreeNode&gt;nodeQue; nodeQue.push(pRoot); //BFS int TreeHeight = 0; while (!nodeQue.empty()) { int nCurrentLevelSize = nodeQue.size(); //&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x5C42;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570; int nCnt = 0; std::cout &lt;&lt; &quot;&#x7B2C;&quot; &lt;&lt; TreeHeight + 1 &lt;&lt; &quot;&#x5C42;&quot;; while (nCnt &lt; nCurrentLevelSize) { pRBTreeNode acessNode = nodeQue.front(); nodeQue.pop(); if (acessNode == pRoot) { std::cout &lt;&lt; acessNode-&gt;Value &lt;&lt; &quot;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x989C;&#x8272;&quot; &lt;&lt; acessNode-&gt;Color &lt;&lt; &quot;)&quot; &lt;&lt; &apos; &apos;; } else { if (acessNode-&gt;pParent-&gt;pLeft == acessNode) { std::cout &lt;&lt; &quot;[(&quot; &lt;&lt; acessNode-&gt;Value &lt;&lt; &quot;&#x989C;&#x8272;&quot; &lt;&lt; acessNode-&gt;Color &lt;&lt; &apos;)&apos; &lt;&lt; &apos;(&apos; &lt;&lt; acessNode-&gt;pParent-&gt;Value &lt;&lt; &quot;&#x7684;&#x5DE6;&#x5B69;&#x5B50;)]&quot; &lt;&lt; &apos; &apos;; } else if (acessNode-&gt;pParent-&gt;pRight == acessNode) { std::cout &lt;&lt; &quot;[(&quot; &lt;&lt; acessNode-&gt;Value &lt;&lt; &quot;&#x989C;&#x8272;&quot; &lt;&lt; acessNode-&gt;Color &lt;&lt; &apos;)&apos; &lt;&lt; &apos;(&apos; &lt;&lt; acessNode-&gt;pParent-&gt;Value &lt;&lt; &quot;&#x7684;&#x53F3;&#x5B69;&#x5B50;)]&quot; &lt;&lt; &apos; &apos;; } } //&#x4E0B;&#x4E00;&#x5C42;&#x7684;&#x5143;&#x7D20; pRBTreeNode pLeft = acessNode-&gt;pLeft; pRBTreeNode pRight = acessNode-&gt;pRight; if (pNil != pLeft) { nodeQue.push(pLeft); } if (pNil != pRight) { nodeQue.push(pRight); } ++nCnt; } TreeHeight++; std::cout &lt;&lt; std::endl; } std::cout &lt;&lt; std::endl;}bool RBTree::isEmpty() //&#x5224;&#x7A7A;{ return pRoot == nullptr;}bool RBTree::GetMax(pRBTreeNode pNode, int &amp; MaxValue){ if (nullptr == pNode) { return false; } while (pNode) { MaxValue = pNode-&gt;Value; pNode = pNode-&gt;pRight; } return true;}bool RBTree::GetMin(pRBTreeNode pNode, int &amp; MinValue){ if (nullptr == pNode) return false; while (pNode) { MinValue = pNode-&gt;Value; pNode = pNode-&gt;pLeft; } return true;}void RBTree::DeleteElement(int DeleteValue){ /* &#x5220;&#x9664;&#x64CD;&#x4F5C; &#x57FA;&#x672C;&#x601D;&#x8DEF;&#x5982;&#x4E0B;&#xFF1A; 1. &#x5C06;&#x7EA2;&#x9ED1;&#x6811;&#x5F53;&#x505A;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#xFF0C;&#x5C06;&#x8282;&#x70B9;&#x5220;&#x9664;&#x3002; &#x5206;&#x4E09;&#x79CD;&#x60C5;&#x51B5;&#xFF1A; 1. &#x88AB;&#x5220;&#x9664;&#x8282;&#x70B9;&#x6CA1;&#x6709;&#x513F;&#x5B50;&#xFF0C;&#x5373;&#x4E3A;&#x53F6;&#x8282;&#x70B9;&#xFF0C;&#x6B64;&#x65F6;&#x76F4;&#x63A5;&#x5220;&#x9664;&#x5373;&#x53EF;&#x3002;&#x7528;&#x7A7A;&#x8282;&#x70B9;&#x9876;&#x66FF;&#x5B83;&#x7684;&#x4F4D;&#x7F6E;&#x3002; 2. &#x88AB;&#x5220;&#x9664;&#x8282;&#x70B9;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x6B64;&#x65F6;&#xFF0C;&#x76F4;&#x63A5;&#x5220;&#x9664;&#x8BE5;&#x8282;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x552F;&#x4E00;&#x5B50;&#x8282;&#x70B9;&#x9876;&#x66FF;&#x4ED6;&#x3002; 3. &#x88AB;&#x5220;&#x9664;&#x8282;&#x70B9;&#x6709;&#x4E24;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x5219;&#x8981;&#x5148;&#x627E;&#x5230;&#x5B83;&#x7684;&#x76F4;&#x63A5;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF0C;&#x628A;&#x503C;&#x590D;&#x5236;&#x5230;&#x5B83;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x5220;&#x9664;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x4E0D;&#x53EF;&#x80FD;&#x6709;&#x4E24;&#x4E2A;&#x975E;&#x7A7A;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x6700;&#x591A;&#x53EA;&#x8FDB;&#x884C;&#x4E00;&#x6B21;&#x3002; 2. &#x4FEE;&#x6B63;&#x8FD9;&#x68F5;&#x6811; &#x5728;&#x5220;&#x9664;&#x8282;&#x70B9;&#x540E;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x8FDD;&#x53CD;2,4,5&#x4E09;&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B65;&#x5373;&#x662F;&#x8C03;&#x6574;&#x6574;&#x68F5;&#x6811;&#xFF0C;&#x4F7F;&#x4E4B;&#x6EE1;&#x8DB3;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#x3002; */ if (isEmpty()) return; //&#x5148;&#x627E;&#x5230;&#x8981;&#x5220;&#x9664;&#x7684;&#x8282;&#x70B9; pRBTreeNode pCurrent = pRoot; pRBTreeNode pDeletedNode = nullptr; while (pNil != pCurrent) { if (DeleteValue&lt;pCurrent-&gt;Value) { pCurrent = pCurrent-&gt;pLeft; } else if (DeleteValue&gt;pCurrent-&gt;Value) { pCurrent = pCurrent-&gt;pRight; } else { pDeletedNode = pCurrent; break; } } //2. &#x5982;&#x679C;&#x672A;&#x627E;&#x5230;&#xFF0C;&#x5219;&#x76F4;&#x63A5;&#x9000;&#x51FA; if (nullptr == pDeletedNode)return; //3. &#x6267;&#x884C;&#x5220;&#x9664;&#x64CD;&#x4F5C;&#xFF0C;&#x8BA1;&#x7B97;&#x51FA;pDeletedNode,pRealDeleteNode,pFixUpNode. pRBTreeNode pRealDeleteNode = nullptr; pRBTreeNode pFixUpNode = nullptr; RBTColor RealDeleteColor; //3.1&#x5982;&#x679C;&#x5DE6;&#x5B50;&#x6811;&#x4E3A;&#x7A7A; if (pNil == pDeletedNode-&gt;pLeft) { pRealDeleteNode = pDeletedNode; RealDeleteColor = pRealDeleteNode-&gt;Color; pFixUpNode = pRealDeleteNode-&gt;pRight; //&#x66FF;&#x6362; ReplaceParent(pRealDeleteNode, pRealDeleteNode-&gt;pRight); } //3.2 &#x5982;&#x679C;&#x53F3;&#x5B50;&#x6811;&#x4E3A;&#x7A7A; else if (pNil == pDeletedNode-&gt;pRight) { pRealDeleteNode = pDeletedNode; RealDeleteColor = pRealDeleteNode-&gt;Color; pFixUpNode = pRealDeleteNode-&gt;pLeft; //&#x66FF;&#x6362; ReplaceParent(pRealDeleteNode, pRealDeleteNode-&gt;pLeft); } //3.3 &#x5982;&#x679C;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x90FD;&#x4E0D;&#x4E3A;&#x7A7A; else { /* &#x53EF;&#x4EE5;&#x7528;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5C0F;&#x7684;&#x8282;&#x70B9;&#x6216;&#x8005;&#x5DE6;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5927;&#x7684;&#x8282;&#x70B9;&#x6765;&#x66FF;&#x6362;&#xFF0C;&#x8FD9;&#x91CC;&#x9009;&#x62E9;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5C0F;&#x7684;&#x8282;&#x70B9;&#x3002;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4FDD;&#x8BC1;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x6027;&#x8D28;&#x4E0D;&#x53D8; */ //&#x83B7;&#x53D6;&#x51C6;&#x5907;&#x5220;&#x9664;&#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#xFF0C;pRealDeleteNode&#x4E00;&#x5B9A;&#x4E0D;&#x662F;pNil bool GetMinRet = GetMinNode(pDeletedNode-&gt;pRight, pRealDeleteNode); assert(GetMinRet); assert(pRealDeleteNode != pNil); RealDeleteColor = pRealDeleteNode-&gt;Color; //&#x6700;&#x5C0F;&#x7684;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x5DF2;&#x5B9A;&#x4F4D;pNil,&#x6240;&#x4EE5;pRight&#x5C31;&#x662F;&#x5B83;&#x7684;&#x540E;&#x7EE7;&#x8282;&#x70B9;&#x3002; pFixUpNode = pRealDeleteNode-&gt;pRight; //&#x601D;&#x8DEF;&#x662F;&#x7528;&#x6700;&#x5C0F;&#x70B9;&#xFF08;pRealDeleteNode&#xFF09;&#x6765;&#x66FF;&#x6362;&#x9700;&#x8981;&#x5220;&#x9664;&#x7684;&#x70B9;&#xFF08;pDeletedNode&#xFF09;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5206;&#x4E24;&#x79CD;&#x60C5;&#x51B5; if (pRealDeleteNode-&gt;pParent == pDeletedNode) { pFixUpNode-&gt;pParent = pRealDeleteNode; } else { //&#x8BA9;pRealDeleteNode&#x7236;&#x8282;&#x70B9;&#x6307;&#x5411; pRealDeleteNode-&gt;pRight ReplaceParent(pRealDeleteNode, pRealDeleteNode-&gt;pRight); //&#x8BA9;pRealDeleteNode&#x7684;&#x53F3;&#x8282;&#x70B9;&#x63A5;&#x7BA1;&#x539F;&#x6765;pDeletedNode&#x7684;&#x53F3;&#x8282;&#x70B9; pRealDeleteNode-&gt;pRight = pDeletedNode-&gt;pRight; //&#x8BA9;pRealDeleteNode&#x7684;&#x53F3;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x6307;&#x5411;pRealDeleteNode(&#x53F3;&#x5B50;&#x6811;&#x4E00;&#x5B9A;&#x4E0D;&#x4E3A;pNil) pRealDeleteNode-&gt;pRight-&gt;pParent = pRealDeleteNode; } //&#x8BA9;pDeleteNode&#x7236;&#x8282;&#x70B9;&#x6307;&#x5411;pRealDeleteNode ReplaceParent(pDeletedNode, pRealDeleteNode); //&#x8BA9;pRealDeleteNode&#x7684;&#x5DE6;&#x8282;&#x70B9;&#x63A5;&#x7BA1;&#x539F;&#x6765;pDeleteNode&#x7684;&#x53F3;&#x8282;&#x70B9; pRealDeleteNode-&gt;pLeft = pDeletedNode-&gt;pLeft; //&#x8BA9;pRealDeleteNode&#x7684;&#x5DE6;&#x5B69;&#x5B50;&#x7684;&#x7236;&#x8282;&#x70B9;&#x6307;&#x5411;pRealDeleteNode(&#x5DE6;&#x5B50;&#x6811;&#x4E00;&#x5B9A;&#x4E0D;&#x4E3A;pNil) pRealDeleteNode-&gt;pLeft-&gt;pParent = pRealDeleteNode; // &#x4F7F;&#x7528;pDeleteNode&#x7684;&#x989C;&#x8272; pRealDeleteNode-&gt;Color = pDeletedNode-&gt;Color; } //4. &#x5728;pFixUpNode&#x70B9;&#x6267;&#x884C;&#x8C03;&#x6574; if (RBT_COLOR_BLACK == RealDeleteColor) { DeleteFixUp(pFixUpNode); } //5. &#x5904;&#x7406;&#x6839;&#x8282;&#x70B9;&#x95EE;&#x9898; if (pRoot == pNil) pRoot = nullptr; delete pDeletedNode;}void RBTree::InsertData(int InsertValue){ /* &#x63D2;&#x5165;&#x8282;&#x70B9;&#xFF1A; &#x4EE5;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x6811;&#x7684;&#x65B9;&#x6CD5;&#x589E;&#x52A0;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002; &#x4E00;&#x5F00;&#x59CB;&#x8981;&#x628A;&#x8282;&#x70B9;&#x7684;&#x989C;&#x8272;&#x6807;&#x8BB0;&#x4E3A;&#x7EA2;&#x8272;&#x3002;&#x5982;&#x679C;&#x8BBE;&#x4E3A;&#x9ED1;&#x8272;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x6839;&#x5230;&#x53F6;&#x5B50;&#x7684;&#x8DEF;&#x5F84;&#x4E0A;&#xFF0C;&#x4F1A;&#x6709;&#x4E00;&#x6761;&#x8DEF;&#x591A;&#x4E00;&#x4E2A;&#x989D;&#x5916;&#x7684;&#x9ED1;&#x8272;&#x8282;&#x70B9;&#x3002;&#x8FD9;&#x4E2A;&#x662F;&#x5F88;&#x96BE;&#x8C03;&#x6574;&#x7684;&#x3002; &#x53E6;&#x4E00;&#x4E2A;&#x7406;&#x89E3;&#x662F;&#xFF0C;&#x628A;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x7740;&#x8272;&#x4E3A;&#x7EA2;&#x8272;&#xFF0C;&#x4E0D;&#x4F1A;&#x8FDD;&#x80CC;&#x7EA6;&#x675F;&#x6761;&#x4EF6;1235&#xFF0C;&#x53EA;&#x8FDD;&#x80CC;&#x4E00;&#x4E2A;&#x7EA6;&#x675F;&#x6761;&#x4EF6;&#xFF0C;&#x9700;&#x8981;&#x5904;&#x7406;&#x7684;&#x60C5;&#x51B5;&#x4F1A;&#x5F88;&#x5C11;&#x3002; &#x63D2;&#x5165;&#x540E;&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x7CFB;&#x5217;&#x7684;&#x65CB;&#x8F6C;&#x3001;&#x7740;&#x8272;&#x7B49;&#x64CD;&#x4F5C;&#xFF0C;&#x4F7F;&#x4E4B;&#x91CD;&#x65B0;&#x6210;&#x4E3A;&#x4E00;&#x9897;&#x7EA2;&#x9ED1;&#x6811;&#x3002; */ //&#x63D2;&#x5165;&#x7684;&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF1A;&#x8981;&#x63D2;&#x5165;&#x7684;&#x8282;&#x70B9;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9; if (isEmpty()) { pRoot = new RBTreeNode(); pRoot-&gt;Color = RBT_COLOR_BLACK; pRoot-&gt;Value = InsertValue; pRoot-&gt;pLeft = pNil; pRoot-&gt;pRight = pNil; pRoot-&gt;pParent = pNil; return; } //2. &#x627E;&#x5230;&#x9700;&#x8981;&#x63D2;&#x5165;&#x7684;&#x4F4D;&#x7F6E; pRBTreeNode pPreNode = pRoot-&gt;pParent; pRBTreeNode pCurrent = pRoot; while (pNil != pCurrent) { pPreNode = pCurrent; if (InsertValue &lt;= pCurrent-&gt;Value) { pCurrent = pCurrent-&gt;pLeft; } else { pCurrent = pCurrent-&gt;pRight; } } //3. &#x628A;&#x6570;&#x636E;&#x63D2;&#x5165;&#x5230;&#x6B63;&#x786E;&#x7684;&#x4F4D;&#x7F6E; pRBTreeNode pInsertNode = new RBTreeNode(); pInsertNode-&gt;Color = RBT_COLOR_RED; pInsertNode-&gt;Value = InsertValue; pInsertNode-&gt;pLeft = pNil; pInsertNode-&gt;pRight = pNil; pInsertNode-&gt;pParent = pPreNode; if (InsertValue &lt;= pPreNode-&gt;Value) { pPreNode-&gt;pLeft = pInsertNode; } else { pPreNode-&gt;pRight = pInsertNode; } //4. &#x8C03;&#x6574; InsertFixUP(pInsertNode);} &#x6D4B;&#x8BD5;&#x4EE3;&#x7801;main.cpp12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;#include &quot;RBTree.h&quot;#pragma warning(disable:4996)int main(){ RBTree rbTree; //&#x63D2;&#x5165; int n[]= { 12, 1, 9, 2, 0, 11, 7, 19, 4, 15, 18, 5, 14, 13, 10, 16, 6, 3, 8, 17 }; //int n[] = {1,2,3 }; for (int i = 0; i &lt; 20; i++) { rbTree.InsertData(n[i]); } rbTree.BFS(); std::cout &lt;&lt; &quot;------------------------------&quot; &lt;&lt; std::endl; //&#x5220;&#x9664; for (int i = 0; i &lt;20; i++) { std::cout &lt;&lt; &quot;&#x5220;&#x9664;&quot; &lt;&lt; n[i] &lt;&lt; &quot;&#x540E;&quot; &lt;&lt; std::endl; rbTree.DeleteElement(n[i]); rbTree.BFS(); } //&#x63D2;&#x5165;&#x4EFB;&#x610F;&#x5E8F;&#x5217; std::cout &lt;&lt; &quot;&#x63D2;&#x5165;&#x4EFB;&#x610F;&#x5E8F;&#x5217;&quot; &lt;&lt; std::endl; for (int i = 0; i &lt; 100; i++) { rbTree.InsertData(i); } //&#x67E5;&#x627E;3 std::cout &lt;&lt; &quot;&#x67E5;&#x627E;3&quot; &lt;&lt; std::endl; std::cout &lt;&lt; &quot;&#x7ED3;&#x679C;:&quot; &lt;&lt; rbTree.FindElement(3) &lt;&lt; std::endl; rbTree.BFS(); std::cout &lt;&lt; &quot;------------------------------&quot; &lt;&lt; std::endl; //&#x5220;&#x9664;&#x4EFB;&#x610F;&#x5E8F;&#x5217;,&#x53EA;&#x7559;&#x4E09;&#x4E2A; for (int i = 99; i &gt;= 3; i--) { rbTree.DeleteElement(i); } //&#x5E7F;&#x5EA6;&#x904D;&#x5386; rbTree.BFS(); std::cout &lt;&lt; &quot;------------------------------&quot; &lt;&lt; std::endl; system(&quot;pause&quot;); return 0;} &#x56FE;&#x89E3;&#x5DE6;&#x65CB;To Do&#x2026;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>红黑树</tag>
        <tag>算法导论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10+Anaconda+1060安装TensorFlowow-GPU版]]></title>
    <url>%2F%2Fposts%2F2e45cbc8%2F</url>
    <content type="text"><![CDATA[1060&#x771F;&#x9999;&#x3002; &#x5F15;&#x8A00;TensorFlow&#x662F;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x673A;&#x5668;&#x5B66;&#x4E60;&amp;&amp;&#x6DF1;&#x5EA6;&#x5B66;&#x4E60;&#x7684;&#x6846;&#x67B6;&#xFF0C;&#x4F7F;&#x7528;GPU&#x5728;&#x5927;&#x591A;&#x6570;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x4EE5;&#x5927;&#x5E45;&#x63D0;&#x9AD8;&#x5176;&#x8FD0;&#x7B97;&#x901F;&#x5EA6;&#x3002; &#x672C;&#x6587;&#x8BB0;&#x5F55;&#x4E86;&#x6211;&#x5B89;&#x88C5;TensorFlow-GPU&#x7248;&#x672C;&#x7684;&#x8FC7;&#x7A0B;&#x3002; &#x73AF;&#x5883; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#xFF1A;Win10&#xFF0C;Windows SDK&#xFF1A;10.0.17134.0 GPU&#x578B;&#x53F7;&#xFF1A;GTX1060&#xFF0C;&#x79FB;&#x52A8;&#x7248; IDE&#xFF1A;VS2017&#x4F01;&#x4E1A;&#x7248;&#xFF0C;&#x7248;&#x672C;15.8.5 Anaconda&#x7248;&#x672C;1.9.2 &#x76EE;&#x6807;TensorFlow&#x7248;&#x672C;&#xFF1A;1.10 &#x5B89;&#x88C5;NVIDIA&#x663E;&#x5361;&#x9A71;&#x52A8;&#x4E00;&#x822C;&#x7684;&#x90FD;&#x662F;GTX&#x7CFB;&#x5217;&#x7684;&#x663E;&#x5361;&#xFF0C;&#x53EF;&#x7531;NVIDIA&#x5B98;&#x7F51;&#x4E0B;&#x8F7D;&#x6216;&#x8005;&#x4ECE;&#x7535;&#x8111;&#x5382;&#x5546;&#x7ED9;&#x51FA;&#x7684;&#x9A71;&#x52A8;&#x91CC;&#x5B89;&#x88C5;&#x3002;&#x6211;&#x7684;&#x7B14;&#x8BB0;&#x672C;&#x662F;&#x8054;&#x60F3;&#x62EF;&#x6551;&#x8005;Y7000P&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x76F4;&#x63A5;&#x5B89;&#x88C5;&#x7684;&#x8054;&#x60F3;&#x7ED9;&#x7684;&#x9A71;&#x52A8;&#x3002; &#x5B89;&#x88C5;CUDA&#x548C;cudnn&#x5728;TensorFlow&#x7684;&#x5B89;&#x88C5;&#x4ECB;&#x7ECD;&#x91CC;&#x7684;&#x663E;&#x793A;&#xFF0C;TensorFlow&#x652F;&#x6301;CUDA9.0&#x3002; &#x4E0B;&#x8F7D;CUDA&#x7684;&#x65F6;&#x5019;&#x53D1;&#x73B0;&#xFF0C;CUDA9.0&#x7ADF;&#x7136;&#x4E0D;&#x652F;&#x6301;1060&#x3002;&#x66FE;&#x8003;&#x8651;&#x5728;Docker&#x73AF;&#x5883;&#x4E0B;&#x5B89;&#x88C5;TensorFlow&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0;NVIDIA&#x7ED9;&#x7684;GPU&#x652F;&#x6301;&#x7684;Docker&#x73AF;&#x5883;&#x662F;Linux&#x4E0B;&#x7684;&#xFF0C;&#x4E0D;&#x652F;&#x6301;Windows&#x3002; &#x5982;&#x679C;&#x8981;&#x5728;CUDA9.2&#x4E0B;&#x5B89;&#x88C5;TensorFlow&#xFF0C;&#x5219;&#x8981;&#x901A;&#x8FC7;&#x6E90;&#x7801;&#x7F16;&#x8BD1;&#x3002;&#x4E0D;&#x8FC7;&#x597D;&#x5728;&#x6709;&#x5927;&#x795E;&#x5DF2;&#x7ECF;&#x7F16;&#x8BD1;&#x597D;&#x4E86;&#x3002; &#x5B89;&#x88C5;CUDA9.2&#xFF0C;&#x53CA;&#x5176;&#x8865;&#x4E01;&#x7A0B;&#x5E8F;&#x3002; &#x5728;cudnn&#x91CC;&#x627E;&#x5230;&#x652F;&#x6301;CUDA9.2&#x7684;&#x7248;&#x672C;&#x3002;&#x89E3;&#x538B;&#x540E;&#x5C06;bin,include,lib&#x6587;&#x4EF6;&#x5939;&#x7684;&#x6587;&#x4EF6;&#xFF08;&#x4E00;&#x5171;&#x5C31;&#x4E09;&#x4E2A;&#xFF09;&#x590D;&#x5236;&#x5230;CUDA9.2&#x7684;&#x76EE;&#x5F55;&#xFF08;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2&#xFF09;&#x91CC;&#x3002; &#x81F3;&#x6B64;&#xFF0C;CUDA9.2&#x5DF2;&#x5B89;&#x88C5;&#x5B8C;&#x6BD5;&#x3002; &#x6211;&#x7684;VS&#x662F;VS2017&#x4F01;&#x4E1A;&#x7248;&#xFF0C;&#x7248;&#x672C;15.8.5&#x3002;&#x4E3A;&#x4E86;&#x80FD;&#x6B63;&#x5E38;&#x7684;&#x8FD0;&#x884C;CUDA9.2&#x7ED9;&#x51FA;&#x7684;&#x793A;&#x4F8B;&#x4EE3;&#x7801;&#xFF0C;&#x9700;&#x8981;&#x5C06;C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v9.2\include\crt&#x91CC;&#x7684;host_config.h &#x7B2C;131&#x884C;&#xFF0C;&#x6539;&#x4E3A;1#if _MSC_VER &lt; 1600 || _MSC_VER &gt; 1920 &#x7136;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x6253;&#x5F00;&#x5BF9;&#x5E94;&#x7684;VS2017&#x7684;.sln&#x6587;&#x4EF6;&#xFF0C;&#x8FD0;&#x884C;&#x793A;&#x4F8B;&#x4EE3;&#x7801;&#x4E86;&#x3002; &#x5728;Anaconda&#x73AF;&#x5883;&#x4E2D;&#x5B89;&#x88C5;TensorFlow1.10&#x4EE5;&#x7BA1;&#x7406;&#x5458;&#x8EAB;&#x4EFD;&#x8FD0;&#x884C;anaconda prompt&#x3002; &#x9996;&#x5148;&#x5728;anaconda&#x91CC;&#x5EFA;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;1conda create -n tensorflow pip python=3.6 &#x6FC0;&#x6D3B;1activate tensorflow &#x66F4;&#x65B0;pip1python -m pip install --upgrade pip &#x5728;&#x8FD9;&#x91CC;&#x4E0B;&#x8F7D;&#x7531;&#x5927;&#x795E;&#x7F16;&#x8BD1;&#x597D;&#x7684;TensorFlow1.10GPU&#x7248;&#x672C;&#x3002; &#x8F6C;&#x5230;&#x4E0B;&#x8F7D;&#x76EE;&#x5F55;&#xFF0C;&#x901A;&#x8FC7;pip install&#x547D;&#x4EE4;&#x5B89;&#x88C5;&#x3002;1pip install tensorflow_gpu-1.10.0-cp36-cp36m-win_amd64.whl &#x7ED3;&#x679C;&#x5982;&#x56FE; &#x6D4B;&#x8BD5;&#x5B89;&#x88C5;&#x6D4B;&#x8BD5;&#x4EE3;&#x7801;&#x68C0;&#x6D4B;&#x662F;&#x5426;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x7684;&#x4EE3;&#x7801;&#xFF1A; &#x8C03;&#x7528;Python 1$ python &#x5728; Python &#x4EA4;&#x4E92;&#x5F0F; shell &#x4E2D;&#x8F93;&#x5165;&#x4EE5;&#x4E0B;&#x51E0;&#x884C;&#x7A0B;&#x5E8F;&#x4EE3;&#x7801;&#xFF1A; 1234&gt;&gt;&gt; import tensorflow as tf&gt;&gt;&gt; hello = tf.constant(&apos;Hello, TensorFlow!&apos;)&gt;&gt;&gt; sess = tf.Session()&gt;&gt;&gt; print(sess.run(hello)) &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#x5982;&#x56FE;&#x8868;&#x793A;&#x5B89;&#x88C5;&#x6210;&#x529F;&#x3002; &#x6D4B;&#x8BD5;GPU&#x901F;&#x5EA6;&#x4EE3;&#x7801;1234567891011121314151617181920212223import sysimport numpy as npimport tensorflow as tffrom datetime import datetimedevice_name=&quot;/cpu:0&quot;shape=(int(10000),int(10000))with tf.device(device_name):#&#x5F62;&#x72B6;&#x4E3A;shap,&#x5143;&#x7D20;&#x670D;&#x4ECE;minval&#x548C;maxval&#x4E4B;&#x95F4;&#x7684;&#x5747;&#x5300;&#x5206;&#x5E03; random_matrix = tf.random_uniform(shape=shape, minval=0, maxval=1) dot_operation = tf.matmul(random_matrix, tf.transpose(random_matrix)) sum_operation = tf.reduce_sum(dot_operation)startTime = datetime.now()with tf.Session(config=tf.ConfigProto(log_device_placement=True)) as session: result = session.run(sum_operation) print(result)print(&quot;\n&quot; * 2)print(&quot;Shape:&quot;, shape, &quot;Device:&quot;, device_name)print(&quot;Time taken:&quot;, datetime.now() - startTime) &#x5728;&#x6211;&#x7684;&#x7535;&#x8111;&#x4E0A;&#xFF0C;&#x8FD0;&#x884C;&#x7ED3;&#x679C;&#x5982;&#x4E0B;&#xFF1A; &#x4F7F;&#x7528;GPU&#xFF1A;&#x4F7F;&#x7528;CPU&#xFF1A; &#x53EF;&#x89C1;&#xFF0C;&#x5C31;&#x4E0A;&#x8FF0;&#x4EE3;&#x7801;&#x800C;&#x8A00;&#xFF0C;&#x4F7F;&#x7528;GPU&#x662F;&#x6BD4;&#x4F7F;&#x7528;CPU&#x5FEB;&#x597D;&#x51E0;&#x500D;&#x7684;&#x3002; &#x4F7F;&#x7528;VS2017&#x8C03;&#x8BD5;TensorFlow&#x4EE3;&#x7801;&#x521A;&#x624D;&#x6F14;&#x793A;&#x7684;&#x662F;&#x5728;Anaconda Prompt&#x4E2D;&#x8FD0;&#x884C;python&#x4EE3;&#x7801;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x8981;&#x60F3;&#x7528;VS2017&#x8FD0;&#x884C;python&#x4EE3;&#x7801;&#xFF0C;&#x9700;&#x8981;&#x5728;&#x201D;&#x9879;&#x76EE;-&#x201C;python&#x73AF;&#x5883;&#x201D;&#x4E2D;&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#x3002;&#x5982;&#x4E0B;:]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>深度学习</tag>
        <tag>TensorFlow</tag>
        <tag>GPU</tag>
        <tag>Anaconda</tag>
        <tag>GTX1060</tag>
        <tag>安装教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01背包笔记]]></title>
    <url>%2F%2Fposts%2F829adb17%2F</url>
    <content type="text"><![CDATA[01&#x80CC;&#x5305;&#x95EE;&#x9898;&#x63CF;&#x8FF0;&#x5DF2;&#x77E5;:&#x6709;&#x4E00;&#x4E2A;&#x5BB9;&#x91CF;&#x4E3A;V&#x7684;&#x80CC;&#x5305;&#x548C;N&#x4EF6;&#x7269;&#x54C1;&#xFF0C;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#x7684;&#x91CD;&#x91CF;&#x662F;weight[i]&#xFF0C;&#x6536;&#x76CA;&#x662F;cost[i]&#x3002; &#x9650;&#x5236;:&#x6BCF;&#x79CD;&#x7269;&#x54C1;&#x53EA;&#x6709;&#x4E00;&#x4EF6;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x653E;&#x6216;&#x8005;&#x4E0D;&#x653E; &#x95EE;&#x9898;:&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x6216;&#x6536;&#x76CA; &#x76F8;&#x4F3C;&#x95EE;&#x9898;:&#x5728;&#x6070;&#x597D;&#x88C5;&#x6EE1;&#x80CC;&#x5305;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x6216;&#x6536;&#x76CA; &#x8FD9;&#x91CC;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x8BA8;&#x8BBA;&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x6216;&#x6536;&#x76CA;&#x3002; &#x601D;&#x8DEF;&#x95EE;&#x9898;&#x7279;&#x70B9;&#x6BCF;&#x79CD;&#x7269;&#x54C1;&#x53EA;&#x6709;&#x4E00;&#x4EF6;&#xFF0C;&#x53EF;&#x4EE5;&#x9009;&#x62E9;&#x653E;&#x6216;&#x8005;&#x4E0D;&#x653E;&#x3002; &#x5B50;&#x95EE;&#x9898;&#x5B9A;&#x4E49;f[i][v]:&#x524D;i&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x4E00;&#x4E2A;&#x5BB9;&#x91CF;&#x4E3A;v&#x7684;&#x80CC;&#x5305;&#x4E2D;&#x53EF;&#x4EE5;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x3002; &#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;f[i][v]=max(f[i - 1][v],f[i - 1][v - weight[i]] + cost[i]) &#x4EE3;&#x7801;&#xFF1A;12345678for(int i = 1; i &lt;= n; i++) { for(int j = 0; j &lt;= W; j++) { if(j &lt; w[i]) dp[i][j] = dp[i-1][j]; else dp[i][j] = max(dp[i-1][j], dp[i-1][j - w[i]] + v[i]); } } &#x5373;&#x5BF9;&#x4E8E;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#xFF0C;&#x653E;&#x5165;&#x80CC;&#x5305;&#x6216;&#x8005;&#x4E0D;&#x653E;&#x5165;&#x80CC;&#x5305;&#x3002; &#x89E3;&#x91CA;&#x8003;&#x8651;&#x6211;&#x4EEC;&#x7684;&#x5B50;&#x95EE;&#x9898;&#xFF0C;&#x5C06;&#x524D;i&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v&#x7684;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x82E5;&#x6211;&#x4EEC;&#x53EA;&#x8003;&#x8651;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#x65F6;&#xFF0C;&#x5B83;&#x6709;&#x4E24;&#x79CD;&#x9009;&#x62E9;&#xFF0C;&#x653E;&#x6216;&#x8005;&#x4E0D;&#x653E;&#x3002; &#x5982;&#x679C;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#x4E0D;&#x653E;&#x5165;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x5C31;&#x8F6C;&#x6362;&#x4E3A;&#xFF1A;&#x5C06;&#x524D;i - 1&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v&#x7684;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;f[i - 1][v] &#x5982;&#x679C;&#x7B2C;i&#x4EF6;&#x7269;&#x54C1;&#x80FD;&#x653E;&#x5165;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x5C31;&#x8F6C;&#x6362;&#x4E3A;&#xFF1A;&#x5C06;&#x524D;i - 1&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v - weight[i]&#x7684;&#x80CC;&#x5305;&#x4E2D;&#xFF0C;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;f[i - 1][v - weight[i]] + cost[i]&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;iostream&gt;using namespace std;const int N = 3;//&#x7269;&#x54C1;&#x4E2A;&#x6570;const int V = 5;//&#x80CC;&#x5305;&#x6700;&#x5927;&#x5BB9;&#x91CF;int weight[N + 1] = {0,3,2,2};//&#x7269;&#x54C1;&#x91CD;&#x91CF;int value[N + 1] = {0,5,10,20};//&#x7269;&#x54C1;&#x4EF7;&#x503C;int f[N + 1][V + 1] = {{0}};int Max(int x,int y){ return x &gt; y ? x : y;}/*&#x76EE;&#x6807;&#xFF1A;&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x5B50;&#x95EE;&#x9898;&#x72B6;&#x6001;:f[i][j]:&#x8868;&#x793A;&#x524D;i&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5165;&#x5BB9;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x5F97;&#x5230;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;:f[i][j] = max{f[i - 1][j],f[i - 1][j - weight[i]] + value[i]}&#x521D;&#x59CB;&#x5316;:f&#x6570;&#x7EC4;&#x5168;&#x8BBE;&#x7F6E;&#x4E3A;0*/int Knapsack(){ //&#x521D;&#x59CB;&#x5316; memset(f,0,sizeof(f)); //&#x9012;&#x63A8; for (int i = 1;i &lt;= N;i++) //&#x679A;&#x4E3E;&#x7269;&#x54C1; { for (int j = 0;j &lt;= V;j++) //&#x679A;&#x4E3E;&#x80CC;&#x5305;&#x5BB9;&#x91CF; { f[i][j] = f[i - 1][j]; if (j &gt;= weight[i]) { f[i][j] = Max(f[i - 1][j],f[i - 1][j - weight[i]] + value[i]); } } } return f[N][V];}int main(){ cout&lt;&lt;Knapsack()&lt;&lt;endl; system(&quot;pause&quot;); return 1;} &#x6548;&#x7387;&#x5206;&#x6790;&#x4EE5;&#x4E0A;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O&#xFF08;N*V&#xFF09;&#xFF0C;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E5F;&#x662F;O&#xFF08;N*V&#xFF09;&#x3002;&#x5176;&#x4E2D;N&#x4EE3;&#x8868;&#x7269;&#x54C1;&#x7684;&#x4E2A;&#x6570;&#xFF0C;V&#x662F;&#x80CC;&#x5305;&#x7684;&#x5BB9;&#x91CF;&#x3002; &#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E0D;&#x53EF;&#x4EE5;&#x518D;&#x4F18;&#x5316;&#x4E86;&#xFF0C;&#x4F46;&#x662F;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x662F;&#x53EF;&#x4EE5;&#x7EE7;&#x7EED;&#x4F18;&#x5316;&#x5230;O(V)&#x3002; &#x4F18;&#x5316;&#x5206;&#x6790;&#x53EF;&#x4EE5;&#x53EA;&#x7528;f[V]&#x8868;&#x793A;&#x4E2D;&#x95F4;&#x72B6;&#x6001;&#x3002;&#x6839;&#x636E;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;&#xFF1A; f[i][v]=max(f[i - 1][v],f[i - 1][v - weight[i]] + cost[i]) &#x8981;&#x60F3;&#x5F97;&#x5230;f[i][v]&#x53EA;&#x9700;&#x8981;&#x77E5;&#x9053; f[i - 1][v] &#x548C; f[i - 1][v - weight[i]]&#x3002; &#x6211;&#x7684;&#x7406;&#x89E3;&#xFF1A;&#x7531;&#x4E8E;&#x53EA;&#x6709;&#x4E00;&#x4F4D;&#x6570;&#x7EC4;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x6C42;&#x5F97;f[i][v]&#x4E4B;&#x540E;&#xFF0C;&#x5C31;&#x8981;&#x628A;f[i - 1][v]&#x8986;&#x76D6;&#x6389;&#x4E86;&#x3002; &#x56E0;&#x6B64;&#x6C42;f&#x6570;&#x7EC4;&#x7684;&#x65B9;&#x6CD5;&#x5982;&#x4E0B;&#xFF1A; &#x521D;&#x59CB;&#x72B6;&#x6001;&#xFF1A;&#x8BA1;&#x7B97;&#x524D;1&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;V&#x7684;&#x80CC;&#x5305;&#x4E2D;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;&#x3002; &#x9012;&#x63A8;&#x5173;&#x7CFB;&#xFF1A;&#x5728;i&gt;=2&#x65F6;&#xFF0C;&#x6839;&#x636E;&#x524D;i-1&#x4E2A;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v&#x4E2D;&#x7684;&#x80CC;&#x5305;&#x4E2D;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;&#xFF0C;&#x5373;&#x7528;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x7684;&#x65F6;&#x5019;&#x7684;f[i-1][v]&#x3002;&#x6839;&#x636E;&#x524D;i-1&#x4E2A;&#x7269;&#x54C1;&#x653E;&#x5230;&#x5BB9;&#x91CF;&#x4E3A;v-weight[i]&#x7684;&#x80CC;&#x5305;&#x4E2D;&#x5E26;&#x6765;&#x7684;&#x6536;&#x76CA;&#xFF0C;&#x5373;&#x7528;&#x4E8C;&#x7EF4;&#x6570;&#x7EC4;&#x7684;&#x65F6;&#x5019;&#x7684;f[i-1][v-weight[i]]&#x3002;&#x8BA1;&#x7B97;f[i-1][v-weight[i]]+cost[i]&#x3002; &#x5728;&#x6267;&#x884C;&#x7B2C;i&#x6B21;&#x5FAA;&#x73AF;&#x4E4B;&#x524D;&#xFF0C;f[0~v]&#x4E2D;&#x4FDD;&#x5B58;&#x7684;&#x662F;&#x7B2C;i-1&#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x5373;&#x662F;&#x524D;i-1&#x4E2A;&#x7269;&#x4F53;&#x5206;&#x522B;&#x653E;&#x5230;&#x5BB9;&#x91CF;0~V&#x65F6;&#x7684;&#x6700;&#x5927;&#x503C;&#xFF0C;&#x5373;f[i-1][0~V]&#x3002; &#x7531;&#x9012;&#x63A8;&#x516C;&#x5F0F;&#xFF1A;f[i][v]=max(f[i - 1][v],f[i - 1][v - weight[i]] + cost[i])&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF1A;&#x5728;&#x66F4;&#x65B0;f[v]&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8981;&#x7528;&#x5230;f[v]&#x548C;f[v-weight[i]]&#x5219;&#x4E24;&#x4E2A;&#x503C;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x9006;&#x5E8F;&#x66F4;&#x65B0;&#x3002;&#x5373;&#x4ECE;V&#x2026;0&#x66F4;&#x65B0;&#x3002; &#x9006;&#x5E8F;&#x66F4;&#x65B0;&#x6570;&#x7EC4;&#x7684;&#x539F;&#x56E0;&#xFF1A; &#x6211;&#x4EEC;&#x662F;&#x7531;&#x7B2C; i-1 &#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x4E24;&#x4E2A;&#x72B6;&#x6001;&#x63A8;&#x51FA;&#x7B2C;i&#x4E2A;&#x72B6;&#x6001;&#x7684;&#xFF0C;&#x800C;&#x4E14;v&gt;v-weight[i]&#xFF0C;&#x5219;&#x5BF9;&#x4E8E;&#x7B2C;i&#x6B21;&#x5FAA;&#x73AF;&#xFF0C;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x53EA;&#x6709;&#x5F53;V..0&#x5FAA;&#x73AF;&#x65F6;&#xFF0C;&#x624D;&#x4F1A;&#x5148;&#x5904;&#x7406;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x4E3A;v&#x7684;&#x72B6;&#x51B5;&#xFF0C;&#x540E;&#x5904;&#x7406;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x4E3A; v-weight[i] &#x7684;&#x60C5;&#x51B5;&#x3002; &#x5177;&#x4F53;&#x6765;&#x8BF4;&#xFF0C;&#x7531;&#x4E8E;&#xFF0C;&#x5728;&#x6267;&#x884C;v&#x65F6;&#xFF0C;&#x8FD8;&#x6CA1;&#x6267;&#x884C;&#x5230;v - weight[i]&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;f[v-weight[i]]&#x4FDD;&#x5B58;&#x7684;&#x8FD8;&#x662F;&#x7B2C;i - 1&#x6B21;&#x5FAA;&#x73AF;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x5373;&#x5728;&#x6267;&#x884C;&#x7B2C;i&#x6B21;&#x5FAA;&#x73AF; &#x4E14; &#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x4E3A;v&#x65F6;&#xFF0C;&#x6B64;&#x65F6;&#x7684;f[v]&#x5B58;&#x50A8;&#x7684;&#x662F; f[i-1][v] &#xFF0C;&#x6B64;&#x65F6;f[v-weight[i]]&#x5B58;&#x50A8;&#x7684;&#x662F;f[i-1][v-weight[i]]&#x3002; &#x76F8;&#x53CD;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x6267;&#x884C;&#x7B2C; i &#x6B21;&#x5FAA;&#x73AF;&#x65F6;&#xFF0C;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x6309;&#x7167;0..V&#x7684;&#x987A;&#x5E8F;&#x904D;&#x5386;&#x4E00;&#x904D;&#xFF0C;&#x6765;&#x68C0;&#x6D4B;&#x7B2C; i &#x4EF6;&#x7269;&#x54C1;&#x662F;&#x5426;&#x80FD;&#x653E;&#x3002;&#x6B64;&#x65F6;&#x5728;&#x6267;&#x884C;&#x7B2C;i&#x6B21;&#x5FAA;&#x73AF; &#x4E14; &#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x4E3A;v&#x65F6;&#xFF0C;&#x6B64;&#x65F6;&#x7684;f[v]&#x5B58;&#x50A8;&#x7684;&#x662F; f[i - 1][v] &#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x6B64;&#x65F6;f[v-weight[i]]&#x5B58;&#x50A8;&#x7684;&#x662F;f[i][v-weight[i]]&#x3002; &#x4E3E;&#x4F8B;&#x5B50;&#x5C31;&#x662F;&#xFF0C;&#x5047;&#x8BBE;&#x66F4;&#x65B0;f[8]&#x8981;&#x7528;&#x5230;f[8]&#x548C;f[6]&#xFF0C;&#x66F4;&#x65B0;f[6]&#x8981;&#x7528;&#x5230;f[6]&#x548C;f[4]&#xFF0C;&#x5982;&#x679C;&#x5148;&#x66F4;&#x65B0;&#x4E86;f[4]&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x65E0;&#x6CD5;&#x66F4;&#x65B0;&#x540E;&#x9762;&#x7684;f[6]&#x548C;f[8]&#x3002; &#x56E0;&#x6B64;&#x4F2A;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;123for i=1..N //&#x679A;&#x4E3E;&#x7269;&#x54C1; for v=V..0 //&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#xFF0C;&#x4ECE;&#x5927;&#x5230;&#x5C0F; f[v]=max{f[v],f[v-weight[i]] + cost[i]}; &#x591A;&#x8BF4;&#x4E00;&#x70B9;&#xFF0C;&#x987A;&#x5E8F;&#x66F4;&#x65B0;&#x6570;&#x7EC4;&#xFF08;&#x987A;&#x5E8F;&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#xFF09;&#x662F;&#x5B8C;&#x5168;&#x80CC;&#x5305;&#x95EE;&#x9898;&#x7684;&#x6700;&#x4F73;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002; &#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;1&#x6839;&#x636E;&#x524D;&#x6587;&#x8BF4;&#x7684;&#xFF0C;&#x4F7F;&#x7528;&#x4E00;&#x7EF4;&#x6570;&#x7EC4;&#x63CF;&#x8FF0;&#x72B6;&#x6001;&#x66F4;&#x65B0;&#x7684;&#x4F2A;&#x4EE3;&#x7801;123for i=1..N //&#x679A;&#x4E3E;&#x7269;&#x54C1; for v=V..0 //&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#xFF0C;&#x4ECE;&#x5927;&#x5230;&#x5C0F; f[v]=max{f[v],f[v-weight[i]] + cost[i]}; &#x5BF9;&#x4E8E;&#x7B2C;i&#x4E2A;&#x7269;&#x54C1;&#xFF0C;&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#x5230;weight[i]&#x5C31;&#x53EF;&#x4EE5;&#x505C;&#x6B62;&#x4E86;&#x3002;&#x4E00;&#x662F;&#x53EF;&#x4EE5;&#x9632;&#x6B62;&#x8D8A;&#x754C;&#xFF0C;&#x4E8C;&#x662F;&#x5BB9;&#x91CF;&#x4E3A;&#x8D1F;&#x7684;&#x80CC;&#x5305;&#x65E0;&#x610F;&#x4E49;&#x3002; &#x56E0;&#x6B64;&#x4F2A;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x66F4;&#x65B0;&#x4E3A;123for i=1..N //&#x679A;&#x4E3E;&#x7269;&#x54C1; for v=V..weight[i] //&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#xFF0C;&#x4ECE;&#x5927;&#x5230;&#x5C0F; f[v]=max{f[v],f[v-weight[i]] + cost[i]}; &#x8FD8;&#x6709;&#x4E00;&#x4E2A;&#x5C0F;&#x4F18;&#x5316;&#x5C31;&#x662F;&#xFF0C;&#x5148;&#x5904;&#x7406;&#x82B1;&#x8D39;&#x8F83;&#x5927;&#x7684;&#x7269;&#x54C1;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x4F7F;&#x540E;&#x7EED;&#x7269;&#x54C1;&#x7684;&#x5FAA;&#x73AF;&#x6B21;&#x6570;&#x66F4;&#x5C11;&#x3002;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5148;&#x628A;&#x7269;&#x54C1;&#x6309;&#x7167;&#x82B1;&#x8D39;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5E8F;&#x3002; &#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;2&#x5728;&#x5E38;&#x6570;&#x9636;&#x4F18;&#x5316;1&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x4E0B;&#x754C;&#x5B9A;&#x4E3A;&#x4E86;weight[i]&#xFF0C;&#x610F;&#x601D;&#x662F;&#xFF0C;&#x81F3;&#x5C11;&#x9700;&#x8981;weight[i]&#x624D;&#x53EF;&#x4EE5;&#x653E;&#x4E0B;&#x7B2C;i&#x4E2A;&#x7269;&#x54C1;&#x3002; &#x7EE7;&#x7EED;&#x60F3;&#x5982;&#x4E0B;&#x60C5;&#x51B5;&#xFF0C;&#x52A0;&#x5165;&#x8FD9;&#x4E2A;&#x80CC;&#x5305;&#x7684;&#x5BB9;&#x91CF;&#x975E;&#x5E38;&#x975E;&#x5E38;&#x5927;&#xFF0C;&#x5927;&#x5230;&#x80FD;&#x628A;i&#x53CA;&#x4E4B;&#x540E;&#x7684;&#x6240;&#x6709;&#x7684;&#x7269;&#x54C1;&#x5168;&#x653E;&#x8FDB;&#x53BB;&#x3002;&#x8FD9;&#x65F6;&#xFF0C;&#x5C31;&#x6CA1;&#x6709;&#x5FC5;&#x8981;&#x518D;&#x53BB;&#x8BA1;&#x7B97;&#x4E4B;&#x540E;&#x7684;&#x60C5;&#x51B5;&#x4E86;&#x3002;&#x5373;&#x5BF9;&#x4E8E;&#x7269;&#x54C1;i&#xFF0C;&#x8BA1;&#x7B97;&#x5C0F;&#x4E8E;V-sum{weight[i..n]}&#x7684;v&#x7684;&#x503C;&#xFF0C;&#x65E0;&#x610F;&#x4E49;&#xFF0C;&#x53CD;&#x6B63;&#x6240;&#x6709;&#x4E1C;&#x897F;&#x90FD;&#x80FD;&#x653E;&#x8FDB;&#x53BB;&#x3002; &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x4E0B;&#x754C;&#x8C03;&#x6574;&#x5230;bound=max{V-sum{weight[i..n]},weight[i]}&#x3002; &#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A;1234for i=1..N //&#x679A;&#x4E3E;&#x7269;&#x54C1; bound=max{V-sum{weight[i..n]},weight[i]}//&#x786E;&#x5B9A;&#x9700;&#x8981;&#x679A;&#x4E3E;&#x5BB9;&#x91CF;&#x7684;&#x4E0B;&#x754C; for v=V..bound f[v]=max{f[v],f[v-weight[i]] + cost[i]}; &#x8FD9;&#x4E2A;&#x4F18;&#x5316;&#x5BF9;&#x4E8E;V&#x5F88;&#x5927;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6548;&#x679C;&#x5F88;&#x597D;&#x3002; &#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#x8FD9;&#x4E2A;&#x4F8B;&#x5B50;&#x6CA1;&#x6709;&#x5BF9;weight&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;iostream&gt;using namespace std;const int N = 3;//&#x7269;&#x54C1;&#x4E2A;&#x6570;const int V = 5;//&#x80CC;&#x5305;&#x6700;&#x5927;&#x5BB9;&#x91CF;int weight[N + 1] = {0,3,2,2};//&#x7269;&#x54C1;&#x91CD;&#x91CF;int value[N + 1] = {0,5,10,20};//&#x7269;&#x54C1;&#x4EF7;&#x503C;int f[V + 1] = {0};int Max(int x,int y){ return x &gt; y ? x : y;}/*&#x76EE;&#x6807;&#xFF1A;&#x5728;&#x4E0D;&#x8D85;&#x8FC7;&#x80CC;&#x5305;&#x5BB9;&#x91CF;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x591A;&#x80FD;&#x83B7;&#x5F97;&#x591A;&#x5C11;&#x4EF7;&#x503C;&#x5B50;&#x95EE;&#x9898;&#x72B6;&#x6001;:f[j]:&#x8868;&#x793A;&#x524D;i&#x4EF6;&#x7269;&#x54C1;&#x653E;&#x5165;&#x5BB9;&#x91CF;&#x4E3A;j&#x7684;&#x80CC;&#x5305;&#x5F97;&#x5230;&#x7684;&#x6700;&#x5927;&#x4EF7;&#x503C;&#x72B6;&#x6001;&#x8F6C;&#x79FB;&#x65B9;&#x7A0B;:f[j] = max{f[j],f[j - weight[i]] + value[i]}&#x521D;&#x59CB;&#x5316;:f&#x6570;&#x7EC4;&#x5168;&#x8BBE;&#x7F6E;&#x4E3A;0*/int Knapsack(){ int sum = 0;//&#x5B58;&#x50A8;&#x8FD8;&#x672A;&#x5904;&#x7406;&#x7269;&#x54C1;&#x7684;&#x603B;&#x5BB9;&#x91CF; int bound = 0; //&#x521D;&#x59CB;&#x5316; memset(f,0,sizeof(f)); for (int i = 1;i &lt;= N;i++) { sum += weight[i]; } //&#x9012;&#x63A8; for (int i = 1;i &lt;= N;i++) //&#x679A;&#x4E3E;&#x7269;&#x54C1; { //&#x8BBE;&#x7F6E;&#x4E0B;&#x754C; if (i != 1) { sum -= weight[i - 1]; } bound = Max(V - sum,weight[i]); for (int j = V;j &gt;= bound;j--) //&#x679A;&#x4E3E;&#x80CC;&#x5305;&#x5BB9;&#x91CF; { if (f[j] &lt; f[j - weight[i]] + value[i]) { f[j] = f[j - weight[i]] + value[i]; } } } return f[V];}int main(){ cout&lt;&lt;Knapsack()&lt;&lt;endl; system(&quot;pause&quot;); return 1;}]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>动态规划</tag>
        <tag>NP-Hard</tag>
        <tag>01背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[读研日记]]></title>
    <url>%2F%2Fposts%2F52379290%2F</url>
    <content type="text"><![CDATA[输入密码访问 Decrypt ]]></content>
      <categories>
        <category>日记</category>
      </categories>
      <tags>
        <tag>日记</tag>
        <tag>研究生</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2996 Help Me with the Game]]></title>
    <url>%2F%2Fposts%2Fa5731d96%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5E2E;&#x6211;&#x5B8C;&#x6210;&#x6E38;&#x620F; DescriptionYour task is to read a picture of a chessboard position and print it in the chess notation. Input SpecificationThe input consists of an ASCII-art picture of a chessboard with chess pieces on positions described by the input. The pieces of the white player are shown in upper-case letters, while the black player&#x2019;s pieces are lower-case letters. The letters are one of &#x201C;K&#x201D; (King), &#x201C;Q&#x201D; (Queen), &#x201C;R&#x201D; (Rook), &#x201C;B&#x201D; (Bishop), &#x201C;N&#x201D; (Knight), or &#x201C;P&#x201D; (Pawn). The chessboard outline is made of plus (&#x201C;+&#x201D;), minus (&#x201C;-&#x201C;), and pipe (&#x201C;|&#x201D;) characters. The black fields are filled with colons (&#x201C;:&#x201D;), white fields with dots (&#x201C;.&#x201D;). Output SpecificationThe output consists of two lines. The first line consists of the string &#x201C;White: &#x201C;, followed by the description of positions of the pieces of the white player. The second line consists of the string &#x201C;Black: &#x201C;, followed by the description of positions of the pieces of the black player. The description of the position of the pieces is a comma-separated list of terms describing the pieces of the appropriate player. The description of a piece consists of a single upper-case letter that denotes the type of the piece (except for pawns, for that this identifier is omitted). This letter is immediatelly followed by the position of the piece in the standard chess notation &#x2013; a lower-case letter between &#x201C;a&#x201D; and &#x201C;h&#x201D; that determines the column (&#x201C;a&#x201D; is the leftmost column in the input) and a single digit between 1 and 8 that determines the row (8 is the first row in the input). The pieces in the description must appear in the following order: King(&#x201C;K&#x201D;), Queens (&#x201C;Q&#x201D;), Rooks (&#x201C;R&#x201D;), Bishops (&#x201C;B&#x201D;), Knights (&#x201C;N&#x201D;), and pawns. Note that the numbers of pieces may differ from the initial position because of capturing the pieces and the promotions of pawns. In case two pieces of the same type appear in the input, the piece with the smaller row number must be described before the other one if the pieces are white, and the one with the larger row number must be described first if the pieces are black. If two pieces of the same type appear in the same row, the one with the smaller column letter must appear first. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x6839;&#x636E;&#x68CB;&#x76D8;&#x6253;&#x5370;&#x56FD;&#x9645;&#x8C61;&#x68CB;&#x7684;&#x68CB;&#x5B50;&#x3002; &#x8F93;&#x5165;&#x767D;&#x8272;&#x73A9;&#x5BB6;&#x7684;&#x68CB;&#x5B50;&#x7528;&#x5927;&#x5199;&#x5B57;&#x6BCD;&#x663E;&#x793A;&#xFF0C;&#x9ED1;&#x8272;&#x73A9;&#x5BB6;&#x7684;&#x68CB;&#x5B50;&#x7528;&#x5C0F;&#x5199;&#x5B57;&#x6BCD;&#x663E;&#x793A;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x7531;&#x4E24;&#x884C;&#x7EC4;&#x6210;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x5B57;&#x7B26;&#x4E32;&#x201C;White:&#x201D;&#xFF0C;&#x540E;&#x9762;&#x8DDF;&#x767D;&#x8272;&#x68CB;&#x5B50;&#x7684;&#x63CF;&#x8FF0;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x662F;&#x201C;Black&#x201D;&#x540E;&#x9762;&#x8DDF;&#x9ED1;&#x8272;&#x68CB;&#x5B50;&#x7684;&#x63CF;&#x8FF0;&#x3002; &#x6BCF;&#x4E2A;&#x68CB;&#x5B50;&#x7684;&#x63CF;&#x8FF0;&#x7531;&#x4E00;&#x4E2A;&#x5927;&#x5199;&#x5B57;&#x6BCD;&#x7EC4;&#x6210;&#xFF08;&#x5982;&#x679C;&#x4E0D;&#x662F;Pawns&#x7684;&#x8BDD;&#xFF09;&#x3002;&#x7136;&#x540E;&#x7D27;&#x8DDF;&#x7684;&#x662F;&#x68CB;&#x5B50;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;a~h&#x7528;&#x4E8E;&#x786E;&#x5B9A;&#x5217;&#xFF0C;1~8&#x7528;&#x4E8E;&#x786E;&#x5B9A;&#x884C;&#xFF08;8&#x662F;&#x8F93;&#x5165;&#x4E2D;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#xFF09;&#x3002; &#x63CF;&#x8FF0;&#x90E8;&#x5206;&#x5FC5;&#x987B;&#x6309;&#x7167;&#x4EE5;&#x4E0B;&#x987A;&#x5E8F;&#x51FA;&#x73B0;&#xFF1A;K,Q,R,B,N&#x548C;Pawns&#x3002;&#x8F93;&#x51FA;&#x7684;&#x6392;&#x5E8F;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A;&#x7C7B;&#x578B;&#x4E0D;&#x540C;&#xFF0C;&#x6309;&#x7167;&#x524D;&#x8FF0;&#x987A;&#x5E8F;&#xFF0C;&#x5982;&#x679C; &#x7C7B;&#x578B;&#x76F8;&#x540C;&#xFF0C;&#x767D;&#x8272;&#x68CB;&#x5B50;&#x5177;&#x6709;&#x8F83;&#x5C0F;&#x884C;&#x53F7;&#x7684;&#x4F18;&#x5148;&#xFF0C;&#x9ED1;&#x8272;&#x68CB;&#x5B50;&#x5219;&#x662F;&#x884C;&#x53F7;&#x5927;&#x7684;&#x4F18;&#x5148;&#x3002;&#x5982;&#x679C;&#x4ECD;&#x7136;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5217;&#x8F83;&#x5C0F;&#x7684;&#x4F18;&#x5148;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6A21;&#x62DF; &#x4EE3;&#x7801; C++123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;map&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;char lieshu[9] = {&apos;z&apos;, &apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;,&apos;e&apos;,&apos;f&apos;,&apos;g&apos;,&apos;h&apos; };typedef struct{ bool xiaobing; char qizi; char lie; int hang;}node;map&lt;char, int&gt;yingshe;vector&lt;node&gt; Black;vector&lt;node&gt; White;void init(){ yingshe[&apos;K&apos;] = 6; yingshe[&apos;Q&apos;] = 5; yingshe[&apos;R&apos;] = 4; yingshe[&apos;B&apos;] = 3; yingshe[&apos;N&apos;] = 2; yingshe[&apos;P&apos;] = 1; yingshe[&apos;k&apos;] = 6; yingshe[&apos;q&apos;] = 5; yingshe[&apos;r&apos;] = 4; yingshe[&apos;b&apos;] = 3; yingshe[&apos;n&apos;] = 2; yingshe[&apos;p&apos;] = 1;}bool cmp1(node a, node b) //&#x767D;&#x8272;&#x7684;&#xFF0C;&#x884C;&#x8F83;&#x5C0F;&#x4F18;&#x5148;{ if (a.xiaobing != b.xiaobing) return(a.xiaobing &lt; b.xiaobing); if (yingshe[a.qizi] != yingshe[b.qizi]) return yingshe[a.qizi] &gt; yingshe[b.qizi]; if (a.hang != b.hang) return a.hang &lt; b.hang; if (a.lie != b.lie) return a.lie &lt; b.lie;}bool cmp2(node a, node b) //&#x9ED1;&#x8272;&#x7684;&#xFF0C;&#x884C;&#x8F83;&#x5927;&#x4F18;&#x5148;{ if (a.xiaobing != b.xiaobing) return(a.xiaobing &lt; b.xiaobing); if (yingshe[a.qizi] != yingshe[b.qizi]) return yingshe[a.qizi] &gt; yingshe[b.qizi]; if (a.hang != b.hang) return a.hang &gt; b.hang; if (a.lie != b.lie) return a.lie &lt; b.lie;}void solution(){ init(); int cntb = 0, cntw = 0; int t = 17; string str; int z = 1; node temp; while (z++!=t) { cin &gt;&gt; str; if (str[0] == &apos;+&apos;) continue; for (int i = 0; i &lt; str.length(); i++) { if (str[i] == &apos;.&apos;||str[i]==&apos;:&apos;) { if (str[i + 1] != &apos;.&apos;&amp;&amp;str[i + 1] != &apos;:&apos;&amp;&amp;str[i + 1] != &apos;|&apos;) { if (str[i+1]&lt;=&apos;Z&apos;&amp;&amp;str[i+1]&gt;=&apos;A&apos;) //&#x5927;&#x5199;&#x5B57;&#x6BCD;&#xFF0C;&#x767D;&#x8272; { if (str[i + 1] == &apos;P&apos;) temp.xiaobing = true; else temp.xiaobing = false; temp.qizi = str[i + 1]; temp.hang = (t - z + 2) / 2; temp.lie = (i + 3) / 4; White.push_back(temp); } else { if (str[i + 1] == &apos;p&apos;) temp.xiaobing = true; else temp.xiaobing = false; temp.qizi = str[i + 1]; temp.hang = (t - z + 2) / 2; temp.lie = (i + 3) / 4; Black.push_back(temp); } } } } } sort(White.begin(), White.end(), cmp1); sort(Black.begin(), Black.end(), cmp2); cout &lt;&lt; &quot;White: &quot;; for (int i = 0; i &lt; White.size(); i++) { if (White[i].qizi != &apos;P&apos;) cout &lt;&lt; White[i].qizi; cout &lt;&lt; lieshu[White[i].lie] &lt;&lt; White[i].hang; if (i != White.size() - 1) cout &lt;&lt; &apos;,&apos;; } cout &lt;&lt; endl; cout &lt;&lt; &quot;Black: &quot;; for (int i = 0; i &lt; Black.size(); i++) { if (Black[i].qizi != &apos;p&apos;) printf(&quot;%c&quot;, Black[i].qizi - &apos;a&apos; + &apos;A&apos;);//&#x5C0F;&#x5199;&#x6362;&#x5927;&#x5199; cout &lt;&lt; lieshu[Black[i].lie] &lt;&lt; Black[i].hang; if (i != Black.size() - 1) cout &lt;&lt; &apos;,&apos;; } return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011121314151617181920212223Sample Input+---+---+---+---+---+---+---+---+|.r.|:::|.b.|:q:|.k.|:::|.n.|:r:|+---+---+---+---+---+---+---+---+|:p:|.p.|:p:|.p.|:p:|.p.|:::|.p.|+---+---+---+---+---+---+---+---+|...|:::|.n.|:::|...|:::|...|:p:|+---+---+---+---+---+---+---+---+|:::|...|:::|...|:::|...|:::|...|+---+---+---+---+---+---+---+---+|...|:::|...|:::|.P.|:::|...|:::|+---+---+---+---+---+---+---+---+|:P:|...|:::|...|:::|...|:::|...|+---+---+---+---+---+---+---+---+|.P.|:::|.P.|:P:|...|:P:|.P.|:P:|+---+---+---+---+---+---+---+---+|:R:|.N.|:B:|.Q.|:K:|.B.|:::|.R.|+---+---+---+---+---+---+---+---+Sample OutputWhite: Ke1,Qd1,Ra1,Rh1,Bc1,Bf1,Nb1,a2,c2,d2,f2,g2,h2,a3,e4Black: Ke8,Qd8,Ra8,Rh8,Bc8,Ng8,Nc6,a7,b7,c7,d7,e7,f7,h7,h6]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>模拟</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1573 Robot Motion]]></title>
    <url>%2F%2Fposts%2F5035921d%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x673A;&#x5668;&#x4EBA;&#x79FB;&#x52A8; DescriptionA robot has been programmed to follow the instructions in its path. Instructions for the next direction the robot is to move are laid down in a grid. The possible instructions are N north (up the page) S south (down the page) E east (to the right on the page) W west (to the left on the page) For example, suppose the robot starts on the north (top) side of Grid 1 and starts south (down). The path the robot follows is shown. The robot goes through 10 instructions in the grid before leaving the grid. Compare what happens in Grid 2: the robot goes through 3 instructions only once, and then starts a loop through 8 instructions, and never exits. You are to write a program that determines how long it takes a robot to get out of the grid or how the robot loops around. Input SpecificationThere will be one or more grids for robots to navigate. The data for each is in the following form. On the first line are three integers separated by blanks: the number of rows in the grid, the number of columns in the grid, and the number of the column in which the robot enters from the north. The possible entry columns are numbered starting with one at the left. Then come the rows of the direction instructions. Each grid will have at least one and at most 10 rows and columns of instructions. The lines of instructions contain only the characters N, S, E, or W with no blanks. The end of input is indicated by a row containing 0 0 0. Output SpecificationFor each grid in the input there is one line of output. Either the robot follows a certain number of instructions and exits the grid on any one the four sides or else the robot follows the instructions on a certain number of locations once, and then the instructions on some number of locations repeatedly. The sample input below corresponds to the two grids above and illustrates the two forms of output. The word &#x201C;step&#x201D; is always immediately followed by &#x201C;(s)&#x201D; whether or not the number before it is 1. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x673A;&#x5668;&#x4EBA;&#x6309;&#x7167;&#x6307;&#x4EE4;&#x79FB;&#x52A8;&#xFF0C;&#x95EE;&#x6700;&#x540E;&#x662F;&#x8D70;&#x51FA;&#x4E86;&#x77E9;&#x9635;&#x8FD8;&#x662F;&#x8FDB;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x5FAA;&#x73AF;&#x5F53;&#x4E2D;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E09;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x77E9;&#x9635;&#x7684;&#x884C;&#xFF0C;&#x77E9;&#x9635;&#x7684;&#x5217;&#xFF0C;&#x4EE5;&#x53CA;&#x673A;&#x5668;&#x4EBA;&#x6700;&#x521D;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#x3002; &#x8F93;&#x51FA;&#x5982;&#x679C;&#x673A;&#x5668;&#x4EBA;&#x8D70;&#x51FA;&#x77E9;&#x9635;&#xFF0C;&#x8F93;&#x51FA;t step(s) to exit &#x53CD;&#x4E4B;&#x8F93;&#x51FA;x step(s) before a loop of y step(s) &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6A21;&#x62DF; Tips&#x4EE3;&#x7801; C++12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;iostream&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;int m, n, Start;vector&lt;vector&lt;char&gt;&gt;G;vector&lt;vector&lt;int&gt;&gt;visit;void solution(){ while (true) { cin &gt;&gt; n &gt;&gt; m &gt;&gt; Start; if (!n &amp;&amp; !m &amp;&amp; !Start) break; G.clear(); visit.clear(); G.resize(n); visit.resize(n); for (int i = 0; i &lt; n; i++) { G[i].resize(m); visit[i].resize(m); for (int j = 0; j &lt; m; j++) { cin &gt;&gt; G[i][j]; } } int cnt = 0, loop = 0; int i = 0, j = Start-1; while (true) { cnt++; if (visit[i][j] == 1) loop++; visit[i][j]++; switch (G[i][j]) { case &apos;N&apos;: i--; break; case &apos;E&apos;: j++; break; case &apos;W&apos;: j--; break; case &apos;S&apos;: i++; break; } if (j &lt; 0 || i &lt; 0 || j &gt;= m || i &gt;= n) { cout &lt;&lt; cnt &lt;&lt; &quot; step(s) to exit&quot; &lt;&lt; endl; break; } if (visit[i][j] == 2) { cout &lt;&lt; cnt - loop - loop &lt;&lt; &quot; step(s) before a loop of &quot; &lt;&lt; loop &lt;&lt; &quot; step(s)&quot; &lt;&lt; endl; break; } } }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516Sample Input3 6 5NEESWEWWWESSSNWWWW4 5 1SESWEEESNWNWEENEWSEN0 0 0Sample Output10 step(s) to exit3 step(s) before a loop of 8 step(s)]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>模拟</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1860 Currency Exchange]]></title>
    <url>%2F%2Fposts%2Fd8ff61b5%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x4EA4;&#x6362;&#x8D27;&#x5E01; DescriptionSeveral currency exchange points are working in our city. Let us suppose that each point specializes in two particular currencies and performs exchange operations only with these currencies. There can be several points specializing in the same pair of currencies. Each point has its own exchange rates, exchange rate of A to B is the quantity of B you get for 1A. Also each exchange point has some commission, the sum you have to pay for your exchange operation. Commission is always collected in source currency.For example, if you want to exchange 100 US Dollars into Russian Rubles at the exchange point, where the exchange rate is 29.75, and the commission is 0.39 you will get (100 - 0.39) * 29.75 = 2963.3975RUR.You surely know that there are N different currencies you can deal with in our city. Let us assign unique integer number from 1 to N to each currency. Then each exchange point can be described with 6 numbers: integer A and B - numbers of currencies it exchanges, and real RAB, CAB, RBA and CBA - exchange rates and commissions when exchanging A to B and B to A respectively.Nick has some money in currency S and wonders if he can somehow, after some exchange operations, increase his capital. Of course, he wants to have his money in currency S in the end. Help him to answer this difficult question. Nick must always have non-negative sum of money while making his operations. Input SpecificationThe first line of the input contains four numbers: N - the number of currencies, M - the number of exchange points, S - the number of currency Nick has and V - the quantity of currency units he has. The following M lines contain 6 numbers each - the description of the corresponding exchange point - in specified above order. Numbers are separated by one or more spaces. 1&lt;=S&lt;=N&lt;=100, 1&lt;=M&lt;=100, V is real number, 0&lt;=V&lt;=103.For each point exchange rates and commissions are real, given with at most two digits after the decimal point, 10-2&lt;=rate&lt;=102, 0&lt;=commission&lt;=102.Let us call some sequence of the exchange operations simple if no exchange point is used more than once in this sequence. You may assume that ratio of the numeric values of the sums at the end and at the beginning of any simple sequence of the exchange operations will be less than 104. Output SpecificationIf Nick can increase his wealth, output YES, in other case output NO to the output file. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x6709;&#x591A;&#x79CD;&#x6C47;&#x5E01;&#xFF0C;&#x6C47;&#x5E01;&#x4E4B;&#x95F4;&#x53EF;&#x4EE5;&#x4EA4;&#x6362;&#xFF0C;&#x8FD9;&#x9700;&#x8981;&#x624B;&#x7EED;&#x8D39;&#xFF0C;&#x5F53;&#x4F60;&#x7528;100A&#x5E01;&#x4EA4;&#x6362;B&#x5E01;&#x65F6;&#xFF0C;A&#x5230;B&#x7684;&#x6C47;&#x7387;&#x662F;29.75&#xFF0C;&#x624B;&#x7EED;&#x8D39;&#x662F;0.39&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x53EF;&#x4EE5;&#x5F97;&#x5230;(100 - 0.39) * 29.75 = 2963.3975 B&#x5E01;&#x3002;&#x95EE;s&#x5E01;&#x7684;&#x91D1;&#x989D;&#x7ECF;&#x8FC7;&#x4EA4;&#x6362;&#x6700;&#x7EC8;&#x5F97;&#x5230;&#x7684;s&#x5E01;&#x91D1;&#x989D;&#x6570;&#x80FD;&#x5426;&#x589E;&#x52A0;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;4&#x4E2A;&#x6570;&#x5B57;&#xFF0C;N-&#x8D27;&#x5E01;&#x7684;&#x79CD;&#x7C7B;&#xFF0C;M-&#x4EA4;&#x6613;&#x6240;&#x7684;&#x6570;&#x91CF;&#x3002;S-Nick&#x4E00;&#x5F00;&#x59CB;Nick&#x6240;&#x6301;&#x6709;&#x7684;&#x8D27;&#x5E01;&#x79CD;&#x7C7B;&#x3002;V-Nick&#x4E00;&#x5F00;&#x59CB;&#x6301;&#x6709;&#x7684;&#x8D27;&#x5E01;&#x7684;&#x989D;&#x6570;&#x91CF;&#x3002; &#x63A5;&#x7740;&#x662F;M&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x5305;&#x62EC;6&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x6574;&#x6570;A&#x548C;B-&#x8FD9;&#x4E2A;&#x4EA4;&#x6613;&#x6240;&#x4EA4;&#x6362;&#x7684;&#x8D27;&#x5E01;&#x7684;&#x79CD;&#x7C7B;&#xFF0C;RAB, CAB, RBA &#x548C; CBA&#x4E24;&#x79CD;&#x8D27;&#x5E01;&#x95F4;&#x7684;&#x6C47;&#x7387;&#x548C;&#x624B;&#x7EED;&#x8D39;&#x3002; &#x6C47;&#x7387;&#x548C;&#x624B;&#x7EED;&#x8D39;&#x4FDD;&#x7559;&#x5C0F;&#x6570;&#x70B9;&#x540E;2&#x4F4D;&#xFF0C;10-2&lt;=&#x6C47;&#x7387;&lt;=102, 0&lt;=&#x624B;&#x7EED;&#x8D39;&lt;=102 &#x8F93;&#x51FA;&#x5982;&#x679C;&#x94B1;&#x80FD;&#x8D8A;&#x6362;&#x8D8A;&#x591A;&#xFF0C;&#x8F93;&#x51FA;YES&#xFF0C;&#x53CD;&#x4E4B;&#x8F93;&#x51FA;NO&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8FD9;&#x4E2A;&#x9898;&#x975E;&#x5E38;&#x597D;&#xFF0C;&#x4EE5;&#x524D;&#x505A;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x7684;&#x9898;&#xFF0C;&#x90FD;&#x771F;&#x7684;&#x662F;&#x5B57;&#x9762;&#x4E0A;&#x7684;&#x627E;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x9898;&#x662F;&#x7528;BF&#x7B97;&#x6CD5;&#x627E;&#x4E00;&#x4E2A;&#x6B63;&#x6743;&#x56DE;&#x8DEF;&#x3002;&#x627E;&#x51FA;&#x4E00;&#x6761;&#x6B63;&#x6743;&#x56DE;&#x8DEF;&#x5373;&#x53EF;&#x3002; &#x4E00;&#x79CD;&#x8D27;&#x5E01;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002;&#x4E00;&#x4E2A;&#x201C;&#x5151;&#x6362;&#x70B9;&#x201D;&#x5C31;&#x662F;&#x56FE;&#x4E0A;&#x4E24;&#x79CD;&#x8D27;&#x5E01;&#x4E4B;&#x95F4;&#x7684;&#x4E00;&#x4E2A;&#x5151;&#x6362;&#x65B9;&#x5F0F;&#xFF0C;&#x662F;&#x53CC;&#x8FB9;&#xFF0C;&#x4F46;A&#x5230;B&#x7684;&#x6C47;&#x7387;&#x548C;&#x624B;&#x7EED;&#x8D39;&#x53EF;&#x80FD;&#x4E0E;B&#x5230;A&#x7684;&#x6C47;&#x7387;&#x548C;&#x624B;&#x7EED;&#x8D39;&#x4E0D;&#x540C;&#x3002; &#x552F;&#x4E00;&#x503C;&#x5F97;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x6743;&#x503C;&#xFF0C;&#x5F53;&#x62E5;&#x6709;&#x8D27;&#x5E01;A&#x7684;&#x6570;&#x91CF;&#x4E3A;V&#x65F6;&#xFF0C;A&#x5230;A&#x7684;&#x6743;&#x503C;&#x4E3A;V&#xFF0C;&#x5373;&#x6CA1;&#x6709;&#x5151;&#x6362;,&#x800C;A&#x5230;B&#x7684;&#x6743;&#x503C;&#x4E3A;(V-Cab)*Rab&#x3002; &#x672C;&#x9898;&#x662F;&#x201C;&#x6C42;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#x201D;&#xFF0C;&#x4E4B;&#x6240;&#x4EE5;&#x88AB;&#x5F52;&#x7C7B;&#x4E3A;&#x201C;&#x6C42;&#x6700;&#x5C0F;&#x8DEF;&#x5F84;&#x201D;&#x662F;&#x56E0;&#x4E3A;&#x672C;&#x9898;&#x9898;&#x6070;&#x6070;&#x4E0E;bellman-Ford&#x7B97;&#x6CD5;&#x7684;&#x677E;&#x5F1B;&#x6761;&#x4EF6;&#x76F8;&#x53CD;&#xFF0C;&#x6C42;&#x7684;&#x662F;&#x80FD;&#x65E0;&#x9650;&#x677E;&#x5F1B;&#x7684;&#x6700;&#x5927;&#x6B63;&#x6743;&#x8DEF;&#x5F84;&#xFF0C;&#x4F46;&#x662F;&#x4F9D;&#x7136;&#x80FD;&#x591F;&#x5229;&#x7528;bellman-Ford&#x7684;&#x601D;&#x60F3;&#x53BB;&#x89E3;&#x9898;&#x3002; &#x56E0;&#x6B64;&#x521D;&#x59CB;&#x5316;dis(S)=V &#x800C;&#x6E90;&#x70B9;&#x5230;&#x5176;&#x4ED6;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#xFF08;&#x6743;&#x503C;&#xFF09;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x65E0;&#x7A77;&#x5C0F;&#xFF08;0&#xFF09;&#xFF0C;&#x5F53;s&#x5230;&#x5176;&#x4ED6;&#x67D0;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x80FD;&#x4E0D;&#x65AD;&#x53D8;&#x5927;&#x65F6;&#xFF0C;&#x8BF4;&#x660E;&#x5B58;&#x5728;&#x6700;&#x5927;&#x8DEF;&#x5F84;&#xFF1B;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#x4E00;&#x76F4;&#x53D8;&#x5927;&#xFF0C;&#x8BF4;&#x660E;&#x5B58;&#x5728;&#x6B63;&#x73AF;&#x3002;&#x5224;&#x65AD;&#x662F;&#x5426;&#x5B58;&#x5728;&#x73AF;&#x8DEF;&#xFF0C;&#x7528;Bellman-Ford&#x548C;spfa&#x90FD;&#x53EF;&#x4EE5;&#x3002; &#x4EE3;&#x7801; C++123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;string.h&gt;#pragma warning(disable:4996)using namespace std;int n, m, s, cnt; //n&#x8D27;&#x5E01;&#x6570;&#x91CF;&#xFF0C;m&#x4EA4;&#x6613;&#x6240;&#x6570;&#x91CF;&#xFF0C;S&#x521D;&#x8BD5;&#x8D27;&#x5E01;&#x7684;&#x79CD;&#x7C7B;&#xFF0C;V&#x521D;&#x59CB;&#x8D27;&#x5E01;&#x7684;&#x6570;&#x91CF;&#xFF0C;C&#x4E3A;&#x8BA1;&#x6570;&#x53D8;&#x91CF;&#x3002;double v, dis[110];typedef struct{ int a, b; double rate, cost;}node;node p[220];bool Bellman_Ford(){ memset(dis, 0, sizeof(dis)); //&#x6B64;&#x5904;&#x4E0E;Bellman-Ford&#x7684;&#x5904;&#x7406;&#x76F8;&#x53CD;&#xFF0C;&#x521D;&#x59CB;&#x5316;&#x4E3A;&#x6E90;&#x70B9;&#x5230;&#x5404;&#x70B9;&#x8DDD;&#x79BB;0&#xFF0C;&#x5230;&#x81EA;&#x8EAB;&#x7684;&#x503C;&#x4E3A;&#x539F;&#x503C; dis[s] = v; //&#x4E00;&#x5F00;&#x59CB;&#x81EA;&#x5DF1;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x6570;&#x91CF;&#x662F;V for (int i = 1; i &lt;= n - 1; i++) //&#x9650;&#x5B9A;&#x6700;&#x5927;&#x5FAA;&#x73AF;&#x6B21;&#x6570; { bool flag = false; for (int j = 0; j &lt; cnt; j++) //&#x904D;&#x5386;&#x6BCF;&#x4E2A;&#x4EA4;&#x6613;&#x6240;&#x4E2D;&#xFF0C;&#x6C42;&#x5F97;&#x80FD;&#x6362;&#x6700;&#x591A;&#x94B1;&#x7684; { int a = p[j].a, b = p[j].b; double r = p[j].rate, c = p[j].cost; if (dis[b] &lt; (dis[a] - c) * r) { dis[b] = (dis[a] - c) * r; flag = true; } } if (!flag) break; } for (int i = 0; i &lt; cnt; i++) if (dis[p[i].b] &lt; (dis[p[i].a] - p[i].cost) * p[i].rate) //dis[p[i].b]&#x662F;&#x6362;&#x4E86;&#x4E00;&#x5708;&#x4E4B;&#x540E;&#xFF0C;&#x80FD;&#x62FF;&#x5230;&#x7684;&#x94B1;&#xFF0C;&#x73B0;&#x5728;&#x5728;&#x8FD9;&#x4E2A;&#x4EA4;&#x6613;&#x6240;&#x80FD;&#x62FF;&#x5230;&#x66F4;&#x591A;&#xFF0C;&#x8868;&#x793A;&#x80FD;&#x677E;&#x5F1B;&#x8DEF;&#x5F84;&#x3002; return true; return false;}void solution(){ int i, j, a, b; double rab, rba, cab, cba; while (~scanf(&quot;%d%d%d%lf&quot;, &amp;n, &amp;m, &amp;s, &amp;v)) { cnt = 0; for (i = 0; i &lt; m; i++) { cin &gt;&gt; a &gt;&gt; b &gt;&gt; rab &gt;&gt; cab &gt;&gt; rba &gt;&gt; cba; //&#x8F93;&#x5165;&#x4EA4;&#x6613;&#x6240;&#x4FE1;&#x606F; p[cnt].a = a; p[cnt].b = b; p[cnt].rate = rab; p[cnt++].cost = cab; p[cnt].a = b; p[cnt].b = a; p[cnt].rate = rba; p[cnt++].cost = cba; } if (Bellman_Ford()) cout &lt;&lt; &quot;YES&quot; &lt;&lt; endl; else cout &lt;&lt; &quot;NO&quot; &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678Sample Input3 2 1 20.01 2 1.00 1.00 1.00 1.002 3 1.10 1.00 1.10 1.00Sample OutputYES]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>最短路径</tag>
        <tag>POJ</tag>
        <tag>Bellman_Ford</tag>
        <tag>正权回路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2632 Crashing Robots]]></title>
    <url>%2F%2Fposts%2F53ad7638%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5D29;&#x6E83;&#x7684;&#x673A;&#x5668;&#x4EBA; DescriptionIn a modernized warehouse, robots are used to fetch the goods. Careful planning is needed to ensure that the robots reach their destinations without crashing into each other. Of course, all warehouses are rectangular, and all robots occupy a circular floor space with a diameter of 1 meter. Assume there are N robots, numbered from 1 through N. You will get to know the position and orientation of each robot, and all the instructions, which are carefully (and mindlessly) followed by the robots. Instructions are processed in the order they come. No two robots move simultaneously; a robot always completes its move before the next one starts moving.A robot crashes with a wall if it attempts to move outside the area of the warehouse, and two robots crash with each other if they ever try to occupy the same spot. Input SpecificationThe first line of input is K, the number of test cases. Each test case starts with one line consisting of two integers, 1 &lt;= A, B &lt;= 100, giving the size of the warehouse in meters. A is the length in the EW-direction, and B in the NS-direction.The second line contains two integers, 1 &lt;= N, M &lt;= 100, denoting the numbers of robots and instructions respectively.Then follow N lines with two integers, 1 &lt;= Xi &lt;= A, 1 &lt;= Yi &lt;= B and one letter (N, S, E or W), giving the starting position and direction of each robot, in order from 1 through N. No two robots start at the same position.Finally there are M lines, giving the instructions in sequential order.An instruction has the following format:&lt; robot #&gt; &lt; action&gt; &lt; repeat&gt;Where is one ofL: turn left 90 degrees,R: turn right 90 degrees, orF: move forward one meter, and 1 &lt;= &lt; repeat&gt; &lt;= 100 is the number of times the robot should perform this single move. Output SpecificationOutput one line for each test case:Robot i crashes into the wall, if robot i crashes into a wall. (A robot crashes into a wall if Xi = 0, Xi = A + 1, Yi = 0 or Yi = B + 1.)Robot i crashes into robot j, if robots i and j crash, and i is the moving robot.OK, if no crashing occurs. Only the first crash is to be reported. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x673A;&#x5668;&#x4EBA;&#x5728;&#x4ED3;&#x5E93;&#x4E2D;&#x53D6;&#x8D27;&#xFF0C;&#x4ED3;&#x5E93;&#x662F;&#x77E9;&#x5F62;&#x7684;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x673A;&#x5668;&#x4EBA;&#x90FD;&#x5360;&#x76F4;&#x5F84;1M&#x7684;&#x5706;&#x5F62;&#x5730;&#x677F;&#x7A7A;&#x95F4;&#xFF0C;&#x5047;&#x8BBE;&#x6709;N&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x4ECE;1~N&#x7F16;&#x53F7;&#x3002;&#x73B0;&#x5728;&#x77E5;&#x9053;&#x6BCF;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x65B9;&#x5411;&#x3002;&#x673A;&#x5668;&#x4EBA;&#x4F1A;&#x65E0;&#x610F;&#x8BC6;&#x7684;&#x9075;&#x4ECE;&#x6240;&#x6709;&#x7684;&#x6307;&#x4EE4;&#xFF0C;&#x6309;&#x7167;&#x987A;&#x5E8F;&#x8FDB;&#x884C;&#x3002;&#x4FDD;&#x8BC1;&#x6CA1;&#x6709;&#x4E24;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x540C;&#x65F6;&#x79FB;&#x52A8;&#xFF0C;&#x673A;&#x5668;&#x4EBA;&#x603B;&#x662F;&#x5728;&#x4E0B;&#x4E00;&#x4E2A;&#x6307;&#x4EE4;&#x4E4B;&#x524D;&#x5904;&#x7406;&#x5F53;&#x524D;&#x4E4B;&#x7075;&#x3002; &#x5982;&#x679C;&#x673A;&#x5668;&#x4EBA;&#x8BD5;&#x56FE;&#x79FB;&#x52A8;&#x5230;&#x4ED3;&#x5E93;&#x533A;&#x57DF;&#x4E4B;&#x5916;&#xFF0C;&#x673A;&#x5668;&#x4EBA;&#x4F1A;&#x649E;&#x5899;&#x3002;&#x5982;&#x679C;&#x673A;&#x5668;&#x4EBA;&#x8BD5;&#x56FE;&#x5360;&#x636E;&#x4E00;&#x4E2A;&#x5DF2;&#x7ECF;&#x6709;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x70B9;&#xFF0C;&#x5219;&#x8FD9;&#x4E24;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x4F1A;&#x4E92;&#x76F8;&#x649E;&#x51FB;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;K&#xFF0C;&#x8868;&#x793A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7684;&#x6570;&#x91CF;&#x3002; &#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x4EE5;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#x7684;&#x884C;&#x5F00;&#x59CB;&#xFF0C;1 &lt;= A&#xFF0C;B &lt;= 100&#xFF0C;&#x4EE5;&#x7C73;&#x4E3A;&#x5355;&#x4F4D;&#x7ED9;&#x51FA;&#x4ED3;&#x5E93;&#x7684;&#x5927;&#x5C0F;&#x3002;A&#x662F;EW&#x65B9;&#x5411;&#x7684;&#x957F;&#x5EA6;&#xFF0C;B&#x662F;NS&#x65B9;&#x5411;&#x7684;&#x957F;&#x5EA6;&#x3002;&#x7B2C;&#x4E8C;&#x884C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#xFF0C;1 &lt;= N&#xFF0C;M &lt;= 100&#xFF0C;&#x5206;&#x522B;&#x8868;&#x793A;&#x673A;&#x5668;&#x4EBA;&#x548C;&#x6307;&#x4EE4;&#x7684;&#x6570;&#x91CF;&#x3002;&#x7136;&#x540E;&#x8DDF;&#x968F;N&#x884C;&#xFF0C;&#x7528;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#xFF0C;1 &lt;= Xi &lt;= A&#xFF0C;1 &lt;= Yi &lt;= B&#x548C;&#x4E00;&#x4E2A;&#x5B57;&#x6BCD;&#xFF08;N&#xFF0C;S&#xFF0C;E&#x6216;W&#xFF09;&#xFF0C;&#x7ED9;&#x51FA;&#x6BCF;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x7684;&#x8D77;&#x59CB;&#x4F4D;&#x7F6E;&#x548C;&#x65B9;&#x5411;&#xFF0C;&#x4FDD;&#x8BC1;&#x6CA1;&#x6709;&#x4E24;&#x4E2A;&#x673A;&#x5668;&#x4EBA;&#x4ECE;&#x540C;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#x3002; &#x6700;&#x540E;&#x6709;M&#x884C;&#xFF0C;&#x6309;&#x987A;&#x5E8F;&#x7ED9;&#x51FA;&#x8BF4;&#x660E;&#x3002;&#x6307;&#x4EE4;&#x5177;&#x6709;&#x4EE5;&#x4E0B;&#x683C;&#x5F0F;&#xFF1A; &lt;robot&#xFF03;&gt; &#x5176;&#x4E2D;&#xFF0C; &#x662F;&#x4EE5;&#x4E0B;&#x7684;&#x5176;&#x4E2D;&#x4E4B;&#x4E00; L&#xFF1A;&#x5411;&#x5DE6;&#x8F6C;90&#x5EA6;&#x3002; R&#xFF1A;&#x5411;&#x53F3;&#x8F6C;90&#x5EA6; F&#xFF1A;&#x524D;&#x8FDB;&#x4E00;&#x7C73;&#x3002; 1 &lt;= &lt;= 100&#x662F;&#x673A;&#x5668;&#x4EBA;&#x6267;&#x884C;&#x6B64;&#x5355;&#x6B21;&#x64CD;&#x4F5C;&#x7684;&#x6B21;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x6709;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#xFF1A; Robot i crashes into the wall &#x5982;&#x679C;&#x673A;&#x5668;&#x4EBA;&#x649E;&#x5899;&#x4E86; Robot i crashes into robot j &#x5982;&#x679C;i&#x662F;&#x6B63;&#x5728;&#x79FB;&#x52A8;&#x7684;&#x673A;&#x5668;&#x4EBA;&#xFF0C;&#x649E;&#x5230;&#x4E86;j&#x3002; OK, if no crashing occurs. &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6A21;&#x62DF; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173#include&lt;iostream&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;char Directions[4] = { &apos;N&apos;,&apos;E&apos;,&apos;S&apos;,&apos;W&apos; };typedef struct{ int Direction; //&#x65B9;&#x5411; int x; //&#x5750;&#x6807; int y;}robot;vector&lt;robot&gt;R;typedef struct{ int num; char c; int times;}command;vector&lt;vector&lt;int&gt;&gt;G;bool flag;int K, A, B, N, M;void move(command comm,int cnt){ if (!flag) return; if (comm.c == &apos;L&apos;) for (int i = 0; i &lt; comm.times; i++) R[comm.num].Direction = (R[comm.num].Direction + 3) % 4; //&#x5411;&#x5DE6; if (comm.c == &apos;R&apos;) for (int i = 0; i &lt; comm.times; i++) R[comm.num].Direction = (R[comm.num].Direction + 1) % 4; //&#x5411;&#x53F3; if (comm.c == &apos;F&apos;) { switch (R[comm.num].Direction) { case 0: //&#x5411;&#x5317;&#x8D70; G[R[comm.num].y][R[comm.num].x] = 0; //&#x8D77;&#x6B65; for (int i = 0; i &lt; comm.times; i++) { R[comm.num].y += 1; if (R[comm.num].y &gt; B) { flag = false; printf(&quot;Robot %d crashes into the wall\n&quot;, comm.num); break; } if (G[R[comm.num].y][R[comm.num].x] != 0) { flag = false; printf(&quot;Robot %d crashes into robot %d\n&quot;, comm.num, G[R[comm.num].y][R[comm.num].x]); break; } } if (flag) G[R[comm.num].y][R[comm.num].x] = comm.num; break; case 1: //&#x5411;&#x4E1C;&#x8D70; G[R[comm.num].y][R[comm.num].x] = 0; for (int i = 0; i &lt; comm.times; i++) { R[comm.num].x += 1; if (R[comm.num].x &gt; A) { flag = false; printf(&quot;Robot %d crashes into the wall\n&quot;, comm.num); break; } if (G[R[comm.num].y][R[comm.num].x] != 0) { flag = false; printf(&quot;Robot %d crashes into robot %d\n&quot;, comm.num, G[R[comm.num].y][R[comm.num].x]); break; } } if(flag) G[R[comm.num].y][R[comm.num].x] = comm.num; break; case 2: //&#x5411;&#x5357;&#x8D70; G[R[comm.num].y][R[comm.num].x] = 0; for (int i = 0; i &lt; comm.times; i++) { R[comm.num].y -= 1; if (R[comm.num].y == 0) { flag = false; printf(&quot;Robot %d crashes into the wall\n&quot;, comm.num); break; } if (G[R[comm.num].y][R[comm.num].x] != 0) { flag = false; printf(&quot;Robot %d crashes into robot %d\n&quot;, comm.num, G[R[comm.num].y][R[comm.num].x]); break; } } if (flag) G[R[comm.num].y][R[comm.num].x] = comm.num; break; case 3: //&#x5411;&#x897F;&#x8D70; G[R[comm.num].y][R[comm.num].x] = 0; for (int i = 0; i &lt; comm.times; i++) { R[comm.num].x -= 1; if (R[comm.num].x == 0) { flag = false; printf(&quot;Robot %d crashes into the wall\n&quot;, comm.num); break; } if (G[R[comm.num].y][R[comm.num].x] != 0) { flag = false; printf(&quot;Robot %d crashes into robot %d\n&quot;, comm.num, G[R[comm.num].y][R[comm.num].x]); break; } } if (flag) G[R[comm.num].y][R[comm.num].x] = comm.num; break; } } if (cnt == M&amp;&amp;flag) cout &lt;&lt; &quot;OK&quot; &lt;&lt; endl;}void solution(){ char Dir; cin &gt;&gt; K; while (K--) { cin &gt;&gt; A &gt;&gt; B; G.clear(); G.resize(B+1); for (int i = 1; i &lt;= B; i++) G[i].resize(A+1); cin &gt;&gt; N &gt;&gt; M; R.resize(N + 1); for (int i = 1; i &lt;= N; i++) { cin &gt;&gt; R[i].x &gt;&gt; R[i].y &gt;&gt; Dir; G[R[i].y][R[i].x] = i; switch (Dir) { case &apos;N&apos;: R[i].Direction = 0; break; case &apos;E&apos;: R[i].Direction = 1; break; case &apos;S&apos;: R[i].Direction = 2; break; case &apos;W&apos;: R[i].Direction = 3; break; } } command comm; int cnt = 1; flag = true; for (int i = 0; i &lt; M; i++) { cin &gt;&gt; comm.num &gt;&gt; comm.c &gt;&gt; comm.times; move(comm, cnt); cnt++; } }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;2.txt&quot;, &quot;w&quot;, stdout); solution(); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>模拟</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1068 Parencodings]]></title>
    <url>%2F%2Fposts%2Fd837b83f%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;Parencodings DescriptionLet S = s1 s2&#x2026;s2n be a well-formed string of parentheses. S can be encoded in two different ways:q By an integer sequence P = p1 p2&#x2026;pn where pi is the number of left parentheses before the ith right parenthesis in S (P-sequence).q By an integer sequence W = w1 w2&#x2026;wn where for each right parenthesis, say a in S, we associate an integer which is the number of right parentheses counting from the matched left parenthesis of a up to a. (W-sequence). Following is an example of the above encodings: S (((()()()))) P-sequence 4 5 6666 W-sequence 1 1 1456 Write a program to convert P-sequence of a well-formed string to the W-sequence of the same string. Input SpecificationThe first line of the input contains a single integer t (1 &lt;= t &lt;= 10), the number of test cases, followed by the input data for each test case. The first line of each test case is an integer n (1 &lt;= n &lt;= 20), and the second line is the P-sequence of a well-formed string. It contains n positive integers, separated with blanks, representing the P-sequence. Output SpecificationThe output file consists of exactly t lines corresponding to test cases. For each test case, the output line should contain n integers describing the W-sequence of the string corresponding to its given P-sequence. &#x9898;&#x76EE;&#x63CF;&#x8FF0;S&#x662F;&#x4E00;&#x4E2A;&#x7528;&#x62EC;&#x53F7;&#x7EC4;&#x6210;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;S&#x53EF;&#x4EE5;&#x6709;&#x4E24;&#x79CD;&#x4E0D;&#x540C;&#x7684;&#x7F16;&#x7801;&#xFF1A; P&#x5E8F;&#x5217;&#xFF0C;P = p1 p2&#x2026;pn&#xFF0C;pi&#x662F;S&#x5E8F;&#x5217;&#x4E2D;&#x7B2C;i&#x4E2A;&#x53F3;&#x62EC;&#x53F7;&#x4E4B;&#x524D;&#x7684;&#x5DE6;&#x62EC;&#x53F7;&#x7684;&#x6570;&#x91CF;&#x3002; W&#x5E8F;&#x5217;&#xFF0C;W = w1 w2&#x2026;wn&#xFF0C;Wi&#x662F;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x53F3;&#x62EC;&#x53F7;&#xFF0C;&#x4E0E;&#x4E4B;&#x5339;&#x914D;&#x7684;&#x54CD;&#x5E94;&#x7684;&#x5DE6;&#x62EC;&#x53F7;&#x4E4B;&#x95F4;&#x7684;&#xFF0C;&#x53F3;&#x62EC;&#x53F7;&#x7684;&#x6570;&#x91CF;&#x3002; &#x73B0;&#x5728;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;P&#x5E8F;&#x5217;&#xFF0C;&#x6C42;&#x51FA;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#x7684;W&#x5E8F;&#x5217;&#x3002; &#x8F93;&#x5165;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x591A;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x6570;t&#xFF0C;&#x8868;&#x793A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x6570;n&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x662F;P&#x5E8F;&#x5217;&#xFF0C;&#x6709;N&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;P&#x5E8F;&#x5217;&#xFF0C;&#x8F93;&#x51FA;&#x4E0E;&#x4E4B;&#x5BF9;&#x5E94;&#x7684;W&#x5E8F;&#x5217;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6A21;&#x62DF; &#x4EE3;&#x7801; C++12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;iostream&gt;#include&lt;stack&gt;#include&lt;string&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;int t, n;void solution(){ cin &gt;&gt; t; while (t--) { cin &gt;&gt; n; vector&lt;int&gt;P(n); vector&lt;int&gt; W; vector&lt;char&gt; S; int cnt = 0; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; P[i]; for (int j = cnt; j &lt; P[i]; j++) S.push_back(&apos;(&apos;); cnt = P[i]; S.push_back(&apos;)&apos;); } cnt = 0; int num = 0;//&#x62EC;&#x53F7;&#x91CC;&#x5F85;&#x5339;&#x914D;&#x7684;&#x53F3;&#x62EC;&#x53F7;&#x7684;&#x4E2A;&#x6570; int res = 1;//&#x53F3;&#x62EC;&#x53F7;&#x7684;&#x4E2A;&#x6570; while (cnt &lt; S.size()) { if (S[cnt] != &apos;)&apos;) { cnt++; continue; } num = 0; res = 1; for (int i = cnt-1; i &gt;=0; i--) { if (S[i] == &apos;(&apos;) if (num == 0) { W.push_back(res); break; } else num--; else { num++; res++; } } cnt++; } for (int i = 0; i &lt; W.size(); i++) { if (i != 0) cout &lt;&lt; &apos; &apos;; cout &lt;&lt; W[i]; } cout &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011Sample Input264 5 6 6 6 694 6 6 6 6 8 9 9 9Sample Output1 1 1 4 5 61 1 2 4 5 1 1 3 9]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>模拟</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-3295 Tautology]]></title>
    <url>%2F%2Fposts%2F8893c4a8%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6C38;&#x771F;&#x5F0F; DescriptionWFF &#x2018;N PROOF is a logic game played with dice. Each die has six faces representing some subset of the possible symbols K, A, N, C, E, p, q, r, s, t. A Well-formed formula (WFF) is any string of these symbols obeying the following rules: p, q, r, s, and t are WFFs if w is a WFF, Nw is a WFF if w and x are WFFs, Kwx, Awx, Cwx, and Ewx are WFFs. The meaning of a WFF is defined as follows: p, q, r, s, and t are logical variables that may take on the value 0 (false) or 1 (true). K, A, N, C, E mean and, or, not, implies, and equals as defined in the truth table below. Definitions of K, A, N, C, and E w x Kwx Awx Nw Cwx Ewx 1 1 1 1 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0 0 1 1 1 A tautology is a WFF that has value 1 (true) regardless of the values of its variables. For example, ApNp is a tautology because it is true regardless of the value of p. On the other hand, ApNq is not, because it has the value 0 for p=0, q=1. You must determine whether or not a WFF is a tautology. Input SpecificationInput consists of several test cases. Each test case is a single line containing a WFF with no more than 100 symbols. A line containing 0 follows the last case. Output SpecificationFor each test case, output a line containing tautology or not as appropriate. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x7ED9;&#x5B9A;5&#x4E2A;&#x53D8;&#x91CF;&#x548C;5&#x4E2A;&#x64CD;&#x4F5C;&#x7B26;&#xFF0C;&#x6C42;&#x7ED9;&#x51FA;&#x7684;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#xFF0C;&#x662F;&#x5426;&#x6052;&#x4E3A;&#x771F;&#x3002; 5&#x4E2A;&#x53D8;&#x91CF;&#x5168;&#x90FD;&#x662F;&#x5E03;&#x5C14;&#x53D8;&#x91CF;&#xFF0C;&#x53D6;&#x503C;&#x53EA;&#x6709;0&#x548C;1&#x4E24;&#x79CD;&#x3002;&#x64CD;&#x4F5C;&#x7B26;&#x7684;&#x771F;&#x503C;&#x8868;&#x5982;&#x4E0B;&#xFF1A; w x Kwx Awx Nw Cwx Ewx 1 1 1 1 0 1 1 0 0 0 1 0 0 0 0 1 0 1 1 1 0 0 0 0 0 1 1 1 &#x4E3E;&#x4F8B;&#x8BF4;&#x660E;&#xFF1A; ApNp&#x6052;&#x4E3A;&#x771F;&#xFF0C;&#x4E0D;&#x8BBA;p&#x53D6;&#x503C;&#x662F;0&#x8FD8;&#x662F;1&#xFF0C;ApNp&#x90FD;&#x662F;&#x771F;&#x3002; ApNq&#x5C31;&#x4E0D;&#x662F;&#x6052;&#x4E3A;&#x771F;&#x7684;&#xFF0C;&#x5F53;p=0, q=1&#x65F6;&#xFF0C;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x503C;&#x4E3A;&#x5047;&#x3002; &#x8F93;&#x5165;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x591A;&#x4E2A;&#x6D4B;&#x8BD5;&#xFF0C;&#x6BCF;&#x884C;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#xFF0C;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x8D85;&#x8FC7;100&#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x8868;&#x8FBE;&#x5F0F;&#x3002;&#x7528;&#x4E00;&#x4E2A;&#x72EC;&#x5360;&#x4E00;&#x884C;&#x7684;0&#x8868;&#x793A;&#x6D4B;&#x8BD5;&#x7ED3;&#x675F;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6CA1;&#x4E2A;&#x6D4B;&#x8BD5;&#xFF0C;&#x5982;&#x679C;&#x6052;&#x4E3A;&#x771F;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;tautology&#x3002;&#x53CD;&#x4E4B;&#x8F93;&#x51FA;not&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x679A;&#x4E3E;&#x6240;&#x6709;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4E00;&#x5171;&#x6709;2^5=32&#x79CD;&#x53EF;&#x80FD;&#x3002; &#x6216;&#x8005;&#x5229;&#x7528;&#x6808;&#xFF0C;&#x6A21;&#x62DF;&#x64CD;&#x4F5C;&#x3002; &#x4EE3;&#x7801;-&#x679A;&#x4E3E;&#x7F16;&#x8BD1;&#x73AF;&#x5883;&#xFF1A;&#x53EA;&#x5728;G++&#x4E2D;AC&#xFF0C;&#x5728;C++&#x4E2D;&#x4F1A;WA&#xFF0C;&#x6211;&#x4E5F;&#x4E0D;&#x77E5;&#x9053;&#x4E3A;&#x5565;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;iostream&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;int n, p, q, r, s, t;string str;bool flag;bool res(){ n++; int t1, t2; switch (str[n]) { case &apos;K&apos;:t1 = res(); t2 = res(); return t1 &amp;&amp; t2; case &apos;A&apos;:t1 = res(); t2 = res(); return t1 || t2; case &apos;N&apos;:t1 = res(); return !t1; case &apos;C&apos;:t1 = res(); t2 = res(); return (!t1) || t2; case &apos;E&apos;:t1 = res(); t2 = res(); return t1== t2; case &apos;p&apos;:return p; case &apos;q&apos;:return q; case &apos;r&apos;:return r; case &apos;s&apos;:return s; case &apos;t&apos;:return t; }}void solution(){ while (cin &gt;&gt; str) { if (str == &quot;0&quot;) return; flag = true; for (p = 0; p &lt; 2 &amp;&amp; flag; p++) for (q = 0; q &lt; 2 &amp;&amp; flag; q++) for (r = 0; r &lt; 2 &amp;&amp; flag; r++) for (s = 0; s &lt; 2 &amp;&amp; flag; s++) for (t = 0; t &lt; 2 &amp;&amp; flag; t++) { n = -1; if (!res()) flag = false; } if (flag) cout &lt;&lt; &quot;tautology&quot; &lt;&lt; endl; else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;2.txt&quot;, &quot;w&quot;, stdout); solution(); return 0;} &#x4EE3;&#x7801;-&#x679A;&#x4E3E;-&#x6808;&#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x53EF;&#x4EE5;&#x5728;G++&#x548C;C++&#x4E2D;AC123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;stack&gt;#pragma warning(disable:4996)using namespace std;int p, q, r, s, t;string str;bool judge(){ stack&lt;int&gt;res; int t1, t2; for (int i = str.length() - 1; i &gt;= 0; i--) { switch (str[i]) { case &apos;p&apos;: res.push(p); break; case &apos;q&apos;: res.push(q); break; case &apos;r&apos;: res.push(r); break; case &apos;s&apos;: res.push(s); break; case &apos;t&apos;: res.push(t); break; case &apos;K&apos;: t1 = res.top(); res.pop(); t2 = res.top(); res.pop(); if (t1&amp;&amp;t2) res.push(1); else res.push(0); break; case &apos;A&apos;: t1 = res.top(); res.pop(); t2 = res.top(); res.pop(); if (t1 || t2) res.push(1); else res.push(0); break; case &apos;N&apos;: t1 = res.top(); res.pop(); if (!t1) res.push(1); else res.push(0); break; case &apos;C&apos;: t1 = res.top(); res.pop(); t2 = res.top(); res.pop(); if (!t1 || t2) res.push(1); else res.push(0); break; case &apos;E&apos;: t1 = res.top(); res.pop(); t2 = res.top(); res.pop(); if (t1 == t2) res.push(1); else res.push(0); break; } } t1 = res.top(); res.pop(); return t1;}void solution(){ while (cin&gt;&gt;str) { if (str == &quot;0&quot;) return; bool flag = true; for (p = 0; p &lt; 2 &amp;&amp; flag; p++) for (q = 0; q &lt; 2 &amp;&amp; flag; q++) for (r = 0; r &lt; 2 &amp;&amp; flag; r++) for (s = 0; s &lt; 2 &amp;&amp; flag; s++) for (t = 0; t &lt; 2 &amp;&amp; flag; t++) { if (!judge()) flag = false; } if (flag) cout &lt;&lt; &quot;tautology&quot; &lt;&lt; endl; else cout &lt;&lt; &quot;not&quot; &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); freopen(&quot;2.txt&quot;, &quot;w&quot;, stdout); solution(); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789Sample InputApNpApNq0Sample Outputtautologynot &#x826F;&#x5FC3;&#x5927;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x6765;&#x81EA;Waterloo Local Contest, 2006.9.30&#x8F93;&#x5165;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970pqrstCppAppKppEppNNNNNNNNNNNNNNNNNNNAKKKEEKEEKpppppppppppNNNNNNNNNNNNNCAKKEEEAACKKKKKCEEEACKKEKCCEKAppqqqppppqqpqppppqqppppqqqpppppNNNNNNNNNNNACKCAKEAAEKCAKECEKKKACAAEAKAKCKKrqqqprpppprpqprqprrppqrqqrqrqppqpNNNNNNNNCAEACACKEEEKKAEEEEAKKEECACKACECCCEKAECEECCCACrrrrprrqssrprrqpsssrrpsqssqprrqpprrpqrppqqsqqsNNNNNNNNNNNKAEEACEKKCCCKKAAECACAECAEKKECKAAAECCCKEAACArqpsrstpqsspsppssrpsprstsqspsspptrqrprptstpsNNNNNNNNNNNNEAAECEAEAECKCEAAAEEACAACCKEAKtqptstpttssrptqrtsstpptqtsspppNNNNNNNNNNNNNNNNNNNCAAAKEEAEACCCACECCCCCCEKCKCAKCpqpssqsppprttrqprspsssttsrprtqqNNNNNNNNNNNNEEKKCCCACACECEACCKCCAEKKKKCEKCEKEppsrrpqtqrrspqrqrpprtpqpqqrqqqtprpNNNNCAAEAECKKEKKEAACEAECAEEECCCCEKAKCKKAAEKrrtssrrppprrpstsrqqrrqprqrsprsspsrpsspsqNNNNNNNNNECCKAAACAKAAECCKAECKEAEKEACCKErstrqpqrtrtrqstqpptprttprtrrqtqNNAKAKEAKEAEAKACCEECCKKAACECAACACrrtrqtsttstspqrstqrpspqttrpspqspNNNEECEACEECKAAKKKCEKECKAKKAAAAAKsrtpprtrqqtpsssrrprtsqtsrpsssptNNNNNNCEECAKAACEKECAKCCAEECCCAEAEKKKrpqqqsqprqqsqtqstsrpqsqsqsrqsqsNNNAEAEKEACEECECKCAEAKCEEEKEKEKKCECEqtpssqrptpsqppqpprsqpttqrsqqrqqtrqCNNNEECEEEKECAAEACAsppsrqpptpspppqqNNNEECEEEKECAAEACAsppsrqpptpspppqqANNNEECEEEKECAAEACAsppsrqpptpspppqqNNNEECEEEKECAAEACAsppsrqpptpspppqqKNNNEECEEEKECAAEACAsppsrqpptpspppqqNNNEECEEEKECAAEACAsppsrqpptpspppqqENNNEECEEEKECAAEACAsppsrqpptpspppqqNNNEECEEEKECAAEACAsppsrqpptpspppqqCNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssANNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssKNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssENNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNCNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNANNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNKNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNENNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNEAKCEKCEAKACECKACCEKCqppppptrqqttptttqtpqssNNNNEEEEEAAACKEKAAEEAqpptpsqsrqpprsspttNNNKAKCEECACCEECACEKrtrrsstpqptpstsrsqNNNNNNNNNCACCCEKEACEACpqrqpsststtppsNNNNKKCACEACECCssqptqptrrtrNNNAAAACKECCAKAKACprspqspspsttpttrNNNECCCECCAAEpqstpspppssNNNNNCEAECACCEKAEEEppsptpsppprpqrqAEAAKKEEEKAEAKpqqtpppsssqrqspNNAKEKAAKprqrpqptNNNAKACAKEKCECKtqppqtpqsqsprNCEKEEACCCppsstppprpNNNAEKCEKAEEECEEKEtrqpppqqpppqstppNNNNCKEAACAKEKACECCEKstppprrptqqpqqppppNNEAKCECKACEEECKprrpqqsppppttqrNNNNNCKAAAKKEKKKECKECppqrppttpsttrtqtqNNEKKACCKKACEKErpprsptppppptqNNNCKECCAEAECAEspqpqpprsptprNNNCKECKCEEECstrtppsrtrpNNKCCKACKAACKprtttttpttppNNNNEACCKKEArqpptrpptNKECKACAptrrrtttNNAEEEKECAAptpspptqppNNNACKEEAAKAKKpsrttqtssrrtNNKKAKAKEEECACEEtstqqrsptttrprpCKAKECKKKtttppptptqNNNCEEEKCECCtsptqqqptpNAECCAKKCCttttpptpsrNCEEKCCAErpptpspptNKKEEKtpptttNCKCAECEpttqqttpNNNNNEEKAAECqqpqppptNECAACAECCAACKtrpptpptqtppppNNKECKKACrttttrtpAECAECrrtsptt0 &#x8F93;&#x51FA;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869notnotnotnotnottautologynotnottautologynotnotnotnotnotnotnotnotnotnotnotnotnotnottautologynotnottautologytautologynotnottautologynotnotnotnotnotnotnotnotnotnotnotnotnotnotnotnottautologynotnotnotnotnotnotnotnotnotnotnotnotnotnotnotnotnotnotnotnotnot]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>枚举</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2586 Y2K Accounting Bug]]></title>
    <url>%2F%2Fposts%2Fb572d5b3%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5343;&#x5E74;&#x866B;&#x9519;&#x8BEF; DescriptionAccounting for Computer Machinists (ACM) has sufferred from the Y2K bug and lost some vital data for preparing annual report for MS Inc.All what they remember is that MS Inc. posted a surplus or a deficit each month of 1999 and each month when MS Inc. posted surplus, the amount of surplus was s and each month when MS Inc. posted deficit, the deficit was d. They do not remember which or how many months posted surplus or deficit. MS Inc., unlike other companies, posts their earnings for each consecutive 5 months during a year. ACM knows that each of these 8 postings reported a deficit but they do not know how much. The chief accountant is almost sure that MS Inc. was about to post surplus for the entire year of 1999. Almost but not quite. Write a program, which decides whether MS Inc. suffered a deficit during 1999, or if a surplus for 1999 was possible, what is the maximum amount of surplus that they can post. Input SpecificationInput is a sequence of lines, each containing two positive integers s and d. Output SpecificationFor each line of input, output one line containing either a single integer giving the amount of surplus for the entire year, or output Deficit if it is impossible. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x9898;&#x76EE;&#x770B;&#x7684;&#x6211;&#x5410;&#x8840;&#x2026;. &#x5927;&#x610F;&#xFF1A;&#x67D0;&#x516C;&#x53F8;&#x6BCF;&#x4E2A;&#x6708;&#x7684;&#x76C8;&#x4F59;&#x6216;&#x8005;&#x8D64;&#x5B57;&#x53EA;&#x6709;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF1A;&#x8981;&#x4E48;&#x662F;&#x8D5A;&#x4E86;s&#xFF0C;&#x8981;&#x4E48;&#x662F;&#x4E8F;&#x4E86;d&#xFF0C;&#x53EA;&#x6709;&#x53EF;&#x80FD;&#x662F;&#x8FD9;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x800C;&#x4E14;&#x91D1;&#x989D;&#x56FA;&#x5B9A;&#xFF0C;&#x5C31;&#x662F;s&#x6216;&#x8005;d&#xFF0C;&#x4E0D;&#x4F1A;&#x662F;&#x5176;&#x4ED6;&#x7684;&#x6570;&#x3002; &#x4F46;&#x662F;&#x5751;&#x7239;&#x7684;&#x662F;&#xFF0C;&#x4ED6;&#x4EEC;&#x4E0D;&#x8BB0;&#x5F97;&#x8FD9;&#x4E00;&#x5E74;&#x4E2D;&#xFF0C;&#x54EA;&#x51E0;&#x4E2A;&#x6708;&#x8D5A;&#x4E86;&#xFF0C;&#x54EA;&#x51E0;&#x4E2A;&#x6708;&#x8D54;&#x4E86;&#x3002;&#x4ED6;&#x4EEC;&#x53EA;&#x77E5;&#x9053;&#xFF1A;&#x4ED6;&#x4EEC;&#x6BCF;&#x6B21;&#x7EDF;&#x8BA1;&#x5F53;&#x5E74;&#x7684;&#x8D22;&#x52A1;&#x62A5;&#x8868;&#x65F6;&#xFF0C;&#x90FD;&#x662F;&#x4E00;&#x8FDE;&#x8BA1;&#x7B97;5&#x4E2A;&#x6708;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x4E00;&#x5E74;&#x5171;&#x516C;&#x5E03;8&#x6B21;&#x8D22;&#x52A1;&#x62A5;&#x8868;&#xFF08;1~5,2~6,3~7,4~8,5~9,6~10,7~11,8~12&#xFF09;&#x3002;&#x8FD9;8&#x4E2A;&#x6708;&#x7684;&#x8D22;&#x52A1;&#x62A5;&#x8868;&#x5168;&#x90FD;&#x662F;&#x4E8F;&#x635F;&#x7684;&#x3002; &#x5751;&#x7239;&#x6210;&#x8FD9;&#x4E2A;&#x6837;&#x5B50;&#xFF0C;&#x4ED6;&#x4EEC;&#x8FD8;&#x62B1;&#x6709;&#x4E00;&#x4E1D;&#x4FA5;&#x5E78;&#x5FC3;&#x7406;&#xFF0C;&#x8BA4;&#x4E3A;&#x4ED6;&#x4EEC;&#x4ECA;&#x5E74;&#x6709;&#x53EF;&#x80FD;&#x8D5A;&#x94B1;&#xFF0C;&#x95EE;&#xFF0C;&#x4ED6;&#x4EEC;&#x4ECA;&#x5E74;&#x6700;&#x591A;&#x53EF;&#x80FD;&#x80FD;&#x8D5A;&#x591A;&#x5C11;&#x94B1;&#xFF0C;&#x5982;&#x679C;&#x91D1;&#x989D;&lt;0&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x201D;Deficit&#x201D;&#x3002; &#x8F93;&#x5165;&#x6709;&#x591A;&#x4E2A;&#x8F93;&#x5165;&#xFF0C;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x53EA;&#x6709;&#x4E00;&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x6709;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;s&#x548C;d&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x53EF;&#x80FD;&#x7684;&#x6700;&#x5927;&#x7684;&#x8425;&#x5229;&#xFF0C;&#x5982;&#x679C;&#x4E8F;&#x635F;&#xFF0C;&#x8F93;&#x51FA;&#x201D;Deficit&#x201D;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&lt;&#x8D2A;&#x5FC3;&gt;&#x56E0;&#x4E3A;&#x6BCF;5&#x4E2A;&#x6708;&#x7EDF;&#x8BA1;&#x4E00;&#x6B21;&#x90FD;&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x6709;5&#x79CD;&#x60C5;&#x51B5;&#xFF1A; &#x82E5;SSSSD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;: SSSSDSSSSDSS &#x82E5;SSSDD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;&#xFF1A;SSSDDSSSDDSS &#x82E5;SSDDD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;: SSDDDSSDDDSS &#x82E5;SDDDD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;: SDDDDSDDDDSD &#x82E5;DDDDD&#x4E8F;&#x7A7A;&#xFF0C;&#x90A3;&#x4E48;&#x5168;&#x5E74;&#x53EF;&#x80FD;&#x6700;&#x5927;&#x76C8;&#x5229;&#x60C5;&#x51B5;&#x4E3A;: DDDDDDDDDDDD &#x679A;&#x4E3E;&#x548C;&#x904D;&#x5386; &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6708;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x53EA;&#x6709;&#x8D5A;&#x4E86;s&#x548C;&#x4E8F;&#x4E86;d&#xFF0C;&#x56E0;&#x6B64;&#x5206;&#x522B;&#x5047;&#x8BBE;&#xFF0C;&#x8FDB;&#x884C;&#x6DF1;&#x5EA6;&#x641C;&#x7D22;&#xFF0C;&#x8981;&#x7528;&#x5230;212&#x4E2A;&#x53EF;&#x80FD;&#x3002; &#x4EE3;&#x7801;&#xFF08;&#x8D2A;&#x5FC3;&#xFF09;12345678910111213141516171819#include &lt;iostream&gt;using namespace std;int main(){ int s, d; int ans; while (cin &gt;&gt; s &amp;&amp; cin &gt;&gt; d) { if (d&gt;4 * s)ans = 10 * s - 2 * d; else if (2 * d&gt;3 * s)ans = 8 * s - 4 * d; else if (3 * d&gt;2 * s)ans = 6 * (s - d); else if (4 * d&gt;s)ans = 3 * (s - 3 * d); else ans = -1; if (ans&lt;0)cout &lt;&lt; &quot;Deficit&quot; &lt;&lt; endl; else cout &lt;&lt; ans &lt;&lt; endl; } return 0;} &#x4EE3;&#x7801;&#xFF08;DFS&#xFF09;12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;iostream&gt;#pragma warning(disable:4996)using namespace std;int s, d;int month[12];int res;void dfs(int m){ // &#x4ECE;5&#x6708;&#x5F00;&#x59CB;&#xFF0C;&#x6BCF;&#x4E2A;&#x6708;&#x53D1;&#x5E03;&#x4E00;&#x4E2A;&#x62A5;&#x8868;&#xFF0C;&#x6240;&#x4EE5;&#x8981;&#x68C0;&#x67E5; // &#x68C0;&#x67E5;&#x8FD9;&#x4E2A;&#x62A5;&#x8868;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x5426;&#x4E3A;&#x4E8F;&#x635F; if (m &gt; 4) { int tmp = 0; for (int j = m - 5; j &lt; m; j++) { tmp += month[j]; } if (tmp &gt;= 0) return; } // &#x5E74;&#x5E95;&#x67E5;&#x770B;&#x53EF;&#x80FD;&#x7684;&#x5229;&#x6DA6;&#xFF0C;&#x4FDD;&#x7559;&#x6700;&#x5927;&#x5229;&#x6DA6; if (m == 12) { int sum = 0; for (int j = 0; j &lt; 12; j++) sum += month[j]; if (sum &gt; res) res = sum; return; } // &#x8425;&#x5229;&#x6216;&#x4E8F;&#x635F;&#x90FD;&#x8BD5;&#x4E00;&#x8BD5; month[m] = s; dfs(m + 1); month[m] = -d; dfs(m + 1); return;}int main(void){ while (cin&gt;&gt;s&gt;&gt;d) { res = -1e9; dfs(0); if (res &gt;= 0) cout &lt;&lt; res &lt;&lt; endl; else cout &lt;&lt; &quot;Deficit&quot; &lt;&lt; endl; } return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112Sample Input59 237375 743200000 8496942500000 8000000Sample Output11628300612Deficit]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>贪心</tag>
        <tag>DFS</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2109 Power of Cryptography]]></title>
    <url>%2F%2Fposts%2Fea1deaf6%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5BC6;&#x7801;&#x5B66;&#x7684;&#x529B;&#x91CF; DescriptionCurrent work in cryptography involves (among other things) large prime numbers and computing powers of numbers among these primes. Work in this area has resulted in the practical use of results from number theory and other branches of mathematics once considered to be only of theoretical interest.This problem involves the efficient computation of integer roots of numbers.Given an integer n&gt;=1 and an integer p&gt;= 1 you have to write a program that determines the n th positive root of p. In this problem, given such integers n and p, p will always be of the form k to the nth. power, for an integer k (this integer is what your program must find). Input SpecificationThe input consists of a sequence of integer pairs n and p with each integer on a line by itself. For all such pairs 1&lt;=n&lt;= 200, 1&lt;=p&lt;10101 and there exists an integer k, 1&lt;=k&lt;=109 such that kn = p. Output SpecificationFor each integer pair n and p the value k should be printed, i.e., the number k such that k n =p. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;N&#x548C;P&#xFF0C;&#x6C42;&#x4E00;&#x4E2A;&#x6570;K&#xFF0C;&#x4F7F;&#x5F97;KN=P&#x3002; &#x8F93;&#x5165;&#x4E00;&#x884C;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x662F;N&#xFF08;1&lt;=n&lt;= 200&#xFF09;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x662F;P(1&lt;=p&lt;10101),&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x6574;&#x6570;K&#xFF0C;1&lt;=k&lt;=109&#xFF0C;&#x6EE1;&#x8DB3; kn = p&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;K&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5176;&#x5B9E;&#x8FD9;&#x4E2A;&#x9898;&#x5C31;&#x662F;&#x7528;pow&#x51FD;&#x6570;&#x6765;&#x6C42;&#x7684;&#x3002; &#x5728;double&#x7CBE;&#x5EA6;&#x5185;&#xFF0C;&#x4E00;&#x4E2A;&#x5927;&#x6570;&#xFF0C;&#x5F00;N&#x6B21;&#x65B9;&#x548C;&#x5F00;N+1&#x6B21;&#x65B9;&#xFF0C;&#x662F;&#x80FD;&#x611F;&#x77E5;&#x5230;&#x7684;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021#include&lt;iostream&gt;#include&lt;cmath&gt;#pragma warning(disable:4996)using namespace std;void solution(){ double n, p; while (scanf(&quot;%lf %lf&quot;,&amp;n,&amp;p)!=EOF) { printf(&quot;%.0lf\n&quot;, pow(p, 1.0 / n)); }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011Sample Input2 163 277 4357186184021382204544Sample Output431234Source]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>数学问题</tag>
        <tag>POJ</tag>
        <tag>幂运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1328 Radar Installation]]></title>
    <url>%2F%2Fposts%2Fbe1dc362%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5B89;&#x88C5;&#x96F7;&#x8FBE; DescriptionAssume the coasting is an infinite straight line. Land is in one side of coasting, sea in the other. Each small island is a point locating in the sea side. And any radar installation, locating on the coasting, can only cover d distance, so an island in the sea can be covered by a radius installation, if the distance between them is at most d. We use Cartesian coordinate system, defining the coasting is the x-axis. The sea side is above x-axis, and the land side below. Given the position of each island in the sea, and given the distance of the coverage of the radar installation, your task is to write a program to find the minimal number of radar installations to cover all the islands. Note that the position of an island is represented by its x-y coordinates. Input SpecificationThe input consists of several test cases. The first line of each case contains two integers n (1&lt;=n&lt;=1000) and d, where n is the number of islands in the sea and d is the distance of coverage of the radar installation. This is followed by n lines each containing two integers representing the coordinate of the position of each island. Then a blank line follows to separate the cases. The input is terminated by a line containing pair of zeros Output SpecificationFor each test case output one line consisting of the test case number followed by the minimal number of radar installations needed. &#x201C;-1&#x201D; installation means no solution for that case. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x5E73;&#x9762;&#x76F4;&#x89D2;&#x5750;&#x6807;&#x7CFB;&#x4E0A;&#x6709;n&#x4E2A;&#x70B9;&#xFF0C;&#x6C42;&#x5728;x&#x8F74;&#x4E0A;&#x627E;&#x5C3D;&#x91CF;&#x5C11;&#x7684;&#x70B9;&#xFF0C;&#x4EE5;&#x8FD9;&#x4E9B;&#x70B9;&#x4E3A;&#x5706;&#x5FC3;&#x753B;&#x4E00;&#x4E2A;&#x534A;&#x5F84;&#x4E3A;d&#x7684;&#x5706;&#xFF0C;&#x4F7F;&#x5F97;&#x7ED9;&#x5B9A;&#x7684;&#x70B9;&#x90FD;&#x5728;&#x753B;&#x51FA;&#x6765;&#x7684;&#x5706;&#x91CC;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x8F93;&#x51FA;-1&#x3002; &#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x591A;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6574;&#x6570;n&#xFF08;1 &lt;= n &lt;= 1000&#xFF09;&#x548C;d&#xFF0C;&#x5176;&#x4E2D;n&#x662F;&#x6D77;&#x4E2D;&#x5C9B;&#x5C7F;&#x7684;&#x6570;&#x91CF;&#xFF0C;d&#x662F;&#x96F7;&#x8FBE;&#x88C5;&#x7F6E;&#x7684;&#x8986;&#x76D6;&#x8DDD;&#x79BB;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x662F;n&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x5305;&#x542B;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x6BCF;&#x4E2A;&#x5C9B;&#x7684;&#x4F4D;&#x7F6E;&#x5750;&#x6807;&#x3002;&#x7136;&#x540E;&#x662F;&#x4E00;&#x4E2A;&#x7A7A;&#x767D;&#x884C;&#x6765;&#x5206;&#x9694;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002; &#x8F93;&#x5165;&#x7531;&#x5305;&#x542B;&#x4E24;&#x4E2A;0&#x7684;&#x884C;&#x8868;&#x793A;&#x7EC8;&#x6B62;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7684;&#x8F93;&#x51FA;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x542B;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x7F16;&#x53F7;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x6240;&#x9700;&#x7684;&#x5B89;&#x88C5;&#x6570;&#x91CF;&#x6700;&#x5C11;&#x7684;&#x96F7;&#x8FBE;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x201C;-1&#x201D;&#x8868;&#x793A;&#x6CA1;&#x6709;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x8003;&#x8651;&#x5728;&#x4EC0;&#x4E48;&#x60C5;&#x51B5;&#x4E0B;&#x6CA1;&#x6709;&#x89E3;&#xFF1A;&#x5F53;&#x4E14;&#x4EC5;&#x5F53;&#x4EE5;&#xFF08;a,b&#xFF09;&#x4E3A;&#x5706;&#x5FC3;&#xFF0C;D&#x4E3A;&#x534A;&#x5F84;&#x753B;&#x4E00;&#x4E2A;&#x5706;&#xFF0C;&#x8FD9;&#x4E2A;&#x5706;&#x4E0E;x&#x8F74;&#x6CA1;&#x6709;&#x4EA4;&#x70B9;&#x65F6;&#xFF0C;&#x8FD9;&#x4E2A;&#x6D77;&#x5C9B;&#x662F;&#x65E0;&#x6CD5;&#x88AB;&#x96F7;&#x8FBE;&#x8986;&#x76D6;&#x7684;&#x3002;&#x5982;&#x56FE;&#xFF1A; &#x6211;&#x4EEC;&#x77E5;&#x9053;&#x5706;&#x5FC3;&#x548C;&#x534A;&#x5F84;&#xFF0C;&#x53EF;&#x4EE5;&#x6C42;&#x51FA;&#x5706;&#x7684;&#x65B9;&#x7A0B;&#xFF1A;(x-a)2+(y-b)2=d2&#xFF0C;&#x4E0E;y=0&#x8054;&#x7ACB;&#x3002;&#x53EF;&#x5F97;&#xFF1A;x2-2ax+a2+b2-d2=0&#x3002; &#x5224;&#x522B;&#x5F0F;&#x25B3;=4a2-4(a2+b2-d2)=d2-b2&#x3002; &#x5982;&#x679C;&#x65E0;&#x89E3;&#xFF0C;&#x5219;&#x25B3;&lt;0&#xFF0C;&#x5373;d2&lt;b2&#x3002; &#x5982;&#x679C;&#x6709;&#x89E3;&#xFF0C;&#x6839;&#x636E;&#x6C42;&#x6839;&#x516C;&#x5F0F;&#xFF1A;x1=a-(d2-b2)&#xFF0C;x2=a+(d2-b2)&#x3002; &#x90A3;&#x4E48;&#x56DE;&#x5230;&#x56FE;&#x4E2D;&#xFF0C;&#x4E24;&#x4E2A;&#x70B9;&#x5728;&#x5750;&#x6807;&#x8F74;&#x7684;&#x4F4D;&#x7F6E;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A; &#x7EE7;&#x7EED;&#x60F3;&#xFF1A; &#x5982;&#x679C;&#x8981;&#x5728;x&#x8F74;&#x4E0A;&#x9009;&#x70B9;&#x753B;&#x5706;&#x8986;&#x76D6;(a,b),&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x70B9;&#x7684;&#x6A2A;&#x5750;&#x6807;&#x5C31;&#x4E00;&#x5B9A;&#x5728;[a-d&#xB2;+b&#xB2;,a+d&#xB2;-b&#xB2;]&#x533A;&#x95F4;&#x5185;&#x3002; &#x56E0;&#x6B64;&#x8FD9;&#x9053;&#x9898;&#x53D8;&#x6210;&#x4E86;&#x5728;&#x6570;&#x8F74;&#x4E0A;&#x9009;&#x6700;&#x5C11;&#x7684;&#x70B9;&#xFF0C;&#x8986;&#x76D6;&#x7ED9;&#x5B9A;&#x7EBF;&#x6BB5;&#x3002;&#x8FD9;&#x5C31;&#x7C7B;&#x4F3C;&#x4E8E;&#x6574;&#x6570;&#x533A;&#x95F4;&#x4E86;&#x3002; &#x5047;&#x8BBE;&#x6570;&#x8F74;&#x4E0A;&#x6709;&#x5F88;&#x591A;&#x6BB5;&#x533A;&#x95F4;&#xFF0C;&#x6211;&#x4EEC;&#x628A;&#x5B83;&#x4EEC;&#x4ECE;&#x6570;&#x8F74;&#x4E0A;&#x5206;&#x79BB;&#x51FA;&#x6765;&#x3002; &#x53D6;&#x70B9;&#x7684;&#x8FC7;&#x7A0B;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x753B;&#x4E00;&#x6761;&#x94C5;&#x5782;&#x7EBF;&#x6765;&#x5272;&#x8FD9;&#x4E9B;&#x7EBF;&#x6BB5;&#x3002; &#x628A;&#x6240;&#x6709;&#x7EBF;&#x6BB5;&#x6309;&#x7167;&#x53F3;&#x7AEF;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x3002; &#x5982;&#x4E0A;&#x56FE;&#x6240;&#x793A;&#xFF0C;&#x5C31;&#x7B2C;&#x4E00;&#x90E8;&#x5206;&#x800C;&#x8A00;&#xFF0C;&#x9009;&#x62E9;&#x7B2C;&#x4E00;&#x6761;&#x7EBF;&#x6BB5;&#x7684;&#x53F3;&#x7AEF;&#x70B9;&#xFF0C;&#x8BB0;&#x4F4D;&#x7F6E;&#x4E3A;P&#xFF0C;&#x5982;&#x679C;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x51E0;&#x6761;&#x7EBF;&#x6BB5;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x90FD;&#x5728;P&#x7684;&#x5DE6;&#x8FB9;&#xFF0C;&#x56E0;&#x4E3A;&#x662F;&#x6309;&#x7167;&#x53F3;&#x7AEF;&#x70B9;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5176;&#x53F3;&#x7AEF;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x4E00;&#x5B9A;&#x5927;&#x4E8E;P&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;P&#x5728;&#x8FD9;&#x6761;&#x7EBF;&#x6BB5;&#x5185;&#x3002;&#x5373;&#x9009;&#x5728;P&#x70B9;&#xFF0C;&#x53EF;&#x4EE5;&#x5C3D;&#x80AF;&#x80FD;&#x591A;&#x7684;&#x8986;&#x76D6;&#x5230;&#x6D77;&#x5C9B;&#x3002; &#x5F53;&#x9047;&#x5230;&#x67D0;&#x4E2A;&#x70B9;&#x7684;&#x5DE6;&#x7AEF;&#x70B9;&#x4F4D;&#x7F6E;&#x5927;&#x4E8E;P&#x65F6;&#x3002;P&#x5C31;&#x65E0;&#x6CD5;&#x8986;&#x76D6;&#x5230;&#x8FD9;&#x4E2A;&#x6D77;&#x5C9B;&#x4E86;&#xFF0C;&#x9009;&#x62E9;&#x8FD9;&#x4E2A;&#x7EBF;&#x6BB5;&#x7684;&#x53F3;&#x7AEF;&#x70B9;&#xFF0C;&#x8BB0;&#x4E3A;P&#xFF0C;&#x91CD;&#x590D;6~7&#x6D41;&#x7A0B;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int N, D; //N&#x662F;&#x6D77;&#x5C9B;&#x7684;&#x6570;&#x91CF;&#xFF0C;D&#x662F;&#x8DDD;&#x79BB;.typedef struct{ int x, y;}node;typedef struct{ double left; double right;}Radar;node temp;Radar r;vector&lt;Radar&gt;p;bool cmp(Radar a, Radar b){ return a.right &lt; b.right;}void solution(){ int cnt = 0; while (true) { p.clear(); bool flag = true; cin &gt;&gt; N &gt;&gt; D; if (!N &amp;&amp; !D) return; printf(&quot;Case %d: &quot;, ++cnt); for (int j = 0; j &lt; N; j++) { cin &gt;&gt; temp.x &gt;&gt; temp.y; double delta = 1.0*D*D - 1.0*temp.y*temp.y; if (D &gt;= temp.y&amp;&amp;flag) { r.left = 1.0*temp.x - sqrt(delta); r.right = 1.0*temp.x + sqrt(delta); p.push_back(r); } else flag = false; } if (flag == false) { printf(&quot;-1\n&quot;); continue; } sort(p.begin(), p.end(), cmp); double now = p[0].right; int res = 1; for (int i = 1; i &lt; p.size(); i++) { if (p[i].left &gt; now) //&#x4E0B;&#x4E00;&#x4E2A;&#x70B9;&#x7684;&#x6700;&#x5DE6;&#x8FB9;&#x5DF2;&#x7ECF;&#x5927;&#x4E8E;&#x73B0;&#x5728;&#x7684;&#x70B9;&#x7684;&#x4F4D;&#x7F6E;&#x4E86;&#xFF0C;&#x65E0;&#x6CD5;&#x8986;&#x76D6;&#xFF0C;&#x53EA;&#x80FD;&#x518D;&#x5B89;&#x7F6E;&#x4E00;&#x4E2A;&#x96F7;&#x8FBE; { res++; now = p[i].right; } } printf(&quot;%d\n&quot;, res); }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415Sample Input3 21 2-3 12 11 20 20 0Sample OutputCase 1: 2Case 2: 1 &#x5F15;&#x7528;https://blog.csdn.net/c20182030/article/details/75107606]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>贪心</tag>
        <tag>数学问题</tag>
        <tag>POJ</tag>
        <tag>区间覆盖</tag>
        <tag>圆</tag>
        <tag>二次方程</tag>
        <tag>解析几何</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2965 The Pilots Brothers' refrigerator]]></title>
    <url>%2F%2Fposts%2F9424e4c0%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x98DE;&#x884C;&#x5458;&#x5144;&#x5F1F;&#x7684;&#x51B0;&#x7BB1; DescriptionThe game &#x201C;The Pilots Brothers: following the stripy elephant&#x201D; has a quest where a player needs to open a refrigerator. There are 16 handles on the refrigerator door. Every handle can be in one of two states: open or closed. The refrigerator is open only when all handles are open. The handles are represented as a matrix 4&#x445;4. You can change the state of a handle in any location [i, j] (1 &#x2264; i, j &#x2264; 4). However, this also changes states of all handles in row i and all handles in column j. The task is to determine the minimum number of handle switching necessary to open the refrigerator. Input SpecificationThe input contains four lines. Each of the four lines contains four characters describing the initial state of appropriate handles. A symbol &#x201C;+&#x201D; means that the handle is in closed state, whereas the symbol &#x201C;&#x2212;&#x201D; means &#x201C;open&#x201D;. At least one of the handles is initially closed. Output SpecificationThe first line of the input contains N &#x2013; the minimum number of switching. The rest N lines describe switching sequence. Each of the lines contains a row number and a column number of the matrix separated by one or more spaces. If there are several solutions, you may give any one of them. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x51B0;&#x7BB1;&#x95E8;&#x4E0A;&#x6709;16&#x4E2A;&#x628A;&#x624B;&#x3002;&#x6BCF;&#x4E2A;&#x628A;&#x624B;&#x53EF;&#x4EE5;&#x662F;&#x5173;&#x95ED;&#x6216;&#x8005;&#x662F;&#x6253;&#x5F00;&#x7684;&#x3002;&#x5F53;&#x6240;&#x6709;&#x7684;&#x628A;&#x624B;&#x90FD;&#x6253;&#x5F00;&#x65F6;&#xFF0C;&#x51B0;&#x7BB1;&#x624D;&#x4F1A;&#x6253;&#x5F00;&#x3002;&#x628A;&#x624B;&#x7684;&#x77E9;&#x9635;&#x662F;4*4&#xFF0C;&#x53EF;&#x4EE5;&#x6539;&#x53D8;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x628A;&#x624B;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x4F46;&#x662F;&#xFF0C;&#x548C;&#x5B83;&#x540C;&#x884C;&#x540C;&#x5217;&#x7684;&#x628A;&#x624B;&#x7684;&#x72B6;&#x6001;&#x4E5F;&#x4F1A;&#x968F;&#x4E4B;&#x6539;&#x53D8;&#x3002;&#x6C42;&#x6253;&#x5F00;&#x51B0;&#x7BB1;&#x6240;&#x9700;&#x8981;&#x7684;&#x6700;&#x5C11;&#x7684;&#x6B21;&#x6570;&#x3002; &#x8F93;&#x5165;&#x8F93;&#x5165;&#x5305;&#x62EC;4&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x6709;4&#x4E2A;&#x5B57;&#x7B26;&#x8868;&#x793A;&#x628A;&#x624B;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x201D;+&#x201D;&#x8868;&#x793A;&#x628A;&#x624B;&#x5904;&#x4E8E;&#x95ED;&#x5408;&#x72B6;&#x6001;&#xFF0C;&#x201D;-&#x201C;&#x8868;&#x793A;&#x628A;&#x624B;&#x5904;&#x4E8E;&#x6253;&#x5F00;&#x72B6;&#x6001;&#x3002;&#x4FDD;&#x8BC1;&#x6700;&#x521D;&#x72B6;&#x6001;&#x81F3;&#x5C11;&#x6709;&#x4E00;&#x4E2A;&#x628A;&#x624B;&#x662F;&#x5173;&#x95ED;&#x7684;&#x3002; &#x8F93;&#x51FA;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6574;&#x6570;N&#xFF0C;&#x8868;&#x793A;&#x6700;&#x5C0F;&#x5207;&#x6362;&#x6B21;&#x6570;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x7684;N&#x884C;&#x91CC;&#x63CF;&#x8FF0;&#x5207;&#x6362;&#x987A;&#x5E8F;&#xFF0C;&#x6BCF;&#x884C;&#x4E00;&#x4E2A;&#x77E9;&#x9635;&#x7684;&#x884C;&#x53F7;&#x548C;&#x5217;&#x53F7;&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;&#x5982;&#x679C;&#x6709;&#x591A;&#x79CD;&#x89E3;&#x90FD;&#x7B26;&#x5408;&#x8981;&#x6C42;&#xFF0C;&#x4EFB;&#x610F;&#x8F93;&#x51FA;&#x5176;&#x4E2D;&#x4E4B;&#x4E00;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x679A;&#x4E3E;+DFS+&#x4FDD;&#x5B58;&#x8DEF;&#x5F84;&#x3002; Tips&#x7C7B;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;POJ-1753&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;bool handle[4][4];int minn = 16;vector&lt;int&gt;res, temp;void build(){ char h; for (int i = 0; i &lt; 4; i++) { for (int j = 0; j &lt; 4; j++) { cin &gt;&gt; h; if (h == &apos;+&apos;) handle[i][j] = 0; else handle[i][j] = 1; } }}bool finish(){ int res = 0; for (int i = 0; i &lt; 4; i++) { for (int j = 0; j &lt; 4; j++) { res += handle[i][j]; } } return res == 16;}void change(int cnt){ int x = cnt / 4; int y = cnt % 4; for (int i = 0; i &lt; 4; i++) { handle[x][i] = !handle[x][i]; handle[i][y] = !handle[i][y]; } handle[x][y] = !handle[x][y];}void DFS(int i){ if (finish()) { if (res.size() &lt; temp.size()) res = temp; return; } if (i &gt;= 16) return; DFS(i + 1); change(i); temp.push_back(i); DFS(i + 1); change(i); temp.pop_back();}void solution(){ build(); DFS(0); cout &lt;&lt; res.size() &lt;&lt; endl; for (int i = 0; i &lt; res.size(); i++) { cout &lt;&lt; res[i] / 4 + 1 &lt;&lt; &apos; &apos; &lt;&lt; res[i] % 4 + 1 &lt;&lt; endl; } return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415Sample Input-+-----------+--Sample Output61 11 31 44 14 34 4]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>DFS</tag>
        <tag>POJ</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1753 Flip Game]]></title>
    <url>%2F%2Fposts%2Fa4273118%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x53CD;&#x8F6C;&#x6E38;&#x620F; DescriptionFlip game is played on a rectangular 4x4 field with two-sided pieces placed on each of its 16 squares. One side of each piece is white and the other one is black and each piece is lying either it&#x2019;s black or white side up. Each round you flip 3 to 5 pieces, thus changing the color of their upper side from black to white and vice versa. The pieces to be flipped are chosen every round according to the following rules: Choose any one of the 16 pieces. Flip the chosen piece and also all adjacent pieces to the left, to the right, to the top, and to the bottom of the chosen piece (if there are any). Consider the following position as an example:1234bwbwwwwwbbwbbwwb Here &#x201C;b&#x201D; denotes pieces lying their black side up and &#x201C;w&#x201D; denotes pieces lying their white side up. If we choose to flip the 1st piece from the 3rd row (this choice is shown at the picture), then the field will become:1234bwbwbwwwwwwbwwwb The goal of the game is to flip either all pieces white side up or all pieces black side up. You are to write a program that will search for the minimum number of rounds needed to achieve this goal. Input SpecificationThe input consists of 4 lines with 4 characters &#x201C;w&#x201D; or &#x201C;b&#x201D; each that denote game field position. Output SpecificationWrite to the output file a single integer number - the minimum number of rounds needed to achieve the goal of the game from the given position. If the goal is initially achieved, then write 0. If it&#x2019;s impossible to achieve the goal, then write the word &#x201C;Impossible&#x201D; (without quotes). &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x53CD;&#x8F6C;&#x6E38;&#x620F;&#xFF0C;&#x68CB;&#x76D8;&#x5927;&#x5C0F;&#x4E3A;4*4&#xFF0C;&#x5171;16&#x4E2A;&#x68CB;&#x5B50;&#x3002;&#x6BCF;&#x4E2A;&#x68CB;&#x5B50;&#x6709;&#x9ED1;&#x767D;&#x4E24;&#x9762;&#x3002;&#x53CD;&#x8F6C;&#x4E00;&#x4E2A;&#x68CB;&#x5B50;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8981;&#x628A;&#x8FD9;&#x4E2A;&#x68CB;&#x5B50;&#x548C;&#x5176;&#x4E0A;&#x4E0B;&#x5DE6;&#x53F3;&#x76F8;&#x8FDE;&#x7684;&#x68CB;&#x5B50;&#x4E5F;&#x4E00;&#x5E76;&#x7FFB;&#x8F6C;&#x3002;&#x6C42;&#x628A;&#x8FD9;16&#x4E2A;&#x68CB;&#x5B50;&#x7FFB;&#x8F6C;&#x5230;&#x7EDF;&#x4E00;&#x989C;&#x8272;&#x6240;&#x9700;&#x7684;&#x6700;&#x5C0F;&#x6B21;&#x6570;&#x3002; &#x8F93;&#x5165;4&#x884C;&#x8F93;&#x5165;&#xFF0C;&#x6BCF;&#x884C;4&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x201C;w&#x201D;&#x8868;&#x793A;&#x767D;&#x8272;&#xFF0C;&#x201C;b&#x201D;&#x8868;&#x793A;&#x9ED1;&#x8272;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;16&#x4E2A;&#x68CB;&#x5B50;&#x5168;&#x90E8;&#x7FFB;&#x8F6C;&#x5230;&#x540C;&#x4E00;&#x989C;&#x8272;&#x6240;&#x9700;&#x8981;&#x7684;&#x6700;&#x5C11;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x7FFB;&#x8F6C;&#x6210;&#x540C;&#x4E00;&#x989C;&#x8272;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x201D;Impossible&#x201D;&#xFF08;&#x6CA1;&#x6709;&#x5F15;&#x53F7;&#xFF09; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x679A;&#x4E3E;&#x51FA;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x7684;&#x72B6;&#x6001;&#x3002;&#x4F7F;&#x7528;DFS&#x6DF1;&#x641C;&#x3002;&#x8BB0;&#x5F97;&#x7FFB;&#x8FC7;&#x53BB;&#x4E4B;&#x540E;&#xFF0C;&#x518D;&#x7FFB;&#x8FC7;&#x6765;&#x3002; Tips&#x7531;&#x9898;&#x610F;&#xFF0C;&#x6BCF;&#x4E2A;&#x68CB;&#x5B50;&#x7FFB;&#x8F6C;&#x8FC7;&#x53BB;&#x518D;&#x7FFB;&#x8F6C;&#x8FC7;&#x6765;&#xFF0C;&#x7ED3;&#x679C;&#x4E0D;&#x53D8;&#x3002;&#x56E0;&#x6B64;&#x6700;&#x591A;&#x7FFB;&#x8F6C;&#x7684;&#x6B21;&#x6570;&#x4E3A;15&#x6B21;&#x3002;&#xFF08;&#x7FFB;&#x8F6C;16&#x6B21;&#x548C;&#x4E0D;&#x7FFB;&#x8F6C;&#x68CB;&#x9762;&#x4E00;&#x6837;&#xFF09; &#x7C7B;&#x4F3C;&#x9898;&#x76EE;POJ-2965&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;iostream&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int chess[4][4];int maxn = 16;void build(){ char c; for (int i = 0; i &lt; 4; i++) { for (int j = 0; j &lt; 4; j++) { cin &gt;&gt; c; if (c == &apos;w&apos;) chess[i][j] = 0; else chess[i][j] = 1; } }}bool turn(int x, int y){ if (x &lt; 4 &amp;&amp; x &gt;= 0 &amp;&amp; y &lt; 4 &amp;&amp; y &gt;= 0) return chess[x][y] = !chess[x][y]; //&#x53D6;&#x975E;}void flip(int cnt) //cnt&#x8868;&#x793A;&#x53CD;&#x8F6C;&#x7684;&#x6B21;&#x6570;{ int x = cnt / 4; int y = cnt % 4; turn(x - 1, y); turn(x + 1, y); turn(x, y + 1); turn(x, y - 1); turn(x, y);}bool finish(){ int res = 0; for (int i = 0; i &lt; 4; i++) { for (int j = 0; j &lt; 4; j++) { res += chess[i][j]; } } return !(res % 16);}void DFS(int i, int cnt) //i&#x8868;&#x793A;&#x8FED;&#x4EE3;&#x7684;&#x6B21;&#x6570;&#xFF0C;cnt&#x8868;&#x793A;&#x53CD;&#x8F6C;&#x7684;&#x4E2A;&#x6570;{ if (finish()) { maxn = min(maxn, cnt); return; } if (i &gt;= 16) return; DFS(i + 1,cnt); //&#x5148;&#x5230;&#x6700;&#x540E;&#x4E00;&#x4E2A; flip(i); DFS(i + 1, cnt + 1); //&#x5047;&#x8BBE;&#x4ED6;&#x7FFB;&#x8FC7;&#x53BB;&#x7684;&#xFF0C;&#x904D;&#x5386;&#x7ED3;&#x679C; flip(i); //&#x518D;&#x7FFB;&#x8FC7;&#x6765;}void solution(){ build(); DFS(0, 0); if (maxn != 16) cout &lt;&lt; maxn &lt;&lt; endl; else cout &lt;&lt; &quot;Impossible&quot;; return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789Sample InputbwwbbbwbbwwbbwwwSample Output4]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>DFS</tag>
        <tag>POJ</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1114 Family Property（25）]]></title>
    <url>%2F%2Fposts%2F9bf38d02%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5BB6;&#x5EAD;&#x8D22;&#x4EA7; DescriptionThis time, you are supposed to help us collect the data for family-owned property. Given each person&#x2019;s family members, and the estate&#xFF08;&#x623F;&#x4EA7;&#xFF09;info under his/her own name, we need to know the size of each family, and the average area and number of sets of their real estate. Input SpecificationEach input file contains one test case. For each case, the first line gives a positive integer N (&lt;=1000). Then N lines follow, each gives the infomation of a person who owns estate in the format: ID Father Mother k Child1 &#x2026; Childk M_estate Area where ID is a unique 4-digit identification number for each person; Father and Mother are the ID&#x2019;s of this person&#x2019;s parents (if a parent has passed away, -1 will be given instead); k (0&lt;=k&lt;=5) is the number of children of this person; Childi&#x2019;s are the ID&#x2019;s of his/her children; M_estate is the total number of sets of the real estate under his/her name; and Area is the total area of his/her estate. Output SpecificationFor each case, first print in a line the number of families (all the people that are related directly or indirectly are considered in the same family). Then output the family info in the format: ID M AVG_sets AVG_area where ID is the smallest ID in the family; M is the total number of family members; AVG_sets is the average number of sets of their real estate; and AVG_area is the average area. The average numbers must be accurate up to 3 decimal places. The families must be given in descending order of their average areas, and in ascending order of the ID&#x2019;s if there is a tie. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;Tips&#x4EE3;&#x7801;1234567891011121314151617181920```## &#x6D4B;&#x8BD5;&#x6570;&#x636E;``` cppSample Input:106666 5551 5552 1 7777 1 1001234 5678 9012 1 0002 2 3008888 -1 -1 0 1 10002468 0001 0004 1 2222 1 5007777 6666 -1 0 2 3003721 -1 -1 1 2333 2 1509012 -1 -1 3 1236 1235 1234 1 1001235 5678 9012 0 1 502222 1236 2468 2 6661 6662 1 3002333 -1 3721 3 6661 6662 6663 1 100Sample Output:38888 1 1.000 1000.0000001 15 0.600 100.0005551 4 0.750 100.000]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1113 Integer Set Partition（25）]]></title>
    <url>%2F%2Fposts%2F59718a1%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5212;&#x5206;&#x6574;&#x6570;&#x96C6; DescriptionGiven a set of N (&gt;1) positive integers, you are supposed to partition them into two disjoint sets A1 and A2 of n1 and n2 numbers, respectively. Let S1and S2 denote the sums of all the numbers in A1 and A2, respectively. You are supposed to make the partition so that &#x2223;n1&#x2212;n2&#x2223; is minimized first, and then &#x2223;S1&#x2212;S2&#x2223; is maximized. Input SpecificationEach input file contains one test case. For each case, the first line gives an integer N (2&#x2264;N&#x2264;10&#x200B;5), and then N positive integers follow in the next line, separated by spaces. It is guaranteed that all the integers and their sum are less than 231. Output SpecificationFor each case, print in a line two numbers: &#x2223;n1&#x2212;n2&#x2223; and &#x2223;S1&#x2212;S2&#x2223;, separated by exactly one space. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x8981;&#x6C42;&#x628A;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x5206;&#x6210;&#x4E24;&#x4E2A;&#x4E0D;&#x76F8;&#x4EA4;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x4F7F;&#x5F97;&#x8FD9;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#x76F8;&#x5DEE;&#x6700;&#x5C0F;&#x7684;&#x524D;&#x63D0;&#x4E0B;&#xFF0C;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x603B;&#x548C;&#x4E4B;&#x5DEE;&#x6700;&#x5927;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N(2&#x2264;N&#x2264;10&#xFF0C;&#x7136;&#x540E;&#x5728;&#x4E0B;&#x4E00;&#x884C;&#x7ED9;&#x51FA;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x6570;&#x4E2D;&#x95F4;&#x7531;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7684;&#x6574;&#x6570;&#x53CA;&#x5176;&#x603B;&#x548C;&#x5C0F;&#x4E8E;231&#x3002; &#x8F93;&#x51FA;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x6253;&#x5370;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x2223;n1&#x2212;n2&#x2223; &#x548C; &#x2223;S1&#x2212;S2&#x2223; &#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x5C06;&#x6240;&#x6709;&#x6570;&#x6392;&#x5E8F;&#x3002; &#x8BA1;&#x7B97;&#x524D;n/2&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x603B;&#x548C;&#xFF0C;&#x2223;S1&#x2212;S2&#x2223;&#x7684;&#x503C;&#x7B49;&#x4E8E;sum-2*&#x524D;n/2&#x5143;&#x7D20;&#x7684;&#x548C;&#x3002; &#x2223;n1&#x2212;n2&#x2223;&#x4E3A;n%2&#xFF0C;&#x5947;&#x6570;&#x4E3A;1&#xFF0C;&#x5076;&#x6570;&#x4E3A;0&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;int N, sum1 = 0, sum2 = 0;vector&lt;int&gt; v;void solution(){ cin &gt;&gt; N; v.resize(N); for (int i = 0; i &lt; N; i++) cin &gt;&gt; v[i]; sort(v.begin(), v.end()); for (int i = 0; i &lt; N/2; i++) sum1 += v[i]; for (int i = N/2; i &lt; N; i++) sum2 += v[i]; cout &lt;&lt; N % 2 &lt;&lt; &apos; &apos; &lt;&lt; sum2 - sum1;}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910Sample Input 1:1023 8 10 99 46 2333 46 1 666 555Sample Output 1:0 3611Sample Input 2:13110 79 218 69 3721 100 29 135 2 6 13 5188 85Sample Output 2:1 9359]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1112]]></title>
    <url>%2F%2Fposts%2F72902837%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x7834;&#x635F;&#x7684;&#x952E;&#x76D8; DescriptionOn a broken keyboard, some of the keys are always stucked. So when you type some sentences, the characters corresponding to those keys will appear repeatedly on screen for k times. Now given a resulting string on screen, you are supposed to list all the possible stucked keys, and the original string. Notice that there might be some characters that are typed repeatedly. The stucked key will always repeat output for a fixed k times whenever it is pressed. For example, when k=3, from the string thiiis iiisss a teeeeeest we know that the keys i and e might be stucked, but s is not even though it appears repeatedly sometimes. The original string could be this isss a teest. Input SpecificationEach input file contains one test case. For each case, the 1st line gives a positive integer k (1&lt;k&#x2264;100) which is the output repeating times of a stucked key. The 2nd line contains the resulting string on screen, which consists of no more than 1000 characters from {a-z}, {0-9} and _. It is guaranteed that the string is non-empty. Output SpecificationFor each test case, print in one line the possible stucked keys, in the order of being detected. Make sure that each key is printed once only. Then in the next line print the original string. It is guaranteed that there is at least one stucked key. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;map&gt;#pragma warning(disable:4996)using namespace std;int N;string str;map&lt;char, bool&gt;res, temp;bool flag = false;void solution(){ cin &gt;&gt; N &gt;&gt; str; int i = 0; for (i = 0; i &lt;= str.size()-N; i++) { for (int j = 1; j &lt; N; j++) { if (str[i + j] == str[i]) { if (!res.count(str[i])) res[str[i]] = true; } else { res[str[i]] = false; break; } } if (res[str[i]] == true) i += (N - 1); } for (; i &lt; str.size(); i++) res[str[i]] = false; for (int i = 0; i &lt; str.size(); i++) if (res[str[i]] == true&amp;&amp;!temp.count(str[i])) { cout &lt;&lt; str[i]; temp[str[i]] = true; } cout &lt;&lt; endl; for (int i = 0; i &lt; str.size(); i++) { if (res[str[i]] == false) cout &lt;&lt; str[i]; else { cout &lt;&lt; str[i]; i += (N - 1); } }}int main(){ freopen(&quot;3.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456Sample Input:3caseee1__thiiis_iiisss_a_teeeeeestSample Output:eicase1__this_isss_a_teest]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1099 Build A Binary Search Tree (30)]]></title>
    <url>%2F%2Fposts%2F23974e8%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6784;&#x5EFA;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811; DescriptionA Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties: The left subtree of a node contains only nodes with keys less than the node&#x2019;s key. The right subtree of a node contains only nodes with keys greater than or equal to the node&#x2019;s key. Both the left and right subtrees must also be binary search trees. Given the structure of a binary tree and a sequence of distinct integer keys, there is only one way to fill these keys into the tree so that the resulting tree satisfies the definition of a BST. You are supposed to output the level order traversal sequence of that tree. The sample is illustrated by Figure 1 and 2. Input SpecificationEach input file contains one test case. For each case, the first line gives a positive integer N (&lt;=100) which is the total number of nodes in the tree. The next N lines each contains the left and the right children of a node in the format &#x201C;left_index right_index&#x201D;, provided that the nodes are numbered from 0 to N-1, and 0 is always the root. If one child is missing, then -1 will represent the NULL child pointer. Finally N distinct integer keys are given in the last line. Output SpecificationFor each test case, print in one line the level order traversal sequence of that tree. All the numbers must be separated by a space, with no extra space at the end of the line. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#xFF08;BST&#xFF09;&#x662F;&#x4EE5;&#x9012;&#x5F52;&#x65B9;&#x5F0F;&#x5B9A;&#x4E49;&#x4E3A;&#x5177;&#x6709;&#x4EE5;&#x4E0B;&#x5C5E;&#x6027;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#xFF1A; &#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x4EC5;&#x5305;&#x542B;&#x952E;&#x503C;&#x5C0F;&#x4E8E;&#x8282;&#x70B9;&#x952E;&#x503C;&#x7684;&#x8282;&#x70B9;&#x3002; &#x8282;&#x70B9;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x4EC5;&#x5305;&#x542B;&#x952E;&#x503C;&#x5927;&#x4E8E;&#x8282;&#x70B9;&#x8282;&#x70B9;&#x952E;&#x503C;&#x7684;&#x8282;&#x70B9;&#x3002; &#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x4E5F;&#x5FC5;&#x987B;&#x662F;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x3002; &#x7ED9;&#x5B9A;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x7ED3;&#x6784;&#x548C;&#x4E00;&#x7CFB;&#x5217;&#x4E0D;&#x540C;&#x7684;&#x6574;&#x6570;&#x952E;&#x503C;&#xFF0C;&#x4FDD;&#x8BC1;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x5C06;&#x8FD9;&#x4E9B;&#x952E;&#x586B;&#x5145;&#x5230;&#x4E66;&#x4E2D;&#xFF0C;&#x4F7F;&#x5F97;&#x751F;&#x6210;&#x7684;&#x6811;&#x86EE;&#x65CF;BST&#x7684;&#x5B9A;&#x4E49;&#x3002;&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x8FD9;&#x68F5;&#x6811;&#x7684;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x84C4;&#x529B;&#xFF0C;&#x793A;&#x4F8B;&#x56FE;&#x5982;&#x4E0B;&#x56FE;1&#x548C;2&#x6240;&#x793A;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF08;&lt;=100&#xFF09;&#xFF0C;&#x8868;&#x793A;&#x6811;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x6570;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x7684;N&#x884C;&#x5305;&#x62EC;&#x8282;&#x70B9;&#x7684;&#x505A;&#x5B69;&#x5B50;&#x548C;&#x53F3;&#x5B69;&#x5B50;&#xFF0C;&#x683C;&#x5F0F;&#x4E3A;&#x201C;left_index right_index&#x201D;&#xFF0C;&#x8282;&#x70B9;&#x7684;&#x7F16;&#x53F7;&#x4ECE;0~N-1&#x3002;0&#x59CB;&#x7EC8;&#x662F;&#x6839;&#x8282;&#x70B9;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5B69;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x8FD9;&#x7528;-1&#x8868;&#x793A;NULL&#x3002;&#x6700;&#x540E;&#xFF0C;&#x5728;&#x6700;&#x540E;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E86;N&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x6574;&#x6570;&#x952E;&#x503C;&#x3002; &#x8F93;&#x51FA;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x8FD9;&#x68F5;&#x6811;&#x7684;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x5E8F;&#x5217;&#x3002;&#x6240;&#x6709;&#x7684;&#x6570;&#x5B57;&#x5FC5;&#x987B;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x672B;&#x5C3E;&#x4E0D;&#x5F97;&#x6709;&#x591A;&#x4F59;&#x7684;&#x7A7A;&#x683C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x6839;&#x636E;&#x6761;&#x4EF6;&#x5EFA;&#x6811;&#x3002; &#x5C42;&#x6B21;&#x904D;&#x5386; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ int value; int lchild, rchild;}node;vector&lt;node&gt; BT;vector&lt;int&gt;num;int N, l, r, cnt = 0;void insert(int root){ if (BT[root].lchild != -1) insert(BT[root].lchild); BT[root].value = num[cnt++]; if (BT[root].rchild != -1) insert(BT[root].rchild);}queue&lt;int&gt; que;bool flag = false;void bianli(){ while (!que.empty()) { if (flag) cout &lt;&lt; &apos; &apos; &lt;&lt; BT[que.front()].value; else { cout &lt;&lt; BT[que.front()].value; flag = true; } if (BT[que.front()].lchild!=-1) que.push(BT[que.front()].lchild); if(BT[que.front()].rchild!=-1) que.push(BT[que.front()].rchild); que.pop(); }}void solution(){ cin &gt;&gt; N; BT.resize(N); num.resize(N); for (int i = 0; i &lt; N; i++) cin &gt;&gt; BT[i].lchild &gt;&gt; BT[i].rchild; for (int i = 0; i &lt; N; i++) cin &gt;&gt; num[i]; sort(num.begin(), num.end()); insert(0); que.push(0); bianli();}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516Sample Input:91 62 3-1 -1-1 45 -1-1 -17 -1-1 8-1 -173 45 11 58 82 25 67 38 42Sample Output:58 25 82 11 38 67 45 73 42]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>二叉搜索树</tag>
        <tag>层次遍历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1111]]></title>
    <url>%2F%2Fposts%2Feb99798d%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5728;&#x7EBF;&#x5730;&#x56FE; DescriptionInput our current position and a destination, an online map can recommend several paths. Now your job is to recommend two paths to your user: one is the shortest, and the other is the fastest. It is guaranteed that a path exists for any request. Input SpecificationEach input file contains one test case. For each case, the first line gives two positive integers N (2&#x2264;N&#x2264;500), and M, being the total number of streets intersections on a map, and the number of streets, respectively. Then M lines follow, each describes a street in the format: V1 V2 one-way length time where V1 and V2 are the indices (from 0 to N&#x2212;1) of the two ends of the street; one-way is 1 if the street is one-way from V1 to V2, or 0 if not; length is the length of the street; and time is the time taken to pass the street. Finally a pair of source and destination is given. Output SpecificationFor each case, first print the shortest path from the source to the destination with distance D in the format: Distance = D: source -&gt; v1 -&gt; &#x2026; -&gt; destination Then in the next line print the fastest path with total time T: Time = T: source -&gt; w1 -&gt; &#x2026; -&gt; destination In case the shortest path is not unique, output the fastest one among the shortest paths, which is guaranteed to be unique. In case the fastest path is not unique, output the one that passes through the fewest intersections, which is guaranteed to be unique. In case the shortest and the fastest paths are identical, print them in one line in the format: Distance = D; Time = T: source -&gt; u1 -&gt; &#x2026; -&gt; destination &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x8F93;&#x5165;&#x6211;&#x4EEC;&#x5F53;&#x524D;&#x7684;&#x4F4D;&#x7F6E;&#x548C;&#x76EE;&#x7684;&#x5730;&#xFF0C;&#x5728;&#x7EBF;&#x5730;&#x56FE;&#x53EF;&#x4EE5;&#x63A8;&#x8350;&#x51E0;&#x6761;&#x8DEF;&#x5F84;&#x3002;&#x73B0;&#x5728;&#x4F60;&#x7684;&#x5DE5;&#x4F5C;&#x662F;&#x5411;&#x7528;&#x6237;&#x63A8;&#x8350;&#x4E24;&#x6761;&#x8DEF;&#x5F84;&#xFF1A;&#x4E00;&#x6761;&#x662F;&#x6700;&#x77ED;&#x7684;&#xFF0C;&#x53E6;&#x4E00;&#x6761;&#x662F;&#x6700;&#x5FEB;&#x7684;&#x3002;&#x4FDD;&#x8BC1;&#x4EFB;&#x4F55;&#x9700;&#x6C42;&#x90FD;&#x5B58;&#x5728;&#x4E00;&#x6761;&#x8DEF;&#x5F84;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570; N (2&#x2264;N&#x2264;500)&#x548C;M&#xFF0C;&#x5206;&#x522B;&#x8868;&#x793A;&#x5730;&#x56FE;&#x4E0A;&#x7684;&#x8857;&#x9053;&#x4EA4;&#x53C9;&#x70B9;&#x7684;&#x603B;&#x6570;&#x548C;&#x8857;&#x9053;&#x7684;&#x6570;&#x91CF;&#x3002;&#x7136;&#x540E;&#x662F;M&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x4EE5;&#x4EE5;&#x4E0B;&#x683C;&#x5F0F;&#x63CF;&#x8FF0;&#x63A5;&#x5230;&#x4FE1;&#x606F;&#xFF1A; V1 V2 one-way length time V1&#x548C;V2&#x662F;&#x8857;&#x9053;&#x4E24;&#x7AEF;&#x7684;&#x7F16;&#x53F7;&#xFF08;&#x4ECE;0~N-1&#xFF09;&#xFF0C;oneway&#x662F;1&#x8868;&#x793A;&#x8857;&#x9053;&#x662F;V1-&gt;V2&#x7684;&#x5355;&#x884C;&#x7EBF;&#x3002;0&#x8868;&#x793A;&#x4E0D;&#x662F;&#x3002;length&#x662F;&#x8857;&#x9053;&#x7684;&#x957F;&#x5EA6;&#xFF0C;time&#x662F;&#x901A;&#x8FC7;&#x8857;&#x9053;&#x7684;&#x65F6;&#x95F4;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x9996;&#x5148;&#x8F93;&#x51FA;&#x4ECE;&#x6E90;&#x5230;&#x76EE;&#x7684;&#x5730;&#x7684;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#xFF0C;D&#x4E3A;&#x8DDD;&#x79BB;&#xFF1A; Distance = D: source -&gt; v1 -&gt; &#x2026; -&gt; destination &#x7136;&#x540E;&#x5728;&#x4E0B;&#x4E00;&#x884C;&#x6253;&#x5370;&#x603B;&#x65F6;&#x95F4;&#x6700;&#x5FEB;&#x7684;&#x8DEF;&#x5F84;T: Time = T: source -&gt; w1 -&gt; &#x2026; -&gt; destination &#x82E5;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x4E0D;&#x552F;&#x4E00;&#xFF0C;&#x8FD9;&#x8F93;&#x51FA;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x4E2D;&#x7684;&#x6700;&#x5FEB;&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x4FDD;&#x8BC1;&#x8FD9;&#x4E2A;&#x662F;&#x552F;&#x4E00;&#x7684;&#x3002;&#x5982;&#x679C;&#x6700;&#x5FEB;&#x8DEF;&#x5F84;&#x4E0D;&#x552F;&#x4E00;&#xFF0C;&#x8FD9;&#x8F93;&#x51FA;&#x901A;&#x8FC7;&#x4EA4;&#x53C9;&#x70B9;&#x6700;&#x5C11;&#x7684;&#x8DEF;&#x5F84;&#xFF0C;&#x4FDD;&#x8BC1;&#x8FD9;&#x4E2A;&#x662F;&#x552F;&#x4E00;&#x7684;&#x3002; &#x5982;&#x679C;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x548C;&#x6700;&#x5FEB;&#x8DEF;&#x5F84;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x6309;&#x7167;&#x4E0B;&#x5217;&#x5404;&#x5F0F;&#x5728;&#x4E00;&#x884C;&#x5185;&#x8F93;&#x51FA;&#xFF1A; Distance = D; Time = T: source -&gt; u1 -&gt; &#x2026; -&gt; destination &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;Dijkstra+DFS &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)#define INF 99999999using namespace std;typedef struct{ int l; int t;} node;int N, M, OneWay, len, t_cost, v1, v2, kaishi, jieshu, dis[501];int Gdis[501][501], Gcost[501][501];int mindis=INF, mincost = INF,costvalue;vector&lt;int&gt; disres, costres, distemp, costtemp;vector&lt;int&gt;pre[501];void DFS(int v){ distemp.push_back(v); if (v==kaishi) { costvalue = 0; for (int i = 0; i &lt; distemp.size() - 1; i++) { costvalue += Gcost[distemp[i + 1]][distemp[i]]; } if (mincost&gt;costvalue) { mincost = costvalue; disres = distemp; } distemp.pop_back(); return; } for (int i = 0; i &lt; pre[v].size(); i++) { DFS(pre[v][i]); } distemp.pop_back();}void DFS2(int v){ costtemp.push_back(v); if (v == kaishi) { if (costtemp.size()&lt;mindis) { mindis = costtemp.size(); costres = costtemp; } costtemp.pop_back(); return; } for (int i = 0; i &lt; pre[v].size(); i++) { DFS2(pre[v][i]); } costtemp.pop_back();}void dij(int G[501][501]){ for (int i = 0; i &lt; 501; i++) pre[i].clear(); fill(dis, dis + 501, INF); bool visit[501] = { 0 }; dis[kaishi] = 0; for (int i = 0; i &lt; N; i++) { int u = -1, mindis = INF; for (int j = 0; j &lt; N; j++) { if (visit[j] == false &amp;&amp; dis[j] &lt; mindis) { u = j; mindis = dis[j]; } } if (u == -1) break; visit[u] = true; for (int v = 0; v &lt; N; v++) { if (visit[v]==false&amp;&amp;G[u][v]!=INF) { if (dis[u] + G[u][v] &lt; dis[v]) { dis[v] = dis[u] + G[u][v]; pre[v].clear(); pre[v].push_back(u); } else if (dis[u] + G[u][v] == dis[v]) pre[v].push_back(u); } } }}void solution(){ cin &gt;&gt; N &gt;&gt; M; fill(Gdis[0], Gdis[0] + 501 * 501, INF); fill(Gcost[0], Gcost[0] + 501 * 501, INF); for (int i = 0; i &lt; M; i++) { cin &gt;&gt; v1 &gt;&gt; v2 &gt;&gt; OneWay &gt;&gt; len &gt;&gt; t_cost; if (OneWay) { Gdis[v1][v2] = len; Gcost[v1][v2] = t_cost; } else { Gdis[v1][v2] = len; Gcost[v1][v2] = t_cost; Gdis[v2][v1] = len; Gcost[v2][v1] = t_cost; } } cin &gt;&gt; kaishi &gt;&gt; jieshu; dij(Gdis); DFS(jieshu); int temp1 = dis[jieshu]; dij(Gcost); DFS2(jieshu); int temp2 = dis[jieshu]; if (disres!=costres) { cout &lt;&lt; &quot;Distance = &quot; &lt;&lt; temp1 &lt;&lt; &quot;: &quot;; for (int i = disres.size() - 1; i &gt;= 0; i--) { cout &lt;&lt; disres[i]; if (i != 0) cout &lt;&lt; &quot; -&gt; &quot;; } cout &lt;&lt; endl; cout &lt;&lt; &quot;Time = &quot; &lt;&lt; temp2 &lt;&lt; &quot;: &quot;; for (int i = costres.size() - 1; i &gt;= 0; i--) { cout &lt;&lt; costres[i]; if (i != 0) cout &lt;&lt; &quot; -&gt; &quot;; } } else { cout &lt;&lt; &quot;Distance = &quot; &lt;&lt; temp1 &lt;&lt; &quot;; Time = &quot; &lt;&lt; temp2 &lt;&lt; &quot;: &quot;; for (int i = disres.size() - 1; i &gt;= 0; i--) { cout &lt;&lt; disres[i]; if (i != 0) cout &lt;&lt; &quot; -&gt; &quot;; } }}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011121314151617181920212223242526272829303132333435Sample Input 1:10 150 1 0 1 18 0 0 1 14 8 1 1 13 4 0 3 23 9 1 4 10 6 0 1 17 5 1 2 18 5 1 2 12 3 0 2 22 1 1 1 11 3 0 3 11 4 0 1 19 7 1 3 15 1 0 5 26 5 1 1 23 5Sample Output 1:Distance = 6: 3 -&gt; 4 -&gt; 8 -&gt; 5Time = 3: 3 -&gt; 1 -&gt; 5Sample Input 2:7 90 4 1 1 11 6 1 1 32 6 1 1 12 5 1 2 23 0 0 1 13 1 1 1 33 2 1 1 24 5 0 2 26 5 1 1 23 5Sample Output 2:Distance = 3; Time = 4: 3 -&gt; 2 -&gt; 5]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>Dijkstra</tag>
        <tag>DFS</tag>
        <tag>最短路径</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1110 Complete Binary Tree（25）]]></title>
    <url>%2F%2Fposts%2F1a7984cb%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811; DescriptionGiven a tree, you are supposed to tell if it is a complete binary tree. Input SpecificationEach input file contains one test case. For each case, the first line gives a positive integer N (&#x2264;20) which is the total number of nodes in the tree &#x2013; and hence the nodes are numbered from 0 to N&#x2212;1. Then N lines follow, each corresponds to a node, and gives the indices of the left and right children of the node. If the child does not exist, a - will be put at the position. Any pair of children are separated by a space. Output SpecificationFor each case, print in one line YES and the index of the last node if the tree is a complete binary tree, or NO and the index of the root if not. There must be exactly one space separating the word and the number. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x7ED9;&#x5B9A;&#x4E00;&#x68F5;&#x6811;&#xFF0C;&#x8981;&#x6C42;&#x5224;&#x65AD;&#x5176;&#x662F;&#x5426;&#x662F;&#x4E00;&#x4E2A;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N(&#x2264;20)&#xFF0C;&#x8868;&#x793A;&#x6811;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x603B;&#x6570;&#xFF0C;&#x8282;&#x70B9;&#x7684;&#x7F16;&#x53F7;0~N-1&#x3002;&#x968F;&#x540E;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x7ED9;&#x51FA;&#x8282;&#x70B9;&#x5DE6;&#x53F3;&#x5B69;&#x5B50;&#x7684;&#x7D22;&#x5F15;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x5219;&#x4E3A;&#x201C;-&#x201D;&#xFF0C;&#x4E00;&#x5BF9;&#x5B69;&#x5B50;&#x4E2D;&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5982;&#x679C;&#x662F;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x8F93;&#x51FA;&#x201C;YES&#x201D;&#xFF0C;&#x5E76;&#x8F93;&#x51FA;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x7F16;&#x53F7;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x662F;&#xFF0C;&#x5C31;&#x8F93;&#x51FA;&#x201C;NO&#x201D;&#x548C;&#x6839;&#x8282;&#x70B9;&#x7684;&#x7F16;&#x53F7;&#x3002;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x627E;&#x5230;&#x6839;&#x8282;&#x70B9;&#xFF1A;&#x6240;&#x6709;&#x8282;&#x70B9;&#x4E2D;&#xFF0C;&#x4E0D;&#x662F;&#x5B69;&#x5B50;&#x7684;&#x90A3;&#x4E2A;&#x8282;&#x70B9;&#x3002; &#x5DF2;&#x77E5;&#x6839;&#x8282;&#x70B9;&#x548C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x53F3;&#x5B69;&#x5B50;&#xFF0C;&#x6309;&#x7167;&#x4E8C;&#x53C9;&#x6811;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x904D;&#x5386;&#x4E8C;&#x53C9;&#x6811;&#x3002; &#x8FD9;&#x91CC;&#x6211;&#x6309;&#x7167;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x7ED9;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x4ECE;1~N&#x8FDB;&#x884C;&#x4E86;&#x91CD;&#x65B0;&#x7F16;&#x53F7;&#x3002;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x6EE1;&#x8DB3;&#xFF1A;&#x82E5;i&#x7F16;&#x53F7;&#x7684;&#x8282;&#x70B9;&#x6709;&#x5B69;&#x5B50;&#xFF0C;&#x8FD9;&#x5DE6;&#x5B69;&#x5B50;&#x7684;&#x7F16;&#x53F7;&#x4E3A;2i&#xFF0C;&#x53F3;&#x5B69;&#x5B50;&#x7684;&#x7F16;&#x53F7;&#x4E3A;2i+1&#x3002;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#x5373;&#x53EF;&#x3002; Tips&#x7C7B;&#x4F3C;&#x9898;&#x76EE;1102 &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;queue&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ int ID; int lchild, rchild;}node;queue&lt;int&gt;que;int N;vector&lt;node&gt; v, s;string temp;bool FindRoot[21] = { 0 };bool cmp(node a, node b){ return a.ID &lt; b.ID;}void solution(){ cin &gt;&gt; N; v.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; temp; if (temp[0] != &apos;-&apos;) { v[i].lchild = stoi(temp); FindRoot[v[i].lchild] = true; } else v[i].lchild = -1; cin &gt;&gt; temp; if (temp[0] != &apos;-&apos;) { v[i].rchild = stoi(temp); FindRoot[v[i].rchild] = true; } else v[i].rchild = -1; } int root; for (int i = 0; i &lt; N; i++) { if (FindRoot[i] == false) { root = i; break; } } que.push(root); int f, cnt = 1; while (!que.empty()) //&#x5C42;&#x6B21;&#x904D;&#x5386;&#xFF0C;&#x91CD;&#x6392;&#x4E00;&#x4E0B;&#x5E8F;&#x53F7; { f = que.front(); que.pop(); v[f].ID = cnt++; if (v[f].lchild != -1) que.push(v[f].lchild); if (v[f].rchild != -1) que.push(v[f].rchild); } s = v; sort(s.begin(), s.end(), cmp); bool flag=true; for (int i = 0; i &lt; N; i++) //&#x5224;&#x65AD;&#x662F;&#x5426;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6; { if (s[i].lchild != -1 &amp;&amp; v[s[i].lchild].ID != s[i].ID * 2) flag = false; if (s[i].rchild != -1 &amp;&amp; v[s[i].rchild].ID != s[i].ID * 2 + 1) flag = false; } if (flag) cout &lt;&lt; &quot;YES &quot; &lt;&lt; f; else cout &lt;&lt; &quot;NO &quot; &lt;&lt; root;}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516171819202122232425Sample Input 1:97 8- -- -- -0 12 34 5- -- -Sample Output 1:YES 8Sample Input 2:8- -4 50 6- -2 3- 7- -- -Sample Output 2:NO 1]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>完全二叉树</tag>
        <tag>层次遍历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1109 Group Photo（25）]]></title>
    <url>%2F%2Fposts%2Ffde4c840%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5408;&#x5F71; DescriptionFormation is very important when taking a group photo. Given the rules of forming K rows with N people as the following: The number of people in each row must be N/K (round down to the nearest integer), with all the extra people (if any) standing in the last row; All the people in the rear row must be no shorter than anyone standing in the front rows; In each row, the tallest one stands at the central position (which is defined to be the position (m/2+1), where m is the total number of people in that row, and the division result must be rounded down to the nearest integer); In each row, other people must enter the row in non-increasing order of their heights, alternately taking their positions first to the right and then to the left of the tallest one (For example, given five people with their heights 190, 188, 186, 175, and 170, the final formation would be 175, 188, 190, 186, and 170. Here we assume that you are facing the group so your left-hand side is the right-hand side of the one at the central position.); When there are many people having the same height, they must be ordered in alphabetical (increasing) order of their names, and it is guaranteed that there is no duplication of names. Now given the information of a group of people, you are supposed to write a program to output their formation. Input SpecificationEach input file contains one test case. For each test case, the first line contains two positive integers N (&#x2264;104), the total number of people, and K (&#x2264;10), the total number of rows. Then N lines follow, each gives the name of a person (no more than 8 English letters without space) and his/her height (an integer in [30, 300]). Output SpecificationFor each case, print the formation &#x2013; that is, print the names of people in K lines. The names must be separated by exactly one space, but there must be no extra space at the end of each line. Note: since you are facing the group, people in the rear rows must be printed above the people in the front rows. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x5728;&#x62CD;&#x6444;&#x5408;&#x5F71;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x961F;&#x5F62;&#x5F88;&#x91CD;&#x8981;&#x3002;&#x7528;N&#x4E2A;&#x4EBA;&#x5F62;&#x6210;K&#x884C;&#x961F;&#x5F62;&#x7684;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A; &#x6BCF;&#x884C;&#x4E2D;&#x7684;&#x4EBA;&#x6570;&#x5FC5;&#x987B;&#x662F;N/K&#xFF08;&#x5411;&#x4E0B;&#x53D6;&#x6574;&#xFF09;&#xFF0C;&#x6240;&#x6709;&#x989D;&#x5916;&#x7684;&#x4EBA;&#xFF08;&#x5982;&#x679C;&#x6709;&#x7684;&#x8BDD;&#xFF09;&#x7AD9;&#x5728;&#x6700;&#x540E;&#x4E00;&#x884C;&#x3002; &#x540E;&#x6392;&#x7684;&#x6240;&#x6709;&#x4EBA;&#x90FD;&#x4E0D;&#x5F97;&#x6BD4;&#x7AD9;&#x5728;&#x524D;&#x6392;&#x7684;&#x4EFB;&#x4F55;&#x4EBA;&#x66F4;&#x77EE;&#x3002; &#x5728;&#x6BCF;&#x884C;&#x4E2D;&#xFF0C;&#x6700;&#x9AD8;&#x7684;&#x4EBA;&#x7AD9;&#x5728;&#x4E2D;&#x5FC3;&#x4F4D;&#x7F6E;&#xFF08;&#x5373;m/2+1&#x7684;&#x4F4D;&#x7F6E;&#xFF09;&#xFF0C;m&#x662F;&#x8FD9;&#x4E00;&#x884C;&#x7684;&#x603B;&#x4EBA;&#x6570;&#xFF0C;&#x5E76;&#x4E14;&#x9664;&#x6CD5;&#x7ED3;&#x679C;&#x5FC5;&#x987B;&#x5411;&#x4E0B;&#x53D6;&#x6574;&#x3002; &#x5728;&#x6BCF;&#x884C;&#x4E2D;&#xFF0C;&#x5176;&#x4ED6;&#x4EBA;&#x5FC5;&#x987B;&#x4EE5;&#x975E;&#x9012;&#x589E;&#x7684;&#x8EAB;&#x9AD8;&#x987A;&#x5E8F;&#x8FDB;&#x5165;&#x8BE5;&#x884C;&#xFF0C;&#x4EA4;&#x66FF;&#x5730;&#x8FDB;&#x5165;&#x3002;&#x5148;&#x8FDB;&#x5230;&#x8EAB;&#x9AD8;&#x6700;&#x9AD8;&#x540C;&#x5B66;&#x7684;&#x53F3;&#x4FA7;&#xFF0C;&#x518D;&#x8FDB;&#x5230;&#x5176;&#x5DE6;&#x4FA7;&#x3002;&#x4F8B;&#x5982;&#xFF0C;5&#x4E2A;&#x4EBA;&#x7684;&#x8EAB;&#x9AD8;&#x5206;&#x522B;&#x662F;190, 188, 186, 175, and 170&#xFF0C;&#x6700;&#x7EC8;&#x7684;&#x9635;&#x578B;&#x4F1A;&#x662F;175, 188, 190, 186, 170.&#x8FD9;&#x91CC;&#x5047;&#x8BBE;&#x4F60;&#x9762;&#x671D;&#x8FD9;&#x4E2A;&#x5C0F;&#x7EC4;&#xFF0C;&#x6240;&#x4EE5;&#x4F60;&#x7684;&#x5DE6;&#x624B;&#x8FB9;&#x7684;&#x4F4D;&#x7F6E;&#x662F;&#x961F;&#x5217;&#x4E2D;&#x95F4;&#x7684;&#x4EBA;&#x7684;&#x53F3;&#x624B;&#x8FB9;&#x3002; &#x5F53;&#x8BB8;&#x591A;&#x4EBA;&#x90FD;&#x6709;&#x540C;&#x6837;&#x7684;&#x8EAB;&#x9AD8;&#x65F6;&#xFF0C;&#x5FC5;&#x987B;&#x6309;&#x7167;&#x5176;&#x540D;&#x79F0;&#x7684;&#x5B57;&#x6BCD;&#x589E;&#x5E8F;&#x5BF9;&#x4ED6;&#x4EEC;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x4FDD;&#x8BC1;&#x4E0D;&#x5B58;&#x5728;&#x91CD;&#x540D;&#x7684;&#x4EBA;&#x3002; &#x73B0;&#x7ED9;&#x51FA;&#x4E00;&#x7EC4;&#x4EBA;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x8981;&#x6C42;&#x7F16;&#x5199;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x8F93;&#x51FA;&#x4ED6;&#x4EEC;&#x7684;&#x961F;&#x5217;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x6709;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570; N (&#x2264;104)&#x8868;&#x793A;&#x4EBA;&#x7684;&#x603B;&#x6570;&#xFF0C;K (&#x2264;10)&#x8868;&#x793A;&#x884C;&#x7684;&#x603B;&#x6570;&#x3002;&#x63A5;&#x4E0B;&#x91CC;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x4EBA;&#x7684;&#x59D3;&#x540D;&#xFF08;&#x4E0D;&#x8D85;&#x8FC7;8&#x4E2A;&#x6CA1;&#x6709;&#x7A7A;&#x683C;&#x7684;&#x82F1;&#x6587;&#x5B57;&#x6BCD;&#xFF09;&#x548C;&#x4ED6;&#x7684;&#x8EAB;&#x9AD8;&#xFF0C;&#x8EAB;&#x9AD8;&#x8303;&#x56F4;&#x5728;[30, 300]&#x5185;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x5F62;&#x6210;&#x7684;&#x961F;&#x5217;&#x2014;&#x2014;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5728;K&#x884C;&#x4E2D;&#x6253;&#x5370;&#x8FD9;&#x4E9B;&#x4EBA;&#x7684;&#x540D;&#x5B57;&#x3002;&#x540D;&#x5B57;&#x5FC5;&#x987B;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x6BCF;&#x884C;&#x672B;&#x5C3E;&#x4E0D;&#x5F97;&#x6709;&#x591A;&#x4F59;&#x7684;&#x7A7A;&#x683C;&#x3002;&#x6CE8;&#x610F;&#xFF1A;&#x5047;&#x5B9A;&#x73B0;&#x5728;&#x662F;&#x9762;&#x5411;&#x961F;&#x5217;&#xFF0C;&#x6240;&#x4EE5;&#x540E;&#x6392;&#x7684;&#x4EBA;&#x5458;&#x5FC5;&#x987B;&#x5728;&#x524D;&#x6392;&#x4EBA;&#x5458;&#x7684;&#x4E0A;&#x65B9;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6A21;&#x62DF;&#x540E;&#xFF0C;&#x5B58;&#x4E8E;res vector&#x4E2D;&#xFF0C;&#x6309;&#x7167;&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x5373;&#x53EF;&#x3002; Tips&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x6392;&#x6BD4;&#x8F83;&#x597D;&#xFF0C;&#x5148;&#x6392;&#x4E2A;&#x5B50;&#x9AD8;&#x7684;&#x4EBA;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ string name; int len;}node;bool cmp(node a, node b){ if (a.len != b.len) return a.len &gt; b.len; else return a.name &lt; b.name;}vector&lt;node&gt; v;vector&lt;string&gt; res;int N, K, row, cnt = 0;void solution(){ cin &gt;&gt; N &gt;&gt; K; v.resize(N); for (int i = 0; i &lt; N; i++) cin &gt;&gt; v[i].name &gt;&gt; v[i].len; sort(v.begin(), v.end(), cmp); row = K; int num; while (row&gt;0) { bool flag = false; if (row == K) num = N - N / K*(K - 1); else num = N / K; res.resize(num); res[num / 2] = v[cnt++].name; for (int i = 1; i &lt; num; i++) { if (flag==false) { res[num / 2 - (i + 1) / 2] = v[cnt++].name; flag = true; } else { res[num / 2 + (i + 1) / 2] = v[cnt++].name; flag = false; } } row--; for (int i = 0; i &lt; res.size(); i++) { cout &lt;&lt; res[i]; if (i!=res.size()-1) { cout &lt;&lt; &apos; &apos;; } } cout &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516171819Sample Input:10 3Tom 188Mike 170Eva 168Tim 160Joe 190Ann 168Bob 175Nick 186Amy 160John 159Sample Output:Bob Tom Joe NickAnn Mike EvaTim Amy John]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1108 Finding Average（20）]]></title>
    <url>%2F%2Fposts%2F8b5ef068%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x627E;&#x5230;&#x5E73;&#x5747;&#x6570; DescriptionThe basic task is simple: given N real numbers, you are supposed to calculate their average. But what makes it complicated is that some of the input numbers might not be legal. A legal input is a real number in [&#x2212;1000,1000] and is accurate up to no more than 2 decimal places. When you calculate the average, those illegal numbers must not be counted in. Input SpecificationEach input file contains one test case. For each case, the first line gives a positive integer N (&#x2264;100). Then N numbers are given in the next line, separated by one space. Output SpecificationFor each illegal input number, print in a line ERROR: X is not a legal number where X is the input. Then finally print in a line the result: The average of K numbers is Y where K is the number of legal inputs and Y is their average, accurate to 2 decimal places. In case the average cannot be calculated, output Undefined instead of Y. In case K is only 1, output The average of 1 number is Y instead. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x7ED9;&#x5B9A;N&#x4E2A;&#x6570;&#xFF0C;&#x8981;&#x6C42;&#x8BA1;&#x7B97;&#x4ED6;&#x4EEC;&#x7684;&#x5E73;&#x5747;&#x503C;&#x3002;&#x4F46;&#x662F;&#xFF0C;&#x67D0;&#x4E9B;&#x8F93;&#x5165;&#x7684;&#x6570;&#x5B57;&#x53EF;&#x80FD;&#x4E0D;&#x5408;&#x6CD5;&#x3002;&#x4E00;&#x4E2A;&#x5408;&#x6CD5;&#x7684;&#x8F93;&#x5165;&#x662F;&#x5728; [&#x2212;1000,1000] &#x95F4;&#x7684;&#x5B9E;&#x6570;&#xFF0C;&#x6700;&#x591A;&#x7CBE;&#x786E;&#x5230;&#x5C0F;&#x6570;&#x70B9;&#x540E;2&#x4F4D;&#x3002;&#x8BA1;&#x7B97;&#x5E73;&#x5747;&#x503C;&#x65F6;&#xFF0C;&#x4E0D;&#x5F97;&#x8BA1;&#x5165;&#x8FD9;&#x4E9B;&#x975E;&#x6CD5;&#x7684;&#x6570;&#x5B57;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N(&#x2264;100)&#x3002;&#x7136;&#x540E;&#x5728;&#x4E0B;&#x4E00;&#x884C;&#x7ED9;&#x51FA;N&#x4E2A;&#x6570;&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x975E;&#x6CD5;&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x8F93;&#x51FA;ERROR: X is not a legal number&#xFF0C;&#x5176;&#x4E2D;X&#x662F;&#x90A3;&#x4E2A;&#x975E;&#x6CD5;&#x7684;&#x8F93;&#x5165;&#x3002;&#x7136;&#x540E;&#x5728;&#x6700;&#x540E;&#x4E00;&#x884C;&#x4E2D;&#x6253;&#x5370;&#x7ED3;&#x679C;&#xFF1A;The average of K numbers is Y &#x3002;K&#x662F;&#x5408;&#x6CD5;&#x8F93;&#x5165;&#x7684;&#x6570;&#x91CF;&#xFF0C;Y&#x4F7F;&#x4ED6;&#x4EEC;&#x7684;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x7CBE;&#x786E;&#x5230;2&#x4F4D;&#x5C0F;&#x6570;&#x3002;&#x5982;&#x679C;&#x65E0;&#x6CD5;&#x8BA1;&#x7B97;&#x5E73;&#x5747;&#x503C;&#xFF0C;&#x5219;&#x8F93;&#x51FA;Undefined&#x3002;&#x5982;&#x679C;K&#x53EA;&#x6709;1&#xFF0C;&#x5219;&#x8F93;&#x51FA;The average of 1 number is Y&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5B57;&#x7B26;&#x4E32;&#x5904;&#x7406;&#x3002;&#x4F7F;&#x7528;sscanf()&#x548C;sprintf()&#x3002;&#x5177;&#x4F53;&#x7EC6;&#x8282;&#x89C1;&#x4EE3;&#x7801;&#x6CE8;&#x91CA; Tips sscanf() &#x2013; &#x4ECE;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x8BFB;&#x8FDB;&#x4E0E;&#x6307;&#x5B9A;&#x683C;&#x5F0F;&#x76F8;&#x7B26;&#x7684;&#x6570;&#x636E; sprintf() &#x2013; &#x5B57;&#x7B26;&#x4E32;&#x683C;&#x5F0F;&#x5316;&#x547D;&#x4EE4;&#xFF0C;&#x4E3B;&#x8981;&#x529F;&#x80FD;&#x662F;&#x628A;&#x683C;&#x5F0F;&#x5316;&#x7684;&#x6570;&#x636E;&#x5199;&#x5165;&#x67D0;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;iostream&gt;#include&lt;string.h&gt;#pragma warning(disable:4996)using namespace std;char num[50],s[50];int N, cnt = 0;double numSum = 0.0, temp;void solution(){ cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) { scanf(&quot;%s&quot;, num); sscanf(num, &quot;%lf&quot;, &amp;temp); //temp&#x7528;&#x4E8E;&#x8BA1;&#x7B97;&#x6C42;&#x548C; sprintf(s, &quot;%.2lf&quot;, temp); //s&#x5B57;&#x7B26;&#x4E32;&#x7528;&#x4E8E;&#x6BD4;&#x8F83;&#xFF0C;&#x8FD9;&#x6837;&#x6BD4;&#x8F83;&#x8D77;&#x6765;&#x6BD4;&#x8F83;&#x65B9;&#x4FBF; bool flag = false; for (int j = 0; j &lt; strlen(num); j++) { if (num[j] != s[j]) flag = true; } if (flag || temp &lt; -1000 || temp&gt;1000) { printf(&quot;ERROR: %s is not a legal number\n&quot;, num); continue; } else { numSum += temp; cnt++; } } if (cnt == 1) { printf(&quot;The average of 1 number is %.2lf&quot;, numSum); } else if (cnt &gt; 1) { printf(&quot;The average of %d numbers is %.2lf&quot;, cnt, numSum / cnt); } else { printf(&quot;The average of 0 numbers is Undefined&quot;); }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516Sample Input 1:75 -3.2 aaa 9999 2.3.4 7.123 2.35Sample Output 1:ERROR: aaa is not a legal numberERROR: 9999 is not a legal numberERROR: 2.3.4 is not a legal numberERROR: 7.123 is not a legal numberThe average of 3 numbers is 1.38Sample Input 2:2aaa -9999Sample Output 2:ERROR: aaa is not a legal numberERROR: -9999 is not a legal numberThe average of 0 numbers is Undefined]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1107 Social Clusters（30）]]></title>
    <url>%2F%2Fposts%2F45a41abd%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x793E;&#x4EA4;&#x96C6;&#x7FA4; DescriptionWhen register on a social network, you are always asked to specify your hobbies in order to find some potential friends with the same hobbies. A social cluster is a set of people who have some of their hobbies in common. You are supposed to find all the clusters. Input SpecificationEach input file contains one test case. For each test case, the first line contains a positive integer N (&#x2264;1000), the total number of people in a social network. Hence the people are numbered from 1 to N. Then N lines follow, each gives the hobby list of a person in the format: Ki: hi[1] hi[2] &#x2026; hi[Ki] where Ki(&gt;0) is the number of hobbies, and hi[j] is the index of the j-th hobby, which is an integer in [1, 1000]. Output SpecificationFor each case, print in one line the total number of clusters in the network. Then in the second line, print the numbers of people in the clusters in non-increasing order. The numbers must be separated by exactly one space, and there must be no extra space at the end of the line. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x5728;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x4E0A;&#x6CE8;&#x518C;&#x65F6;&#xFF0C;&#x603B;&#x4F1A;&#x8981;&#x6C42;&#x4F60;&#x6765;&#x6307;&#x5B9A;&#x81EA;&#x5DF1;&#x7684;&#x7231;&#x597D;&#xFF0C;&#x4E00;&#x8FB9;&#x627E;&#x5230;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7231;&#x597D;&#x7684;&#x6F5C;&#x5728;&#x7684;&#x670B;&#x53CB;&#x3002;&#x4E00;&#x4E2A;&#x793E;&#x4EA4;&#x96C6;&#x7FA4;&#x5C31;&#x662F;&#x4E00;&#x7EC4;&#x62E5;&#x6709;&#x4ED6;&#x4EEC;&#x7684;&#x4E00;&#x4E9B;&#x5171;&#x540C;&#x7231;&#x597D;&#x7684;&#x4EBA;&#x3002;&#x8981;&#x6C42;&#x4F60;&#x627E;&#x5230;&#x6240;&#x6709;&#x7684;&#x96C6;&#x7FA4;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N(&#x2264;1000)&#xFF0C;&#x8868;&#x793A;&#x6574;&#x4E2A;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x7684;&#x603B;&#x4EBA;&#x6570;&#xFF0C;&#x4EBA;&#x4EEC;&#x7684;&#x7F16;&#x53F7;&#x662F;&#x4ECE;1~N&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x4EE5;&#x4EE5;&#x4E0B;&#x683C;&#x5F0F;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x4EBA;&#x7684;&#x7231;&#x597D;&#x5217;&#x8868;&#xFF1A; Ki: hi[1] hi[2] &#x2026; hi[Ki] Ki(&gt;0) &#x662F;&#x7231;&#x597D;&#x7684;&#x6570;&#x91CF;&#xFF0C;hi[j]&#x662F;&#x7B2C;j&#x4E2A;&#x7231;&#x597D;&#x7684;&#x6807;&#x53F7;&#xFF0C;&#x4ED6;&#x662F;[1, 1000]&#x4E2D;&#x7684;&#x6B63;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x6253;&#x5370;&#x8FD9;&#x4E2A;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#x7684;&#x96C6;&#x7FA4;&#x603B;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x7B2C;&#x4E8C;&#x884C;&#x4E2D;&#xFF0C;&#x4EE5;&#x975E;&#x9012;&#x589E;&#x987A;&#x5E8F;&#x8F93;&#x51FA;&#x96C6;&#x7FA4;&#x4E2D;&#x7684;&#x4EBA;&#x7684;&#x603B;&#x6570;&#x3002;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x5FC5;&#x987B;&#x7531;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x6BCF;&#x884C;&#x7684;&#x672B;&#x5C3E;&#x4E0D;&#x5F97;&#x6709;&#x591A;&#x4F59;&#x7684;&#x7A7A;&#x683C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4F7F;&#x7528;&#x5E76;&#x67E5;&#x96C6;&#xFF0C;&#x8BB0;&#x5F97;&#x4FDD;&#x7559;&#x96C6;&#x7FA4;&#x7684;&#x603B;&#x4EBA;&#x6570;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;vector&lt;int&gt; par;int hobby[1001] = { 0 }, N;int num[1001]; //&#x8868;&#x793A;&#x4EE5;i&#x4E3A;&#x6839;&#x7684;&#x5708;&#x5B50;&#x7684;&#x5927;&#x5C0F;bool cmp(int a, int b){ return a &gt; b;}bool cmp2(int a, int b){ return num[a] &gt; num[b];}int FindRoot(int x){ int j, k = x; while (x != par[x]) x = par[x]; while (k != x) { j = par[k]; par[k] = x; k = j; } return x;}void merge(int x, int y){ x = FindRoot(x); y = FindRoot(y); if (x == y) return; else { par[y] = x; num[x] += num[y]; }}void solution(){ cin &gt;&gt; N; par.resize(N + 1); for (int i = 1; i &lt;= N; i++) { par[i] = i; num[i] = 1; } int k, h; for (int i = 1; i &lt;= N; i++) { scanf(&quot;%d: &quot;, &amp;k); for (int j = 0; j &lt; k; j++) { cin &gt;&gt; h; if (hobby[h] == 0) hobby[h] = i; else { merge(i, hobby[h]); } } } int cnt = 0; vector&lt;int&gt;res; for (int i = 1; i &lt;= N; i++) { if (par[i] == i) { cnt++; res.push_back(i); } } sort(res.begin(), res.end(), cmp2); cout &lt;&lt; cnt &lt;&lt; endl; for (int i = 0; i &lt; res.size(); i++) { cout &lt;&lt; num[res[i]]; if (i != res.size() - 1) cout &lt;&lt; &apos; &apos;; }}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213Sample Input:83: 2 7 101: 42: 5 31: 41: 31: 44: 6 8 1 51: 4Sample Output:34 3 1]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1106 Lowest Price in Supply Chain（25）]]></title>
    <url>%2F%2Fposts%2Fd7add263%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x4F9B;&#x5E94;&#x94FE;&#x4E2D;&#x7684;&#x6700;&#x4F4E;&#x4EF7;&#x683C; DescriptionA supply chain is a network of retailers&#xFF08;&#x96F6;&#x552E;&#x5546;&#xFF09;, distributors&#xFF08;&#x7ECF;&#x9500;&#x5546;&#xFF09;, and suppliers&#xFF08;&#x4F9B;&#x5E94;&#x5546;&#xFF09;&#x2013; everyone involved in moving a product from supplier to customer. Starting from one root supplier, everyone on the chain buys products from one&#x2019;s supplier in a price P and sell or distribute them in a price that is r% higher than P. Only the retailers will face the customers. It is assumed that each member in the supply chain has exactly one supplier except the root supplier, and there is no supply cycle. Now given a supply chain, you are supposed to tell the lowest price a customer can expect from some retailers. Input SpecificationEach input file contains one test case. For each case, The first line contains three positive numbers: N (&#x2264;10&#x200B;5), the total number of the members in the supply chain (and hence their ID&#x2019;s are numbered from 0 to N&#x2212;1, and the root supplier&#x2019;s ID is 0); P, the price given by the root supplier; and r, the percentage rate of price increment for each distributor or retailer. Then N lines follow, each describes a distributor or retailer in the following format: K&#x200B;i&#x200B;&#x200B; ID[1] ID[2] &#x2026; ID[K&#x200B;i] where in the i-th line, K&#x200B;i is the total number of distributors or retailers who receive products from supplier i, and is then followed by the ID&#x2019;s of these distributors or retailers. K&#x200B;j being 0 means that the j-th member is a retailer. All the numbers in a line are separated by a space. Output SpecificationFor each test case, print in one line the lowest price we can expect from some retailers, accurate up to 4 decimal places, and the number of retailers that sell at the lowest price. There must be one space between the two numbers. It is guaranteed that the all the prices will not exceed 1010. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x4E00;&#x4E2A;&#x4F9B;&#x5E94;&#x94FE;&#x662F;&#x7531;&#x96F6;&#x552E;&#x5546;&#xFF0C;&#x5206;&#x9500;&#x5546;&#x548C;&#x4F9B;&#x5E94;&#x5546;&#x7EC4;&#x6210;&#x7684;&#x7F51;&#x7EDC;&#xFF0C;&#x6BCF;&#x4E2A;&#x90FD;&#x5C06;&#x53C2;&#x4E0E;&#x628A;&#x4EA7;&#x54C1;&#x4ECE;&#x4F9B;&#x5E94;&#x5546;&#x8F6C;&#x79FB;&#x5230;&#x5BA2;&#x6237;&#x7684;&#x6D41;&#x7A0B;&#x4E2D;&#x3002; &#x4ECE;&#x4E00;&#x4E2A;&#x6839;&#x4F9B;&#x5E94;&#x5546;&#x5F00;&#x59CB;&#xFF0C;&#x94FE;&#x4E0A;&#x7684;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x4EE5;&#x4E00;&#x4E2A;&#x4EF7;&#x683C;&#x4ECE;&#x4ED6;&#x7684;&#x4E0A;&#x5BB6;&#x4EE5;P&#x7684;&#x4EF7;&#x683C;&#x8D2D;&#x4E70;&#x5E76;&#x52A0;&#x4EF7;r%&#x5356;&#x51FA;&#x53BB;&#x3002;&#x53EA;&#x6709;&#x96F6;&#x552E;&#x5546;&#x624D;&#x4F1A;&#x9762;&#x5BF9;&#x5BA2;&#x6237;&#x3002;&#x5047;&#x8BBE;&#x4F9B;&#x5E94;&#x94FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x6210;&#x5458;&#x9664;&#x4E86;&#x6839;&#x4F9B;&#x5E94;&#x5546;&#x4E4B;&#x5916;&#x90FD;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x4E0A;&#x5BB6;&#xFF0C;&#x6CA1;&#x6709;&#x4F9B;&#x5E94;&#x5468;&#x671F;&#x3002; &#x5148;&#x7ED9;&#x5B9A;&#x4F9B;&#x5E94;&#x94FE;&#xFF0C;&#x6C42;&#x5BA2;&#x6237;&#x53EF;&#x4EE5;&#x4ECE;&#x4E00;&#x4E9B;&#x96F6;&#x552E;&#x5546;&#x54EA;&#x91CC;&#x5F97;&#x5230;&#x7684;&#x6700;&#x4F4E;&#x7684;&#x4EF7;&#x683C;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x542B;&#x4E09;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF1A;N(&#x2264;10&#x200B;5)&#xFF0C;&#x4F9B;&#x5E94;&#x94FE;&#x4E2D;&#x6210;&#x5458;&#x7684;&#x603B;&#x6570;&#x91CF;&#xFF08;&#x7F16;&#x53F7;&#x4ECE;0~N-1&#xFF0C;&#x6839;&#x4F9B;&#x5E94;&#x5546;&#x7684;ID&#x4E3A;0&#xFF09;&#xFF1B;P&#xFF0C;&#x6839;&#x4F9B;&#x5E94;&#x5546;&#x7ED9;&#x51FA;&#x7684;&#x4EF7;&#x683C;&#xFF0C;r&#x6BCF;&#x4E2A;&#x7ECF;&#x9500;&#x5546;&#x6216;&#x8005;&#x96F6;&#x552E;&#x5546;&#x52A0;&#x4EF7;&#x7684;&#x767E;&#x5206;&#x6BD4;&#x3002;&#x63A5;&#x4E0B;&#x6765;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x4EE5;&#x4EE5;&#x4E0B;&#x683C;&#x5F0F;&#x63CF;&#x8FF0;&#x5206;&#x9500;&#x5546;&#x6216;&#x8005;&#x96F6;&#x552E;&#x5546;&#xFF1A; K&#x200B;i&#x200B;&#x200B; ID[1] ID[2] &#x2026; ID[K&#x200B;i] K&#x200B;i&#x662F;&#x7B2C;i&#x53F7;&#x5546;&#x6237;&#x4E0B;&#x5BB6;&#x7684;&#x603B;&#x6570;&#xFF08;&#x5373;&#x4ECE;&#x7B2C;i&#x53F7;&#x5546;&#x6237;&#x8FD9;&#x91CC;&#x91C7;&#x8D2D;&#x5546;&#x54C1;&#x7684;&#x6709;&#x591A;&#x5C11;&#x4EBA;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x8FD9;&#x4E9B;&#x7ECF;&#x9500;&#x5546;&#x7684;ID&#x3002;K&#x200B;j&#x4E3A;0&#x8868;&#x793A;&#x7B2C;j&#x53F7;&#x5546;&#x6237;&#x662F;&#x96F6;&#x552E;&#x5546;&#x3002;&#x4E00;&#x884C;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x90FD;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x4ECE;&#x96F6;&#x552E;&#x5546;&#x90A3;&#x91CC;&#x4E70;&#x5230;&#x7684;&#x6700;&#x4F4E;&#x4EF7;&#x683C;&#xFF0C;&#x7CBE;&#x786E;&#x5230;4&#x4F4D;&#x5C0F;&#x6570;&#xFF0C;&#x4EE5;&#x53CA;&#x7ED9;&#x51FA;&#x6700;&#x4F4E;&#x4EF7;&#x683C;&#x7684;&#x96F6;&#x552E;&#x5546;&#x7684;&#x6570;&#x91CF;&#x3002;&#x4E24;&#x4E2A;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x5FC5;&#x987B;&#x6709;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#xFF0C;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7684;&#x4EF7;&#x683C;&#x4E0D;&#x4F1A;&#x8D85;&#x8FC7;1010&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x5148;&#x6839;&#x636E;&#x8F93;&#x5165;&#x7684;&#x4FE1;&#x606F;&#x5EFA;&#x7ACB;&#x51FA;&#x6574;&#x4E2A;&#x96F6;&#x552E;&#x7F51;&#x7EDC;&#x3002; DFS&#x6216;&#x8005;BFS&#x8FDB;&#x884C;&#x904D;&#x5386;&#x3002; Tips&#x7C7B;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;1079&#xFF0C;1090&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;iostream&gt;#include&lt;math.h&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int N, num[10001];int M[400][400], a, b, temp, cnt = 0, model = 0;bool cmp(int a, int b){ return a &gt; b;}int f(){ int i = sqrt((double)N); while (i&gt;=1) { if (N%i == 0) return i; i--; } return 1;}void insert(int x1, int x2, int y1, int y2){ while (cnt!= N) { if (model % 4 == 0) { for (int i = x1; i &lt; x2; i++) M[y1][i] = num[cnt++]; model++; y1++; } else if (model % 4 == 1) { for (int i = y1; i &lt; y2; i++) M[i][x2-1] = num[cnt++]; model++; x2--; } else if (model%4==2) { for (int i = x2-1; i &gt;= x1; i--) M[y2-1][i] = num[cnt++]; model++; y2--; } else if (model % 4 == 3) { for (int i = y2-1; i &gt;= y1; i--) M[i][x1] = num[cnt++]; model++; x1++; } }}void solution(){ cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) cin &gt;&gt; num[i]; sort(num, num + N, cmp); a = b = sqrt(N); temp = N; b = f(); a = N / b; insert(0, b, 0, a); for (int i = 0; i &lt; a; i++) { for (int j = 0; j &lt; b; j++) { cout &lt;&lt; M[i][j]; if (j != b - 1) cout &lt;&lt; &apos; &apos;; } cout &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011121314Sample Input:10 1.80 1.003 2 3 51 91 41 702 6 11 8000Sample Output:1.8362 2]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>层次遍历</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1105 Spiral Matrix (25)]]></title>
    <url>%2F%2Fposts%2F7507f506%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x87BA;&#x65CB;&#x77E9;&#x9635; DescriptionThis time your job is to fill a sequence of N positive integers into a spiral matrix in non-increasing order. A spiral matrix is filled in from the first element at the upper-left corner, then move in a clockwise spiral. The matrix has m rows and n columns, where m and n satisfy the following: m*n must be equal to N; m&gt;=n; and m-n is the minimum of all the possible values. Input SpecificationEach input file contains one test case. For each case, the first line gives a positive integer N. Then the next line contains N positive integers to be filled into the spiral matrix. All the numbers are no more than 104. The numbers in a line are separated by spaces. Output SpecificationFor each test case, output the resulting matrix in m lines, each contains n numbers. There must be exactly 1 space between two adjacent numbers, and no extra space at the end of each line. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x8FD9;&#x6B21;&#x4F60;&#x7684;&#x5DE5;&#x4F5C;&#x662F;&#x4EE5;&#x975E;&#x9012;&#x589E;&#x7684;&#x987A;&#x5E8F;&#x5C06;&#x4E00;&#x7CFB;&#x5217;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#x586B;&#x5145;&#x5230;&#x87BA;&#x65CB;&#x77E9;&#x9635;&#x4E2D;&#xFF0C;&#x4ECE;&#x87BA;&#x65CB;&#x77E9;&#x9635;&#x7684;&#x5DE6;&#x4E0A;&#x89D2;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x586B;&#x5145;&#xFF0C;&#x7136;&#x540E;&#x6309;&#x7167;&#x987A;&#x65F6;&#x9488;&#x87BA;&#x65CB;&#x5F62;&#x79FB;&#x52A8;&#x3002;&#x77E9;&#x9635;&#x6709;m&#x884C;&#x548C;n&#x5217;&#xFF0C;&#x5176;&#x4E2D;m&#x548C;n&#x8981;&#x6EE1;&#x8DB3;&#x4EE5;&#x4E0B;&#x8981;&#x6C42;&#xFF1A;m*n &#x5FC5;&#x987B;&#x4E3A;&#x7B49;&#x4E8E;N&#xFF0C;m&gt;=n &#x5E76;&#x4E14; m-n &#x8981;&#x6700;&#x5C0F;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x7136;&#x540E;&#x4E0B;&#x4E00;&#x884C;&#x5305;&#x542B;&#x8981;&#x586B;&#x5145;&#x5230;&#x87BA;&#x65CB;&#x77E9;&#x9635;&#x4E2D;&#x7684;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#x3002;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7684;&#x6570;&#x5B57;&#x90FD;&#x4E0D;&#x8D85;&#x8FC7;104&#x3002;&#x4E00;&#x884C;&#x4E2D;&#x7684;&#x6570;&#x5B57;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x4EE5;m&#x884C;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x77E9;&#x9635;&#xFF0C;&#x6BCF;&#x884C;&#x5305;&#x62EC;n&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x4E24;&#x4E2A;&#x76F8;&#x90BB;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x5FC5;&#x987B;&#x6709;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#xFF0C;&#x6BCF;&#x884C;&#x672B;&#x5C3E;&#x4E0D;&#x5F97;&#x6709;&#x591A;&#x4F59;&#x7684;&#x7A7A;&#x683C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6A21;&#x62DF;&#x53BB;&#x505A;&#x5373;&#x53EF;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;iostream&gt;#include&lt;math.h&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int N, num[10001];int M[400][400], a, b, temp, cnt = 0, model = 0;bool cmp(int a, int b){ return a &gt; b;}int f(){ int i = sqrt((double)N); while (i&gt;=1) { if (N%i == 0) return i; i--; } return 1;}void insert(int x1, int x2, int y1, int y2){ while (cnt!= N) { if (model % 4 == 0) { for (int i = x1; i &lt; x2; i++) M[y1][i] = num[cnt++]; model++; y1++; } else if (model % 4 == 1) { for (int i = y1; i &lt; y2; i++) M[i][x2-1] = num[cnt++]; model++; x2--; } else if (model%4==2) { for (int i = x2-1; i &gt;= x1; i--) M[y2-1][i] = num[cnt++]; model++; y2--; } else if (model % 4 == 3) { for (int i = y2-1; i &gt;= y1; i--) M[i][x1] = num[cnt++]; model++; x1++; } }}void solution(){ cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) cin &gt;&gt; num[i]; sort(num, num + N, cmp); a = b = sqrt(N); temp = N; b = f(); a = N / b; insert(0, b, 0, a); for (int i = 0; i &lt; a; i++) { for (int j = 0; j &lt; b; j++) { cout &lt;&lt; M[i][j]; if (j != b - 1) cout &lt;&lt; &apos; &apos;; } cout &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910Sample Input:1237 76 20 98 76 42 53 95 60 81 58 93Sample Output:98 95 9342 37 8153 20 7658 60 76]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1104 Sum of Number Segments (20)]]></title>
    <url>%2F%2Fposts%2Fbd559055%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6570;&#x5B57;&#x6BB5;&#x7684;&#x603B;&#x548C; DescriptionGiven a sequence of positive numbers, a segment is defined to be a consecutive subsequence. For example, given the sequence {0.1, 0.2, 0.3, 0.4}, we have 10 segments: (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4). Now given a sequence, you are supposed to find the sum of all the numbers in all the segments. For the previous example, the sum of all the 10 segments is 0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0. Input SpecificationEach input file contains one test case. For each case, the first line gives a positive integer N, the size of the sequence which is no more than 105. The next line contains N positive numbers in the sequence, each no more than 1.0, separated by a space. Output SpecificationFor each test case, print in one line the sum of all the numbers in all the segments, accurate up to 2 decimal places. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x7ED9;&#x5B9A;&#x4E00;&#x7CFB;&#x5217;&#x6574;&#x6570;&#xFF0C;&#x5C06;&#x4E00;&#x4E2A; &#x6BB5;&#xFF08;segment&#xFF09; &#x5B9A;&#x4E49;&#x4E3A;&#x8FDE;&#x7EED;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x7ED9;&#x5B9A;&#x5E8F;&#x5217;{0.1, 0.2, 0.3, 0.4}&#xFF0C;&#x6211;&#x4EEC;&#x6709;10&#x4E2A;&#x6BB5;&#xFF1A; (0.1) (0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4) (0.2) (0.2, 0.3) (0.2, 0.3, 0.4) (0.3) (0.3, 0.4) (0.4)&#x3002; &#x73B0;&#x5728;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#xFF0C;&#x8BF7;&#x4F60;&#x627E;&#x5230;&#x6240;&#x6709;&#x6BB5;&#x4E2D;&#xFF0C;&#x6240;&#x6709;&#x6570;&#x5B57;&#x7684;&#x603B;&#x548C;&#x3002;&#x5BF9;&#x4E8E;&#x524D;&#x9762;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x8FD9;&#x6240;&#x6709;&#x7684;10&#x4E2A;&#x6BB5;&#x7684;&#x603B;&#x548C;&#x662F;0.1 + 0.3 + 0.6 + 1.0 + 0.2 + 0.5 + 0.9 + 0.3 + 0.7 + 0.4 = 5.0&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x8868;&#x793A;&#x5E8F;&#x5217;&#x7684;&#x5927;&#x5C0F;&#x3002;&#x4E0B;&#x4E00;&#x884C;&#x662F;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x7684;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x6BCF;&#x4E2A;&#x90FD;&#x4E0D;&#x8D85;&#x8FC7;1.0&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x6240;&#x6709;&#x7684;&#x6BB5;&#x7684;&#x6240;&#x6709;&#x6570;&#x5B57;&#x7684;&#x548C;&#x3002;&#x4FDD;&#x7559;&#x4E24;&#x4F4D;&#x5C0F;&#x6570;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8FD9;&#x4E2A;&#x9898;&#x53EA;&#x9700;&#x8981;&#x8BA1;&#x7B97;&#x51FA;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x7684;&#x6570;&#x5B57;&#x51FA;&#x73B0;&#x591A;&#x5C11;&#x6B21;&#xFF0C;&#x5373;&#x53EF;&#x76F4;&#x63A5;&#x6C42;&#x51FA;&#x7ED3;&#x679C;&#x3002; &#x5BF9;&#x4E8E;&#x7B2C;i&#x4F4D;&#x4E0A;&#x51FA;&#x73B0;&#x7684;&#x6570;&#xFF0C;&#x4EE5;&#x4ED6;&#x5F00;&#x5934;&#x7684;&#x5E8F;&#x5217;&#x5171;N-i+1&#x4E2A;&#x3002; &#x4EE5;0.2&#x4E3A;&#x4F8B;&#xFF0C;&#x5171;(0.2) (0.2, 0.3) (0.2, 0.3, 0.4)&#x3002;&#x5171;4-2+1=3&#x4E2A;&#x3002; &#x4F46;&#x662F;&#x5305;&#x542B;&#x4E0A;&#x8FF0;&#x4E09;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x5E8F;&#x5217;&#x5171;i&#x4E2A;&#xFF0C;&#x4EE5;0.2&#x4E3A;&#x4F8B;&#xFF0C;&#x9664;&#x4E86;&#x4E0A;&#x8FF0;&#x7684;&#x4E09;&#x4E2A;&#xFF0C;&#x8FD8;&#x6709;&#x4EE5;0.1&#x5F00;&#x5934;&#x7684;&#x4E09;&#x4E2A;&#x5E8F;&#x5217;&#x3002;&#x5373;(0.1, 0.2) (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4)&#x3002; &#x540C;&#x7406;0.3&#x7C7B;&#x4F3C;&#xFF0C;(0.3) (0.3, 0.4)&#x3002;&#x9664;&#x4E86;&#x8FD9;&#x4E24;&#x4E2A;&#xFF0C;&#x5305;&#x542B;&#x8FD9;&#x4E24;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x5E8F;&#x5217;&#x6709;&#xFF1A; (0.1, 0.2, 0.3) (0.1, 0.2, 0.3, 0.4)&#x8FD8;&#x6709;(0.2, 0.3) (0.2, 0.3, 0.4)&#x3002; Tips&#x627E;&#x51FA;&#x6570;&#x5B66;&#x89C4;&#x5F8B;&#xFF0C;&#x6BD4;&#x76F4;&#x63A5;&#x6A21;&#x62DF;&#x6C42;&#x51FA;&#x6240;&#x6709;&#x7684;&#x5E8F;&#x5217;&#x518D;&#x6C42;&#x548C;&#x8981;&#x65B9;&#x4FBF;&#x5F97;&#x591A;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;int N;double num[100001], sum = 0.0;void solution(){ cin &gt;&gt; N; for (int i = 1; i &lt;= N; i++) { cin &gt;&gt; num[i]; sum += num[i] * i * (N - i + 1); } printf(&quot;%.2f&quot;, sum);}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567Sample Input:40.1 0.2 0.3 0.4Sample Output:5.00]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1103 Integer Factorization (30)]]></title>
    <url>%2F%2Fposts%2F5efed0ac%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6574;&#x6570;&#x7684;&#x56E0;&#x5F0F;&#x5206;&#x89E3; DescriptionThe K-P factorization of a positive integer N is to write N as the sum of the P-th power of K positive integers. You are supposed to write a program to find the K-P factorization of N for any positive integers N, K and P. Input SpecificationEach input file contains one test case which gives in a line the three positive integers N (&lt;=400), K (&lt;=N) and P (1&lt;P&lt;=7). The numbers in a line are separated by a space. Output SpecificationFor each case, if the solution exists, output in the format: N = n1P + &#x2026; nKP where ni (i=1, &#x2026; K) is the i-th factor. All the factors must be printed in non-increasing order. Note: the solution may not be unique. For example, the 5-2 factorization of 169 has 9 solutions, such as 122 + 42 + 22 + 22 + 12, or 112 + 62 + 22 + 22 + 22, or more. You must output the one with the maximum sum of the factors. If there is a tie, the largest factor sequence must be chosen &#x2013; sequence { a1, a~2~, &#x2026; aK } is said to be larger than { b1, b2, &#x2026; bK } if there exists 1&lt;=L&lt;=K such that ai=bi for i&lt;L and aL&gt;bL&#x3002; If there is no solution, simple output &#x201C;Impossible&#x201D;. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x6574;&#x6570;&#x7684;k-P&#x56E0;&#x5F0F;&#x5206;&#x89E3;&#x662F;&#x628A;&#x4E00;&#x4E2A;&#x6574;&#x6570;N&#x5199;&#x4F5C;K&#x4E2A;&#x6B63;&#x6574;&#x6570;&#x7684;P&#x6B21;&#x5E42;&#x7684;&#x548C;&#x7684;&#x5F62;&#x5F0F;&#x3002;&#x73B0;&#x5728;&#x5E0C;&#x671B;&#x4F60;&#x5199;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x6765;&#x627E;&#x5230;&#x5BF9;&#x4E8E;&#x4EFB;&#x4F55;&#x6B63;&#x6574;&#x6570;N&#xFF0C;K&#x548C;P&#xFF0C;&#x5199;&#x51FA;&#x5176;K-P&#x5F62;&#x5F0F;&#x7684;&#x56E0;&#x5F0F;&#x5206;&#x89E3;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x7ED9;&#x51FA;&#x4E09;&#x4E2A;&#x6B63;&#x6574;&#x6570;N (&lt;=400), K (&lt;=N) &#x548C; P (1&lt;P&lt;=7)&#x3002;&#x7531;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#xFF0C;&#x5982;&#x679C;&#x5B58;&#x5728;&#x89E3;&#x6CD5;&#xFF0C;&#x5219;&#x6309;&#x7167;&#x4EE5;&#x4E0B;&#x683C;&#x5F0F;&#x8F93;&#x51FA;&#xFF1A; N = n1P + &#x2026; nKP &#x5176;&#x4E2D;ni (i=1, &#x2026; K)&#x662F;&#x7B2C;i&#x4E2A;&#x56E0;&#x5B50;&#x3002;&#x6240;&#x6709;&#x7684;&#x56E0;&#x5B50;&#x5FC5;&#x987B;&#x4EE5;&#x975E;&#x9012;&#x589E;&#x7684;&#x987A;&#x5E8F;&#x6253;&#x5370;&#x3002; &#x6CE8;&#x610F;&#xFF1A;&#x89E3;&#x6CD5;&#x53EF;&#x80FD;&#x4E0D;&#x552F;&#x4E00;&#xFF0C;&#x6BD4;&#x5982;169&#x7684;2-5&#x56E0;&#x5F0F;&#x5206;&#x89E3;&#xFF0C;&#x5177;&#x6709;9&#x4E2A;&#x89E3;&#xFF0C;&#x4F8B;&#x5982;122 + 42 + 22 + 22 + 12, &#x6216;&#x8005; 112 + 62 + 22 + 22 + 22,&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x5177;&#x6709;&#x6700;&#x5927;&#x56E0;&#x5B50;&#x603B;&#x548C;&#x7684;&#x90A3;&#x4E2A;&#xFF0C;&#x5982;&#x679C;&#x8FD8;&#x662F;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x5177;&#x6709;&#x6700;&#x5927;&#x56E0;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x89E3;&#x3002; &#x56E0;&#x5B50;&#x5E8F;&#x5217;&#x5927;&#x5C0F;&#x7684;&#x5224;&#x65AD;&#x89C4;&#x5219;&#xFF1A; &#x5BF9;&#x4E8E;&#x5E8F;&#x5217;A{ a1, a~2~, &#x2026; aK }&#x548C;&#x5E8F;&#x5217;B{ b1, b2, &#x2026; bK } &#xFF0C;&#x82E5;&#x5B58;&#x5728;L&#x6EE1;&#x8DB3;1&lt;=L&lt;=K&#xFF0C;&#x4E14;&#x5BF9;&#x4E8E;&#x4EFB;&#x610F;i&lt;L&#xFF0C;&#x90FD;&#x6709;ai=bi&#xFF0C;&#x5E76;&#x4E14;aL&gt;bL&#xFF0C;&#x5219;&#x8BA4;&#x4E3A;&#x5E8F;&#x5217;A&gt;&#x5E8F;&#x5217;B&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x56E0;&#x4E3A;&#x8981;&#x7528;&#x7684;&#x90FD;&#x662F;&#x6570;&#x7684;P&#x6B21;&#x5E42;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5148;&#x5C06;pow(i,P)&#x4FDD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5176;&#x4E2D;pow(i,P)&lt;=N&#x3002; &#x7136;&#x540E;&#x5C31;&#x662F;DFS&#x8FDB;&#x884C;&#x641C;&#x7D22;&#x3002; &#x5BF9;&#x4E8E;&#x6BCF;&#x6B21;&#x627E;&#x5230;&#x7684;K&#x4E2A;&#x6570;&#xFF0C;&#x5E76;&#x4E14;&#x5176;P&#x6B21;&#x5E42;&#x7684;&#x548C;&#x4E5F;&#x4E3A;N&#x7684;&#x6570;&#xFF0C;&#x6C42;&#x51FA;&#x8FD9;&#x4E9B;&#x6570;&#x7684;&#x548C;&#xFF0C;&#x5BF9;&#x4E8E;&#x548C;&#x6700;&#x5927;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x4FDD;&#x7559;&#x4E3A;&#x7ED3;&#x679C;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;math.h&gt;#pragma warning(disable:4996)using namespace std;int N, K, P, sum = 0, maxsum = 0, upbound;vector&lt;int&gt; v, temp, res;bool DFS(int s,int cur) //cur&#x8868;&#x793A;&#x76EE;&#x524D;&#x627E;&#x6253;&#x4E86;&#x591A;&#x5C11;&#x4E2A;&#x6570;{ if (cur==K) //&#x627E;&#x5230;&#x4E86;K&#x4E2A;&#x6570; { if (s==0) //s&#x8868;&#x793A;&#x76EE;&#x524D;&#x8FD8;&#x5269;&#x591A;&#x5C11; { sum = 0; for (int i = 0; i &lt; temp.size(); i++) sum += temp[i]; if (sum&gt;maxsum) //sum&#x8868;&#x793A;&#x5F53;&#x524D;&#x5E8F;&#x5217;&#x5404;&#x4E2A;&#x6570;&#x7684;&#x548C;&#xFF0C;&#x53EA;&#x4FDD;&#x7559;&#x6700;&#x5927;&#x7684; { res = temp; maxsum = sum; } return true; } else return false; } upbound = cur &gt; 0 ? temp[cur - 1] : v.size() - 1;//&#x7531;&#x4E8E;&#x662F;&#x5148;&#x627E;&#x5927;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x5C31;&#x4ECE;&#x5927;&#x5411;&#x5C0F;&#x53BB;&#x627E;&#x3002;upbound&#x8868;&#x793A;&#x67E5;&#x627E;&#x7684;&#x4E0A;&#x754C; for (int i = upbound; i &gt;= 1; i--) { if (v[i] &lt;= s) { temp[cur] = i; DFS(s - v[i], cur + 1); } else if (i == 1) return false; } return true;}void solution(){ cin &gt;&gt; N &gt;&gt; K &gt;&gt; P; v.push_back(0); temp.resize(K); for (int i = 1; pow(i, P) &lt;= N; i++) v.push_back(pow(i, P)); DFS(N, 0); if (res.size() == K) //&#x53EA;&#x6709;&#x627E;&#x5230;&#x4E86;K&#x4E2A;&#x6570;&#x624D;&#x8F93;&#x51FA; { cout &lt;&lt; N &lt;&lt; &quot; = &quot;; printf(&quot;%d^%d&quot;, res[0], P); for (int i = 1; i &lt; res.size(); i++) printf(&quot; + %d^%d&quot;, res[i], P); } else cout &lt;&lt; &quot;Impossible&quot;;}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112Sample Input 1:169 5 2Sample Output 1:169 = 6^2 + 6^2 + 6^2 + 6^2 + 5^2Sample Input 2:169 167 3Sample Output 2:Impossible]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>DFS</tag>
        <tag>记忆化搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1102 Invert a Binary Tree (25)]]></title>
    <url>%2F%2Fposts%2F9691409a%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x53CD;&#x8F6C;&#x4E8C;&#x53C9;&#x6811; descriptionThe following is from Max Howell @twitter: Google: 90% of our engineers use the software you wrote (Homebrew), but you can&#x2019;t invert a binary tree on a whiteboard so fuck off. Now it&#x2019;s your turn to prove that YOU CAN invert a binary tree! Input SpecificationEach input file contains one test case. For each case, the first line gives a positive integer N (&lt;=10) which is the total number of nodes in the tree &#x2013; and hence the nodes are numbered from 0 to N-1. Then N lines follow, each corresponds to a node from 0 to N-1, and gives the indices of the left and right children of the node. If the child does not exist, a &#x201C;-&#x201C; will be put at the position. Any pair of children are separated by a space. Output SpecificationFor each test case, print in the first line the level-order, and then in the second line the in-order traversal sequences of the inverted tree. There must be exactly one space between any adjacent numbers, and no extra space at the end of the line. &#x9898;&#x76EE;&#x63CF;&#x8FF0;&#x73B0;&#x5728;&#x8F6E;&#x5230;&#x4F60;&#x6765;&#x8BC1;&#x660E;&#x4F60;&#x53EF;&#x4EE5;&#x53CD;&#x8F6C;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#x4E86;&#xFF01; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF08;&lt;=10&#xFF09;&#xFF0C;&#x4ED6;&#x662F;&#x6811;&#x4E2D;&#x8282;&#x70B9;&#x7684;&#x603B;&#x6570;&#x3002;&#x8282;&#x70B9;&#x4ECE;0~N-1&#x7F16;&#x53F7;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x4ECE;0&#x5230;N-1&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x7ED9;&#x51FA;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x53F3;&#x5B50;&#x8282;&#x70B9;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x5982;&#x679C;&#x5B69;&#x5B50;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x5C31;&#x5728;&#x8BE5;&#x4F4D;&#x7F6E;&#x653E;&#x7F6E;&#x2019;-&#x2018;&#x3002;&#x4E24;&#x4E2A;&#x5B69;&#x5B50;&#x4E4B;&#x95F4;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x5C42;&#x6B21;&#x904D;&#x5386;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x7B2C;&#x4E8C;&#x884C;&#x4E2D;&#xFF0C;&#x8F93;&#x51FA;&#x8FD9;&#x68F5;&#x6811;&#x7684;&#x53CD;&#x8F6C;&#x7684;&#x5C42;&#x6B21;&#x904D;&#x5386;&#xFF0C;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x5E76;&#x4E14;&#x884C;&#x7684;&#x672B;&#x5C3E;&#x4E0D;&#x5F97;&#x6709;&#x989D;&#x5916;&#x7684;&#x7A7A;&#x683C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x627E;&#x5230;&#x8FD9;&#x68F5;&#x6811;&#x7684;&#x6839;&#x3002; &#x5C42;&#x6B21;&#x904D;&#x5386;&#x6CA1;&#x5565;&#x597D;&#x8BF4;&#x7684;&#xFF0C;&#x4F7F;&#x7528;queue&#x961F;&#x5217;&#xFF0C;&#x4E00;&#x5C42;&#x5C42;&#x7684;&#x904D;&#x5386;&#x5C31;&#x597D;&#x4E86;&#x3002; &#x5BF9;&#x4E8E;&#x53CD;&#x5411;&#x7684;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#xFF0C;&#x904D;&#x5386;&#x987A;&#x5E8F;&#x662F;&#x201C;&#x53F3;&#x5DE6;&#x6839;&#x201D;&#x3002;&#x9012;&#x5F52;&#x53BB;&#x5199;&#x5373;&#x53EF;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;queue&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ int lchild=-1, rchild=-1;}node;vector&lt;node&gt; T;vector&lt;bool&gt; FindRoot;int N;char temp1, temp2;bool flag = false;void InOrder(int root){ if (T[root].rchild != -1) InOrder(T[root].rchild); if (flag) cout &lt;&lt; &apos; &apos;; cout &lt;&lt; root; flag = true; if (T[root].lchild != -1) InOrder(T[root].lchild);}queue&lt;int&gt;que;void levelOrder(){ while (!que.empty()) { int root = que.front(); que.pop(); if (flag) cout &lt;&lt; &apos; &apos;; cout &lt;&lt; root; flag = true; if (T[root].rchild != -1) que.push(T[root].rchild); if (T[root].lchild != -1) que.push(T[root].lchild); } cout &lt;&lt; endl;}void solution(){ cin &gt;&gt; N; T.resize(N); FindRoot.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; temp1&gt;&gt;temp2; if (temp1 != &apos;-&apos;) { T[i].lchild = temp1 - &apos;0&apos;; FindRoot[temp1 - &apos;0&apos;] = true; } if (temp2 != &apos;-&apos;) { T[i].rchild = temp2 - &apos;0&apos;; FindRoot[temp2 - &apos;0&apos;] = true; } } int root; for (int i = 0; i &lt; N; i++) { if (FindRoot[i] == false) { root = i; break; } } flag = false; que.push(root); levelOrder(); flag = false; InOrder(root);}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415Sample Input:81 -- -0 -2 7- -- -5 -4 6Sample Output:3 7 2 6 4 0 5 16 5 7 4 3 2 0 1]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1095 Cars on Campus (30)]]></title>
    <url>%2F%2Fposts%2F18272c90%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6821;&#x56ED;&#x91CC;&#x7684;&#x6C7D;&#x8F66; &#x8F93;&#x5165;&#x8F93;&#x51FA;&#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;Tips &#x8FD9;&#x4E2A;&#x9898;&#x65F6;&#x95F4;&#x9650;&#x5236;&#x7684;&#x5F88;&#x7D27;&#xFF0C;&#x5C3D;&#x91CF;&#x7528;&#x5B57;&#x7B26;&#x6570;&#x7EC4;&#x4EE3;&#x66FF;string&#xFF0C;&#x4F7F;&#x7528;scanf&#x4EE3;&#x66FF;cin&#x3002; &#x6700;&#x540E;&#x5728;&#x7ED9;&#x51FA;&#x65F6;&#x95F4;&#x7684;&#x65F6;&#x5019;&#x662F;&#x6309;&#x5347;&#x5E8F;&#x7ED9;&#x51FA;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x5229;&#x7528;&#x6B64;&#x6761;&#x4EF6;&#xFF0C;&#x7F29;&#x5C0F;&#x67E5;&#x627E;&#x8303;&#x56F4;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;map&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;cstring&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ char ID[10]; int time = 0, flag = 0;}node;int N, K, f;vector&lt;node&gt; input, car;bool cmp1(node a, node b){ if (strcmp(a.ID, b.ID) != 0) return strcmp(a.ID, b.ID) &lt; 0; else return a.time &lt; b.time;}bool cmp2(node a, node b){ return a.time &lt; b.time;}void solution(){ cin &gt;&gt; N &gt;&gt; K; input.resize(N); int time2, h, m, s; char status[10]; for (int i = 0; i &lt; N; i++) { scanf(&quot;%s %d:%d:%d %s\n&quot;, input[i].ID, &amp;h, &amp;m, &amp;s, &amp;status); input[i].time = h * 3600 + m * 60 + s; if (strcmp(status, &quot;in&quot;) == 0) input[i].flag = 1; else input[i].flag = -1; //&#x8FDB;&#x8FDB;&#x51FA;&#x51FA; } sort(input.begin(), input.end(), cmp1); map&lt;string, int&gt; lasttime; int maxtime = 0; for (int i = 0; i &lt; N - 1; i++) { if (strcmp(input[i].ID, input[i + 1].ID) == 0 &amp;&amp; input[i].flag == 1 &amp;&amp; input[i + 1].flag == -1) { car.push_back(input[i]); car.push_back(input[i + 1]); lasttime[input[i].ID] += (input[i + 1].time - input[i].time); if (maxtime &lt; lasttime[input[i].ID]) maxtime = lasttime[input[i].ID]; } } sort(car.begin(), car.end(), cmp2); vector&lt;int&gt; carInSchool(N); for (int i = 0; i &lt; car.size(); i++) { if (i == 0) carInSchool[i] += car[i].flag; else carInSchool[i] = carInSchool[i - 1] + car[i].flag; } int temp,j=0; for (int i = 0; i &lt; K; i++) { scanf(&quot;%d:%d:%d&quot;, &amp;h, &amp;m, &amp;s); time2 = h * 3600 + m * 60 + s; for (j=temp; j &lt; car.size(); j++) { if (car[j].time &gt; time2) { printf(&quot;%d\n&quot;, carInSchool[j - 1]); break; } else if (j == car.size() - 1) cout &lt;&lt; carInSchool[j] &lt;&lt; endl; //&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x4E86;&#xFF0C;&#x6709;&#x591A;&#x5C11;&#x8F66;&#x5C31;&#x7B97;&#x591A;&#x5C11;&#x8F86;&#x8F66; } temp = j; } for (auto i = lasttime.begin(); i != lasttime.end(); i++) { if (i-&gt;second == maxtime) cout &lt;&lt; i-&gt;first &lt;&lt; &apos; &apos;; } printf(&quot;%02d:%02d:%02d&quot;, maxtime / 3600, (maxtime % 3600) / 60, maxtime % 60);}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415161718192021222324252627282930313233343536Sample Input:16 7JH007BD 18:00:01 inZD00001 11:30:08 outDB8888A 13:00:00 outZA3Q625 23:59:50 outZA133CH 10:23:00 inZD00001 04:09:59 inJH007BD 05:09:59 inZA3Q625 11:42:01 outJH007BD 05:10:33 inZA3Q625 06:30:50 inJH007BD 12:23:42 outZA3Q625 23:55:00 inJH007BD 12:24:23 outZA133CH 17:11:22 outJH007BD 18:07:01 outDB8888A 06:30:50 in05:10:0006:30:5011:00:0012:23:4214:00:0018:00:0023:59:00Sample Output:1452101JH007BD ZD00001 07:20:09]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1098 Insertion or Heap Sort (25)]]></title>
    <url>%2F%2Fposts%2F45a528a9%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x8FD8;&#x662F;&#x5806;&#x6392;&#x5E8F;&#x7ED9;&#x5B9A;&#x521D;&#x8BD5;&#x5E8F;&#x5217;&#x548C;&#x7ECF;&#x8FC7;&#x82E5;&#x5E72;&#x8D9F;&#x6392;&#x5E8F;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x662F;&#x67D0;&#x79CD;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x51E0;&#x6B21;&#x8FED;&#x4EE3;&#x4E4B;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x6C42;&#x8FD9;&#x662F;&#x54EA;&#x79CD;&#x6392;&#x5E8F;&#x65B9;&#x6CD5;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x6B63;&#x6574;&#x6570;N(&lt;=100)&#x3002;&#x4E0B;&#x4E00;&#x884C;&#x7ED9;&#x51FA;N&#x4E2A;&#x6574;&#x6570;&#x4F5C;&#x4E3A;&#x521D;&#x8BD5;&#x5E8F;&#x5217;&#xFF0C;&#x6700;&#x540E;&#x4E00;&#x884C;&#x5305;&#x62EC;N&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x90E8;&#x5206;&#x6392;&#x5E8F;&#x5E8F;&#x5217;&#x3002;&#x5047;&#x8BBE;&#x662F;&#x5347;&#x5E8F;&#x6392;&#x5E8F;&#x3002;&#x6240;&#x6709;&#x6570;&#x5B57;&#x89C1;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5728;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x662F;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x8FD8;&#x662F;&#x5806;&#x6392;&#x5E8F;&#x3002;&#x5373;&#x201D;Insertion Sort&#x201D;&#x6216;&#x8005;&#x201D;Heap Sort&#x201D;&#x3002;&#x7136;&#x540E;&#x518D;&#x8FD0;&#x884C;&#x4E00;&#x6B21;&#x8FD9;&#x79CD;&#x6392;&#x5E8F;&#xFF0C;&#x5728;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x51FA;&#x518D;&#x8FD0;&#x884C;&#x4E00;&#x6B21;&#x4E4B;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x5E8F;&#x5217;&#x3002; &#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7684;&#x7B54;&#x6848;&#x90FD;&#x662F;&#x552F;&#x4E00;&#x7684;&#xFF0C;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x76F8;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;PAT-A-1089 &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;math.h&gt;#pragma warning(disable:4996)using namespace std;int N;int num[101], num_sort[101];void adjust(int low, int high){ int i = 1, j = 2; while (j&lt;=high) { if (j + 1 &lt;= high&amp;&amp;num_sort[j] &lt; num_sort[j + 1]) j++; if (num_sort[i] &lt; num_sort[j]) { swap(num_sort[i], num_sort[j]); i = j; j = i * 2; } else break; }}void solution(){ cin &gt;&gt; N; for (int i = 1; i &lt;= N; i++) { cin &gt;&gt; num[i]; } for (int i = 1; i &lt;= N; i++) { cin &gt;&gt; num_sort[i]; } bool isInsert = true; int temp = num_sort[1]; int range; for (int i = 2; i &lt;= N; i++) { if (temp &gt; num_sort[i]) { range = i; for (; i &lt; N; i++) { if (num[i] != num_sort[i]) { isInsert = false; break; } } } if (i&lt;N) temp = num_sort[i]; if (isInsert == false) break; } if (isInsert) { cout &lt;&lt; &quot;Insertion Sort&quot; &lt;&lt; endl; sort(num+1, num + range + 1); for (int i = 1; i &lt;= N; i++) { cout &lt;&lt; num[i]; if (i != N) cout &lt;&lt; &apos; &apos;; } } else { cout &lt;&lt; &quot;Heap Sort&quot; &lt;&lt; endl; int temp = N; while (temp &gt;= 2 &amp;&amp; num_sort[temp] &gt; num_sort[temp - 1]) temp--; swap(num_sort[1], num_sort[temp]); adjust(1, temp - 1); for (int i = 1; i &lt;= N; i++) { cout &lt;&lt; num_sort[i]; if (i != N) cout &lt;&lt; &apos; &apos;; } }}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415161718Sample Input 1:103 1 2 8 7 5 9 4 6 01 2 3 7 8 5 9 4 6 0Sample Output 1:Insertion Sort1 2 3 5 7 8 9 4 6 0Sample Input 2:103 1 2 8 7 5 9 4 6 06 4 5 1 0 3 2 7 8 9Sample Output 2:Heap Sort5 4 3 1 0 2 6 7 8 9]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>插入排序</tag>
        <tag>堆排序</tag>
        <tag>Sort</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1091 Acute Stroke (30)]]></title>
    <url>%2F%2Fposts%2F228299b2%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6025;&#x6027;&#x8111;&#x731D;&#x6B7B;&#x7ED9;&#x51FA;&#x4E00;&#x7EC4;&#x8111;&#x90E8;&#x626B;&#x63CF;&#x7684;&#x5207;&#x7247;&#x56FE;&#xFF0C;&#x6C42;&#x8D85;&#x51FA;&#x9608;&#x503C;&#x7684;&#x80BF;&#x7624;&#x7684;&#x603B;&#x4F53;&#x79EF;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x662F;4&#x4E2A;&#x6574;&#x6570;&#xFF1A;M&#xFF0C;N&#xFF0C;L&#xFF0C;T&#x3002;&#x5176;&#x4E2D;M&#x548C;N&#x8868;&#x793A;&#x5207;&#x7247;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x5373;&#x5207;&#x7247;&#x5728;M*N&#x7684;&#x8303;&#x56F4;&#x5185;&#xFF0C;&#x6700;&#x5927;&#x5206;&#x8FA8;&#x7387;&#x4E3A;1286*128&#x3002;L&#xFF08;&lt;=60&#xFF09;&#x8868;&#x793A;&#x5207;&#x7247;&#x7684;&#x6570;&#x91CF;&#x3002;T&#x662F;&#x9608;&#x503C;&#x3002; &#x7ED9;&#x51FA;L&#x4E2A;&#x5207;&#x7247;&#xFF0C;&#x5207;&#x7247;&#x7531;0&#x548C;1&#x7684;M*N&#x7684;&#x77E9;&#x9635;&#x8868;&#x793A;&#xFF0C;1&#x8868;&#x793A;&#x80BF;&#x7624;&#xFF0C;0&#x8868;&#x793A;&#x6B63;&#x5E38;&#x3002;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x8BA1;&#x7B97;1&#x7684;&#x4F53;&#x79EF;&#x6765;&#x6765;&#x5224;&#x65AD;&#x80BF;&#x7624;&#x7684;&#x5927;&#x5C0F;&#x3002;&#x5927;&#x8111;&#x4E2D;&#x53EF;&#x80FD;&#x6709;&#x597D;&#x51E0;&#x4E2A;&#x80BF;&#x7624;&#xFF0C;&#x53EA;&#x8BA1;&#x7B97;&#x80BF;&#x7624;&#x5927;&#x5C0F;&#x8D85;&#x8FC7;&#x9608;&#x503C;&#x7684;&#x90E8;&#x5206;&#x3002; &#x5224;&#x5B9A;&#x4E24;&#x4E2A;&#x70B9;&#x76F8;&#x8FDE;&#x7684;&#x4F9D;&#x636E;&#x662F;&#x4ED6;&#x4EEC;&#x5171;&#x4EAB;&#x516C;&#x5171;&#x8FB9;&#x3002;&#x5982;&#x4E0B;&#x56FE;&#xFF0C;&#x6709;6&#x4E2A;&#x7EA2;&#x8272;&#x50CF;&#x7D20;&#x8FDE;&#x63A5;&#x5230;&#x84DD;&#x8272;&#x50CF;&#x7D20;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x80BF;&#x7624;&#x7684;&#x603B;&#x4F53;&#x79EF;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x56FE;&#x7684;&#x904D;&#x5386;&#x3002; Tips &#x5728;&#x6C42;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x53EF;&#x4EE5;&#x4E0D;&#x7528;&#x5FAA;&#x73AF;&#xFF0C;&#x5C06;&#x4F4D;&#x79FB;&#x4FDD;&#x5B58;&#x5728;&#x6570;&#x7EC4;&#x4E2D;&#x3002;&#x89C1;&#x540E;&#x8FB9;&#x7684;&#x4EE3;&#x7801;&#x3002; DFS&#x4E0D;&#x80FD;&#x7528;&#x9012;&#x5F52;&#xFF0C;&#x5426;&#x5219;&#x4F1A;&#x7206;&#x6808;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889//DFS&#xFF0C;&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;&#xFF0C;&#x7528;&#x9012;&#x5F52;&#x4F1A;&#x7206;&#x6808;#include&lt;iostream&gt;#include&lt;stack&gt;#pragma warning(disable:4996)using namespace std;int Brain[1300][130][80];int M, N, L, T;int search = 0;int neighbor[6][3] ={ {0,0,1}, {0,0,-1}, {0,1,0}, {0,-1,0}, {1,0,0}, {-1,0,0}};typedef struct{ int x, y, z;}location;stack&lt;location&gt; sta;void DFS(){ while (!sta.empty()) { location l = sta.top(); sta.pop(); if (Brain[l.x][l.y][l.z] == 1) { search++; Brain[l.x][l.y][l.z] = 0; for (int i = 0; i &lt; 6; i++) { int x1 = l.x + neighbor[i][0]; int y1 = l.y + neighbor[i][1]; int z1 = l.z + neighbor[i][2]; if (x1 &gt;= 0 &amp;&amp; x1&lt;M&amp;&amp;y1 &gt;= 0 &amp;&amp; y1&lt;N&amp;&amp;z1 &gt;= 0 &amp;&amp; z1&lt;L) { sta.push({ x1,y1,z1 }); } } } }}void solution(){ cin &gt;&gt; M &gt;&gt; N &gt;&gt; L &gt;&gt; T; for (int i = 0; i &lt; L; i++) { for (int j = 0; j &lt; M; j++) { for (int k = 0; k &lt; N; k++) { scanf(&quot;%d&quot;, &amp;Brain[j][k][i]); //cin &gt;&gt; Brain[j][k][i]; } } } int res = 0; for (int i = 0; i &lt; L; i++) { for (int j = 0; j &lt; M; j++) { for (int k = 0; k &lt; N; k++) { if (Brain[j][k][i] == 1) { search = 0; sta.push({ j,k,i }); DFS(); if (search&gt;=T) { res += search; } } } } } cout &lt;&lt; res;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182//BFS#include&lt;iostream&gt;#include&lt;queue&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ int x, y, z;}location;queue&lt;location&gt; que;int neighbor[3][6] ={ { 1, 0, 0, -1, 0, 0 }, { 0, 1, 0, 0, -1, 0 }, { 0, 0, 1, 0, 0, -1 }};int Brain[1300][130][80];int M, N, L, T, res=0, temp=0;void BFS(){ while (!que.empty()) { location l = que.front(); que.pop(); if (Brain[l.x][l.y][l.z] == 1) { temp++; Brain[l.x][l.y][l.z] = 0; for (int i = 0; i &lt; 6; i++) { int x1 = l.x + neighbor[0][i]; int y1 = l.y + neighbor[1][i]; int z1 = l.z + neighbor[2][i]; if (x1 &gt;= 0 &amp;&amp; x1&lt;M&amp;&amp;y1 &gt;= 0 &amp;&amp; y1&lt;N&amp;&amp;z1 &gt;= 0 &amp;&amp; z1&lt;L) { que.push({ x1,y1,z1 }); } } } }}void solution(){ cin &gt;&gt; M &gt;&gt; N &gt;&gt; L &gt;&gt; T; for (int i = 0; i &lt; L; i++) { for (int j = 0; j &lt; M; j++) { for (int k = 0; k &lt; N; k++) { scanf(&quot;%d&quot;, &amp;Brain[j][k][i]); } } } for (int i = 0; i &lt; L; i++) { for (int j = 0; j &lt; M; j++) { for (int k = 0; k &lt; N; k++) { if (Brain[j][k][i]==1) { temp = 0; que.push({ j,k,i }); BFS(); if (temp&gt;=T) { res += temp; } } } } } cout &lt;&lt; res;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415161718192021Sample Input:3 4 5 21 1 1 11 1 1 11 1 1 10 0 1 10 0 1 10 0 1 11 0 1 10 1 0 00 0 0 01 0 1 10 0 0 00 0 0 00 0 0 10 0 0 11 0 0 0Sample Output:26]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>图的遍历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1087 All Roads Lead to Rome (30)]]></title>
    <url>%2F%2Fposts%2F5777fec1%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6761;&#x6761;&#x5927;&#x8DEF;&#x901A;&#x7F57;&#x9A6C;&#x6709;&#x597D;&#x591A;&#x901A;&#x5F80;&#x7F57;&#x9A6C;&#x7684;&#x7EBF;&#x8DEF;&#xFF0C;&#x8981;&#x627E;&#x51FA;&#x6765;&#x4E00;&#x6761;&#x6210;&#x672C;&#x6700;&#x4F4E;&#x7684;&#x7EBF;&#x8DEF;&#xFF0C;&#x540C;&#x65F6;&#x83B7;&#x5F97;&#x6700;&#x5927;&#x7684;&#x5FEB;&#x4E50;&#x503C;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x6587;&#x4EF6;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF08;2 &lt;= N &lt;= 200&#xFF09;&#xFF0C;&#x8868;&#x793A;&#x57CE;&#x5E02;&#x7684;&#x6570;&#x91CF;&#x3002;&#x548C;K&#xFF0C;&#x57CE;&#x5E02;&#x5BF9;&#x4E4B;&#x95F4;&#x7684;&#x8DEF;&#x7EBF;&#x603B;&#x6570;&#x3002;&#x63A5;&#x7740;&#x662F;&#x8D77;&#x59CB;&#x57CE;&#x5E02;&#x7684;&#x540D;&#x5B57;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x7684;N-1&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x57CE;&#x5E02;&#x7684;&#x540D;&#x79F0;&#x548C;&#x4E00;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x51FA;&#x4E86;&#x51FA;&#x53D1;&#x57CE;&#x5E02;&#x4E4B;&#x5916;&#xFF0C;&#x53EF;&#x4EE5;&#x4ECE;&#x8BE5;&#x57CE;&#x5E02;&#x83B7;&#x5F97;&#x7684;&#x5E78;&#x798F;&#x6307;&#x6570;&#x3002; &#x7136;&#x540E;&#x662F;K&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x4EE5;&#x201C;&#x57CE;&#x5E02;&#x540D;&#xFF0C;&#x57CE;&#x5E02;&#x540D;&#xFF0C;&#x82B1;&#x8D39;&#x201D;&#x7684;&#x683C;&#x5F0F;&#x63CF;&#x8FF0;&#x8DEF;&#x7EBF;&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x57CE;&#x5E02;&#x540D;&#x79F0;&#x662F;&#x4E00;&#x4E2A;&#x7531;3&#x4E2A;&#x5927;&#x5199;&#x82F1;&#x6587;&#x5B57;&#x6BCD;&#x7EC4;&#x6210;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6700;&#x7EC8;&#x76EE;&#x7684;&#x5730;&#x662F;&#x4EE3;&#x8868;&#x7F57;&#x9A6C;&#x7684;ROM &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x8981;&#x6C42;&#x4EE5;&#x6700;&#x4F4E;&#x7684;&#x6210;&#x672C;&#x627E;&#x5230;&#x8DEF;&#x7EBF;&#x3002;&#x5982;&#x679C;&#x8DEF;&#x7EBF;&#x4E0D;&#x552F;&#x4E00;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x5177;&#x6709;&#x6700;&#x5927;&#x5E78;&#x798F;&#x6307;&#x6570;&#x7684;&#x8DEF;&#x7EBF;&#xFF0C;&#x5982;&#x679C;&#x8FD8;&#x4E0D;&#x552F;&#x4E00;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x5177;&#x6709;&#x6700;&#x5927;&#x5E73;&#x5747;&#x5E78;&#x798F;&#x6307;&#x6570;&#x7684;&#x8DEF;&#x7EBF;&#x3002;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4FDD;&#x8BC1;&#x6700;&#x540E;&#x4E00;&#x5B9A;&#x6709;&#x4E00;&#x4E2A;&#x552F;&#x4E00;&#x7684;&#x7ED3;&#x679C;&#x3002; &#x5728;&#x8F93;&#x51FA;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x4E2D;&#xFF0C;&#x9996;&#x5148;&#x8F93;&#x51FA;4&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x63A8;&#x8350;&#x8DEF;&#x7EBF;&#x4E2D;&#x6210;&#x672C;&#x6700;&#x4F4E;&#x7684;&#xFF0C;&#x4E0D;&#x540C;&#x8DEF;&#x7EBF;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x6210;&#x672C;&#xFF0C;&#x5E78;&#x798F;&#x6307;&#x6570;&#x548C;&#x5E73;&#x5747;&#x5E78;&#x798F;&#x6307;&#x6570;&#xFF08;&#x4EC5;&#x9650;&#x6574;&#x6570;&#x90E8;&#x5206;&#xFF09;&#x3002;&#x7136;&#x540E;&#x518D;&#x4E0B;&#x4E00;&#x884C;&#x4E2D;&#xFF0C;&#x8F93;&#x51FA;&#x683C;&#x5F0F;&#x4E3A;&#x201C;City1-&gt; City2 - &gt; &#x2026;-&gt; ROM&#x201D;&#x7684;&#x8DEF;&#x7EBF;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8FD9;&#x4E2A;&#x9898;&#x548C;1003&#x7C7B;&#x4F3C;&#x3002; TipsDij&#x6C42;&#x6700;&#x77ED;&#x8DEF;&#x5F84;+DFS&#xFF0C;DFS&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x904D;&#x5386;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;map&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)#define INF 99999999using namespace std;int e[201][201], weight[201], dis[201];bool visit[201];vector&lt;int&gt; pre[201], temppath, path;map&lt;string, int&gt; m1;map&lt;int, string&gt;m2;int maxvalue = 0, mindepth = 0, cntpath = 0;double maxavg;int N, K;void DFS(int v){ temppath.push_back(v); if (v==1) { int value = 0; for (int i = 0; i &lt; temppath.size(); i++) { value += weight[temppath[i]]; //&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x6743;&#x91CD; } double tempavg = 1.0*value / (temppath.size() - 1); //&#x4E0D;&#x7B97;&#x7F57;&#x9A6C;&#x57CE;&#x7684; if (value&gt;maxvalue) { maxvalue = value; maxavg = tempavg; path = temppath; //&#x8BB0;&#x5F55;&#x5F53;&#x524D;&#x6700;&#x5927;&#x503C;&#x4E86;&#x89E3;&#x4E00;&#x54C8; } else if (value==maxvalue&amp;&amp;tempavg&gt;maxavg) { maxavg = tempavg; path = temppath; } temppath.pop_back(); cntpath++; return; } for (int i = 0; i &lt; pre[v].size(); i++) { DFS(pre[v][i]); } temppath.pop_back();}void solution(){ fill(e[0], e[0] + 201 * 201, INF); fill(dis, dis + 201, INF); cin &gt;&gt; N &gt;&gt; K; string str; cin &gt;&gt; str; m1[str] = 1; m2[1] = str; for (int i = 1; i &lt; N; i++) { cin &gt;&gt; str &gt;&gt; weight[i + 1]; m1[str] = i + 1; m2[i + 1] = str; //&#x5B58;&#x50A8;&#x6620;&#x5C04;&#x5173;&#x7CFB; } //input cost information string a, b; int temp; for (int i = 0; i &lt; K; i++) { cin &gt;&gt; a &gt;&gt; b &gt;&gt; temp; e[m1[a]][m1[b]] = temp; e[m1[b]][m1[a]] = temp; } //dij&#x7B97;&#x6CD5; dis[1] = 0; for (int i = 0; i &lt; N; i++) { int u = -1,mindis = INF; for (int j = 1; j &lt;= N; j++) { if (visit[j]==false&amp;&amp;dis[j]&lt;mindis) { u = j; mindis = dis[j]; } } if (u == -1) break; visit[u] = true; for (int v = 1; v &lt;= N; v++) { if (visit[v] == false &amp;&amp; e[u][v] != INF) { //dij if (dis[u] + e[u][v] &lt; dis[v]) { dis[v] = dis[u] + e[u][v]; pre[v].clear(); pre[v].push_back(u); //&#x8BB0;&#x5F55;&#x53EF;&#x80FD;&#x7684;&#x8DEF;&#x5F84; } else if (dis[v] == dis[u] + e[u][v]) { pre[v].push_back(u); } } } } int rom = m1[&quot;ROM&quot;]; DFS(rom); cout &lt;&lt; cntpath &lt;&lt; &apos; &apos; &lt;&lt; dis[rom] &lt;&lt; &apos; &apos; &lt;&lt; maxvalue &lt;&lt; &apos; &apos; &lt;&lt; (int)maxavg &lt;&lt; endl; for (int i = path.size()-1; i &gt;= 1; i--) { cout &lt;&lt; m2[path[i]] &lt;&lt; &quot;-&gt;&quot;; } cout &lt;&lt; &quot;ROM&quot;; return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516171819Sample Input:6 7 HZHROM 100PKN 40GDN 55PRS 95BLN 80ROM GDN 1BLN ROM 1HZH PKN 1PRS ROM 2BLN HZH 2PKN GDN 1HZH PRS 1Sample Output:3 3 195 97HZH-&gt;PRS-&gt;ROM]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>Dijkstra</tag>
        <tag>DFS</tag>
        <tag>最短路径</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1101 Quick Sort (25)]]></title>
    <url>%2F%2Fposts%2F4a5f9413%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x8457;&#x540D;&#x7684;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x540D;&#x4E3A;partition&#x7684;&#x7ECF;&#x5178;&#x8FC7;&#x7A0B;&#x3002;&#x5728;&#x6B64;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x901A;&#x5E38;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4F5C;&#x4E3A;&#x67A2;&#x8F74;&#x3002;&#x7136;&#x540E;&#xFF0C;&#x5C0F;&#x4E8E;&#x67A2;&#x8F74;&#x7684;&#x5143;&#x7D20;&#x5411;&#x5DE6;&#x79FB;&#x52A8;&#xFF0C;&#x800C;&#x5927;&#x4E8E;&#x67A2;&#x8F74;&#x7684;&#x5143;&#x7D20;&#x5411;&#x53F3;&#x79FB;&#x52A8;&#x3002;&#x5728;&#x7B97;&#x6CD5;&#x8FD0;&#x884C;&#x540E;&#xFF0C;&#x7ED9;&#x5B9A;N&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x6C42;&#x8FD9;N&#x4E2A;&#x6570;&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x53EF;&#x4EE5;&#x9009;&#x5B9A;&#x4F5C;&#x4E3A;&#x67A2;&#x8F74;&#xFF1F;&#x4F8B;&#x5982;&#xFF0C;&#x7ED9;&#x5B9A;N = 5&#x548C;&#x6570;&#x5B57;1,3,2,4&#x548C;5.&#x6211;&#x4EEC;&#x6709;&#xFF1A; 1&#x53EF;&#x4EE5;&#x662F;&#x67A2;&#x8F74;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x7684;&#x5DE6;&#x8FB9;&#x6CA1;&#x6709;&#x5143;&#x7D20;&#xFF0C;&#x53F3;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x6BD4;&#x5B83;&#x5927;; 3&#x4E0D;&#x80FD;&#x662F;&#x67A2;&#x8F74;&#xFF0C;&#x56E0;&#x4E3A;&#x867D;&#x7136;&#x5B83;&#x5DE6;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x8F83;&#x5C0F;&#xFF0C;&#x4F46;&#x5B83;&#x53F3;&#x8FB9;&#x7684;&#x6570;&#x5B57;2&#x5C0F;&#x4E8E;&#x5B83;; 2&#x4E0D;&#x80FD;&#x662F;&#x67A2;&#x8F74;&#xFF0C;&#x56E0;&#x4E3A;&#x867D;&#x7136;&#x5B83;&#x53F3;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x8F83;&#x5927;&#xFF0C;&#x4F46;&#x5B83;&#x5DE6;&#x8FB9;&#x7684;&#x6570;&#x5B57;3&#x5927;&#x4E8E;&#x5B83;; &#x5E76;&#x4E14;&#x7531;&#x4E8E;&#x7C7B;&#x4F3C;&#x7684;&#x539F;&#x56E0;&#xFF0C;4&#x548C;5&#x4E5F;&#x53EF;&#x80FD;&#x6210;&#x4E3A;&#x67A2;&#x8F74;&#x3002; &#x56E0;&#x6B64;&#x603B;&#x5171;&#x6709;3&#x4E2A;&#x53EF;&#x4EE5;&#x9009;&#x4F5C;&#x67A2;&#x8F74;&#x7684;&#x70B9;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x3002;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x6B63;&#x6574;&#x6570;N&#xFF08;&lt;=105&#xFF09;&#x3002;&#x7136;&#x540E;&#x4E0B;&#x4E00;&#x884C;&#x662F;N&#x4E2A;&#x4E0D;&#x5927;&#x4E8E;109&#x7684;&#x6B63;&#x6574;&#x6570;&#x3002;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5728;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x53EF;&#x4EE5;&#x4F5C;&#x4E3A;&#x67A2;&#x8F74;&#x7684;&#x5143;&#x7D20;&#x7684;&#x6570;&#x91CF;&#x3002;&#x7136;&#x540E;&#x5728;&#x4E0B;&#x4E00;&#x884C;&#x4E2D;&#x6309;&#x987A;&#x5E8F;&#x8F93;&#x51FA;&#x8FD9;&#x4E9B;&#x5143;&#x7D20;&#xFF0C;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x6BCF;&#x884C;&#x672B;&#x5C3E;&#x4E0D;&#x5F97;&#x6709;&#x591A;&#x4F59;&#x7684;&#x7A7A;&#x683C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x6709;&#x4E2A;&#x91CD;&#x8981;&#x7684;&#x6027;&#x8D28;&#xFF0C;&#x6BCF;&#x4E2A;&#x67A2;&#x8F74;&#x5143;&#x7D20;&#x5728;&#x8FD9;&#x6B21;&#x6392;&#x5E8F;&#x4E4B;&#x540E;&#xFF0C;&#x90FD;&#x4F1A;&#x4E3A;&#x5B83;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x8FD9;&#x4E2A;&#x4F4D;&#x7F6E;&#x5C31;&#x662F;&#x6392;&#x5E8F;&#x5168;&#x90E8;&#x7ED3;&#x675F;&#x4E4B;&#x540E;&#xFF0C;&#x5B83;&#x6240;&#x5728;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x5373;&#x6BCF;&#x8D9F;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#xFF0C;&#x81F3;&#x5C11;&#x786E;&#x5B9A;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x4F4D;&#x7F6E;&#x3002; &#x5229;&#x7528;&#x8FD9;&#x4E2A;&#x601D;&#x8DEF;&#xFF0C;&#x6211;&#x4EEC;&#x7528;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x6570;&#x7EC4;&#x5B58;&#x50A8;&#x5C06;&#x8FD9;&#x4E9B;&#x6570;&#x5B57;&#x6392;&#x5E8F;&#x4E4B;&#x540E;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x770B;&#x6392;&#x5E8F;&#x524D;&#x7684;&#x4F4D;&#x7F6E;&#x662F;&#x5426;&#x7B49;&#x4E8E;&#x6392;&#x5E8F;&#x540E;&#x7684;&#x4F4D;&#x7F6E;&#x3002; Tips&#x4E3A;&#x4E86;&#x907F;&#x514D;&#x4F8B;&#x5982; 1 4 3 2 5 &#x4E2D;&#xFF0C;&#x5BF9; 3 &#x7684;&#x8BEF;&#x5224;&#xFF0C;&#x9700;&#x8981;&#x518D;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5224;&#x65AD;&#x6761;&#x4EF6;&#xFF0C;&#x5224;&#x65AD; 3 &#x662F;&#x4E0D;&#x662F;&#x4ECE;&#x6700;&#x5F00;&#x59CB;&#x5230;&#x73B0;&#x5728;&#x6700;&#x5927;&#x7684;&#x6570;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;int N;vector&lt;int&gt; temp1, num, res;void solution(){ cin &gt;&gt; N; num.resize(N); for (int i = 0; i &lt; N; i++) scanf(&quot;%d&quot;, &amp;num[i]); temp1 = num; sort(temp1.begin(), temp1.end()); int maxn = 0; for (int i = 0; i &lt; N; i++) { if (num[i] == temp1[i] &amp;&amp; num[i] &gt; maxn) res.push_back(num[i]); maxn = max(maxn, num[i]); } cout &lt;&lt; res.size() &lt;&lt; endl; for (int i = 0; i &lt; res.size(); i++) { cout &lt;&lt; res[i]; if (i != res.size() - 1) cout &lt;&lt; &apos; &apos;; } cout &lt;&lt; endl;}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678Sample Input:51 3 2 4 5Sample Output:31 4 5]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1100 Mars Numbers (20)]]></title>
    <url>%2F%2Fposts%2F463096a8%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x706B;&#x661F;&#x4E0A;&#x7684;&#x6570;&#x5B57;&#x706B;&#x661F;&#x4EBA;&#x4F7F;&#x7528;13&#x8FDB;&#x5236;&#x3002; &#x5730;&#x7403;&#x4E0A;&#x7684;&#x96F6;&#x70B9;&#x5728;&#x706B;&#x661F;&#x4E0A;&#x88AB;&#x79F0;&#x4E3A;&#x201C;tret&#x201D;&#x3002; &#x5730;&#x7403;&#x4E0A;&#x7684;&#x6570;&#x5B57;1&#x5230;12&#x5728;&#x706B;&#x661F;&#x4E0A;&#x5206;&#x522B;&#x88AB;&#x79F0;&#x4E3A;&#x201C;jan&#xFF0C;feb&#xFF0C;mar&#xFF0C;apr&#xFF0C;may&#xFF0C;jun&#xFF0C;jly&#xFF0C;aug&#xFF0C;sep&#xFF0C;oct&#xFF0C;nov&#xFF0C;dec&#x201D;&#x3002; &#x5BF9;&#x4E8E;&#x66F4;&#x9AD8;&#x4E00;&#x4F4D;&#xFF0C;&#x706B;&#x661F;&#x4EBA;&#x5C06;12&#x4E2A;&#x6570;&#x5B57;&#x5206;&#x522B;&#x53EB;&#x505A;&#x201C;tam&#xFF0C;hel&#xFF0C;maa&#xFF0C;huh&#xFF0C;tou&#xFF0C;kes&#xFF0C;hei&#xFF0C;elo&#xFF0C;syy&#xFF0C;lok&#xFF0C;mer&#xFF0C;jou&#x201D;&#x3002; &#x4F8B;&#x5982;&#xFF0C;&#x5730;&#x7403;&#x4E0A;&#x7684;29&#x5728;&#x706B;&#x661F;&#x4E0A;&#x88AB;&#x79F0;&#x4E3A;&#x201C;hel mar&#x201D;; &#x706B;&#x661F;&#x4E0A;&#x7684;&#x201C;elo nov&#x201D;&#x5BF9;&#x5E94;&#x5730;&#x7403;&#x4E0A;&#x7684;115&#x3002;&#x4E3A;&#x4E86;&#x5E2E;&#x52A9;&#x8FD9;&#x4E24;&#x4E2A;&#x884C;&#x661F;&#x4E4B;&#x95F4;&#x4EBA;&#x4EEC;&#x7684;&#x4EA4;&#x6D41;&#xFF0C;&#x8981;&#x6C42;&#x5199;&#x51FA;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x7528;&#x4E8E;&#x5730;&#x7403;&#x548C;&#x706B;&#x661F;&#x6570;&#x5B57;&#x7CFB;&#x7EDF;&#x4E4B;&#x95F4;&#x7684;&#x76F8;&#x4E92;&#x8F6C;&#x6362;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x3002;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF08;&lt;100&#xFF09;&#x3002;&#x7136;&#x540E;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x6709;&#x4E00;&#x4E2A;[0,169)&#x4E2D;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x4EE5;&#x5730;&#x7403;&#x6570;&#x5B57;&#x6216;&#x706B;&#x661F;&#x6570;&#x5B57;&#x7684;&#x5F62;&#x5F0F;&#x7ED9;&#x51FA;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x6253;&#x5370;&#x53E6;&#x4E00;&#x79CD;&#x8BED;&#x8A00;&#x4E2D;&#x7684;&#x76F8;&#x5E94;&#x6570;&#x5B57;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4F7F;&#x7528;Map&#x5B58;&#x50A8;string to int&#x7684;&#x6620;&#x5C04;&#x5173;&#x7CFB;&#x3002;&#x4F7F;&#x7528;&#x6570;&#x7EC4;&#x5B58;&#x50A8;int to string&#x7684;&#x6620;&#x5C04;&#x5173;&#x7CFB;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;iostream&gt;#include&lt;map&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;map&lt;string, int&gt; gewei, shiwei;string a[13] = { &quot;tret&quot;, &quot;jan&quot;, &quot;feb&quot;, &quot;mar&quot;, &quot;apr&quot;, &quot;may&quot;, &quot;jun&quot;, &quot;jly&quot;, &quot;aug&quot;, &quot;sep&quot;, &quot;oct&quot;,&quot;nov&quot;, &quot;dec&quot; };string b[13] = { &quot;&quot;, &quot;tam&quot;, &quot;hel&quot;, &quot;maa&quot;, &quot;huh&quot;, &quot;tou&quot;, &quot;kes&quot;, &quot;hei&quot;, &quot;elo&quot;, &quot;syy&quot;,&quot;lok&quot;, &quot;mer&quot;, &quot;jou&quot; };void init(){ for (int i = 0; i &lt; 13; i++) gewei[a[i]] = i; for (int i = 1; i &lt; 13; i++) shiwei[b[i]] = i;}void f1(string str) //&#x8F93;&#x5165;&#x7684;&#x662F;&#x6570;&#x5B57;{ int temp = stoi(str); if (temp / 13 &gt; 0) { cout &lt;&lt; b[temp / 13]; if (temp % 13) cout &lt;&lt; &apos; &apos; &lt;&lt; a[temp % 13]; } else cout &lt;&lt; a[temp % 13];}void f2(string str){ if (str.length() == 4) cout &lt;&lt; &quot;0&quot;; else if (str.length() == 3) { if (gewei.count(str)) cout &lt;&lt; gewei[str]; if (shiwei.count(str)) cout &lt;&lt; shiwei[str]* 13; } else { string s1 = str.substr(0, 3), s2 = str.substr(4, 3); int temp = shiwei[s1] * 13 + gewei[s2]; cout &lt;&lt; temp; }}void solution(){ init(); int N,temp; cin &gt;&gt; N; getchar(); string num; for (int i = 0; i &lt; N; i++) { getline(cin, num); if (isdigit(num[0])) //&#x662F;&#x4E2A;&#x6570;&#x5B57; f1(num); else f2(num); cout &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213Sample Input:4295elo novtamSample Output:hel marmay11513]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>C++ STL</tag>
        <tag>字符串处理</tag>
        <tag>Map</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1097 Deduplication on a Linked List (25)]]></title>
    <url>%2F%2Fposts%2Fb2a66fb6%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5220;&#x9664;&#x94FE;&#x8868;&#x4E0A;&#x7684;&#x91CD;&#x590D;&#x6570;&#x636E;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x5E26;&#x6709;&#x6574;&#x6570;&#x952E;&#x503C;&#x7684;&#x5355;&#x94FE;&#x8868;L&#xFF0C;&#x8981;&#x6C42;&#x5220;&#x9664;&#x90A3;&#x4E9B;&#x952E;&#x503C;&#x7684;&#x7EDD;&#x5BF9;&#x503C;&#x91CD;&#x590D;&#x7684;&#x8282;&#x70B9;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x503C;K&#xFF0C;&#x4EC5;&#x4FDD;&#x7559;&#x8282;&#x70B9;&#x7684;&#x952E;&#x7684;&#x503C;&#x6216;&#x7EDD;&#x5BF9;&#x503C;&#x7B49;&#x4E8E;K&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002;&#x540C;&#x65F6;&#xFF0C;&#x6240;&#x6709;&#x5DF2;&#x5220;&#x9664;&#x7684;&#x8282;&#x70B9;&#x5FC5;&#x987B;&#x4FDD;&#x5B58;&#x5728;&#x5355;&#x72EC;&#x7684;&#x5217;&#x8868;&#x4E2D;&#x3002;&#x4F8B;&#x5982;&#xFF0C;&#x5982;&#x679C;L&#x4E3A;21&#x2192;-15&#x2192;-15&#x2192;-7&#x2192;15&#xFF0C;&#x5219;&#x5FC5;&#x987B;&#x8F93;&#x51FA;21&#x2192;-15&#x2192;-7&#xFF0C;&#x5E76;&#x5220;&#x9664;&#x94FE;&#x8868;-15&#x2192;15&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF1A;&#x7B2C;&#x4E00;&#x884C;&#x4E2D;&#x5206;&#x522B;&#x662F;&#xFF1A;&#x7B2C;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x6B63;&#x6574;&#x6570;N&#xFF08;&lt;=105&#xFF09;&#x8868;&#x793A;&#x8282;&#x70B9;&#x7684;&#x603B;&#x6570;&#x3002;&#x8282;&#x70B9;&#x7684;&#x5730;&#x5740;&#x662F;5&#x4F4D;&#x975E;&#x8D1F;&#x6574;&#x6570;&#xFF0C;NULL&#x7531;-1&#x8868;&#x793A;&#x3002; &#x7136;&#x540E;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x4EE5;&#x5982;&#x4E0B;&#x683C;&#x5F0F;&#x63CF;&#x8FF0;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#xFF1A; &#x5730;&#x5740; &#x952E;&#x503C; &#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9; &#x5176;&#x4E2D;&#x952E;&#x503C;&#x4E3A;&#x7EDD;&#x5BF9;&#x503C;&#x4E0D;&#x8D85;&#x8FC7;104&#x7684;&#x6574;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x9996;&#x5148;&#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x94FE;&#x8868;&#xFF0C;&#x7136;&#x540E;&#x8F93;&#x51FA;&#x5220;&#x9664;&#x7684;&#x94FE;&#x8868;&#x3002;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5360;&#x7528;&#xFF0C;&#x5E76;&#x4EE5;&#x4E0E;&#x8F93;&#x5165;&#x4E2D;&#x76F8;&#x540C;&#x7684;&#x683C;&#x5F0F;&#x6253;&#x5370;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8003;&#x5BDF;&#x7528;&#x7A7A;&#x95F4;&#x6362;&#x65F6;&#x95F4;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;cstdio&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ int key; int next; int id;}node;node saveLink[100001],deleLink[100001],inputLink[100001];bool flag[10001] = { 0 };int N, addr, first;void solution(){ cin &gt;&gt; first &gt;&gt; N; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; addr; cin &gt;&gt; inputLink[addr].key &gt;&gt; inputLink[addr].next; inputLink[addr].id = addr; } int save=0,dele=0; for (int i = first; i!=-1; i=inputLink[i].next) { if (!flag[abs(inputLink[i].key)]) { saveLink[save++] = inputLink[i]; flag[abs(inputLink[i].key)] = true; } else { deleLink[dele++] = inputLink[i]; } } for (int i = 0; i &lt; save-1; i++) { printf(&quot;%05d %d %05d\n&quot;, saveLink[i].id, saveLink[i].key, saveLink[i + 1].id); } printf(&quot;%05d %d -1\n&quot;, saveLink[save - 1].id, saveLink[save - 1].key); for (int i = 0; i &lt; dele-1; i++) { printf(&quot;%05d %d %05d\n&quot;, deleLink[i].id, deleLink[i].key, deleLink[i + 1].id); } if(dele&gt;0) printf(&quot;%05d %d -1\n&quot;, deleLink[dele - 1].id, deleLink[dele - 1].key);}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415Sample Input:00100 599999 -7 8765423854 -15 0000087654 15 -100000 -15 9999900100 21 23854Sample Output:00100 21 2385423854 -15 9999999999 -7 -100000 -15 8765487654 15 -1]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1096 Consecutive Factors (20)]]></title>
    <url>%2F%2Fposts%2F1596ce8c%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x8FDE;&#x7EED;&#x7684;&#x56E0;&#x6570;&#x5728;&#x6B63;&#x6574;&#x6570;N&#x7684;&#x6240;&#x6709;&#x56E0;&#x5B50;&#x4E2D;&#xFF0C;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x51E0;&#x4E2A;&#x8FDE;&#x7EED;&#x7684;&#x6570;&#x5B57;&#x3002;&#x4F8B;&#x5982;&#xFF0C;630&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;356*7&#xFF0C;&#x5176;&#x4E2D;5,6,7&#x662F;&#x4E09;&#x4E2A;&#x8FDE;&#x7EED;&#x7684;&#x6570;&#x5B57;&#x3002;&#x73B0;&#x5728;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x6C42;&#x8FD9;&#x4E2A;&#x6811;&#x7684;&#x8FDE;&#x7EED;&#x56E0;&#x5B50;&#x7684;&#x6700;&#x5927;&#x6570;&#x91CF;&#xFF0C;&#x5E76;&#x5217;&#x51FA;&#x8FDE;&#x7EED;&#x56E0;&#x5B50;&#x7684;&#x6700;&#x5C0F;&#x5E8F;&#x5217;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x7ED9;&#x51FA;&#x6B63;&#x6574;&#x6570;N&#xFF08;1&lt;N&lt;231&#xFF09;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x6253;&#x5370;&#x6700;&#x5927;&#x7684;&#x8FDE;&#x7EED;&#x56E0;&#x5B50;&#x6570;&#x3002;&#x7136;&#x540E;&#x5728;&#x7B2C;&#x4E8C;&#x884C;&#x4E2D;&#xFF0C;&#x4EE5;&#x201C;&#x56E0;&#x5B50;1*&#x56E0;&#x5B50;2*&#x2026;..*&#x56E0;&#x5B50;k&#x201D;&#x7684;&#x683C;&#x5F0F;&#x8F93;&#x51FA;&#x8FDE;&#x7EED;&#x56E0;&#x5B50;&#x7684;&#x6700;&#x5C0F;&#x5E8F;&#x5217;&#xFF0C;&#x5176;&#x4E2D;&#x56E0;&#x5B50;&#x6309;&#x9012;&#x589E;&#x987A;&#x5E8F;&#x7ED9;&#x51FA;&#xFF0C;1&#x4E3A;&#x4E0D;&#x5305;&#x542B;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x5982;&#x679C;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x56E0;&#x5B50;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x6570;&#x53EA;&#x80FD;&#x4E3A;1&#x6216;&#x8005;&#x8D28;&#x6570;&#x3002;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x4E3B;&#x8981;&#x53BB;&#x8BA1;&#x7B97;&#x4E24;&#x4E2A;&#x53CA;&#x4EE5;&#x4E0A;&#x56E0;&#x6570;&#x7684;&#x60C5;&#x51B5;&#x3002; &#x5728;&#x6709;&#x4E24;&#x4E2A;&#x53CA;&#x4EE5;&#x4E0A;&#x7684;&#x6570;&#x8FDE;&#x4E58;&#x4E2D;&#xFF0C;&#x56E0;&#x6570;&#x7684;&#x6700;&#x5927;&#x4E0A;&#x9650;&#x4E3A;sqrt(N)&#xFF0C;&#x5373;N&#x7684;&#x5E73;&#x65B9;&#x6839;&#x3002; &#x56E0;&#x6B64;&#x601D;&#x8DEF;&#x5C31;&#x662F;&#xFF0C;&#x4E0D;&#x65AD;&#x6784;&#x9020;&#x8FDE;&#x4E58;&#xFF0C;&#x770B;&#x8FDE;&#x4E58;&#x7684;&#x79EF;&#x662F;&#x5426;&#x662F;N&#x7684;&#x56E0;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x662F;&#xFF0C;&#x5219;&#x770B;&#x8FD9;&#x90E8;&#x5206;&#x8FDE;&#x4E58;&#x7684;&#x6570;&#x7684;&#x4E2A;&#x6570;&#x662F;&#x5426;&#x6BD4;&#x5DF2;&#x8BB0;&#x5F55;&#x7684;&#x591A;&#x3002; &#x7528;&#x53D8;&#x91CF;first&#x8BB0;&#x5F55;&#x8FDE;&#x4E58;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x628A;&#x5B83;&#x8D4B;&#x521D;&#x503C;&#x4E3A;0&#xFF0C;&#x5982;&#x679C;&#x5728;&#x5BFB;&#x627E;N&#x7684;&#x56E0;&#x6570;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;first&#x6CA1;&#x6709;&#x6539;&#x53D8;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x8868;&#x660E;N&#x662F;1&#x6216;&#x8005;&#x662F;&#x4E00;&#x4E2A;&#x8D28;&#x6570;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;cmath&gt;#pragma warning(disable:4996)using namespace std;long int num;void solution(){ cin &gt;&gt; num; long int temp = 1; int first = 0, len = 0, maxn = sqrt(num); for (int i = 2; i &lt;= maxn; i++) { int j, temp = 1; for (j= i;j&lt;=maxn; j++) { temp *= j; if (num%temp != 0)break; } if (j - i &gt; len) { len = j - i; first = i; } } if (first==0)cout &lt;&lt; 1 &lt;&lt; endl &lt;&lt; num; //&#x6CA1;&#x6709;&#x627E;&#x5230; else { cout &lt;&lt; len &lt;&lt; endl; for (int i = 0; i &lt; len; i++) { cout &lt;&lt; first + i; if (i != len - 1)cout &lt;&lt; &apos;*&apos;; } }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567Sample Input:630Sample Output:35*6*7]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>逻辑</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1094 The Largest Generation (25)]]></title>
    <url>%2F%2Fposts%2Fba347fc6%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x4EBA;&#x53E3;&#x6700;&#x591A;&#x7684;&#x4E00;&#x4EE3;&#x65CF;&#x7684;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x901A;&#x5E38;&#x7531;&#x8C31;&#x7CFB;&#x6811;&#x6765;&#x5448;&#x73B0;&#xFF0C;&#x5176;&#x4E2D;&#x540C;&#x4E00;&#x7EA7;&#x522B;&#x4E0A;&#x7684;&#x6240;&#x6709;&#x7684;&#x8282;&#x70B9;&#x5C5E;&#x4E8E;&#x540C;&#x4E00;&#x4EE3;&#x3002;&#x8981;&#x6C42;&#x627E;&#x5230;&#x4EBA;&#x53E3;&#x6700;&#x591A;&#x7684;&#x4E00;&#x4EE3;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x4EE5;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;N(&lt;100)&#x5F00;&#x59CB;&#xFF0C;&#x5B83;&#x662F;&#x6811;&#x4E2D;&#x5BB6;&#x5EAD;&#x6210;&#x5458;&#x7684;&#x603B;&#x6570;&#xFF08;&#x56E0;&#x6B64;&#x5047;&#x8BBE;&#x6240;&#x6709;&#x6210;&#x5458;&#x7684;&#x7F16;&#x53F7;&#x4ECE;01~N&#xFF09;&#x3002;M&#xFF08;&lt;N&#xFF09;&#x662F;&#x8FD9;&#x4E2A;&#x65CF;&#x4E2D;&#xFF0C;&#x6709;&#x5B69;&#x5B50;&#x7684;&#x6210;&#x5458;&#x7684;&#x6570;&#x91CF;&#x3002;&#x7136;&#x540E;&#x662F;M&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x5305;&#x542B;&#x4EE5;&#x4E0B;&#x683C;&#x5F0F;&#x7684;&#x6210;&#x5458;&#x4FE1;&#x606F;&#xFF1A; ID K ID1 ID2&#x2026;&#x2026;IDk &#x5176;&#x4E2D;ID&#x662F;&#x4EE3;&#x8868;&#x65CF;&#x6210;&#x5458;&#x7684;&#x4E24;&#x4F4D;&#x6570;&#x5B57;&#xFF0C;K(&gt;0)&#x662F;&#x4ED6;&#x7684;&#x5B69;&#x5B50;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x540E;&#x9762;&#x8DDF;&#x7740;&#x4ED6;&#x5B69;&#x5B50;&#x7684;&#x4E24;&#x4F4D;&#x6570;ID&#xFF0C;&#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x5C06;&#x6839;&#x7684;ID&#x56FA;&#x5B9A;&#x4F4D;01&#xFF0C;&#x4E00;&#x884C;&#x4E2D;&#x6240;&#x6709;&#x6570;&#x5B57;&#x90FD;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x5177;&#x6709;&#x6700;&#x591A;&#x7684;&#x6210;&#x5458;&#x6570;&#x548C;&#x5176;&#x5BF9;&#x5E94;&#x662F;&#x7B2C;&#x51E0;&#x4EE3;&#x3002;&#x4FDD;&#x8BC1;&#x7ED3;&#x679C;&#x662F;&#x552F;&#x4E00;&#x7684;&#xFF0C;&#x6839;&#x662F;&#x7B2C;&#x4E00;&#x4EE3;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;queue&gt;#pragma warning(disable:4996)using namespace std;int N, M;int id, k, temp;queue&lt;int&gt; que;vector&lt;int&gt; level;void solution(){ cin &gt;&gt; N &gt;&gt; M; vector&lt;vector&lt;int&gt;&gt; T; T.resize(N+1); for (int i = 0; i &lt; M; i++) { cin &gt;&gt; id &gt;&gt; k; T[id].resize(k); for (int j = 0; j &lt; k; j++) { cin &gt;&gt; temp; T[id][j] = temp; } } level.resize(N+1); level[1] = 1; que.push(1); while (!que.empty()) { id = que.front(); que.pop(); for (int i = 0; i &lt; T[id].size(); i++) { que.push(T[id][i]); level[T[id][i]] = level[id] + 1; } } vector&lt;int&gt; cnt; cnt.resize(N + 1); for (int i = 1; i &lt;= N; i++) { cnt[level[i]]++; } level = cnt; sort(cnt.begin(), cnt.end()); cout &lt;&lt; cnt[N] &lt;&lt; &apos; &apos;; for (int i = 1; i &lt;= N; i++) { if (level[i] == cnt[N]) { cout &lt;&lt; i; break; } }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516171819Sample Input:23 1321 1 2301 4 03 02 04 0503 3 06 07 0806 2 12 1313 1 2108 2 15 1602 2 09 1011 2 19 2017 1 2205 1 1107 1 1409 1 1710 1 18Sample Output:9 4]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>层次遍历</tag>
        <tag>树的遍历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1093 Count PAT’s (25)]]></title>
    <url>%2F%2Fposts%2Fcc8cf89e%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x8BA1;&#x7B97;&#x6709;&#x591A;&#x5C11;&#x4E2A;PAT&#x5B57;&#x7B26;&#x4E32;APPAPT&#x5305;&#x62EC;&#x4E24;&#x4E2A;PAT&#x4F5C;&#x4E3A;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x7B2C;&#x4E00;&#x4E2A;&#x7531;&#x7B2C;2&#x4E2A;&#xFF0C;&#x7B2C;4&#x4E2A;&#xFF0C;&#x7B2C;6&#x4E2A;&#x5B57;&#x7B26;&#x7EC4;&#x6210;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x7531;&#x7B2C;3&#x4E2A;&#xFF0C;&#x7B2C;4&#x4E2A;&#xFF0C;&#x7B2C;6&#x4E2A;&#x5B57;&#x7B26;&#x7EC4;&#x6210;&#x3002; &#x73B0;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6C42;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5305;&#x542B;&#x7684;PAT&#x7684;&#x6570;&#x91CF;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x7ED9;&#x51FA;&#x4E0D;&#x8D85;&#x8FC7;105 &#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4EC5;&#x5305;&#x62EC;P&#x3001;A&#x548C;T&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x5305;&#x62EC;&#x7684;PAT&#x7684;&#x6570;&#x91CF;&#x3002;&#x7531;&#x4E8E;&#x7ED3;&#x679C;&#x53EF;&#x80FD;&#x662F;&#x4E00;&#x4E2A;&#x5DE8;&#x5927;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x8F93;&#x51FA;&#x5176;&#x5BF9;1000000007&#x53D6;&#x6A21;&#x7684;&#x7ED3;&#x679C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4F7F;&#x7528;&#x4E58;&#x6CD5;&#x539F;&#x7406;&#x53BB;&#x505A;&#x3002;&#x6838;&#x5FC3;&#x601D;&#x60F3;&#x662F;&#xFF1A;&#x5BF9;&#x4E8E;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x201C;A&#x201D;&#xFF0C;&#x8BA1;&#x7B97;&#x5176;&#x524D;&#x9762;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x201C;P&#x201D;&#xFF0C;&#x8BA1;&#x7B97;&#x5176;&#x540E;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x201C;T&#x201D;&#x3002;&#x7136;&#x540E;&#x5C06;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x76F8;&#x4E58;&#xFF0C;&#x7136;&#x540E;&#x76F8;&#x52A0;&#x3002; &#x9996;&#x5148;&#x8BA1;&#x7B97;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x201C;T&#x201D;&#x3002; &#x4ECE;&#x5B57;&#x7B26;&#x4E32;&#x5F00;&#x59CB;&#xFF0C;&#x8BA1;&#x7B97;&#x9047;&#x5230;&#x591A;&#x5C11;&#x4E2A;&#x4E2A;&#x201C;P&#x201D;&#xFF0C;&#x8868;&#x793A;&#x201C;A&#x201D;&#x524D;&#x9762;&#x7684;&#x201C;P&#x201D;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x6BCF;&#x9047;&#x5230;&#x4E00;&#x4E2A;&#x201C;T&#x201D;&#xFF0C;&#x5C31;&#x4ECE;&#xFF08;1&#xFF09;&#x4E2D;&#x7684;&#x8BA1;&#x6570;&#x503C;&#x4E2D;&#x51CF;1&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x662F;&#x201C;A&#x201D;&#x4E4B;&#x540E;&#x201C;T&#x201D;&#x7684;&#x4E2A;&#x6570;&#x3002; &#x5F53;&#x9047;&#x5230;&#x4E00;&#x4E2A;&#x201C;A&#x201D;&#x65F6;&#xFF0C;&#x5C06;&#x5176;&#x524D;&#x9762;&#x9047;&#x5230;&#x7684;&#x201C;P&#x201D;&#x7684;&#x4E2A;&#x6570;&#x4E0E;&#x5176;&#x4E4B;&#x540E;&#x201C;T&#x201D;&#x7684;&#x4E2A;&#x6570;&#x76F8;&#x4E58;&#xFF0C;&#x7136;&#x540E;&#x7D2F;&#x52A0;&#x3002;&#x7ED3;&#x679C;&#x5373;&#x4E3A;&#x6240;&#x6C42;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;string str;long int res = 0;int P = 0, A = 0, T = 0; //&#x8BA1;&#x6570;&#x8FD9;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x6709;&#x591A;&#x5C11;&#x4E2A;PATvoid solution(){ cin &gt;&gt; str; for (int i = 0; i &lt; str.size(); i++) { if (str[i] == &apos;T&apos;) T++; } for (int i = 0; i &lt; str.size(); i++) { if (str[i] == &apos;P&apos;) P++; if (str[i] == &apos;T&apos;) T--; if (str[i] == &apos;A&apos;)res += P*T; } cout &lt;&lt; res % 1000000007;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456Sample Input:APPAPTSample Output:2]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>乘法原理</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1092 To Buy or Not to Buy (20)]]></title>
    <url>%2F%2Fposts%2Fbb8bc808%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x4E70;&#x8FD8;&#x662F;&#x4E0D;&#x4E70;Eva&#x60F3;&#x7528;&#x4ED6;&#x6700;&#x559C;&#x6B22;&#x7684;&#x989C;&#x8272;&#x5236;&#x4F5C;&#x4E00;&#x4E32;&#x73E0;&#x5B50;&#xFF0C;&#x4ED6;&#x53BB;&#x4E00;&#x5BB6;&#x5E97;&#x4E70;&#x3002;&#x5E97;&#x91CC;&#x9762;&#x6709;&#x5F88;&#x591A;&#x4E94;&#x989C;&#x516D;&#x8272;&#x7684;&#x73E0;&#x5B50;&#x4E32;&#x3002;&#x7136;&#x800C;&#xFF0C;&#x5546;&#x5E97;&#x7684;&#x6240;&#x6709;&#x8005;&#x53EA;&#x5356;&#x6574;&#x4E2A;&#x4E32;&#xFF0C;&#x4E0D;&#x96F6;&#x5356;&#xFF0C;&#x56E0;&#x6B64;&#xFF0C;Eva&#x5FC5;&#x987B;&#x68C0;&#x67E5;&#x5356;&#x7684;&#x4E32;&#x4E2D;&#x662F;&#x5426;&#x5305;&#x542B;&#x4E86;&#x4ED6;&#x9700;&#x8981;&#x7684;&#x6240;&#x6709;&#x7684;&#x73E0;&#x5B50;&#x3002;&#x4ED6;&#x73B0;&#x5728;&#x6765;&#x627E;&#x4F60;&#x5E2E;&#x5FD9;&#xFF1A;&#x5982;&#x679C;&#x201C;&#x5305;&#x542B;&#x4E86;&#x6240;&#x6709;&#x8981;&#x4E70;&#x7684;&#x73E0;&#x5B50;&#x201D;&#xFF0C;&#x5C31;&#x8981;&#x544A;&#x8BC9;&#x4ED6;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x96F6;&#x5356;&#xFF0C;&#x591A;&#x4E70;&#x4E86;&#x591A;&#x5C11;&#x4E2A;&#x73E0;&#x5B50;&#xFF0C;&#x5982;&#x679C;&#x201C;&#x6CA1;&#x6709;&#x5305;&#x542B;&#x6240;&#x6709;&#x60F3;&#x4E70;&#x7684;&#x73E0;&#x5B50;&#x201D;&#xFF0C;&#x5C31;&#x8981;&#x544A;&#x8BC9;&#x4ED6;&#x7F3A;&#x5C11;&#x7684;&#x73E0;&#x5B50;&#x7684;&#x6570;&#x91CF;&#x3002; &#x4E3A;&#x4E86;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x4F7F;&#x7528;&#x8303;&#x56F4;[0-9]&#x3001;[a-z]&#x3001;[A-Z]&#x4E2D;&#x7684;&#x5B57;&#x7B26;&#x6765;&#x8868;&#x793A;&#x989C;&#x8272;&#xFF0C;&#x4F8B;&#x5982;&#xFF0C;&#x4E0B;&#x56FE;&#x4E2D;&#x7684;&#x7B2C;&#x4E09;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x662F;Eva&#x60F3;&#x8981;&#x7684;&#xFF0C;&#x7136;&#x540E;&#x53EA;&#x9700;&#x8981;&#x7B2C;&#x4E00;&#x6839;&#x73E0;&#x5B50;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5305;&#x542B;&#x4E86;&#x6240;&#x6709;&#x5FC5;&#x8981;&#x7684;&#x73E0;&#x5B50;&#xFF0C;&#x4F46;&#x662F;&#x591A;&#x4E86;8&#x4E2A;&#x989D;&#x5916;&#x7684;&#x73E0;&#x5B50;&#x3002;&#x7136;&#x800C;&#x7B2C;&#x4E8C;&#x4E2A;&#x662F;&#x4E0D;&#x53EF;&#x4EE5;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x9ED1;&#x73E0;&#x5B50;&#x548C;&#x5C11;&#x4E00;&#x4E2A;&#x7EA2;&#x8272;&#x7684;&#x73E0;&#x5B50;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x5206;&#x4E24;&#x884C;&#x7ED9;&#x51FA;&#x4E0D;&#x8D85;&#x8FC7;1000&#x4E2A;&#x73E0;&#x5B50;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x5E97;&#x4E3B;&#x7684;&#x548C;Eva&#x60F3;&#x8981;&#x7684;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x8BF7;&#x5C06;&#x7B54;&#x6848;&#x8F93;&#x51FA;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x7B54;&#x6848;&#x662F;&#x201C;&#x662F;&#x201D;&#xFF0C;&#x90A3;&#x4E48;&#x8FD8;&#x8981;&#x8F93;&#x51FA;Eva&#x989D;&#x5916;&#x8D2D;&#x4E70;&#x7684;&#x73E0;&#x5B50;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x5982;&#x679C;&#x7B54;&#x6848;&#x662F;&#x201C;&#x5426;&#x201D;&#xFF0C;&#x90A3;&#x4E48;&#x8F93;&#x51FA;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x7F3A;&#x5C11;&#x7684;&#x73E0;&#x5B50;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x7B54;&#x6848;&#x548C;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x5FC5;&#x987B;&#x95F4;&#x9694;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4F7F;&#x7528;Hash&#x6563;&#x5217;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334#include&lt;iostream&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;int res[256] = { 0 };string a, b;int cnt = 0;void solution(){ cin &gt;&gt; a &gt;&gt; b; for (int i = 0; i &lt; a.size(); i++) res[a[i]]++; for (int i = 0; i &lt; b.size(); i++) { if (res[b[i]] &gt; 0) res[b[i]]--; else cnt++; } if (cnt == 0) cout &lt;&lt; &quot;Yes &quot; &lt;&lt; a.size() - b.size(); else cout &lt;&lt; &quot;No &quot; &lt;&lt; cnt;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011121314Sample Input 1:ppRYYGrrYBR2258YrR8RrYSample Output 1:Yes 8Sample Input 2:ppRYYGrrYB225YrR8RrYSample Output 1:No 2]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>字符串</tag>
        <tag>Hash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1088 Rational Arithmetic (20)]]></title>
    <url>%2F%2Fposts%2Ffea59011%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6709;&#x7406;&#x6570;&#x7684;&#x8FD0;&#x7B97; &#x7ED9;&#x5B9A;&#x4E24;&#x4E2A;&#x6709;&#x7406;&#x6570;&#xFF0C;&#x8981;&#x6C42;&#x5B9E;&#x73B0;&#x5B83;&#x4EEC;&#x7684;&#x57FA;&#x672C;&#x7B97;&#x6570;&#x8FD0;&#x7B97;&#xFF0C;&#x5373;&#x8BA1;&#x7B97;&#x5B83;&#x4EEC;&#x7684;&#x548C;&#xFF0C;&#x5DEE;&#xFF0C;&#x4E58;&#x79EF;&#xFF0C;&#x5546;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x7ED9;&#x51FA;&#x683C;&#x5F0F;&#x4E3A;&#x201D;a1/b1 a2/b2&#x201D;&#x683C;&#x5F0F;&#x7684;&#x4E24;&#x4E2A;&#x6709;&#x7406;&#x6570;&#x3002;&#x5206;&#x5B50;&#x548C;&#x5206;&#x6BCD;&#x90FD;&#x5728;long int&#x7684;&#x8303;&#x56F4;&#x5185;&#x3002;&#x5982;&#x679C;&#x6709;&#x8D1F;&#x53F7;&#xFF0C;&#x5219;&#x8D1F;&#x53F7;&#x51FA;&#x73B0;&#x4E14;&#x4EC5;&#x51FA;&#x73B0;&#x5728;&#x5206;&#x5B50;&#x524D;&#x9762;&#x3002;&#x5206;&#x6BCD;&#x4FDD;&#x8BC1;&#x4E3A;&#x975E;&#x96F6;&#x6570;&#x5B57;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5206;&#x522B;&#x5728;4&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x4E24;&#x4E2A;&#x6709;&#x7406;&#x6570;&#x7684;&#x548C;&#xFF0C;&#x5DEE;&#xFF0C;&#x4E58;&#x79EF;&#xFF0C;&#x5546;&#x3002;&#x6BCF;&#x884C;&#x7684;&#x683C;&#x5F0F;&#x4E3A;&#x201C;number1 operator number2 = result&#x201D;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x6709;&#x7406;&#x6570;&#x4F18;&#x5148;&#x5316;&#x6210;&#x5E26;&#x5206;&#x6570;&#x7684;&#x5F62;&#x5F0F;&#x3002;&#x5982;&#x679C;&#x6570;&#x5B57;&#x4E3A;&#x8D1F;&#x6570;&#xFF0C;&#x5219;&#x5FC5;&#x987B;&#x5C06;&#x5176;&#x5305;&#x542B;&#x5728;&#x4E00;&#x5BF9;&#x62EC;&#x53F7;&#x4E2D;&#x3002;&#x5982;&#x679C;&#x9664;&#x6CD5;&#x4E2D;&#x7684;&#x5206;&#x6BCD;&#x4E3A;0&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x201C;Inf&#x201D;&#x4F5C;&#x4E3A;&#x7ED3;&#x679C;&#x3002;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x8F93;&#x51FA;&#x7684;&#x6574;&#x6570;&#x90FD;&#x5728;long int&#x7684;&#x8303;&#x56F4;&#x5185;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x57FA;&#x7840;&#x9898;&#xFF0C;&#x6309;&#x7167;&#x56DB;&#x5219;&#x8FD0;&#x7B97;&#x7684;&#x89C4;&#x5219;&#x6765;&#x3002; Tips&#x76F8;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;PAT-A-1081&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ long long int member; //&#x5206;&#x5B50;&#x90E8;&#x5206; long long int deno; //&#x5206;&#x6BCD;&#x90E8;&#x5206; long long int inte; //&#x6574;&#x6570;&#x90E8;&#x5206;}fraction;fraction num[2];fraction res[4];long long int gcd(long long int a, long long int b) //&#x6700;&#x5927;&#x516C;&#x7EA6;&#x6570;,abs&#x6C42;&#x7EDD;&#x5BF9;&#x503C;{ return b == 0 ? abs(a) : gcd(b, a%b);}void shuchu(fraction a){ if (a.inte &lt; 0 || a.member &lt; 0) cout &lt;&lt; &apos;(&apos;; if (a.inte!=0) { cout &lt;&lt; a.inte; if (a.member!=0) { cout &lt;&lt; &apos; &apos;; } } if (a.member != 0) { cout &lt;&lt; a.member &lt;&lt; &apos;/&apos; &lt;&lt; a.deno; } else if (a.inte == 0) cout &lt;&lt; &apos;0&apos;; if (a.inte &lt; 0 || a.member &lt; 0) cout &lt;&lt; &apos;)&apos;;}void jiafenshu(fraction &amp;a){ long long int gcd_num = gcd(a.member, a.deno); a.deno /= gcd_num; a.member /= gcd_num;}void daifenshu(fraction &amp;a){ a.inte = a.member / a.deno; a.member -= (a.deno*a.inte); if (a.inte &lt; 0) a.member = abs(a.member);}void solution(){ for (int i = 0; i &lt; 2; i++) { scanf(&quot;%lld/%lld&quot;, &amp;num[i].member, &amp;num[i].deno); jiafenshu(num[i]); } //+ res[0].member = num[1].member*num[0].deno + num[1].deno*num[0].member; res[0].deno = num[1].deno*num[0].deno; //- res[1].member = num[1].deno*num[0].member - num[1].member*num[0].deno; res[1].deno = num[1].deno*num[0].deno; //* res[2].member = num[1].member*num[0].member; res[2].deno = num[1].deno*num[0].deno; // / bool flag = false; if (num[1].member == 0 &amp;&amp; num[1].inte == 0) flag = true; if (!flag) { res[3].member = num[0].member*num[1].deno; res[3].deno = num[0].deno*num[1].member; if (res[3].deno*res[3].member &lt; 0) { res[3].member = 0 - abs(res[3].member); res[3].deno = abs(res[3].deno); } } else res[3] = { 0,1,0 }; for (int i = 0; i &lt; 2; i++) { daifenshu(num[i]); } for (int i = 0; i &lt; 4; i++) {//&#x5316;&#x7B80; jiafenshu(res[i]); daifenshu(res[i]); } //&#x8F93;&#x51FA; shuchu(num[0]); cout &lt;&lt; &quot; + &quot;; shuchu(num[1]); cout &lt;&lt; &quot; = &quot;; shuchu(res[0]); cout &lt;&lt; endl; shuchu(num[0]); cout &lt;&lt; &quot; - &quot;; shuchu(num[1]); cout &lt;&lt; &quot; = &quot;; shuchu(res[1]); cout &lt;&lt; endl; shuchu(num[0]); cout &lt;&lt; &quot; * &quot;; shuchu(num[1]); cout &lt;&lt; &quot; = &quot;; shuchu(res[2]); cout &lt;&lt; endl; shuchu(num[0]); cout &lt;&lt; &quot; / &quot;; shuchu(num[1]); cout &lt;&lt; &quot; = &quot;; if (flag) cout &lt;&lt; &quot;Inf&quot;; else shuchu(res[3]);}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789Sample Input 1:2/3 -4/2Sample Output 1:2/3 + (-2) = (-1 1/3)2/3 - (-2) = 2 2/32/3 * (-2) = (-1 1/3)2/3 / (-2) = (-1/3) 123456789Sample Input 2:5/3 0/6Sample Output 2:1 2/3 + 0 = 1 2/31 2/3 - 0 = 1 2/31 2/3 * 0 = 01 2/3 / 0 = Inf]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>分数</tag>
        <tag>四则运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1090 Highest Price in Supply Chain (25)]]></title>
    <url>%2F%2Fposts%2F5585a924%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x4F9B;&#x5E94;&#x94FE;&#x4E2D;&#x7684;&#x6700;&#x9AD8;&#x4EF7;&#x683C;&#x4F9B;&#x5E94;&#x94FE;&#x662F;&#x7531;&#x96F6;&#x552E;&#x5546;&#xFF0C;&#x5206;&#x9500;&#x5546;&#x548C;&#x4F9B;&#x5E94;&#x5546;&#x7EC4;&#x6210;&#x7684;&#x7F51;&#x7EDC;&#xFF0C;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x53C2;&#x4E0E;&#x5176;&#x4E2D;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;&#x4EA7;&#x54C1;&#x4ECE;&#x4F9B;&#x5E94;&#x5546;&#x8F6C;&#x79FB;&#x5230;&#x5BA2;&#x6237;&#x3002; &#x4ECE;&#x4E00;&#x4E2A;&#x6839;&#x4F9B;&#x5E94;&#x5546;&#x5F00;&#x59CB;&#xFF0C;&#x94FE;&#x4E0A;&#x6BCF;&#x4E2A;&#x4EBA;&#x4EE5;&#x4EF7;&#x683C;P&#x4ECE;&#x4E00;&#x4E2A;&#x4F9B;&#x5E94;&#x5546;&#x5904;&#x8D2D;&#x4E70;&#x4EA7;&#x54C1;&#xFF0C;&#x5E76;&#x4EE5;&#x9AD8;&#x4E8E;P&#x7684;r%&#x7684;&#x4EF7;&#x683C;&#x51FA;&#x552E;&#x6216;&#x8005;&#x5206;&#x53D1;&#x7ED9;&#x4ED6;&#x4EEC;&#x3002;&#x5047;&#x8BBE;&#x4F9B;&#x5E94;&#x94FE;&#x4E2D;&#x7684;&#x6BCF;&#x4E2A;&#x6210;&#x5458;&#x6709;&#x4E14;&#x4EC5;&#x6709;&#x4E00;&#x4E2A;&#x4F9B;&#x5E94;&#x5546;&#x3002; &#x73B0;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x4F9B;&#x5E94;&#x94FE;&#xFF0C;&#x6C42;&#x4E00;&#x4E9B;&#x96F6;&#x552E;&#x5546;&#x53EF;&#x4EE5;&#x671F;&#x5F85;&#x7684;&#x6700;&#x9AD8;&#x7684;&#x4EF7;&#x683C;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x62EC;&#x4E09;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF1A;N&#xFF08;&lt;=105&#xFF09;&#x8868;&#x793A;&#x4F9B;&#x5E94;&#x94FE;&#x4E2D;&#x7684;&#x6210;&#x5458;&#x6570;&#xFF08;&#x7F16;&#x53F7;&#x4ECE;0~N-1&#xFF09;&#xFF0C;P&#xFF1A;&#x6839;&#x4F9B;&#x5E94;&#x5546;&#x7ED9;&#x51FA;&#x7684;&#x4EF7;&#x683C;&#xFF0C;r&#xFF1A;&#x6BCF;&#x4E2A;&#x5206;&#x9500;&#x5546;&#x6216;&#x96F6;&#x552E;&#x5546;&#x52A0;&#x4EF7;&#x7684;&#x767E;&#x5206;&#x6BD4;&#x3002; &#x7136;&#x540E;&#x4E0B;&#x4E00;&#x884C;&#x5305;&#x62EC;N&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;Si&#x662F;&#x7B2C;i&#x4E2A;&#x6210;&#x5458;&#x7684;&#x4F9B;&#x5E94;&#x5546;&#x7684;&#x7D22;&#x5F15;&#x3002;&#x6839;&#x4F9B;&#x5E94;&#x5546;&#x7684;Sroot&#x5B9A;&#x4E49;&#x4E3A;-1&#x3002;&#x4E00;&#x884C;&#x4E2D;&#x6240;&#x6709;&#x7684;&#x6570;&#x5B57;&#x90FD;&#x7531;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x7B2C;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x4E00;&#x4E9B;&#x96F6;&#x552E;&#x5546;&#x8FDB;&#x8D27;&#x7684;&#x6700;&#x9AD8;&#x4EF7;&#x683C;&#xFF0C;&#x7CBE;&#x786E;&#x5230;&#x5C0F;&#x6570;&#x70B9;&#x540E;2&#x4F4D;&#xFF0C;&#x4EE5;&#x53CA;&#x8FD9;&#x4E9B;&#x96F6;&#x552E;&#x5546;&#x7684;&#x4E2A;&#x6570;&#x3002;&#x6CE8;&#x610F;&#xFF01;&#xFF0C;&#x662F;&#x96F6;&#x552E;&#x5546;&#x7684;&#x8FDB;&#x8D27;&#x4EF7;&#xFF01; &#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x4FDD;&#x8BC1;&#x4EF7;&#x683C;&#x4E0D;&#x4F1A;&#x8D85;&#x8FC7;1010&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5C42;&#x6B21;&#x904D;&#x5386; Tips&#x7C7B;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;PAT-A-1079&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;queue&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;math.h&gt;//#pragma warning(disable:4996)using namespace std;int N;double P, r;vector&lt;vector&lt;int&gt;&gt;M; //&#x5B58;&#x50A8;&#x6574;&#x4E2A;&#x9500;&#x552E;&#x7F51;&#x7EDC;int level[100011] = { 0 };bool cmp(int a, int b){ return a &gt; b;}void solution(){ cin &gt;&gt; N &gt;&gt; P &gt;&gt; r; int temp; M.resize(N + 1); for (int i = 1; i &lt;= N; i++) { cin &gt;&gt; temp; M[temp + 1].push_back(i); } queue&lt;int&gt; que; que.push(0); while (!que.empty()) { temp = que.front(); que.pop(); for (int i = 0; i &lt; M[temp].size(); i++) { que.push(M[temp][i]); level[M[temp][i]] = level[temp] + 1; } } sort(level, level + N + 1, cmp); temp = level[0]; printf(&quot;%.2f &quot;, P*pow(1 + r / 100, temp - 1)); //cout &lt;&lt; P*pow(1 + r / 100, temp-1) &lt;&lt; &apos; &apos;; int cnt = 0; while (level[cnt]==temp) { cnt++; } cout &lt;&lt; cnt;}int main(){// freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567Sample Input:9 1.80 1.001 5 4 4 -1 4 5 3 6Sample Output:1.85 2]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>层次遍历</tag>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1089 Insert or Merge (25)]]></title>
    <url>%2F%2Fposts%2F354220c1%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x8FD8;&#x662F;&#x5F52;&#x5E76;&#x6392;&#x5E8F; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002; &#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF08;&lt;=100&#xFF09;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x6709;N&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x521D;&#x59CB;&#x72B6;&#x6001;&#x3002;&#x7B2C;&#x4E09;&#x884C;&#x6709;N&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x4E2D;&#x95F4;&#x72B6;&#x6001;&#xFF0C;&#x6C42;&#x4E2D;&#x95F4;&#x72B6;&#x6001;&#x662F;&#x7531;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x5F97;&#x51FA;&#x8FD8;&#x662F;&#x7531;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x5F97;&#x51FA;&#x7684;&#x3002; &#x8F93;&#x51FA;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x201D;Insertion Sort&#x201D; &#x6216;&#x8005; &#x201C;Merge Sort&#x201D; &#x6765;&#x8868;&#x793A;&#x5B83;&#x662F;&#x7531;&#x63D2;&#x5165;&#x6392;&#x5E8F;/&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x5F97;&#x51FA;&#x7684;&#x3002; &#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x51FA;&#x5F53;&#x524D;&#x72B6;&#x6001;&#x7684;&#x4E0B;&#x4E00;&#x4E2A;&#x6392;&#x5E8F;&#x72B6;&#x6001;&#x3002;&#x5373;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x518D;&#x63D2;&#x5165;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x5219;&#x662F;&#x628A;&#x76F8;&#x90BB;&#x4E24;&#x4E2A;&#x5F52;&#x5E76;&#x8D77;&#x6765;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x6709;&#x4E2A;&#x7279;&#x70B9;&#xFF0C;&#x5DF2;&#x7ECF;&#x6392;&#x5E8F;&#x7684;&#x90E8;&#x5206;&#x662F;&#x6309;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#xFF0C;&#x672A;&#x6392;&#x5E8F;&#x7684;&#x90E8;&#x5206;&#xFF0C;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x548C;&#x521D;&#x8BD5;&#x6570;&#x7EC4;&#x4E00;&#x6837;&#x3002; &#x56E0;&#x6B64;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x6765;&#x5224;&#x65AD;&#x3002; Tips&#x6700;&#x540E;&#x6C42;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x7684;&#x65F6;&#x5019;&#x8981;&#x7528;&#x6A21;&#x62DF;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x6765;&#x8BA1;&#x7B97;&#x3002;&#x4F46;&#x662F;&#x771F;&#x6B63;&#x7684;&#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x662F;&#x9012;&#x5F52;&#x5F97;&#x51FA;&#x7684;&#xFF0C;&#x6B64;&#x65F6;&#x662F;&#x5148;&#x6392;&#x5E8F;&#x5DE6;&#x534A;&#x90E8;&#x5206;&#xFF0C;&#x518D;&#x6392;&#x5E8F;&#x53F3;&#x534A;&#x90E8;&#x5206;&#x7684;&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x5F52;&#x5E76;&#x4E0D;&#x662F;&#x8FD9;&#x4E2A;&#x610F;&#x601D;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;math.h&gt;#pragma warning(disable:4996)using namespace std;int N;int num[101], num_sort[101];void solution(){ cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; num[i]; } for (int i = 0; i &lt; N; i++) { cin &gt;&gt; num_sort[i]; } bool isInsert = true; int temp = num_sort[0]; int range; for (int i = 1; i &lt; N; i++) { if (temp &gt; num_sort[i]) { range = i; for (; i &lt; N; i++) { if (num[i] != num_sort[i]) { isInsert = false; break; } } } if(i&lt;N) temp = num_sort[i]; if (isInsert == false) break; } if (isInsert) { cout &lt;&lt; &quot;Insertion Sort&quot; &lt;&lt; endl; sort(num, num + range + 1); } else { cout &lt;&lt; &quot;Merge Sort&quot; &lt;&lt; endl; int range = 1; //&#x901A;&#x8FC7;&#x6A21;&#x62DF;&#x6765;&#x8FDB;&#x884C;&#x5F52;&#x5E76;&#x6392;&#x5E8F; bool flag = true; //&#x7528;&#x4E8E;&#x6807;&#x8BB0;&#x662F;&#x5426;&#x8FBE;&#x5230;&#x5F53;&#x524D;&#x72B6;&#x6001; while (flag) { flag = false; for (int i = 0; i &lt; N; i++) { if (num[i] != num_sort[i]) { flag = true; break; } } range *= 2; for (int i = 0; i &lt; N/range; i++) { sort(num + i*range, num + (i + 1)* range); } sort(num + N / range*range, num + N); } } for (int i = 0; i &lt; N; i++) { cout &lt;&lt; num[i]; if (i != N-1) cout &lt;&lt; &apos; &apos;; }}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415161718Sample Input 1:103 1 2 8 7 5 9 4 6 01 2 3 7 8 5 9 4 6 0Sample Output 1:Insertion Sort1 2 3 5 7 8 9 4 6 0Sample Input 2:103 1 2 8 7 5 9 4 0 61 3 2 8 5 7 4 9 0 6Sample Output 2:Merge Sort1 2 3 8 4 5 7 9 0 6]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>插入排序</tag>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1086 Tree Traversals Again (25)]]></title>
    <url>%2F%2Fposts%2Fc2c1493b%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x91CD;&#x65B0;&#x904D;&#x5386;&#x4E8C;&#x53C9;&#x6811;&#x7528;&#x6808;&#x7684;&#x5F62;&#x5F0F;&#x7ED9;&#x51FA;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x5EFA;&#x7ACB;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x6C42;&#x8FD9;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x540E;&#x5E8F;&#x904D;&#x5386;. &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002; &#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF08;&lt;=30&#xFF09;&#x8868;&#x793A;&#x6811;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x603B;&#x6570;&#xFF08;&#x8282;&#x70B9;&#x4ECE;1~N&#x8FDB;&#x884C;&#x7F16;&#x53F7;&#xFF09;&#x3002;&#x7136;&#x540E;&#x662F;2N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x63CF;&#x8FF0;&#x4E00;&#x79CD;&#x5806;&#x6808;&#x64CD;&#x4F5C;&#xFF0C;&#x6BD4;&#x5982;Push X&#xFF0C;&#x5176;&#x4E2D;X&#x662F;&#x88AB;&#x538B;&#x5165;&#x5806;&#x6808;&#x7684;&#x8282;&#x70B9;&#x7684;&#x7D22;&#x5F15;&#xFF1B;&#x6216;Pop&#xFF0C;&#x8868;&#x793A;&#x4ECE;&#x5806;&#x6808;&#x4E2D;&#x5F39;&#x51FA;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x3002; &#x8F93;&#x51FA;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x76F8;&#x5E94;&#x7684;&#x6811;&#x7684;&#x540E;&#x7EED;&#x904D;&#x5386;&#x5E8F;&#x5217;&#x3002;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; push&#x7684;&#x987A;&#x5E8F;&#x6B63;&#x597D;&#x5BF9;&#x5E94;&#x524D;&#x5E8F;&#x3002; pop&#x51FA;&#x6765;&#x7684;&#x987A;&#x5E8F;&#x6B63;&#x597D;&#x5BF9;&#x5E94;&#x4E2D;&#x5E8F;&#x3002; Tips &#x7279;&#x522B;&#x6CE8;&#x610F;&#xFF1A;&#x6570;&#x5B57;&#x53EF;&#x4EE5;&#x6709;&#x91CD;&#x590D;&#x3002;&#x6240;&#x4EE5;&#x8981;&#x52A0;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#x3002; &#x7ECF;&#x8FC7;&#x5B9E;&#x6D4B;&#xFF0C;&#x4E0D;&#x52A0;&#x7D22;&#x5F15;&#x4E5F;&#x80FD;&#x901A;&#x8FC7;PAT&#x7684;&#x6D4B;&#x8BD5;&#xFF0C;&#x4F46;&#x662F;&#x65E0;&#x6CD5;&#x901A;&#x8FC7;&#x725B;&#x5BA2;&#x7F51;&#x7684;&#x6D4B;&#x8BD5;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;int n;string temp;vector&lt;int&gt;pre, mid,value;bool flag = false;void post(int root, int start, int end){ if (start &gt; end) return; int i = start; while (i&lt;end&amp;&amp;mid[i]!=pre[root]) { i++; } post(root + 1, start, i - 1); post(root + 1 + i - start, i + 1, end); if (flag) { cout &lt;&lt; &apos; &apos;; } cout &lt;&lt; value[mid[i]]; flag = true;}void solution(){ cin &gt;&gt; n; int num, top = 0; int stack[31] = {0}; int c1 = 0; for (int i = 0; i &lt; n*2; i++) { cin &gt;&gt; temp; if (temp==&quot;Push&quot;) { cin &gt;&gt; num; value.push_back(num); pre.push_back(c1); stack[top++]=c1++; } else if (temp==&quot;Pop&quot;) { mid.push_back(stack[--top]); } } post(0, 0, n - 1);}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415161718Sample Input:6Push 1Push 2Push 3PopPopPush 4PopPopPush 5Push 6PopPopSample Output:3 4 2 6 5 1]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>二叉树</tag>
        <tag>前序遍历</tag>
        <tag>中序遍历</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1085 Perfect Sequence (25)]]></title>
    <url>%2F%2Fposts%2F6fa331c%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5B8C;&#x7F8E;&#x7684;&#x5E8F;&#x5217;&#x3002;&#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#x5E8F;&#x5217;&#x548C;&#x53E6;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;p&#xFF0C;&#x5982;&#x679C;M&lt;=m*p&#xFF0C;&#x5219;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x662F;&#x4E00;&#x4E2A;&#x5B8C;&#x7F8E;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x5176;&#x4E2D;M&#x548C;m&#x5206;&#x522B;&#x662F;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x4E2D;&#x7684;&#x6700;&#x5927;&#x548C;&#x6700;&#x5C0F;&#x7684;&#x6570;&#x5B57;&#x3002; &#x73B0;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;&#x548C;&#x4E00;&#x4E2A;&#x53C2;&#x6570;p&#xFF0C;&#x8981;&#x6C42;&#x4ECE;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x4E2D;&#x627E;&#x5230;&#x5C3D;&#x53EF;&#x80FD;&#x591A;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x4EE5;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x5B8C;&#x7F8E;&#x7684;&#x5E8F;&#x5217;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x90FD;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x62EC;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#x548C;p&#xFF0C;&#x5176;&#x4E2D;N&lt;=10^5&#xFF0C;&#x8868;&#x793A;&#x5E8F;&#x5217;&#x4E2D;&#x6574;&#x6570;&#x7684;&#x6570;&#x91CF;&#xFF0C;p(&lt;=10^9)&#x662F;&#x53C2;&#x6570;&#x3002;&#x7B2C;&#x4E8C;&#x884C;&#x6709;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x6BCF;&#x4E2A;&#x4E0D;&#x5927;&#x4E8E;10^9&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x5728;&#x4E00;&#x4E2A;&#x5B8C;&#x7F8E;&#x5E8F;&#x5217;&#x4E2D;&#xFF0C;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x6574;&#x6570;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4E8C;&#x5206;&#x6CD5;&#x67E5;&#x627E;&#x3002;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x5927;&#x4E8E;&#x6216;&#x7B49;&#x4E8E;m*&#x7684;&#x6700;&#x5C0F;&#x7684;&#x6570;&#x5B57;&#x3002; Tips&#x4F7F;&#x7528;upper_bound()&#x66F4;&#x52A0;&#x7B80;&#x5355;&#x7C97;&#x66B4;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637//&#x4F7F;&#x7528;upper_bound()#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;stdlib.h&gt;#pragma warning(disable:4996)using namespace std;vector&lt;int&gt; list;long int N, p;int res = 0; //num&#x8868;&#x793A;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x6570;void solution(){ cin &gt;&gt; N &gt;&gt; p; list.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; list[i]; } sort(list.begin(), list.end()); long long int temp; for (auto i = list.begin(); i !=list.end(); i++) { res=max((int)(upper_bound(list.begin(), list.end(), *i * p)-i),res); } cout &lt;&lt; res;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//&#x4E8C;&#x5206;&#x641C;&#x7D22;#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;stdlib.h&gt;#pragma warning(disable:4996)using namespace std;vector&lt;int&gt; list;long int N, p;int res = 0; //num&#x8868;&#x793A;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x6570;void solution(){ cin &gt;&gt; N &gt;&gt; p; list.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; list[i]; } sort(list.begin(), list.end()); long long int temp; int front = 0, mid = (front + N - 1) / 2, end = N - 1; for (auto i = 0; i &lt; N; i++) { temp = list[i]*p; while (front&lt;end&amp;&amp;list[mid]!=temp) { if (list[mid] &lt; temp) front = mid + 1; if (list[mid] &gt; temp)end = mid - 1; mid = (front + end) / 2; } while (mid &lt; N&amp;&amp;temp &gt;= list[mid]) mid++; res = max(res, mid - i); } cout &lt;&lt; res;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} 123456789101112131415161718192021222324252627282930313233343536373839404142//&#x66F4;&#x76F4;&#x89C2;&#x7684;&#x601D;&#x8DEF;#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;long int N, p;vector&lt;int&gt; list;void solution(){ cin &gt;&gt; N &gt;&gt; p; list.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; list[i]; } sort(list.begin(), list.end()); int res = 0, temp = 0; for (int i = 0; i &lt; N; i++) { for (int j = i+res; j &lt; N; j++) { if (list[j] &lt;= list[i] * p) { temp = j - i + 1; res = max(res, temp); } else break; } } cout &lt;&lt; res;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567Sample Input:10 82 3 20 4 5 1 6 7 8 9Sample Output:8]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>STL</tag>
        <tag>二分法查找</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1084 Broken Keyboard (20)]]></title>
    <url>%2F%2Fposts%2F1feaae6d%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x574F;&#x6389;&#x7684;&#x952E;&#x76D8;&#x3002;&#x5728;&#x4E00;&#x4E2A;&#x574F;&#x6389;&#x7684;&#x952E;&#x76D8;&#x4E0A;&#xFF0C;&#x6709;&#x4E00;&#x4E9B;&#x952E;&#x574F;&#x4E86;&#xFF0C;&#x6240;&#x4EE5;&#x5F53;&#x4F60;&#x8F93;&#x5165;&#x4E00;&#x4E9B;&#x53E5;&#x5B50;&#x65F6;&#xFF0C;&#x8FD9;&#x4E9B;&#x574F;&#x6389;&#x7684;&#x952E;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x7B26;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5728;&#x5C4F;&#x5E55;&#x4E0A;&#x3002; &#x73B0;&#x5728;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x5E94;&#x8F93;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4E00;&#x4E2A;&#x5B9E;&#x9645;&#x8F93;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6C42;&#x54EA;&#x4E9B;&#x952E;&#x662F;&#x574F;&#x6389;&#x7684;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x539F;&#x59CB;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x662F;&#x5B9E;&#x9645;&#x8F93;&#x5165;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x4E0D;&#x8D85;&#x8FC7;80&#x4E2A;&#x82F1;&#x6587;&#x5B57;&#x6BCD;[A-Z]&#xFF0C;&#x4E0D;&#x533A;&#x5206;&#x5927;&#x5C0F;&#x5199;&#x3002;&#x6570;&#x5B57;[0-9]&#xFF0C;&#x6216;&#x8005;&#x201C;_&#x201D;&#x8868;&#x793A;&#x7A7A;&#x683C;&#xFF0C;&#x786E;&#x4FDD;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x90FD;&#x662F;&#x975E;&#x7A7A;&#x7684;&#x3002; &#x8F93;&#x51FA;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x574F;&#x6389;&#x7684;&#x952E;&#xFF0C;&#x82F1;&#x6587;&#x5B57;&#x6BCD;&#x5FC5;&#x987B;&#x5927;&#x5199;&#xFF0C;&#x6BCF;&#x4E2A;&#x574F;&#x6389;&#x7684;&#x952E;&#x53EA;&#x6253;&#x5370;&#x4E00;&#x6B21;&#x3002;&#x4FDD;&#x8BC1;&#x81F3;&#x5C11;&#x6709;&#x4E00;&#x4E2A;&#x952E;&#x662F;&#x574F;&#x6389;&#x7684;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5168;&#x90E8;&#x8F6C;&#x6362;&#x4E3A;&#x5927;&#x5199;&#x540E;&#xFF0C;&#x4F7F;&#x7528;find&#x51FD;&#x6570;&#x6BD4;&#x8F83;&#xFF0C;&#x7136;&#x540E;&#x5F00;&#x4E2A;&#x6570;&#x7EC4;&#x6807;&#x8BB0;&#x662F;&#x5426;&#x8F93;&#x51FA;&#x8FC7;&#x4E86;&#x3002; Tips12&#x8F6C;&#x6362;&#x4E3A;&#x5927;&#x5199;transform(a.begin(), a.end(),a.begin(), ::toupper); 123456&#x67E5;&#x627E;&#x5B57;&#x6BCD;if (b.find(*i) == string::npos&amp;&amp;key[*i]==false) { cout &lt;&lt; *i; key[*i] = true; } &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;bool key[256] = {0};string a, b;void solution(){ cin &gt;&gt; a; cin &gt;&gt; b; transform(a.begin(), a.end(),a.begin(), ::toupper); transform(b.begin(), b.end(),b.begin(), ::toupper); for (auto i = a.begin(); i != a.end(); i++) { if (b.find(*i) == string::npos&amp;&amp;key[*i]==false) { cout &lt;&lt; *i; key[*i] = true; } }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567Sample Input:7_This_is_a_test_hs_s_a_esSample Output:7TI]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>字符串处理</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1083 List Grades (25)]]></title>
    <url>%2F%2Fposts%2Fd597c9df%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x8F93;&#x51FA;&#x6210;&#x7EE9;&#x5728;&#x7ED9;&#x5B9A;&#x533A;&#x95F4;&#x7684;&#x540C;&#x5B66;&#x4FE1;&#x606F;&#x3002;&#x57FA;&#x7840;&#x9898;&#xFF0C;&#x5C31;&#x662F;&#x4E00;&#x4E2A;cmp&#x51FD;&#x6570;&#x3002; &#x89E3;&#x9898;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;//#pragma warning(disable:4996)using namespace std;typedef struct{ string name; string ID; int g;}student;vector&lt;student&gt; s;int N;bool cmp(student a, student b){ return a.g &gt; b.g;}void solution(){ cin &gt;&gt; N; s.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; s[i].name &gt;&gt; s[i].ID &gt;&gt; s[i].g; } sort(s.begin(), s.end(), cmp); int grade1, grade2; cin &gt;&gt; grade1 &gt;&gt; grade2; bool flag = false; for (auto i = s.begin(); i != s.end(); i++) { if (i-&gt;g&gt;=grade1&amp;&amp;i-&gt;g&lt;=grade2) { cout &lt;&lt; i-&gt;name &lt;&lt; &apos; &apos; &lt;&lt; i-&gt;ID &lt;&lt; endl; flag = true; } } if (!flag) { cout &lt;&lt; &quot;NONE&quot;; }}int main(){// freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution();// system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516171819202122Sample Input 1:4Tom CS000001 59Joe Math990112 89Mike CS991301 100Mary EE990830 9560 100Sample Output 1:Mike CS991301Mary EE990830Joe Math990112Sample Input 2:2Jean AA980920 60Ann CS01 8090 95Sample Output 2:NONE]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1081 Rational Sum (20)]]></title>
    <url>%2F%2Fposts%2F3b99a8f3%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6709;&#x7406;&#x6570;&#x7684;&#x548C;&#x3002; &#x5C0F;&#x5B66;&#x7684;&#x6570;&#x5B66;&#x9898;&#xFF0C;&#x8FD9;&#x6B21;&#x7528;&#x5199;&#x7A0B;&#x5E8F;&#x6765;&#x6C42;&#x89E3;&#x3002; &#x7ED9;&#x5B9A;&#x201C;&#x5206;&#x652F;/&#x5206;&#x6BCD;&#x201D;&#x5F62;&#x5F0F;&#x7684;N&#x4E2A;&#x6709;&#x7406;&#x6570;&#xFF0C;&#x6C42;&#x4ED6;&#x4EEC;&#x7684;&#x603B;&#x548C;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x6587;&#x4EF6;&#x90FD;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x6BCF;&#x79CD;&#x60C5;&#x51B5;&#x90FD;&#x5DF2;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF08;&lt;= 100&#xFF09;&#x5F00;&#x59CB;&#xFF0C;&#x5728;&#x4E0B;&#x4E00;&#x884C;&#xFF0C;&#x6709;N&#x4E2A;&#x6709;&#x7406;&#x6570;&#x3002;&#x4EE5;&#x201C;&#x5206;&#x5B50;/&#x5206;&#x6BCD;&#x201D;&#x7684;&#x5F62;&#x5F0F;&#x7ED9;&#x51FA;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x5206;&#x5B50;&#x548C;&#x5206;&#x6BCD;&#x90FD;&#x5728;long int&#x7684;&#x8303;&#x56F4;&#x5185;&#x3002;&#x5982;&#x679C;&#x6709;&#x8D1F;&#x6570;&#xFF0C;&#x5219;&#x7B26;&#x53F7;&#x5FC5;&#x987B;&#x51FA;&#x73B0;&#x5728;&#x5206;&#x5B50;&#x4E4B;&#x524D;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x8F93;&#x51FA;&#x8FD9;&#x4E9B;&#x6570;&#x7684;&#x603B;&#x548C;&#xFF0C;&#x4EE5;&#x5E26;&#x5206;&#x6570;&#x7684;&#x6700;&#x7B80;&#x5F62;&#x5F0F;&#x7ED9;&#x51FA;&#xFF0C;&#x4E5F;&#x5373;&#xFF0C;&#x201C;&#x6574;&#x6570; &#x5206;&#x5B50;/&#x5206;&#x6BCD;&#x201D;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x5206;&#x5B50;&#x548C;&#x5206;&#x6BCD;&#x6CA1;&#x6709;&#x516C;&#x56E0;&#x5B50;&#x3002;&#x5982;&#x679C;&#x6574;&#x6570;&#x90E8;&#x5206;&#x4E3A;0&#xFF0C;&#x5373;&#x603B;&#x548C;&#x5C0F;&#x4E8E;1&#xFF0C;&#x5C31;&#x53EA;&#x8F93;&#x51FA;&#x5C0F;&#x6570;&#x90E8;&#x5206;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8F97;&#x8F6C;&#x76F8;&#x9664;&#x6CD5;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x8D1F;&#x6570;&#xFF0C;&#x6C42;&#x516C;&#x7EA6;&#x6570;&#x7684;&#x65F6;&#x5019;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x6B63;&#x503C;&#x3002; Tips&#x6C42;&#x7EDD;&#x5BF9;&#x503C;&#x51FD;&#x6570;&#x5728;abs()&#x91CC;&#xFF0C;&#x5934;&#x6587;&#x4EF6;&#x662F;iostream return b == 0 ? abs(a) : gcd(b, a%b); &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ long long int member; //&#x5206;&#x5B50;&#x90E8;&#x5206; long long int deno; //&#x5206;&#x6BCD;&#x90E8;&#x5206; long long int inte; //&#x6574;&#x6570;&#x90E8;&#x5206;}fraction;fraction num;fraction res = {0,1,0};long long int gcd(long long int a, long long int b) //&#x6700;&#x5927;&#x516C;&#x7EA6;&#x6570;,abs&#x6C42;&#x7EDD;&#x5BF9;&#x503C;{ return b == 0 ? abs(a) : gcd(b, a%b);}int N;void solution(){ cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) { scanf(&quot;%lld/%lld&quot;, &amp;num.member,&amp;num.deno); long long int gcd_num = gcd(num.member,num.deno); num.deno /= gcd_num; num.member /= gcd_num; res.member = res.member*num.deno + res.deno*num.member; res.deno = res.deno*num.deno; gcd_num = gcd(res.deno, res.member); res.deno /= gcd_num; res.member /= gcd_num; } res.inte = res.member / res.deno; res.member -= (res.deno*res.inte); if (res.inte!=0) { cout &lt;&lt; res.inte; if (res.member!=0) { cout &lt;&lt; &apos; &apos;; } } if (res.member!=0) { cout &lt;&lt; res.member &lt;&lt; &apos;/&apos; &lt;&lt; res.deno; } else if (res.inte==0) { cout &lt;&lt; &apos;0&apos;; }}int main(){ freopen(&quot;3.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011121314151617181952/5 4/15 1/30 -2/60 8/3Sample Output 1:3 1/3Sample Input 2:24/3 2/3Sample Output 2:2Sample Input 3:31/3 -1/6 1/8Sample Output 3:7/24]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>分数加法</tag>
        <tag>辗转相除法</tag>
        <tag>最大公约数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1082 Read Number in Chinese (25)]]></title>
    <url>%2F%2Fposts%2Fa290f949%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6570;&#x5B57;&#x7684;&#x4E2D;&#x6587;&#x8BFB;&#x6CD5;&#x3002;&#x8FD9;&#x9053;&#x9898;&#x548C;1081&#x4E00;&#x6837;&#xFF0C;&#x90FD;&#x662F;&#x5C0F;&#x5B66;&#x7684;&#x6570;&#x5B66;&#x9898;&#x3002; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x4E0D;&#x8D85;&#x8FC7;9&#x4F4D;&#x6570;&#x7684;&#x6B63;&#x6570;&#xFF0C;&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x4ED6;&#x7684;&#x4E2D;&#x6587;&#x8BFB;&#x6CD5;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x4E2A;&#x6570;&#x662F;&#x8D1F;&#x6570;&#xFF0C;&#x5219;&#x8981;&#x9996;&#x5148;&#x8F93;&#x51FA;&#x8D1F;&#x6570;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#xFF0C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x4E0D;&#x8D85;&#x8FC7;9&#x4F4D;&#x6570;&#x7684;&#x6574;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#xFF0C;&#x8F93;&#x51FA;&#x6570;&#x5B57;&#x7684;&#x4E2D;&#x6587;&#x8BFB;&#x6CD5;&#x3002;&#x5B57;&#x7B26;&#x4E4B;&#x95F4;&#x7528;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#xFF0C;&#x884C;&#x5C3E;&#x4E0D;&#x80FD;&#x6709;&#x591A;&#x4F59;&#x7684;&#x7A7A;&#x683C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x628A;9&#x4F4D;&#x6570;&#x5206;&#x4E3A;3&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x4EBF;&#xFF0C;&#x4E07;&#xFF0C;&#x4E2A;&#x3002; &#x5728;&#x6BCF;&#x4E00;&#x90E8;&#x5206;&#x4E2D;&#xFF0C;&#x5176;&#x8BFB;&#x6CD5;&#x90FD;&#x662F;&#x4E00;&#x81F4;&#x7684;&#x3002;&#x90FD;&#x662F;X&#x5343;X&#x767E;X&#x5341;X&#x3002; &#x6211;&#x8BA4;&#x4E3A;&#x5173;&#x952E;&#x5728;&#x4E8E;0&#x7684;&#x5904;&#x7406;&#x3002;&#x5C0F;&#x5B66;&#x6570;&#x5B66;&#x6CA1;&#x5B66;&#x597D;&#xFF0C;&#x5927;&#x6982;&#x5199;&#x5199;&#x3002; &#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x90FD;&#x770B;&#x4F5C;&#x7531;&#x4E09;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#x7684;&#xFF0C;&#x5373;&#x90FD;&#x770B;&#x4F5C;9&#x4F4D;&#x6570;&#x6765;&#x5904;&#x7406;&#x3002; &#x6709;&#x591A;&#x4E2A;&#x96F6;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EA;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x96F6;&#x3002;&#x6BD4;&#x5982;&#xFF0C;10024&#xFF0C;&#x8F93;&#x51FA;yi Wan ling er Shi si&#x3002; &#x5BF9;&#x4E8E;&#x6700;&#x9AD8;&#x4F4D;&#x975E;&#x4EBF;&#x7684;&#xFF0C;&#x7B2C;&#x4E00;&#x4F4D;&#x4E4B;&#x524D;&#x4E0D;&#x8F93;&#x51FA;&#x96F6;&#xFF0C;&#x5373;405&#xFF0C;&#x8F93;&#x51FA;si Bai ling wu&#x3002;&#x800C;&#x4E0D;&#x662F;ling si Bai ling wu&#x3002; &#x5982;&#x679C;&#x6A2A;&#x8DE8;&#x4E24;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x6BD4;&#x5982;100001234&#xFF0C;&#x4E5F;&#x53EA;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;ling&#xFF0C;&#x5373;yi Yi ling yi Qian er Bai san Shi si&#x3002; &#x5BF9;&#x4E8E;&#x5343;&#x767E;&#x5341;&#xFF0C;&#x8F93;&#x51FA;&#x6570;&#x5B57;&#x4E4B;&#x540E;&#xFF0C;&#x8FD8;&#x8981;&#x8F93;&#x51FA;&#x5355;&#x4F4D;&#x3002; &#x6BCF;&#x90E8;&#x5206;&#x7ED3;&#x675F;&#x540E;&#xFF0C;&#x8F93;&#x51FA;&#x8FD9;&#x4E2A;&#x90E8;&#x5206;&#x5BF9;&#x5E94;&#x7684;&#x5355;&#x4F4D;&#xFF08;Yi / Wan / &#xFF09;&#x3002; Tips &#x8F93;&#x51FA;ling&#x65F6;&#xFF0C;&#x7528;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x6807;&#x8BB0;&#xFF0C;&#x5728;&#x96F6;&#x540E;&#x9047;&#x5230;&#x7684;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x975E;&#x96F6;&#x6570;&#x65F6;&#xFF0C;&#x8F93;&#x51FA;ling&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;string num[10] = { &quot;ling&quot;,&quot;yi&quot;, &quot;er&quot;, &quot;san&quot;, &quot;si&quot;, &quot;wu&quot;, &quot;liu&quot;, &quot;qi&quot;, &quot;ba&quot;, &quot;jiu&quot; };string c[6] = { &quot;Ge&quot;,&quot;Shi&quot;, &quot;Bai&quot;, &quot;Qian&quot;, &quot;Yi&quot;, &quot;Wan&quot; };int J[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000 };vector&lt;string&gt;res;void solution(){ int n; cin &gt;&gt; n; if (n==0) { cout &lt;&lt; &quot;ling&quot;; return; } if (n&lt;0) { cout &lt;&lt; &quot;Fu &quot;; n = -n; } int part[3]; part[0]= n / 100000000; //int yi = part[1]= (n % 100000000) / 10000; part[2] = n % 10000; bool zero = false; //&#x662F;&#x5426;&#x5728;&#x975E;&#x96F6;&#x6570;&#x5B57;&#x524D;&#x8F93;&#x51FA;&#x5408;&#x9002;&#x7684;ling int printCnt = 0; //&#x7528;&#x4E8E;&#x7EF4;&#x62A4;&#x5355;&#x8BCD;&#x524D;&#x6CA1;&#x6709;&#x7A7A;&#x683C;&#xFF0C;&#x4E4B;&#x540E;&#x8F93;&#x5165;&#x7684;&#x5355;&#x8BCD;&#x90FD;&#x5728;&#x524D;&#x9762;&#x52A0;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x3002; for (int i = 0; i &lt; 3; i++) { int temp = part[i]; //&#x4E09;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x6BCF;&#x90E8;&#x5206;&#x5185;&#x90E8;&#x7684;&#x547D;&#x540D;&#x89C4;&#x5219;&#x90FD;&#x4E00;&#x6837;&#xFF0C;&#x90FD;&#x662F;X&#x5343;X&#x767E;X&#x5341;X for (int j = 3; j &gt;= 0; j--) { int curPos = 8 - i * 4 + j; //&#x5F53;&#x524D;&#x6570;&#x5B57;&#x7684;&#x4F4D;&#x7F6E; if (curPos &gt;= 9) continue; //&#x6700;&#x591A;&#x4E5D;&#x4F4D;&#x6570; int cur = (temp / J[j]) % 10; //&#x53D6;&#x51FA;&#x5F53;&#x524D;&#x6570;&#x5B57; if (cur!=0) { if (zero) //&#x524D;&#x9762;&#x6709;&#x96F6; { printCnt++ == 0 ? cout&lt;&lt;&quot;ling&quot; : cout&lt;&lt;&quot; ling&quot;; zero = false; } if (j == 0) { printCnt++ == 0 ? cout &lt;&lt; num[cur] : cout &lt;&lt; &apos; &apos; &lt;&lt; num[cur]; //&#x5728;&#x4E2A;&#x4F4D;&#xFF0C;&#x76F4;&#x63A5;&#x8F93;&#x51FA; } else { //&#x5728;&#x5176;&#x4ED6;&#x4F4D;&#xFF0C;&#x8FD8;&#x8981;&#x8F93;&#x51FA;&#x5341;&#x767E;&#x5343; printCnt++ == 0 ? cout &lt;&lt; num[cur] &lt;&lt; &apos; &apos; &lt;&lt; c[j] : cout &lt;&lt; &apos; &apos; &lt;&lt; num[cur] &lt;&lt; &apos; &apos; &lt;&lt; c[j]; } } else { if (!zero&amp;&amp;j != 0 &amp;&amp; n / J[curPos] &gt;= 10) //&#x6CE8;&#x610F;100020&#x8FD9;&#x6837;&#x7684;&#x60C5;&#x51B5; { zero = true; } } } //&#x5904;&#x7406;&#x5B8C;&#x6BCF;&#x90E8;&#x5206;&#x4E4B;&#x540E;&#xFF0C;&#x6700;&#x540E;&#x8F93;&#x51FA;&#x5355;&#x4F4D;&#xFF0C;Yi/Wan if (i != 2 &amp;&amp; part[i]&gt;0) { cout &lt;&lt; &apos; &apos; &lt;&lt; c[i + 4]; } }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345&#x8F93;&#x5165;100001234&#x8F93;&#x51FA;yi Yi ling yi Qian er Bai san Shi si 123456789101112Sample Input 1:-123456789Sample Output 1:Fu yi Yi er Qian san Bai si Shi wu Wan liu Qian qi Bai ba Shi jiuSample Input 2:100800Sample Output 2:yi Shi Wan ling ba Bai]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1079 Total Sales of Supply Chain (25)]]></title>
    <url>%2F%2Fposts%2Fb2da3c0e%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6C42;&#x4F9B;&#x5E94;&#x94FE;&#x7684;&#x9500;&#x552E;&#x603B;&#x989D;&#x3002;&#x4E00;&#x5F20;&#x5305;&#x62EC;&#x96F6;&#x552E;&#x5546;&#xFF0C;&#x4E2D;&#x95F4;&#x7ECF;&#x9500;&#x5546;&#xFF0C;&#x4F9B;&#x5E94;&#x5546;&#x7684;&#x4E00;&#x5F20;&#x7F51;&#x7EDC;&#x3002;&#x8FD9;&#x5F20;&#x7F51;&#x7EDC;&#x91CC;&#x6CA1;&#x6709;&#x73AF;&#x3002; &#x4ECE;&#x4E00;&#x4E2A;&#x6E90;&#x4F9B;&#x5E94;&#x5546;&#x5F00;&#x59CB;&#xFF0C;&#x4F9B;&#x5E94;&#x94FE;&#x4E0A;&#x6BCF;&#x4E2A;&#x6210;&#x5458;&#x4ECE;&#x63D0;&#x4F9B;&#x8005;&#x624B;&#x91CC;&#x7528;&#x4EF7;&#x683C;P&#x8D2D;&#x4E70;&#x5546;&#x54C1;&#xFF0C;&#x7136;&#x540E;&#x4EE5;&#x9AD8;&#x4E8E;P&#x767E;&#x5206;&#x4E4B;r&#x7684;&#x4EF7;&#x683C;&#xFF0C;&#x52A0;&#x4EF7;&#x5356;&#x7ED9;&#x4E0B;&#x5BB6;&#x3002;&#x53EA;&#x6709;&#x96F6;&#x552E;&#x5546;&#x662F;&#x9762;&#x5411;&#x987E;&#x5BA2;&#x7684;&#x3002; &#x5047;&#x8BBE;&#x9664;&#x4E86;&#x6E90;&#x4F9B;&#x5E94;&#x5546;&#x4EE5;&#x5916;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x6210;&#x5458;&#x90FD;&#x53EA;&#x9762;&#x5411;&#x4E00;&#x4E2A;&#x4F9B;&#x5E94;&#x5546;&#x3002; &#x73B0;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x4F9B;&#x5E94;&#x94FE;&#xFF0C;&#x8981;&#x6C42;&#x8BA1;&#x7B97;&#x51FA;&#x6240;&#x6709;&#x96F6;&#x552E;&#x5546;&#x51FA;&#x552E;&#x6240;&#x6709;&#x5546;&#x54C1;&#x7684;&#x603B;&#x989D;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x7528;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x62EC;&#x662F;&#x4E09;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;N&#xFF0C;&#x8868;&#x793A;&#x4F9B;&#x5E94;&#x94FE;&#x4E0A;&#x6240;&#x6709;&#x6210;&#x5458;&#x7684;&#x4E2A;&#x6570;&#x3002;ID&#x4ECE;0~N-1&#x7F16;&#x53F7;&#xFF0C;&#x6E90;&#x4F9B;&#x5E94;&#x5546;&#x7684;&#x7F16;&#x53F7;&#x4E3A;0&#x3002;P&#xFF0C;&#x4E3A;&#x6E90;&#x4F9B;&#x5E94;&#x5546;&#x7ED9;&#x51FA;&#x7684;&#x4EF7;&#x683C;&#xFF0C;r&#xFF0C;&#x4E3A;&#x6BCF;&#x6B21;&#x52A0;&#x4EF7;&#x7684;&#x767E;&#x5206;&#x6BD4;&#x3002; &#x63A5;&#x7740;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x4EE5;&#x5982;&#x4E0B;&#x683C;&#x5F0F;&#x63CF;&#x8FF0;&#x4E86;&#x7ECF;&#x9500;&#x5546;&#x6216;&#x8005;&#x96F6;&#x552E;&#x5546;&#x7684;&#x4FE1;&#x606F;&#xFF1A; Ki ID[1] ID[2] &#x2026; ID[Ki] &#x7B2C;i&#x884C;&#x4E2D;&#x3002;Ki&#x6307;&#x4ECE;ID&#x4E3A;i&#x7684;&#x7ECF;&#x9500;&#x5546;&#x624B;&#x4E2D;&#x8FDB;&#x8D27;&#x7684;&#x96F6;&#x552E;&#x5546;&#x548C;&#x7ECF;&#x9500;&#x5546;&#x7684;&#x603B;&#x6570;&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x7684;ID&#x5C31;&#x662F;&#x8868;&#x660E;&#x6709;&#x54EA;&#x4E9B;&#x7ECF;&#x9500;&#x5546;&#x548C;&#x96F6;&#x552E;&#x5546;&#x3002; &#x82E5;Ki&#x4E3A;0&#xFF0C;&#x90A3;&#x4E48;&#x4EE3;&#x8868;&#x8FD9;&#x4E2A;&#x4E3A;&#x96F6;&#x552E;&#x5546;&#xFF0C;&#x76F4;&#x63A5;&#x9762;&#x5BF9;&#x987E;&#x5BA2;&#xFF0C;&#x65E0;&#x4E0B;&#x5BB6;&#x4E86;&#x3002;&#x7136;&#x540E;&#x4EA7;&#x54C1;&#x603B;&#x6570;&#x4F1A;&#x5728;Ki&#x4E4B;&#x540E;&#x51FA;&#x7ED9;&#x3002;&#x6240;&#x6709;&#x6570;&#x636E;&#x4E4B;&#x95F4;&#xFF0C;&#x7531;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x5185;&#x8F93;&#x51FA;&#x6240;&#x6709;&#x96F6;&#x552E;&#x5546;&#x7684;&#x603B;&#x9500;&#x552E;&#x989D;&#xFF0C;&#x7CBE;&#x786E;&#x5230;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x4E00;&#x4F4D;&#x3002;&#x4FDD;&#x8BC1;&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x4E0D;&#x4F1A;&#x8D85;&#x8FC7;10^10&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;DFS&#xFF0C;&#x6CE8;&#x610F;&#x4FDD;&#x5B58;DFS&#x7684;&#x5C42;&#x6570;&#xFF0C;&#x6700;&#x540E;&#x6309;&#x5E42;&#x6B21;&#x4E58;&#x5728;P&#x4E0A;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;cmath&gt;#pragma warning(disable:4996)using namespace std;vector&lt;int&gt; buy; //&#x8868;&#x793A;&#x96F6;&#x552E;&#x5546;&#x5356;&#x51FA;&#x53BB;&#x591A;&#x5C11;vector&lt;vector&lt;int&gt;&gt;G;int N;double r, P, res=0.0;void DFS(int num, int step){ int end = 1; for (int i = 0; i &lt; G[num].size(); i++) { int v = G[num][i]; end = 0; DFS(v, step + 1); } if (end) { res += P*(pow((1 + r*0.01), step)* buy[num]); }}void solution(){ cin &gt;&gt; N; cin &gt;&gt; P &gt;&gt; r; G.resize(N); buy.resize(N); int a,b; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; a; for (int j = 0; j &lt; a; j++) { cin &gt;&gt; b; G[i].push_back(b); //b&#x662F;a&#x7684;&#x4E0B;&#x5BB6; } if (a == 0) { cin &gt;&gt; b; buy[i] = b; } } DFS(0, 0); printf(&quot;%.1f\n&quot;, res);}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516Sample Input:10 1.80 1.003 2 3 51 91 41 70 72 6 11 80 90 40 3Sample Output:42.4]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1080 Graduate Admission (30)]]></title>
    <url>%2F%2Fposts%2Ff4728b59%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x7814;&#x7A76;&#x751F;&#x62DB;&#x751F;&#x5F55;&#x53D6;&#x3002;&#x53C8;&#x5230;&#x4E86;&#x4E00;&#x5E74;&#x7814;&#x62DB;&#x5B63;&#x3002;&#x5728;&#x6D59;&#x6C5F;&#x7701;&#xFF0C;&#x5927;&#x7EA6;&#x6709;100&#x4E2A;&#x7814;&#x62DB;&#x70B9;&#x548C;&#x8D85;&#x8FC7;40000&#x4E2A;&#x7533;&#x8BF7;&#x4EBA;&#x3002;&#x8981;&#x6C42;&#x4F60;&#x5199;&#x4E00;&#x4E2A;&#x7B97;&#x6CD5;&#xFF0C;&#x6C42;&#x51FA;&#x54EA;&#x4E9B;&#x4EBA;&#x53EF;&#x4EE5;&#x8003;&#x4E0A;&#x3002; &#x7ED9;&#x51FA;&#x521D;&#x8BD5;&#x6210;&#x7EE9;Ge&#x548C;&#x590D;&#x8BD5;&#x6210;&#x7EE9;Gi&#xFF0C;&#x6700;&#x540E;&#x7684;&#x603B;&#x6210;&#x7EE9;&#x662F;&#xFF08;Ge+Gi&#xFF09;/2&#x3002; &#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A; &#x8003;&#x751F;&#x6839;&#x636E;&#x4ED6;&#x4EEC;&#x7684;&#x6700;&#x7EC8;&#x6210;&#x7EE9;&#x6392;&#x540D;&#xFF0C;&#x7531;&#x9AD8;&#x5230;&#x4F4E;&#x9010;&#x4E00;&#x5F55;&#x53D6;&#x3002; &#x5982;&#x679C;&#x603B;&#x6210;&#x7EE9;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x521D;&#x8BD5;&#x6210;&#x7EE9;Ge&#x9AD8;&#x8005;&#x4F18;&#x5148;&#x3002;&#x5982;&#x679C;&#x4EFB;&#x7136;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x4ED6;&#x4EEC;&#x7684;&#x6700;&#x7EC8;&#x6392;&#x540D;&#x76F8;&#x540C;&#x3002; &#x6BCF;&#x4E2A;&#x8003;&#x751F;&#x53EF;&#x4EE5;&#x586B;K&#x4E2A;&#x5FD7;&#x613F;&#xFF0C;&#x6309;&#x5148;&#x540E;&#x987A;&#x5E8F;&#x8FDB;&#x884C;&#x6295;&#x6863;&#x3002;&#x6839;&#x636E;&#x540D;&#x6B21;&#x6392;&#x540D;&#xFF0C;&#x8F6E;&#x5230;&#x4ED6;&#x6295;&#x6863;&#x65F6;&#xFF0C;&#x5BF9;&#x4ED6;&#x7684;K&#x4E2A;&#x5FD7;&#x613F;&#x6309;&#x5148;&#x540E;&#x4F9D;&#x6B21;&#x68C0;&#x6D4B;&#xFF0C;&#x5982;&#x679C;&#x8BE5;&#x5FD7;&#x613F;&#x5B66;&#x6821;&#x8FD8;&#x5269;&#x6709;&#x540D;&#x989D;&#xFF0C;&#x5219;&#x6295;&#x6863;&#x3002;&#x5982;&#x679C;&#x8FD9;&#x540D;&#x8003;&#x751F;&#x88AB;&#x6240;&#x6709;&#x7684;&#x5B66;&#x6821;&#x90FD;&#x62D2;&#x7EDD;&#x4E86;&#xFF0C;&#x5219;&#x4ED6;&#x843D;&#x699C;&#x3002; &#x5BF9;&#x4E8E;&#x540D;&#x6B21;&#x5E76;&#x5217;&#xFF0C;&#x5E76;&#x4E14;&#x90FD;&#x7533;&#x8BF7;&#x540C;&#x4E00;&#x6240;&#x5B66;&#x6821;&#x7684;&#x8003;&#x751F;&#xFF0C;&#x82E5;&#x6709;&#x4E00;&#x4E2A;&#x4EBA;&#x88AB;&#x5F55;&#x53D6;&#xFF0C;&#x5219;&#x6240;&#x6709;&#x7684;&#x8003;&#x751F;&#x90FD;&#x5F97;&#x88AB;&#x5F55;&#x53D6;&#xFF0C;&#x5373;&#x4F7F;&#x8D85;&#x8FC7;&#x4E86;&#x8BE5;&#x5B66;&#x6821;&#x7684;&#x914D;&#x989D;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x91CC;&#x6709;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002; &#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E09;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;N&#xFF08;&lt;=40000&#xFF09;&#xFF0C;&#x8868;&#x793A;&#x7533;&#x8BF7;&#x7684;&#x603B;&#x4EBA;&#x6570;&#xFF1B;M(&lt;=100)&#xFF0C;&#x7814;&#x7A76;&#x751F;&#x62DB;&#x751F;&#x70B9;&#x7684;&#x6570;&#x91CF;&#xFF1B;K&#xFF08;&lt;=5&#xFF09;&#x6BCF;&#x4E2A;&#x8003;&#x751F;&#x6700;&#x591A;&#x53EF;&#x4EE5;&#x586B;&#x7684;&#x5FD7;&#x613F;&#x6570;&#x3002; &#x5728;&#x4E0B;&#x4E00;&#x884C;&#xFF0C;&#x6709;M&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x7B2C;i&#x4E2A;&#x8868;&#x793A;&#x7B2C;i&#x4E2A;&#x7814;&#x7A76;&#x751F;&#x62DB;&#x751F;&#x70B9;&#x7684;&#x914D;&#x989D;&#x3002; &#x968F;&#x540E;&#x6709;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x6709;K+2&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x524D;&#x4E24;&#x4E2A;&#x662F;&#x8003;&#x751F;&#x7684;Ge&#x548C;Gi&#xFF0C;&#x540E;K&#x4E2A;&#x4EE3;&#x8868;&#x5FD7;&#x613F;&#x3002; &#x4E3A;&#x7B80;&#x5355;&#x8D77;&#x89C1;&#xFF0C;&#x5047;&#x8BBE;&#x62DB;&#x751F;&#x70B9;&#x7684;&#x7F16;&#x53F7;&#x4E3A;0~M-1&#xFF0C;&#x8003;&#x751F;&#x7F16;&#x53F7;&#x4E3A;0~N-1&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x6240;&#x6709;&#x7814;&#x62DB;&#x70B9;&#x7684;&#x5F55;&#x53D6;&#x7ED3;&#x679C;&#xFF0C;&#x6BCF;&#x4E2A;&#x7814;&#x62DB;&#x70B9;&#x7684;&#x6210;&#x7EE9;&#x5360;&#x4E00;&#x884C;&#xFF0C;&#x5176;&#x4E2D;&#x5305;&#x542B;&#x5F55;&#x53D6;&#x7684;&#x8003;&#x751F;&#x7684;&#x7F16;&#x53F7;&#x3002;&#x6309;&#x5347;&#x5E8F;&#x6392;&#x5217;&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002; &#x5982;&#x679C;&#x6B64;&#x7814;&#x62DB;&#x70B9;&#x6CA1;&#x6709;&#x5F55;&#x53D6;&#x4EFB;&#x4F55;&#x8003;&#x751F;&#xFF0C;&#x5219;&#x76F8;&#x5E94;&#x7684;&#x8F93;&#x51FA;&#x4E00;&#x4E2A;&#x7A7A;&#x884C;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6392;&#x5E8F;&#xFF0C;&#x7136;&#x540E;&#x6309;&#x7167;&#x6210;&#x7EE9;&#x8FDB;&#x884C;&#x6295;&#x6863;&#xFF0C;&#x5F55;&#x53D6;&#x6761;&#x4EF6;&#x53EF;&#x4EE5;&#x7B80;&#x5316;&#x4E3A;&#xFF1A; &#x6240;&#x6295;&#x7684;&#x5355;&#x4F4D;&#x672A;&#x62DB;&#x6EE1; &#x62DB;&#x6EE1;&#x4E86;&#x4F46;&#x662F;&#x548C;&#x6700;&#x540E;&#x4E00;&#x540D;&#x7684;&#x603B;&#x5206;&#x548C;Ge&#x5206;&#x76F8;&#x540C; &#x4EE5;&#x4E0A;&#x4E24;&#x4E2A;&#x6761;&#x4EF6;&#xFF0C;&#x4EFB;&#x610F;&#x6EE1;&#x8DB3;&#x5176;&#x4E00;&#x5373;&#x53EF;&#x3002; Tips&#x65F6;&#x95F4;&#x9650;&#x5236;&#x5F88;&#x77ED;&#xFF0C;&#x8F93;&#x5165;&#x8F93;&#x51FA;&#x53C8;&#x6709;&#x5F88;&#x591A;&#xFF0C;&#x8981;&#x7528;scanf/printf&#x4EE3;&#x66FF;cin/cout&#x3002;&#x5426;&#x5219;&#x4F1A;&#x6709;&#x4E00;&#x4E2A;&#x8D85;&#x65F6; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;int N, M, K;typedef struct{ int Ge; int Gi; int Total; vector&lt;int&gt; wish; //&#x5FD7;&#x613F;&#x96C6;&#x5408; int ID;}student;vector&lt;student&gt; S; // &#x5B66;&#x751F;&#x96C6;&#x5408;int college[101];bool cmp(student a, student b) //&#x6392;&#x5E8F;&#x51FD;&#x6570;{ if (a.Total != b.Total) return a.Total &gt; b.Total; else return a.Ge &gt; b.Ge;}void solution(){ cin &gt;&gt; N &gt;&gt; M &gt;&gt; K; S.resize(N); int temp; for (int i = 0; i &lt; M; i++) { cin &gt;&gt; college[i]; //&#x8F93;&#x5165;&#x540D;&#x989D;&#x6570;&#x91CF; } for (int i = 0; i &lt; N; i++) { scanf(&quot;%d %d &quot;, &amp;S[i].Ge, &amp;S[i].Gi); S[i].Total = S[i].Ge + S[i].Gi; S[i].wish.resize(K); for (int j = 0; j &lt; K; j++) //&#x8F93;&#x5165;&#x5FD7;&#x613F;&#x4FE1;&#x606F; { scanf(&quot;%d&quot;, &amp;S[i].wish[j]); } S[i].ID = i; } vector&lt;student&gt; S1 = S; //&#x4FDD;&#x5B58;ID&#x4FE1;&#x606F; sort(S.begin(), S.end(), cmp); vector&lt;vector&lt;int&gt;&gt; res; //&#x5B58;&#x653E;&#x7ED3;&#x679C; res.resize(M); for (int i = 0; i &lt; S.size(); i++) { for (int j = 0; j &lt; K; j++) { temp = S[i].wish[j]; //&#x5F53;&#x524D;&#x5FD7;&#x613F; if (college[temp] &gt; 0||(S1[res[temp].back()].Ge == S[i].Ge&amp;&amp;S1[res[temp].back()].Total == S[i].Total)) //&#x8FD8;&#x6709;&#x540D;&#x989D;&#xFF0C;&#x6216;&#x8005;&#x62DB;&#x6EE1;&#x60C5;&#x51B5;&#xFF0C;&#x6BD4;&#x8F83;&#x62A5;&#x8003;&#x5B66;&#x6821;&#x6700;&#x540E;&#x4E00;&#x540D;&#x5B66;&#x751F;&#x7684;&#x6210;&#x7EE9;&#x548C;&#x5F53;&#x524D;&#x5B66;&#x751F;&#x7684;&#x6210;&#x7EE9; { res[temp].push_back(S[i].ID); //&#x6295;&#x6863; college[temp]--; break; } } } for (int i = 0; i &lt; M; i++) { sort(res[i].begin(), res[i].end()); for (int j = 0; j &lt; res[i].size(); j++) { printf(&quot;%d&quot;, res[i][j]); if (j!= res[i].size()-1) { printf(&quot; &quot;); } } cout &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011121314151617181920212223Sample Input:11 6 32 1 2 2 2 3100 100 0 1 260 60 2 3 5100 90 0 3 490 100 1 2 090 90 5 1 380 90 1 0 280 80 0 1 280 80 0 1 280 70 1 3 270 80 1 2 3100 100 0 2 4Sample Output:0 1035 6 72 81 4 12345678910111213141516171819202122232425262728&#x8F93;&#x5165;20 3 34 9 14 7 0 2 00 6 0 2 20 3 1 0 23 2 0 0 26 5 2 0 06 0 2 0 04 8 1 2 26 2 2 0 13 9 2 0 00 1 2 0 11 5 2 1 25 7 0 2 14 5 1 2 17 0 1 2 29 7 1 0 23 4 0 1 00 1 0 2 21 2 0 0 01 1 0 0 06 7 2 0 0&#x8F93;&#x51FA;0 4 8 112 6 7 9 10 12 13 14 1519]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1078 Hashing (25)]]></title>
    <url>%2F%2Fposts%2F923495e5%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x54C8;&#x5E0C;&#x8868;&#x7684;&#x5E73;&#x65B9;&#x63A2;&#x67E5;&#x6CD5;&#x3002;&#x6563;&#x5217;&#x51FD;&#x6570;&#x662F;H(key) = key % TSize &#xFF0C;&#x5176;&#x4E2D;Tsize&#x662F;&#x6563;&#x5217;&#x8868;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x5E73;&#x65B9;&#x63A2;&#x67E5;&#x6CD5;&#x7528;&#x4E8E;&#x89E3;&#x51B3;&#x51B2;&#x7A81;&#xFF0C;&#x53EA;&#x8003;&#x8651;&#x589E;&#x91CF;&#x3002;&#x5982;&#x679C;&#x8868;&#x683C;&#x5927;&#x5C0F;&#x4E0D;&#x4E3A;&#x7D20;&#x6570;&#xFF0C;&#x5219;&#x8981;&#x5C06;&#x5176;&#x91CD;&#x65B0;&#x5B9A;&#x4E49;&#x4E3A;&#x5927;&#x4E8E;&#x7528;&#x6237;&#x7ED9;&#x5B9A;&#x5927;&#x5C0F;&#x7684;&#x6700;&#x5C0F;&#x7D20;&#x6570;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x6B63;&#x6570;&#xFF0C;Msizie&#xFF08;&lt;=10000&#xFF09;&#x548C;N&#xFF0C;&#x7528;&#x4E8E;&#x5B9A;&#x4E49;&#x7528;&#x6237;&#x7684;hash&#x8868;&#x5927;&#x5C0F;&#x548C;&#x6570;&#x5B57;&#x7684;&#x6570;&#x91CF;&#x3002; &#x7136;&#x540E;&#x7ED9;&#x51FA;N&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x5206;&#x9694;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x6570;&#x5B57;&#x76F8;&#x5E94;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x4ECE;0&#x5F00;&#x59CB;&#x7D22;&#x5F15;&#xFF0C;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x95F4;&#x7531;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;&#x82E5;&#x65E0;&#x6CD5;&#x63D2;&#x5165;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x201D;-&#x201C;&#x3002; &#x89E3;&#x9898;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;bool isPrime(int num) //&#x5224;&#x65AD;&#x7D20;&#x6570;{ if (num == 1) return false; for (int i = 2; i *i&lt;= num; i++) { if (num%i == 0) return false; } return true;}bool hashTable[10010] = {0};void solution(){ int tsize, n; cin &gt;&gt; tsize &gt;&gt; n; while (!isPrime(tsize)) { tsize++; } int temp; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; temp; int j,k; for (j = 0; j &lt; tsize; j++) { k = (temp + j*j) % tsize; //&#x5E73;&#x65B9;&#x63A2;&#x6D4B; if (!hashTable[k]) { hashTable[k] = true; cout &lt;&lt; k; break; } } if (j == tsize) cout &lt;&lt; &quot;-&quot;; if (i != n - 1) cout &lt;&lt; &apos; &apos;; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567Sample Input:4 410 6 4 15Sample Output:0 1 4 -]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>Hash</tag>
        <tag>平方探查法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1077 Kuchiguse (20)]]></title>
    <url>%2F%2Fposts%2F6e8a40c3%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x65E5;&#x8BED;&#x7684;&#x5C3E;&#x97F3;&#x3002;&#x7ED9;&#x5B9A;N&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6C42;&#x4ED6;&#x4EEC;&#x7684;&#x516C;&#x5171;&#x540E;&#x7F00;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x5B58;&#x5728;&#x516C;&#x5171;&#x540E;&#x7F00;&#xFF0C;&#x8F93;&#x51FA;nai&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x7528;&#x4F8B;&#x3002;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x6574;N&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x662F;N&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6BCF;&#x4E2A;&#x5360;&#x4E00;&#x884C;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x8FD9;N&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x516C;&#x5171;&#x540E;&#x7F00;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5B57;&#x7B26;&#x4E32;&#x5904;&#x7406; Tips&#x53EF;&#x4EE5;&#x5C06;&#x5B57;&#x7B26;&#x4E32;&#x9006;&#x7F6E;&#xFF0C;&#x8FD9;&#x6837;&#x53EA;&#x9700;&#x8981;&#x6BD4;&#x8F83;&#x524D;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int N;string ans,s;void solution(){ //cin &gt;&gt; N; //cin.ignore(); //&#x7528;&#x8FD9;&#x4E24;&#x4E2A;&#x6216;&#x8005;&#x4E0B;&#x9762;&#x7684;scanf scanf(&quot;%d\n&quot;, &amp;N); for (int i = 0; i &lt; N; i++) { getline(cin, s); int length = s.length(); reverse(s.begin(), s.end()); if (i == 0) { ans = s; continue; } else { int ans_length = ans.length(); int min_length = min(ans_length, length); for (int j = 0; j &lt; min_length; j++) { if (ans[j]!=s[j]) { ans = ans.substr(0, j); break; } } } } reverse(ans.begin(), ans.end()); if (ans.length() == 0) cout &lt;&lt; &quot;nai&quot; &lt;&lt; endl; else cout &lt;&lt; ans &lt;&lt; endl;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415161718Sample Input 1:3Itai nyan~Ninjin wa iyadanyan~uhhh nyan~Sample Output 1:nyan~Sample Input 2:3Itai!Ninjinnwaiyada T_TT_TSample Output 2:nai]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[已知二叉树的中序和前序序列(或后序)求解树]]></title>
    <url>%2F%2Fposts%2Fb3684980%2F</url>
    <content type="text"><![CDATA[&#x5E8F;&#x8A00;&#x8FD9;&#x79CD;&#x9898;&#x4E00;&#x822C;&#x6709;&#x4E24;&#x79CD;&#x5F62;&#x5F0F;&#xFF0C;&#x5171;&#x540C;&#x70B9;&#x662F;&#x90FD;&#x5DF2;&#x77E5;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#xFF0C;&#x662F;&#x65E0;&#x6CD5;&#x552F;&#x4E00;&#x786E;&#x5B9A;&#x4E00;&#x68F5;&#x6811;&#x7684;&#xFF0C;&#x8BC1;&#x660E;&#x7565;&#x3002; &#x5DF2;&#x77E5;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x524D;&#x5E8F;&#x5E8F;&#x5217;&#x548C;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x65B9;&#x6CD5;&#x5982;&#x4E0B;&#xFF1A; &#x786E;&#x5B9A;&#x6811;&#x7684;&#x6839;&#x8282;&#x70B9;&#x3002;&#x6811;&#x6839;&#x662F;&#x5F53;&#x524D;&#x6811;&#x4E2D;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5728;&#x524D;&#x5E8F;&#x904D;&#x5386;&#x4E2D;&#x6700;&#x5148;&#x51FA;&#x73B0;&#x7684;&#x5143;&#x7D20;&#x3002; &#x6C42;&#x89E3;&#x6811;&#x7684;&#x5B50;&#x6811;&#x3002;&#x627E;&#x51FA;&#x6839;&#x8282;&#x70B9;&#x5728;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6839;&#x5DE6;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5C31;&#x662F;&#x5DE6;&#x5B50;&#x6811;&#xFF0C;&#x6839;&#x53F3;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5C31;&#x662F;&#x53F3;&#x5B50;&#x6811;&#x3002;&#x82E5;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x8FB9;&#x6216;&#x53F3;&#x8FB9;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8BE5;&#x65B9;&#x5411;&#x5B50;&#x6811;&#x4E3A;&#x7A7A;&#xFF1B;&#x82E5;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x8FB9;&#x548C;&#x53F3;&#x8FB9;&#x90FD;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x6839;&#x8282;&#x70B9;&#x5DF2;&#x7ECF;&#x4E3A;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x3002; &#x9012;&#x5F52;&#x6C42;&#x89E3;&#x6811;&#x3002;&#x5C06;&#x5DE6;&#x5B50;&#x6811;&#x548C;&#x53F3;&#x5B50;&#x6811;&#x5206;&#x522B;&#x770B;&#x6210;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x91CD;&#x590D;1&#x3001;2&#x3001;3&#x6B65;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x8282;&#x70B9;&#x5B8C;&#x6210;&#x5B9A;&#x4F4D;&#x3002; &#x5DF2;&#x77E5;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x540E;&#x5E8F;&#x5E8F;&#x5217;&#x548C;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217; &#x786E;&#x5B9A;&#x6811;&#x7684;&#x6839;&#x3002;&#x6811;&#x6839;&#x662F;&#x5F53;&#x524D;&#x6811;&#x4E2D;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5728;&#x540E;&#x5E8F;&#x904D;&#x5386;&#x4E2D;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x5143;&#x7D20;&#x3002; &#x6C42;&#x89E3;&#x6811;&#x7684;&#x5B50;&#x6811;&#x3002;&#x627E;&#x51FA;&#x6839;&#x8282;&#x70B9;&#x5728;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x4E2D;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x6839;&#x5DE6;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5C31;&#x662F;&#x5DE6;&#x5B50;&#x6811;&#xFF0C;&#x6839;&#x53F3;&#x8FB9;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5C31;&#x662F;&#x53F3;&#x5B50;&#x6811;&#x3002;&#x82E5;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x8FB9;&#x6216;&#x53F3;&#x8FB9;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x8BE5;&#x65B9;&#x5411;&#x5B50;&#x6811;&#x4E3A;&#x7A7A;&#xFF1B;&#x82E5;&#x6839;&#x8282;&#x70B9;&#x5DE6;&#x8FB9;&#x548C;&#x53F3;&#x8FB9;&#x90FD;&#x4E3A;&#x7A7A;&#xFF0C;&#x5219;&#x6839;&#x8282;&#x70B9;&#x5DF2;&#x7ECF;&#x4E3A;&#x53F6;&#x5B50;&#x8282;&#x70B9;&#x3002; &#x9012;&#x5F52;&#x6C42;&#x89E3;&#x6811;&#x3002;&#x5C06;&#x5DE6;&#x5B50;&#x6811;&#x548C;&#x53F3;&#x5B50;&#x6811;&#x5206;&#x522B;&#x770B;&#x6210;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x91CD;&#x590D;1&#x3001;2&#x3001;3&#x6B65;&#xFF0C;&#x76F4;&#x5230;&#x6240;&#x6709;&#x7684;&#x8282;&#x70B9;&#x5B8C;&#x6210;&#x5B9A;&#x4F4D;&#x3002; &#x4E3E;&#x4F8B;&#x8BF4;&#x660E;&#x4E3E;&#x4E2A;&#x6817;&#x5B50;&#xFF1A;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217; HLDBEKAFCG&#x540E;&#x5E8F;&#x5E8F;&#x5217; LHDKEBFGCA &#x5728;&#x540E;&#x5E8F;&#x5E8F;&#x5217;LHDKEBFGCA&#x4E2D;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x5143;&#x7D20;&#x4E3A;A&#xFF0C;HLDBEK|A|FCG &#x5728;&#x540E;&#x5E8F;&#x5E8F;&#x5217;LHDKEB&#x4E2D;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x5143;&#x7D20;&#x4E3A;B&#xFF0C;HLD|B|EK|A|FCG &#x5728;&#x540E;&#x5E8F;&#x5E8F;&#x5217;LHD&#x4E2D;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x5143;&#x7D20;&#x4E3A;D&#xFF0C;HL|D|B|EK|A|FCG &#x5728;&#x540E;&#x5E8F;&#x5E8F;&#x5217;LH&#x4E2D;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x5143;&#x7D20;&#x4E3A;H&#xFF0C;H|L|D|B|EK|A|FCG &#x5728;&#x540E;&#x5E8F;&#x5E8F;&#x5217;KE&#x4E2D;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x5143;&#x7D20;&#x4E3A;E&#xFF0C;H|L|D|B|E|K|A|FCG &#x5728;&#x540E;&#x5E8F;&#x5E8F;&#x5217;FGC&#x4E2D;&#x6700;&#x540E;&#x51FA;&#x73B0;&#x7684;&#x5143;&#x7D20;&#x4E3A;C&#xFF0C;H|L|D|B|E|K|A|F|C|G &#x6240;&#x6709;&#x5143;&#x7D20;&#x90FD;&#x5DF2;&#x7ECF;&#x5B9A;&#x4F4D;&#xFF0C;&#x4E8C;&#x53C9;&#x6811;&#x6C42;&#x89E3;&#x5B8C;&#x6210;&#x3002;123456789 A / \ B C / \ / \ D E F G / \H K \ L &#x53C2;&#x8003;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100/*&#x529F;&#x80FD;: 1.&#x5229;&#x7528;&#x6811;&#x7684;&#x524D;&#x5E8F;&#x548C;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x521B;&#x5EFA;&#x6811;2.&#x5229;&#x7528;&#x6811;&#x7684;&#x540E;&#x5E8F;&#x548C;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x521B;&#x5EFA;&#x6811;*/#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;char pre[50] = &quot;ABDHLEKCFG&quot;; //&#x524D;&#x5E8F;&#x5E8F;&#x5217;char mid[50] = &quot;HLDBEKAFCG&quot;; //&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;char post[50] = &quot;LHDKEBFGCA&quot;; //&#x540E;&#x5E8F;&#x5E8F;&#x5217;typedef struct _Node{ char v; struct _Node *left = NULL; struct _Node *right = NULL;}Node, *PNode;void PostTravelTree(PNode pn); //&#x6811;&#x7684;&#x540E;&#x5E8F;&#x9012;&#x5F52;&#x904D;&#x5386;void PreTravelTree(PNode pn); //&#x6811;&#x7684;&#x524D;&#x5E8F;&#x9012;&#x5F52;&#x904D;&#x5386;void PreMidCreateTree(PNode &amp;pn, int i, int j, int len); //&#x5229;&#x7528;&#x524D;&#x5E8F;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x521B;&#x5EFA;&#x6811;void PostMidCreateTree(PNode &amp;pn, int i, int j, int len); //&#x5229;&#x7528;&#x540E;&#x5E8F;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x521B;&#x5EFA;&#x6811;int Position(char c); //&#x786E;&#x5B9A;c&#x5728;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;mid&#x4E2D;&#x7684;&#x4E0B;&#x6807;,&#x5047;&#x8BBE;&#x6811;&#x7684;&#x5404;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x503C;&#x5404;&#x4E0D;&#x76F8;&#x540C;int main(){ PNode root1 = NULL, root2 = NULL; PreMidCreateTree(root1, 0, 0, strlen(mid)); PostTravelTree(root1); cout &lt;&lt; endl; //&#x540E;&#x5E8F; PostMidCreateTree(root2, strlen(post) - 1, 0, strlen(mid)); PreTravelTree(root2); cout &lt;&lt; endl; //&#x5148;&#x5E8F; system(&quot;pause&quot;); return 0;}int Position(char c){ return strchr(mid, c) - mid;}/* i: &#x5B50;&#x6811;&#x7684;&#x524D;&#x5E8F;&#x5E8F;&#x5217;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x9996;&#x5B57;&#x7B26;&#x5728;pre[]&#x4E2D;&#x7684;&#x4E0B;&#x6807;* j: &#x5B50;&#x6811;&#x7684;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x9996;&#x5B57;&#x7B26;&#x5728;mid[]&#x4E2D;&#x7684;&#x4E0B;&#x6807;* len: &#x5B50;&#x6811;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;*/void PreMidCreateTree(PNode &amp;pn, int i, int j, int len){ if (len &lt;= 0) return; pn = new Node; pn-&gt;v = pre[i]; int m = Position(pre[i]); PreMidCreateTree(pn-&gt;left, i + 1, j, m - j); //m-j&#x4E3A;&#x5DE6;&#x5B50;&#x6811;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6; PreMidCreateTree(pn-&gt;right, i + (m - j) + 1, m + 1, len - 1 - (m - j)); //len-1-(m-j)&#x4E3A;&#x53F3;&#x5B50;&#x6811;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;}/* &#x5229;&#x7528;&#x540E;&#x5E8F;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x521B;&#x5EFA;&#x6811;* i: &#x5B50;&#x6811;&#x7684;&#x540E;&#x5E8F;&#x5E8F;&#x5217;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5C3E;&#x5B57;&#x7B26;&#x5728;post[]&#x4E2D;&#x7684;&#x4E0B;&#x6807;* j: &#x5B50;&#x6811;&#x7684;&#x4E2D;&#x5E8F;&#x5E8F;&#x5217;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x9996;&#x5B57;&#x7B26;&#x5728;mid[]&#x4E2D;&#x7684;&#x4E0B;&#x6807;* len: &#x5B50;&#x6811;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;*/void PostMidCreateTree(PNode &amp;pn, int i, int j, int len){ if (len &lt;= 0) return; pn = new Node; pn-&gt;v = post[i]; int m = Position(post[i]); PostMidCreateTree(pn-&gt;left, i - 1 - (len - 1 - (m - j)), j, m - j);//&#x6CE8;&#x610F;&#x53C2;&#x6570;:m-j&#x5DE6;&#x5B50;&#x6811;&#x7684;&#x957F;&#x5EA6;,len-1-(m-j)&#x53F3;&#x5B50;&#x6811;&#x7684;&#x957F;&#x5EA6; PostMidCreateTree(pn-&gt;right, i - 1, m + 1, len - 1 - (m - j));}void PostTravelTree(PNode pn) //&#x540E;&#x5E8F;&#x9012;&#x5F52;&#x904D;&#x5386;{ if (pn) { PostTravelTree(pn-&gt;left); PostTravelTree(pn-&gt;right); cout &lt;&lt; pn-&gt;v &lt;&lt; &quot; &quot;; }}void PreTravelTree(PNode pn) //&#x524D;&#x5E8F;&#x9012;&#x5F52;&#x904D;&#x5386;{ if (pn) { cout &lt;&lt; pn-&gt;v &lt;&lt; &quot; &quot;; PreTravelTree(pn-&gt;left); PreTravelTree(pn-&gt;right); }}]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
        <tag>重建二叉树</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何下载知乎中的短视频]]></title>
    <url>%2F%2Fposts%2F581e27f1%2F</url>
    <content type="text"><![CDATA[&#x5173;&#x4E8E;&#x77E5;&#x4E4E;&#x91CC;&#x7684;&#x89C6;&#x9891;&#x7684;&#x4E0B;&#x8F7D;&#x6280;&#x5DE7;&#x3002; &#x4E3E;&#x4F8B;&#x4EE5;&#x62E5;&#x6709;&#x914D;&#x97F3;&#x6280;&#x80FD;&#x662F;&#x4EC0;&#x4E48;&#x6837;&#x7684;&#x4F53;&#x9A8C;&#x8FD9;&#x4E2A;&#x56DE;&#x7B54;&#x4E2D;&#x7684;&#x89C6;&#x9891;&#x4E3A;&#x4F8B;&#x3002; &#x65B9;&#x6CD5;&#x6211;&#x7528;&#x7684;&#x662F;chrome&#x6D4F;&#x89C8;&#x5668;&#xFF0C;&#x4E0D;&#x6D89;&#x53CA;&#x63D2;&#x4EF6;&#x3002; &#x83B7;&#x53D6;&#x89C6;&#x9891;&#x5730;&#x5740;&#x53F3;&#x952E;&#x70B9;&#x51FB;&#x89C6;&#x9891;&#xFF0C;&#x68C0;&#x67E5;&#x3002;&#x627E;&#x5230;1&lt;iframe frameborder=&#x201D;0&#x2033; allowfullscreen=&#x201D;&#x201D; src=&#x201D;https://www.zhihu.com/video/946365677783703552&#x2033;&gt;&lt;/iframe&gt; &#x5982;&#x56FE;&#x6240;&#x793A;&#xFF1A; &#x590D;&#x5236;&#x5730;&#x5740;https://www.zhihu.com/video/946365677783703552 &#x5728;&#x65B0;&#x7684;&#x6807;&#x7B7E;&#x4E2D;&#x6253;&#x5F00;&#x3002; &#x83B7;&#x53D6;m3u8&#x5730;&#x5740;&#x6309;F12&#xFF0C;&#x6253;&#x5F00;NetWork&#x2014;&#x2014;All&#xFF0C;&#x641C;&#x7D22;m3u8&#xFF1A; &#x53F3;&#x952E;&#x2014;&#x2014;Copy&#x2014;&#x2014;Copy link address &#x7528;gohls&#x4E0B;&#x8F7D;&#x4E0B;&#x8F7D; &#x89E3;&#x538B;&#x540E;&#xFF0C;&#x5728;&#x7EC8;&#x7AEF;&#x91CC;&#xFF0C;&#x8F93;&#x5165;1gohls -l=true &#x201C;m3u8&#x5730;&#x5740;&#x201D; &#x201C;&#x4FDD;&#x5B58;&#x7684;&#x6587;&#x4EF6;&#x540D;.mp4&#x201D; &#x5176;&#x4E2D;m3u8&#x7684;&#x5730;&#x5740;&#x5C31;&#x662F;&#x521A;&#x624D;&#x590D;&#x5236;&#x7684;&#x3002; &#x6B64;&#x65B9;&#x6CD5;&#x9002;&#x7528;&#x4E8E;&#x5927;&#x90E8;&#x5206;&#x76F4;&#x64AD;&#x7F51;&#x7AD9;&#xFF08;&#x6597;&#x9C7C;&#x89C6;&#x9891;&#x56DE;&#x653E;&#x3001;&#x4E00;&#x76F4;&#x64AD;&#x56DE;&#x653E;&#x3001;&#x7F8E;&#x62CD;&#x76F4;&#x64AD;&#x3001;&#x718A;&#x732B;&#x3001;&#x9F99;&#x73E0;&#x3001;AF&#x3001;&#x6218;&#x65D7;&#x3001;&#x864E;&#x7259;&#x3001;YYLive&#x2026;&#xFF09; &#x53C2;&#x8003;&#x8D44;&#x6599;&#x6559;&#x5927;&#x5BB6;&#x600E;&#x4E48;&#x4E0B;&#x8F7D;&#x5404;&#x5927;&#x5E73;&#x53F0;&#x7684;m3u8&#x76F4;&#x64AD;&#x5F55;&#x50CF;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>下载技巧</tag>
        <tag>m3u8</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[帽子颜色问题]]></title>
    <url>%2F%2Fposts%2F3ffb6ae9%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x5B66;&#x6821;&#x6700;&#x8FD1;&#x4E3E;&#x884C;&#x4E00;&#x573A;&#x8FD0;&#x52A8;&#x4F1A;&#xFF0C;&#x5171;&#x6709;17&#x540D;&#x8EAB;&#x9AD8;&#x4E0D;&#x540C;&#x7684;&#x5B66;&#x751F;&#x53C2;&#x52A0;&#x3002;&#x88C1;&#x5224;&#x51C6;&#x5907;&#x4E86;&#x5982;&#x4E0B;&#x989C;&#x8272;&#x7684;&#x5E3D;&#x5B50;&#xFF1A;3&#x9876;&#x7EA2;&#x8272;&#xFF0C;4&#x9876;&#x9EC4;&#x8272;&#xFF0C;5&#x9876;&#x84DD;&#x8272;&#xFF0C;7&#x9876;&#x7EFF;&#x8272;&#x3002;&#x89C4;&#x5219;&#x5982;&#x4E0B;&#xFF1A;&#x8BA9;17&#x4E2A;&#x4EBA;&#x6309;&#x987A;&#x5E8F;&#x7AD9;&#x6210;&#x4E00;&#x5217;&#xFF0C;&#x7ED9;&#x4ED6;&#x4EEC;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x6234;&#x4E00;&#x9876;&#x5E3D;&#x5B50;&#xFF0C;&#x6BCF;&#x4E2A;&#x4EBA;&#x770B;&#x4E0D;&#x89C1;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x5374;&#x80FD;&#x770B;&#x5230;&#x7AD9;&#x5728;&#x524D;&#x9762;&#x7684;&#x90A3;&#x4E9B;&#x4EBA;&#x7684;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x3002;&#x5373;&#xFF0C; &#x4ECE;&#x961F;&#x5934;&#x5230;&#x961F;&#x5C3E;&#xFF0C;&#x5206;&#x522B;&#x6807;&#x8BB0;&#x4E3A;1,2,4,5&#x2026;.17&#x3002;1&#x53F7;&#x5565;&#x90FD;&#x770B;&#x4E0D;&#x5230;&#xFF0C;17&#x53F7;&#x80FD;&#x770B;&#x5230;1~16&#x53F7;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#x3002;&#x8FD9;17&#x540D;&#x5B66;&#x751F;&#x77E5;&#x9053;&#x5E3D;&#x5B50;&#x90FD;&#x6709;&#x4EC0;&#x4E48;&#x989C;&#x8272;&#x4EE5;&#x53CA;&#x6709;&#x591A;&#x5C11;&#x9876;&#x3002; &#x73B0;&#x5728;&#x4ECE;&#x961F;&#x5C3E;&#x5F00;&#x59CB;&#xFF0C;&#x5373;17&#x53F7;&#xFF0C;&#x5F00;&#x59CB;&#x4F9D;&#x6B21;&#x95EE;&#xFF0C;&#x4F60;&#x662F;&#x5426;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x6234;&#x7684;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x5982;&#x679C;&#x4ED6;&#x56DE;&#x7B54;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x5C31;&#x7EE7;&#x7EED;&#x95EE;&#x4ED6;&#x524D;&#x9762;&#x7684;&#x4EBA;&#xFF0C;&#x5373;16,15,14&#x2026;&#x4F9D;&#x6B21;&#x5F80;&#x524D;&#x95EE;&#x3002;&#x95EE;&#x6700;&#x591A;&#x95EE;&#x5230;&#x51E0;&#x53F7;&#xFF0C;&#x4ED6;&#x5C31;&#x4E00;&#x5B9A;&#x80FD;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x6234;&#x7684;&#x662F;&#x4EC0;&#x4E48;&#x989C;&#x8272;&#x7684;&#x5E3D;&#x5B50;&#x3002; &#x7B54;&#x6848;&#x6700;&#x591A;&#x662F;&#x95EE;&#x5230;11&#x53F7;&#x3002; &#x5206;&#x6790;&#x5148;&#x770B;&#x4E00;&#x4E2A;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x7B80;&#x5316;&#x7248;&#xFF1A;&#x6709;3&#x9876;&#x9ED1;&#x5E3D;&#x5B50;&#xFF0C;2&#x9876;&#x767D;&#x5E3D;&#x5B50;&#x3002;&#x8BA9;&#x4E09;&#x4E2A;&#x4EBA;&#x4ECE;&#x524D;&#x5230;&#x540E;&#x7AD9;&#x6210;&#x4E00;&#x6392;&#x3002;&#x4ECE;&#x524D;&#x5230;&#x540E;&#x5206;&#x522B;&#x6807;&#x8BB0;&#x4E3A;1&#x53F7;&#xFF0C;2,&#x53F7;&#xFF0C;3&#x53F7;&#x3002;&#x7ED9;&#x4ED6;&#x4EEC;&#x6BCF;&#x4E2A;&#x4EBA;&#x5934;&#x4E0A;&#x6234;&#x4E00;&#x9876;&#x5E3D;&#x5B50;&#x3002;&#x6BCF;&#x4E2A;&#x4EBA;&#x90FD;&#x770B;&#x4E0D;&#x89C1;&#x81EA;&#x5DF1;&#x6234;&#x7684;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x5374;&#x53EA;&#x80FD;&#x770B;&#x89C1;&#x7AD9;&#x5728;&#x524D;&#x9762;&#x90A3;&#x4E9B;&#x4EBA;&#x7684;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x3002;&#xFF08;&#x6240;&#x4EE5;3&#x53F7;&#x53EF;&#x4EE5;&#x770B;&#x89C1;&#x524D;&#x9762;&#x4E24;&#x4E2A;&#x4EBA;&#x5934;&#x4E0A;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#xFF0C;2&#x53F7;&#x770B;&#x5F97;&#x89C1;1&#x53F7;&#x7684;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x4F46;&#x770B;&#x4E0D;&#x89C1;&#x5728;&#x4ED6;&#x540E;&#x9762;&#x90A3;&#x4E2A;&#x4EBA;&#x7684;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#xFF0C;&#x800C;1&#x53F7;&#x8C01;&#x7684;&#x5E3D;&#x5B50;&#x90FD;&#x770B;&#x4E0D;&#x89C1;&#x3002;&#x73B0;&#x5728;&#x4ECE;3&#x53F7;&#x5F00;&#x59CB;&#xFF0C;&#x95EE;&#x4ED6;&#x662F;&#x4E0D;&#x662F;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x6234;&#x7684;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#xFF0C;&#x5982;&#x679C;&#x4ED6;&#x56DE;&#x7B54;&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x5C31;&#x7EE7;&#x7EED;&#x95EE;&#x4ED6;&#x524D;&#x9762;&#x90A3;&#x4E2A;&#x4EBA;&#x3002;&#x95EE;&#x6700;&#x591A;&#x95EE;&#x5230;&#x51E0;&#x53F7;&#xFF0C;&#x4ED6;&#x5C31;&#x4E00;&#x5B9A;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x6234;&#x7684;&#x662F;&#x4EC0;&#x4E48;&#x5E3D;&#x5B50;&#x3002; &#x7B54;&#x6848;&#x662F;&#xFF0C;1&#x53F7;&#x3002;&#x5206;&#x6790;&#x5982;&#x4E0B;&#xFF1A; 3&#x53F7;&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x90A3;&#x4E48;3&#x53F7;&#x770B;&#x5230;&#x7684;&#x60C5;&#x51B5;&#x6709;&#xFF1A;1&#x9ED1;1&#x767D;&#xFF0C;2&#x9ED1;&#x3002; &#x5728;&#x95EE;2&#x53F7;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;2&#x53F7;&#x770B;&#x5230;&#x7684;&#x662F;&#x767D;&#x8272;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x5C31;&#x53EA;&#x80FD;&#x662F;1&#x9ED1;1&#x767D;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x56E0;&#x6B64;2&#x53F7;&#x5C31;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x6234;&#x7684;&#x662F;&#x9ED1;&#x8272;&#x7684;&#x3002; &#x5982;&#x679C;2&#x53F7;&#x770B;&#x5230;&#x7684;&#x662F;&#x9ED1;&#x8272;&#x7684;&#xFF0C;&#x90A3;&#x4E48;2&#x53F7;&#x5C31;&#x4E0D;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x6234;&#x7684;&#x662F;&#x767D;&#x8FD8;&#x662F;&#x9ED1;&#x8272;&#xFF0C;&#x53EA;&#x597D;&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#x3002;&#x56E0;&#x6B64;&#x5728;1&#x53F7;&#x542C;&#x89C1;&#x4E86;2,3&#x90FD;&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#x4E4B;&#x540E;&#xFF0C;&#x4ED6;&#x5C31;&#x77E5;&#x9053;&#x4E86;&#x81EA;&#x5DF1;&#x6234;&#x7684;&#x662F;&#x9ED1;&#x8272;&#x7684;&#x5E3D;&#x5B50;&#x3002; &#x6362;&#x4E2A;&#x590D;&#x6742;&#x70B9;&#x7684;&#xFF1A;3&#x9876;&#x7EA2;&#x5E3D;&#x5B50;&#xFF0C;4&#x9876;&#x9ED1;&#x5E3D;&#x5B50;&#xFF0C;5&#x9876;&#x767D;&#x5E3D;&#x5B50;&#xFF0C;10&#x4E2A;&#x4EBA;&#x3002;&#x8BE6;&#x7EC6;&#x5217;&#x4E3E;&#x5982;&#x4E0B;&#xFF1A; &#x4ECE;&#x6700;&#x540E;&#x9762;&#x7684;10&#x53F7;&#x5F00;&#x59CB;&#x5206;&#x6790;&#xFF0C;3&#x9876;&#x7EA2;&#x5E3D;&#x5B50;&#xFF0C;4&#x9876;&#x9ED1;&#x5E3D;&#x5B50;&#xFF0C;5&#x9876;&#x767D;&#x5E3D;&#x5B50;&#xFF0C;&#x4ED6;&#x8981;&#x60F3;&#x63A8;&#x7406;&#x51FA;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x90A3;&#x4E48;&#x4ED6;&#x770B;&#x5230;&#x7684;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#x60C5;&#x5F62;&#x4E00;&#x5B9A;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF1A;&#x67D0;&#x4E24;&#x79CD;&#x989C;&#x8272;&#x5E3D;&#x5B50;&#x5168;&#x90E8;&#x51FA;&#x73B0;&#x3002; 10&#x53F7;&#x4E0D;&#x77E5;&#x9053;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x7531;&#x6B64;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#xFF0C;&#x4ED6;&#x770B;&#x5230;&#x7684;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x4E0D;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#xFF1A;3&#x7EA2;4&#x9ED1;&#x3001;3&#x7EA2;5&#x767D;&#x3001;4&#x9ED1;5&#x767D;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x90A3;&#x4E48;&#x4ED6;&#x770B;&#x5230;&#x7684;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x53EA;&#x53EF;&#x80FD;&#x6709;&#x4E0B;&#x8868;7&#x79CD;&#x60C5;&#x51B5;&#xFF1A; &#x5206;&#x6790;9&#x53F7;&#x7684;&#x60C5;&#x51B5;&#xFF0C;9&#x53F7;&#x542C;&#x5230;10&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x90A3;&#x4E48;&#x4ED6;&#x5C31;&#x53EF;&#x80FD;&#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x77E5;&#x9053;10&#x53F7;&#x770B;&#x5230;&#x7684;&#x5E3D;&#x5B50;&#x60C5;&#x51B5;&#x662F;&#x4E0A;&#x9762;7&#x79CD;&#x60C5;&#x51B5;&#x3002;&#x9488;&#x5BF9;&#x4E0A;&#x9762;&#x7684;&#x6BCF;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x6709;&#x7EA2;&#x3001;&#x9ED1;&#x3001;&#x767D;3&#x79CD;&#x53EF;&#x80FD;&#xFF0C;&#x90A3;&#x4E48;&#x603B;&#x5171;&#x5C31;&#x6709;7 &#xD7; 3 = 21 &#x79CD;&#x53EF;&#x80FD;&#x3002;&#x5982;&#x4E0B;&#x8868;&#xFF1A; &#x4E0A;&#x8868;&#x5217;&#x51FA;&#x4E86;9&#x53F7;&#x80FD;&#x591F;&#x770B;&#x5230;&#x6240;&#x6709;&#x53EF;&#x80FD;&#x60C5;&#x51B5;&#xFF0C;&#x7B2C;&#x4E00;&#x5217;&#x8868;&#x793A;9&#x53F7;&#x662F;&#x7EA2;&#x8272;&#x5E3D;&#x5B50;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x7684;&#x989C;&#x8272;&#x7EC4;&#x5408;&#xFF0C;&#x7B2C;&#x4E8C;&#x5217;&#x8868;&#x793A;&#x4ED6;&#x662F;&#x9ED1;&#x8272;&#x5E3D;&#x5B50;&#x65F6;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x7B2C;&#x4E09;&#x5217;&#x5C31;&#x662F;&#x4ED6;&#x662F;&#x767D;&#x8272;&#x5E3D;&#x5B50;&#x65F6;&#x7684;&#x7EC4;&#x5408;&#x3002; &#x4E0A;&#x56FE;&#x7EA2;&#x8272;&#x6807;&#x8BB0;&#x7684;&#xFF0C;&#x8868;&#x793A;&#x5728;21&#x79CD;&#x60C5;&#x51B5;&#x4E2D;&#xFF0C;&#x6CA1;&#x6709;&#x91CD;&#x590D;&#x51FA;&#x73B0;&#x7684;&#x989C;&#x8272;&#x7EC4;&#x5408;&#xFF0C;&#x800C;&#x9EC4;&#x8272;&#x6807;&#x8BB0;&#x7684;&#x5219;&#x662F;&#x6709;&#x91CD;&#x590D;&#x51FA;&#x73B0;&#x7684;&#x989C;&#x8272;&#x7EC4;&#x5408;&#x3002; &#x5982;&#x7EC4;&#x5408;&#xFF08;1&#xFF09;&#xFF1A;&#x7EA2;0&#x9ED1;4&#x767D;4&#xFF0C;&#x5982;&#x679C;9&#x53F7;&#x770B;&#x5230;&#x8FD9;&#x79CD;&#x989C;&#x8272;&#x7EC4;&#x5408;&#xFF0C;&#x90A3;&#x4E48;&#x4ED6;&#x5C31;&#x80FD;&#x5224;&#x65AD;&#x51FA;&#x81EA;&#x5DF1;&#x5E26;&#x7684;&#x662F;&#x7EA2;&#x5E3D;&#x5B50;&#xFF0C;&#x56E0;&#x4E3A;&#xFF0C;&#x6240;&#x6709;21&#x79CD;&#x7EC4;&#x5408;&#x4E2D;&#xFF0C;&#x8FD9;&#x4E2A;&#x7EC4;&#x5408;&#x662F;&#x552F;&#x4E00;&#x7684;&#x3002;&#x800C;&#x5BF9;&#x4E8E;&#x7EC4;&#x5408;&#xFF08;3&#xFF09;&#xFF1A;&#x7EA2;1&#x9ED1;4&#x767D;3&#xFF0C;&#x5728;21&#x79CD;&#x7EC4;&#x5408;&#x4E2D;&#x6709;&#x91CD;&#x590D;&#xFF0C;&#x548C;&#x7EC4;&#x5408;&#xFF08;15&#xFF09;&#x91CD;&#x590D;&#xFF0C;9&#x53F7;&#x6234;&#x7EA2;&#x8272;&#x5E3D;&#x5B50;&#x6216;&#x8005;&#x6234;&#x767D;&#x8272;&#x5E3D;&#x5B50;&#x90FD;&#x662F;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;9&#x53F7;&#x65E0;&#x6CD5;&#x5224;&#x65AD;&#x81EA;&#x5DF1;&#x7684;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#x662F;&#x7EA2;&#x8272;&#x8FD8;&#x662F;&#x767D;&#x8272;&#x3002;9&#x53F7;&#x65E0;&#x6CD5;&#x5224;&#x65AD;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x53EA;&#x53EF;&#x80FD;&#x662F;&#x91CD;&#x590D;&#x51FA;&#x73B0;&#x7684;&#x6807;&#x8BB0;&#x4E3A;&#x9EC4;&#x8272;&#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x4E00;&#x5171;&#x6709;6&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x5982;&#x4E0B;&#x8868;&#xFF1A; &#x5206;&#x6790;8&#x53F7;&#x7684;&#x60C5;&#x51B5;&#xFF0C;8&#x53F7;&#x542C;&#x5230;9&#x53F7;&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x90A3;&#x4E48;&#x4ED6;&#x5C31;&#x53EF;&#x80FD;&#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x77E5;&#x9053;9&#x53F7;&#x770B;&#x5230;&#x7684;&#x5E3D;&#x5B50;&#x60C5;&#x51B5;&#x662F;&#x4E0A;&#x9762;6&#x79CD;&#x60C5;&#x51B5;&#x3002;&#x9488;&#x5BF9;&#x4E0A;&#x9762;&#x7684;&#x6BCF;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x6709;&#x7EA2;&#x3001;&#x9ED1;&#x3001;&#x767D;3&#x79CD;&#x53EF;&#x80FD;&#xFF0C;&#x90A3;&#x4E48;&#x603B;&#x5171;&#x5C31;&#x6709;6 &#xD7; 3 = 18 &#x79CD;&#x53EF;&#x80FD;&#x3002;&#x5982;&#x4E0B;&#x8868;&#xFF1A; &#x7C7B;&#x4F3C;&#x524D;&#x9762;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x4E0A;&#x9762;&#x6807;&#x8BB0;&#x4E3A;&#x7EA2;&#x8272;&#x7684;&#x989C;&#x8272;&#x7EC4;&#x5408;&#xFF0C;&#x662F;&#x5728;18&#x79CD;&#x7EC4;&#x5408;&#x4E2D;&#x552F;&#x4E00;&#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x5C31;&#x662F;8&#x53F7;&#x53EF;&#x4EE5;&#x63A8;&#x65AD;&#x51FA;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x9EC4;&#x8272;&#x7684;&#x7EC4;&#x5408;&#x5219;&#x662F;&#x4ED6;&#x65E0;&#x6CD5;&#x5224;&#x65AD;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x8FD9;&#x79CD;&#x7EC4;&#x5408;&#x4E00;&#x5171;&#x6709;3&#x79CD;&#xFF0C;&#x5982;&#x4E0B;&#x8868;&#xFF1A; &#x5206;&#x6790;7&#x53F7;&#x7684;&#x60C5;&#x51B5;&#xFF0C;7&#x53F7;&#x542C;&#x5230;8&#x53F7;&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x90A3;&#x4E48;&#x4ED6;&#x5C31;&#x53EF;&#x80FD;&#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x77E5;&#x9053;8&#x53F7;&#x770B;&#x5230;&#x7684;&#x5E3D;&#x5B50;&#x60C5;&#x51B5;&#x662F;&#x4E0A;&#x9762;3&#x79CD;&#x60C5;&#x51B5;&#x3002;&#x9488;&#x5BF9;&#x4E0A;&#x9762;&#x7684;&#x6BCF;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x6709;&#x7EA2;&#x3001;&#x9ED1;&#x3001;&#x767D;3&#x79CD;&#x53EF;&#x80FD;&#xFF0C;&#x90A3;&#x4E48;&#x603B;&#x5171;&#x5C31;&#x6709;3 &#xD7; 3 = 9 &#x79CD;&#x53EF;&#x80FD;&#x3002;&#x5982;&#x4E0B;&#x8868;&#xFF1A; &#x7C7B;&#x4F3C;&#x524D;&#x9762;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x4E0A;&#x9762;&#x6807;&#x8BB0;&#x4E3A;&#x7EA2;&#x8272;&#x7684;&#x989C;&#x8272;&#x7EC4;&#x5408;&#xFF0C;&#x662F;&#x5728;9&#x79CD;&#x7EC4;&#x5408;&#x4E2D;&#x552F;&#x4E00;&#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x5C31;&#x662F;7&#x53F7;&#x53EF;&#x4EE5;&#x63A8;&#x65AD;&#x51FA;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x9EC4;&#x8272;&#x7684;&#x7EC4;&#x5408;&#x5219;&#x662F;&#x4ED6;&#x65E0;&#x6CD5;&#x5224;&#x65AD;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x7684;&#x7EC4;&#x5408;&#xFF0C;&#x8FD9;&#x79CD;&#x7EC4;&#x5408;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#xFF0C;&#x90A3;&#x5C31;&#x662F;&#xFF1A;&#x7EA2;1&#x9ED1;2&#x767D;3&#x3002; &#x73B0;&#x5728;&#x5206;&#x6790;6&#x53F7;&#x7684;&#x60C5;&#x51B5;&#xFF0C;6&#x53F7;&#x542C;&#x5230;7&#x53F7;&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x90A3;&#x4E48;&#x4ED6;&#x5C31;&#x53EF;&#x80FD;&#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x77E5;&#x9053;7&#x53F7;&#x770B;&#x5230;&#x7684;&#x5E3D;&#x5B50;&#x60C5;&#x51B5;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#xFF1A;&#x7EA2;1&#x9ED1;2&#x767D;3&#x3002;&#x9488;&#x5BF9;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x6709;&#x7EA2;&#x3001;&#x9ED1;&#x3001;&#x767D;3&#x79CD;&#x53EF;&#x80FD;&#xFF0C;&#x90A3;&#x4E48;&#x603B;&#x5171;&#x5C31;&#x6709;1 &#xD7; 3 = 3 &#x79CD;&#x53EF;&#x80FD;&#x3002;&#x5982;&#x4E0B;&#x8868;&#xFF1A; &#x4E0A;&#x9762;&#x4E09;&#x79CD;&#x60C5;&#x51B5;&#x90FD;&#x662F;&#x552F;&#x4E00;&#x7684;&#xFF0C;6&#x53F7;&#x770B;&#x5230;&#x5176;&#x5B83;&#x4EBA;&#x7684;&#x5E3D;&#x5B50;&#x989C;&#x8272;&#x7EC4;&#x5408;&#x5C31;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x51FA;&#x81EA;&#x5DF1;&#x5E3D;&#x5B50;&#x7684;&#x989C;&#x8272;&#xFF0C;&#x5982;&#x679C;&#x770B;&#x5230;2&#x9876;&#x9ED1;&#x5E3D;3&#x9876;&#x767D;&#x5E3D;&#xFF0C;&#x90A3;6&#x53F7;&#x5C31;&#x53EF;&#x4EE5;&#x5224;&#x65AD;&#x51FA;&#x81EA;&#x5DF1;&#x7684;&#x5E3D;&#x5B50;&#x662F;&#x7EA2;&#x8272;&#x3002; &#x6362;&#x4E2A;&#x601D;&#x8DEF;&#x7406;&#x89E3;&#x5E3D;&#x5B50;&#x6BD4;&#x4EBA;&#x6570;&#x591A;2&#xFF0C;&#x56E0;&#x6B64;&#x6BCF;&#x79CD;&#x989C;&#x8272;&#x7684;&#x5E3D;&#x5B50;&#x5206;&#x522B;&#x81F3;&#x5C11;&#x51FA;&#x73B0;1,2,3,5&#x6B21;&#x3002; &#x5BF9;&#x4E8E;&#x8FD9;&#x4E2A;&#x9898;&#xFF0C;&#x5982;&#x679C;&#x60F3;&#x8BA9;&#x4E00;&#x4E2A;&#x4EBA;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x90A3;&#x4E48;&#x4ED6;&#x9762;&#x524D;&#x5FC5;&#x5B9A;&#x6709;&#x56DB;&#x79CD;&#x989C;&#x8272;&#xFF0C;&#x4E14;&#x6700;&#x5C11;&#x4E3A;1,2,3,5&#x3002;&#x56E0;&#x6B64;&#x5BF9;&#x4E8E;11&#x53F7;&#xFF0C;&#x4ED6;&#x53EA;&#x80FD;&#x770B;&#x5230;10&#x4E2A;&#xFF0C;&#x4E14;&#x77E5;&#x9053;&#x4E86;12~17&#x5168;&#x90FD;&#x8BF4;&#x4E0D;&#x77E5;&#x9053;&#xFF0C;&#x6240;&#x4EE5;&#x5305;&#x62EC;&#x4ED6;&#x5728;&#x5185;&#xFF0C;&#x6EE1;&#x8DB3;4&#x79CD;&#x989C;&#x8272;&#xFF0C;&#x5206;&#x522B;&#x6709;1,2,3,5&#x9876;&#x3002; &#x56E0;&#x6B64;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x79CD;&#x7C7B;&#x578B;&#x7684;&#x9898;&#xFF0C;&#x628A;&#x6240;&#x6709;&#x989C;&#x8272;&#x7684;&#x5E3D;&#x5B50;&#x7684;&#x6700;&#x5C0F;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x76F8;&#x52A0;&#xFF0C;&#x5176;&#x548C;&#x5373;&#x4E3A;&#x6700;&#x591A;&#x95EE;&#x5230;&#x51E0;&#x53F7;&#x3002;&#x5177;&#x4F53;&#x989C;&#x8272;=&#x5404;&#x989C;&#x8272;&#x6700;&#x5C11;&#x4E2A;&#x6570;-&#x4ED6;&#x6240;&#x770B;&#x5230;&#x7684; &#x4E8E;&#x662F;&#xFF0C;&#x5F15;&#x8A00;&#x4E2D;&#x8BF4;&#x7684;&#x90A3;&#x4E2A;&#x9898;&#xFF0C;&#x6700;&#x591A;&#x95EE;&#x5230;11&#x53F7;&#x3002; &#x9898;&#x76EE;&#x6765;&#x6E90;2018&#x963F;&#x91CC;&#x7F51;&#x4E0A;&#x7B14;&#x8BD5;&#x9898;&#x3002; &#x81F4;&#x8C22;&amp;&#x5F15;&#x7528;&#x5F15;&#x7528;&#xFF1A;&#x5E3D;&#x5B50;&#x731C;&#x8272; &#x7279;&#x522B;&#x611F;&#x8C22;&#xFF1A;yz1509]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>逻辑推理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[X86与ARM中的原子操作-原理及实现]]></title>
    <url>%2F%2Fposts%2F2a85d31f%2F</url>
    <content type="text"><![CDATA[&#x524D;&#x8A00;&#x8FD9;&#x4E2A;&#x662F;&#x5728;&#x9762;&#x8BD5;&#x7684;&#x65F6;&#x5019;&#x9047;&#x5230;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5F53;&#x65F6;&#x6CA1;&#x6709;&#x7B54;&#x51FA;&#x6765;&#x3002;&#x56DE;&#x5230;&#x5BB6;&#x4EE5;&#x540E;&#x67E5;&#x4E86;&#x67E5;&#xFF0C;&#x6574;&#x7406;&#x8BB0;&#x5F55;&#x4E0B;&#x6765;&#x3002; &#x539F;&#x95EE;&#x9898;&#xFF1A;&#x4EC0;&#x4E48;&#x6307;&#x4EE4;&#x96C6;&#x652F;&#x6301;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#xFF1F;&#x5176;&#x539F;&#x7406;&#x662F;&#x4EC0;&#x4E48;&#xFF1F;&#x5982;&#x679C;&#x8003;&#x8651;&#x5230;&#x5168;&#x90E8;&#x7684;&#x6307;&#x4EE4;&#x96C6;&#xFF0C;&#x95EE;&#x9898;&#x592A;&#x5927;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x7B80;&#x5316;&#x4E0B;&#x3002;&#x4EE5;X86&#x548C;ARM&#x4E3A;&#x4F8B;&#x3002; &#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x662F;&#x4E0D;&#x53EF;&#x5206;&#x5272;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x5728;&#x6267;&#x884C;&#x5B8C;&#x6BD5;&#x65F6;&#x5B83;&#x4E0D;&#x4F1A;&#x88AB;&#x4EFB;&#x4F55;&#x4E8B;&#x4EF6;&#x4E2D;&#x65AD;&#x3002;&#x5728;&#x5355;&#x5904;&#x7406;&#x5668;&#x7CFB;&#x7EDF;(UniProcessor&#xFF0C;&#x7B80;&#x79F0; UP)&#x4E2D;&#xFF0C;&#x80FD;&#x591F;&#x5728;&#x5355;&#x6761;&#x6307;&#x4EE4;&#x4E2D;&#x5B8C;&#x6210;&#x7684;&#x64CD;&#x4F5C;&#x90FD;&#x53EF;&#x4EE5;&#x8BA4;&#x4E3A;&#x662F;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#xFF0C;&#x56E0;&#x4E3A;&#x4E2D;&#x65AD;&#x53EA;&#x80FD;&#x53D1;&#x751F;&#x5728;&#x6307;&#x4EE4;&#x4E0E;&#x6307;&#x4EE4;&#x4E4B;&#x95F4;&#x3002; &#x6BD4;&#x5982;&#xFF0C;C&#x8BED;&#x8A00;&#x4EE3;&#x7801;1count++ &#x5982;&#x679C;&#x672A;&#x7ECF;&#x4F18;&#x5316;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x751F;&#x6210;&#x5982;&#x4E0B;&#x6C47;&#x7F16;&#xFF1A;123mov eax,[count]inc eaxmov [count],eax &#x8FD9;&#x6837;&#x5728;&#x6709;&#x591A;&#x4E2A;&#x8FDB;&#x7A0B;&#x6267;&#x884C;&#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x65F6;&#xFF0C;&#x5C31;&#x6709;&#x53EF;&#x80FD;&#x4EA7;&#x751F;&#x5E76;&#x53D1;&#x95EE;&#x9898;&#xFF1A;12345678P1&#xFF1A;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;P2&#xFF1A;mov eax,[count]&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0;waitwait&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;mov eax,[count]wait&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;inc eaxwait&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; mov [count],eaxinc eax&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; waitmov [count],eax&#xA0; &#xA0; &#xA0; &#xA0; &#xA0; &#xA0; wait &#x8FD9;&#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002; &#x5728;&#x5355;&#x5904;&#x7406;&#x5668;&#x4E2D;&#xFF0C;&#x89E3;&#x51B3;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#xFF0C;&#x5C06;count++&#x8BED;&#x53E5;&#x7FFB;&#x8BD1;&#x6210;&#x5355;&#x6307;&#x4EE4;&#x64CD;&#x4F5C;1inc [count] X86&#x6307;&#x4EE4;&#x96C6;&#x652F;&#x6301;inc&#x64CD;&#x4F5C;&#xFF0C;&#x8FD9;&#x6837;count&#x64CD;&#x4F5C;&#x53EF;&#x4EE5;&#x5728;&#x4E00;&#x6761;&#x6307;&#x5185;&#x5B8C;&#x6210;&#x3002; &#x8FDB;&#x7A0B;&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x5207;&#x6362;&#x603B;&#x662F;&#x5728;&#x4E00;&#x6761;&#x6307;&#x4EE4;&#x6267;&#x884C;&#x4E4B;&#x540E;&#x5B8C;&#x6210;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x4E0A;&#x8FF0;&#x7684;&#x5E76;&#x53D1;&#x95EE;&#x9898;&#x3002;&#x5BF9;&#x4E8E;&#x5355;&#x5904;&#x7406;&#x5668;&#x6765;&#x8BF4;&#xFF0C;&#x4E00;&#x6761;&#x5904;&#x7406;&#x5668;&#x6307;&#x4EE4;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x3002; &#x540C;&#x6837;&#xFF0C;ARM&#x91CC;&#x7684;SWP&#x548C;X86&#x91CC;&#x7684;XCHG&#x90FD;&#x662F;&#x5BF9;&#x4E8E;&#x5355;&#x5904;&#x7406;&#x5668;&#x6765;&#x8BF4;&#xFF0C;&#x662F;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x3002; &#x4F46;&#x662F;&#xFF0C;&#x5728;&#x591A;&#x5904;&#x7406;&#x5668;&#x7CFB;&#x7EDF;(Symmetric Multi-Processor&#xFF0C;&#x7B80;&#x79F0; SMP)&#x4E2D;&#x60C5;&#x51B5;&#x6709;&#x6240;&#x4E0D;&#x540C;&#xFF0C;&#x7531;&#x4E8E;&#x7CFB;&#x7EDF;&#x4E2D;&#x6709;&#x591A;&#x4E2A;&#x5904;&#x7406;&#x5668;&#x5728;&#x72EC;&#x7ACB;&#x7684;&#x8FD0;&#x884C;&#xFF0C;&#x5373;&#x4F7F;&#x5728;&#x80FD;&#x5355;&#x6761;&#x6307;&#x4EE4;&#x4E2D;&#x5B8C;&#x6210;&#x7684;&#x64CD;&#x4F5C;&#x4E5F;&#x53EF;&#x80FD;&#x53D7;&#x5230;&#x5E72;&#x6270;&#x3002;&#x56E0;&#x4E3A;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5E76;&#x53D1;&#x7684;&#x4E3B;&#x9898;&#x4E0D;&#x518D;&#x662F;&#x8FDB;&#x7A0B;&#xFF0C;&#x800C;&#x662F;&#x5904;&#x7406;&#x5668;&#x3002; X86&#x67B6;&#x6784;Intel X86&#x6307;&#x4EE4;&#x96C6;&#x63D0;&#x4F9B;&#x4E86;&#x6307;&#x4EE4;&#x524D;&#x7F00;lock&#x7528;&#x4E8E;&#x9501;&#x5B9A;&#x524D;&#x7AEF;&#x4E32;&#x884C;&#x603B;&#x7EBF;FSB&#xFF0C;&#x4FDD;&#x8BC1;&#x4E86;&#x6307;&#x4EE4;&#x6267;&#x884C;&#x65F6;&#x4E0D;&#x4F1A;&#x6536;&#x5230;&#x5176;&#x4ED6;&#x5904;&#x7406;&#x5668;&#x7684;&#x5E72;&#x6270;&#x3002; &#x6BD4;&#x5982;&#xFF1A;1lock inc [count] &#x4F7F;&#x7528;lock&#x6307;&#x4EE4;&#x524D;&#x7F00;&#x4E4B;&#x540E;&#xFF0C;&#x5904;&#x7406;&#x671F;&#x95F4;&#x5BF9;count&#x5185;&#x5B58;&#x7684;&#x5E76;&#x53D1;&#x8BBF;&#x95EE;&#xFF08;Read/Write&#xFF09;&#x88AB;&#x7981;&#x6B62;&#xFF0C;&#x4ECE;&#x800C;&#x4FDD;&#x8BC1;&#x4E86;&#x6307;&#x4EE4;&#x7684;&#x539F;&#x5B50;&#x6027;&#x3002; &#x5982;&#x56FE;&#x6240;&#x793A;&#xFF1A; &#x5176;&#x539F;&#x7406;&#x5728;Intel&#x5F00;&#x53D1;&#x624B;&#x518C;&#x6709;&#x5982;&#x4E0B;&#x8BF4;&#x660E;&#xFF1A; Description Causes the processor&#x2019;s LOCK# signal to be asserted during execution of the accompanying instruction (turns the instruction into an atomic instruction). In a multiprocessor environment, the LOCK# signal ensures that the processor has exclusive use of any shared memory while the signal is asserted. The LOCK prefix can be prepended only to the following instructions and only to those forms of the instructions where the destination operand is a memory operand: ADD, ADC, AND, BTC, BTR, BTS, CMPXCHG, CMPXCH8B, CMPXCHG16B, DEC, INC, NEG, NOT, OR, SBB, SUB, XOR, XADD, and XCHG. If the LOCK prefix is used with one of these instructions and the source operand is a memory operand, an undefined opcode exception (#UD) may be generated. An undefined opcode exception will also be generated if the LOCK prefix is used with any instruction not in the above list. The XCHG instruction always asserts the LOCK# signal regardless of the presence or absence of the LOCK prefix. The LOCK prefix is typically used with the BTS instruction to perform a read-modify-write operation on a memory location in shared memory environment. The integrity of the LOCK prefix is not affected by the alignment of the memory field. Memory locking is observed for arbitrarily misaligned fields. &#x5728;&#x6267;&#x884C;&#x4F34;&#x968F;&#x7684;&#x6307;&#x4EE4;&#x671F;&#x95F4;&#x4F7F;&#x5904;&#x7406;&#x5668;&#x7684;LOCK&#xFF03;&#x4FE1;&#x53F7;&#x6709;&#x6548;&#xFF08;&#x5C06;&#x6307;&#x4EE4;&#x53D8;&#x4E3A;&#x539F;&#x5B50;&#x6307;&#x4EE4;&#xFF09;&#x3002; &#x5728;&#x591A;&#x5904;&#x7406;&#x5668;&#x73AF;&#x5883;&#x4E2D;&#xFF0C;LOCK&#xFF03;&#x4FE1;&#x53F7;&#x786E;&#x4FDD;&#x5904;&#x7406;&#x5668;&#x5728;&#x4FE1;&#x53F7;&#x6709;&#x6548;&#x65F6;&#x72EC;&#x5360;&#x4F7F;&#x7528;&#x4EFB;&#x4F55;&#x5171;&#x4EAB;&#x5B58;&#x50A8;&#x5668;&#x3002; OCK&#x524D;&#x7F00;&#x53EA;&#x80FD;&#x9644;&#x52A0;&#x5728;&#x4E0B;&#x9762;&#x7684;&#x6307;&#x4EE4;&#x4E4B;&#x524D;&#xFF0C;&#x5E76;&#x4E14;&#x53EA;&#x9002;&#x7528;&#x4E8E;&#x90A3;&#x4E9B;&#x76EE;&#x6807;&#x64CD;&#x4F5C;&#x6570;&#x662F;&#x5185;&#x5B58;&#x64CD;&#x4F5C;&#x6570;&#x7684;&#x6307;&#x4EE4;&#x683C;&#x5F0F;&#xFF1A;ADD&#xFF0C;ADC&#xFF0C;AND&#xFF0C;BTC&#xFF0C;BTR&#xFF0C;BTS&#xFF0C;CMPXCHG&#xFF0C;CMPXCH8B&#xFF0C;CMPXCHG16B&#xFF0C;DEC&#xFF0C;INC&#xFF0C; NEG&#xFF0C;NOT&#xFF0C;OR&#xFF0C;SBB&#xFF0C;SUB&#xFF0C;XOR&#xFF0C;XADD&#x548C;XCHG&#x3002; &#x5982;&#x679C;LOCK&#x524D;&#x7F00;&#x4E0E;&#x8FD9;&#x4E9B;&#x6307;&#x4EE4;&#x4E4B;&#x4E00;&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#xFF0C;&#x5E76;&#x4E14;&#x6E90;&#x64CD;&#x4F5C;&#x6570;&#x662F;&#x5185;&#x5B58;&#x64CD;&#x4F5C;&#x6570;&#xFF0C;&#x5219;&#x53EF;&#x80FD;&#x4F1A;&#x751F;&#x6210;&#x672A;&#x5B9A;&#x4E49;&#x7684;&#x64CD;&#x4F5C;&#x7801;&#x5F02;&#x5E38;&#xFF08;#UD&#xFF09;&#x3002; &#x5982;&#x679C;LOCK&#x524D;&#x7F00;&#x4E0E;&#x4EFB;&#x4F55;&#x4E0D;&#x5728;&#x4E0A;&#x8FF0;&#x5217;&#x8868;&#x4E2D;&#x7684;&#x6307;&#x4EE4;&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#xFF0C;&#x4E5F;&#x4F1A;&#x4EA7;&#x751F;&#x672A;&#x5B9A;&#x4E49;&#x7684;&#x64CD;&#x4F5C;&#x7801;&#x5F02;&#x5E38;&#x3002; &#x65E0;&#x8BBA;&#x662F;&#x5426;&#x5B58;&#x5728;LOCK&#x524D;&#x7F00;&#xFF0C;XCHG&#x6307;&#x4EE4;&#x90FD;&#x59CB;&#x7EC8;&#x58F0;&#x660E;LOCK&#xFF03;&#x4FE1;&#x53F7;&#x3002; LOCK&#x524D;&#x7F00;&#x901A;&#x5E38;&#x4E0E;BTS&#x6307;&#x4EE4;&#x4E00;&#x8D77;&#x4F7F;&#x7528;&#xFF0C;&#x4EE5;&#x5728;&#x5171;&#x4EAB;&#x5B58;&#x50A8;&#x5668;&#x73AF;&#x5883;&#x4E2D;&#x7684;&#x5B58;&#x50A8;&#x5668;&#x4F4D;&#x7F6E;&#x4E0A;&#x6267;&#x884C;&#x8BFB;&#x53D6; &#x2013; &#x4FEE;&#x6539; &#x2013; &#x5199;&#x5165;&#x64CD;&#x4F5C;&#x3002; LOCK&#x524D;&#x7F00;&#x7684;&#x5B8C;&#x6574;&#x6027;&#x4E0D;&#x53D7;&#x5B58;&#x50A8;&#x5668;&#x5B57;&#x6BB5;&#x5BF9;&#x9F50;&#x7684;&#x5F71;&#x54CD;&#x3002; &#x5185;&#x5B58;&#x9501;&#x5B9A;&#x662F;&#x9488;&#x5BF9;&#x4EFB;&#x610F;&#x4E0D;&#x5BF9;&#x9F50;&#x7684;&#x5B57;&#x6BB5;&#x3002; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x4E2D;&#x7684;&#x5B9E;&#x73B0;Linux&#x6E90;&#x7801;&#x4E2D;&#x5BF9;&#x4E8E;&#x539F;&#x5B50;&#x81EA;&#x589E;&#x4E00;&#x662F;&#x5982;&#x4E0B;&#x5B9A;&#x4E49;&#x7684;&#xFF1A;1234567891011/** * atomic_inc - increment atomic variable * @v: pointer of type atomic_t * * Atomically increments @v by 1. */static __always_inline void atomic_inc(atomic_t *v){ asm volatile(LOCK_PREFIX &quot;incl %0&quot; : &quot;+m&quot; (v-&gt;counter));} LOCK_PREFIX&#x7684;&#x5B9A;&#x4E49;&#x5982;&#x4E0B;&#x6240;&#x793A;&#xFF1A;123456789101112#ifdef CONFIG_SMP#define LOCK_PREFIX_HERE \&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;.pushsection .smp_locks,\&quot;a\&quot;\n&quot;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;.balign 4\n&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;.long 671f - .\n&quot; /* offset */&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;.popsection\n&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&quot;671:&quot;#define LOCK_PREFIX LOCK_PREFIX_HERE &quot;\n\tlock; &quot;#else /* ! CONFIG_SMP */#define LOCK_PREFIX_HERE &quot;&quot;#define LOCK_PREFIX &quot;&quot;#endif &#x53EF;&#x89C1;&#xFF1A; &#x5728;&#x5BF9;&#x79F0;&#x591A;&#x5904;&#x7406;&#x5668;&#x67B6;&#x6784;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;LOCK_PREFIX&#x88AB;&#x89E3;&#x91CA;&#x4E3A;&#x6307;&#x4EE4;&#x524D;&#x7F00;lock&#x3002;&#x800C;&#x5BF9;&#x4E8E;&#x5355;&#x5904;&#x7406;&#x5668;&#x67B6;&#x6784;&#xFF0C;LOCK_PREFIX&#x4E0D;&#x5305;&#x542B;&#x4EFB;&#x4F55;&#x5185;&#x5BB9;&#x3002; &#x53E6;&#x5916;&#xFF0C;&#x5BF9;&#x4E8E;CAS&#xFF0C;&#x6709;cmpxchg&#x6307;&#x4EE4;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;&#x4EE3;&#x7801;&#x5982;&#x4E0B;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758static __always_inline int atomic_cmpxchg(atomic_t *v, int old, int new){&#xA0;&#xA0;&#xA0;&#xA0;return cmpxchg(&amp;v-&gt;counter, old, new);}#define cmpxchg(ptr, old, new)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;__cmpxchg(ptr, old, new, sizeof(*(ptr)))#define __cmpxchg(ptr, old, new, size)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;__raw_cmpxchg((ptr), (old), (new), (size), LOCK_PREFIX)#define __raw_cmpxchg(ptr, old, new, size, lock)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\({&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;__typeof__(*(ptr)) __ret;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;__typeof__(*(ptr)) __old = (old);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;__typeof__(*(ptr)) __new = (new);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;switch (size) {&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;case __X86_CASE_B:&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;volatile u8 *__ptr = (volatile u8 *)(ptr);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;asm volatile(lock &quot;cmpxchgb %2,%1&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;=a&quot; (__ret), &quot;+m&quot; (*__ptr)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;q&quot; (__new), &quot;0&quot; (__old)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;memory&quot;);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;case __X86_CASE_W:&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;volatile u16 *__ptr = (volatile u16 *)(ptr);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;asm volatile(lock &quot;cmpxchgw %2,%1&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;=a&quot; (__ret), &quot;+m&quot; (*__ptr)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;r&quot; (__new), &quot;0&quot; (__old)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;memory&quot;);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;case __X86_CASE_L:&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;volatile u32 *__ptr = (volatile u32 *)(ptr);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;asm volatile(lock &quot;cmpxchgl %2,%1&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;=a&quot; (__ret), &quot;+m&quot; (*__ptr)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;r&quot; (__new), &quot;0&quot; (__old)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;memory&quot;);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;case __X86_CASE_Q:&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;{&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;volatile u64 *__ptr = (volatile u64 *)(ptr);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;asm volatile(lock &quot;cmpxchgq %2,%1&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;=a&quot; (__ret), &quot;+m&quot; (*__ptr)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;r&quot; (__new), &quot;0&quot; (__old)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; : &quot;memory&quot;);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;break;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;default:&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;__cmpxchg_wrong_size();&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;}&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;__ret;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\}) ARM&#x67B6;&#x6784;&#x5728;ARM&#x67B6;&#x6784;&#x4E0B;&#xFF0C;&#x6CA1;&#x6709;LOCK#&#x6307;&#x4EE4;&#xFF0C;&#x5176;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x5982;&#x4E0B;&#xFF1A; ARMv6&#x4E4B;&#x524D;&#x65E9;&#x671F;&#x7684;ARM&#x67B6;&#x6784;&#x662F;&#x4E0D;&#x652F;&#x6301;SMP&#x7684;&#xFF0C;&#x8FD9;&#x4E9B;&#x5355;&#x6838;&#x67B6;&#x6784;&#x7684;CPU&#x5B9E;&#x73B0;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x7684;&#x65B9;&#x5F0F;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5173;&#x95ED;CPU&#x4E2D;&#x65AD;&#x6765;&#x5B8C;&#x6210;&#x7684;&#x3002; &#x5728;Linux&#x5BF9;&#x4E8E;ARM&#x67B6;&#x6784;&#x7684;&#x4EE3;&#x7801;&#x4E0B; &#x6709;&#x5982;&#x4E0B;&#xFF1A;12345678910111213#define&#xA0;ATOMIC_OP_RETURN(op, c_op, asm_op)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\static inline int atomic_##op##_return(int i,&#xA0;atomic_t&#xA0;*v)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\{&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0; unsigned long flags;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0; int val;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;raw_local_irq_save(flags);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\//&#x5173;&#x672C;&#x5730;&#x4E2D;&#x65AD;&#xA0;&#xA0;&#xA0; v-&gt;counter&#xA0;c_op i;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0; val&#xA0;=&#xA0;v-&gt;counter;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;raw_local_irq_restore(flags);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\//&#x5F00;&#x4E2D;&#x65AD;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;val;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\} &#x8FD9;&#x4E2A;&#x662F;&#x597D;&#x591A;&#x64CD;&#x4F5C;&#x5171;&#x7528;&#x7684;&#x4E00;&#x5957;&#x4EE3;&#x7801;&#x3002; &#x5BF9;&#x4E8E;cmpxchg&#xFF1A; 1234567891011static inline int&#xA0;atomic_cmpxchg(atomic_t&#xA0;*v,&#xA0;int&#xA0;old,&#xA0;int&#xA0;new){&#xA0;&#xA0;&#xA0;&#xA0;int&#xA0;ret;&#xA0;&#xA0;&#xA0;&#xA0;unsigned long&#xA0;flags;&#xA0;&#xA0;&#xA0;&#xA0;raw_local_irq_save(flags);&#xA0;&#xA0;&#xA0; ret = v-&gt;counter;&#xA0;&#xA0;&#xA0;&#xA0;if&#xA0;(likely(ret == old))&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0; v-&gt;counter&#xA0;=&#xA0;new;&#xA0;&#xA0;&#xA0;&#xA0;raw_local_irq_restore(flags);&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;ret;} &#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;&#x5BF9;v-&gt;counter&#x7684;&#x64CD;&#x4F5C;&#x662F;&#x4E00;&#x4E2A;&#x4E34;&#x754C;&#x533A;&#xFF0C;&#x6307;&#x4EE4;&#x7684;&#x6267;&#x884C;&#x4E0D;&#x80FD;&#x88AB;&#x6253;&#x65AD;&#xFF0C;&#x5185;&#x5B58;&#x7684;&#x8BBF;&#x95EE;&#x4E5F;&#x9700;&#x8981;&#x4FDD;&#x6301;&#x6CA1;&#x6709;&#x5E72;&#x6270;&#x3002; ARMv6&#x4EE5;&#x524D;&#x7684;&#x7248;&#x672C;&#x901A;&#x8FC7;&#x5173;&#x672C;&#x5730;&#x4E2D;&#x65AD;&#x6765;&#x4FDD;&#x62A4;&#x8FD9;&#x5757;&#x4E34;&#x754C;&#x533A;&#xFF0C;&#x770B;&#x8D77;&#x6765;&#x76F8;&#x5F53;&#x7B80;&#x5355;&#xFF0C;&#x5176;&#x5965;&#x79D8;&#x5C31;&#x5728;&#x4E8E;ARMv6&#x4EE5;&#x524D;&#x7684;&#x7248;&#x672C;&#x4E0D;&#x652F;&#x6301;SMP&#x3002; &#x6BD4;&#x5982;&#x7ECF;&#x5178;&#x7684;read-modify-write&#x95EE;&#x9898;&#xFF0C;&#x5176;&#x672C;&#x8D28;&#x662F;&#x4FDD;&#x6301;&#x4E00;&#x4E2A;&#x5BF9;&#x5185;&#x5B58;read&#x548C;write&#x8BBF;&#x95EE;&#x7684;&#x539F;&#x5B50;&#x6027;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5185;&#x5B58;&#x7684;&#x8BFB;&#x548C;&#x5199;&#x7684;&#x8BBF;&#x95EE;&#x4E0D;&#x80FD;&#x88AB;&#x6253;&#x65AD;&#x3002;&#x5BF9;&#x8BE5;&#x95EE;&#x9898;&#x7684;&#x89E3;&#x51B3;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x786C;&#x4EF6;&#x3001;&#x8F6F;&#x4EF6;&#x6216;&#x8005;&#x8F6F;&#x786C;&#x4EF6;&#x7ED3;&#x5408;&#x7684;&#x65B9;&#x6CD5;&#x6765;&#x8FDB;&#x884C;&#x3002;&#x65E9;&#x671F;&#x7684;ARM CPU&#x7ED9;&#x51FA;&#x7684;&#x65B9;&#x6848;&#x5C31;&#x662F;&#x4F9D;&#x8D56;&#x786C;&#x4EF6;&#xFF1A;SWP&#x8FD9;&#x4E2A;&#x6C47;&#x7F16;&#x6307;&#x4EE4;&#x6267;&#x884C;&#x4E86;&#x4E00;&#x6B21;&#x8BFB;&#x5185;&#x5B58;&#x64CD;&#x4F5C;&#x3001;&#x4E00;&#x6B21;&#x5199;&#x5185;&#x5B58;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x4ECE;&#x7A0B;&#x5E8F;&#x5458;&#x7684;&#x89D2;&#x5EA6;&#x770B;&#xFF0C;SWP&#x8FD9;&#x6761;&#x6307;&#x4EE4;&#x5C31;&#x662F;&#x539F;&#x5B50;&#x7684;&#xFF0C;&#x8BFB;&#x5199;&#x4E4B;&#x95F4;&#x4E0D;&#x4F1A;&#x88AB;&#x4EFB;&#x4F55;&#x7684;&#x5F02;&#x6B65;&#x4E8B;&#x4EF6;&#x6253;&#x65AD;&#x3002;&#x5177;&#x4F53;&#x5E95;&#x5C42;&#x7684;&#x786C;&#x4EF6;&#x662F;&#x5982;&#x4F55;&#x505A;&#x7684;&#x5462;&#xFF1F;&#x8FD9;&#x65F6;&#x5019;&#xFF0C;&#x786C;&#x4EF6;&#x4F1A;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;lock signal&#xFF0C;&#x5728;&#x8FDB;&#x884C;memory&#x64CD;&#x4F5C;&#x7684;&#x65F6;&#x5019;&#x8BBE;&#x5B9A;lock&#x4FE1;&#x53F7;&#xFF0C;&#x544A;&#x8BC9;&#x603B;&#x7EBF;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x4E0D;&#x53EF;&#x88AB;&#x4E2D;&#x65AD;&#x7684;&#x5185;&#x5B58;&#x8BBF;&#x95EE;&#xFF0C;&#x76F4;&#x5230;&#x5B8C;&#x6210;&#x4E86;SWP&#x9700;&#x8981;&#x8FDB;&#x884C;&#x7684;&#x4E24;&#x6B21;&#x5185;&#x5B58;&#x8BBF;&#x95EE;&#x4E4B;&#x540E;&#x518D;clear lock&#x4FE1;&#x53F7;&#x3002; &#x591A;&#x8BF4;&#x4E00;&#x70B9;&#x5173;&#x4E8E;SWP&#x548C;SWPB&#x7684;&#x5185;&#x5BB9;&#xFF0C;&#x8FD9;&#x4E24;&#x4E2A;&#x6307;&#x4EE4;&#x662F;&#x7528;&#x6765;&#x540C;&#x6B65;&#x7684;&#xFF0C;&#x4E0D;&#x662F;&#x7528;&#x6765;&#x6267;&#x884C;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x7684;&#x3002; &#x5728;&#x5C06;&#x72EC;&#x5360;&#x8BBF;&#x95EE;&#x5F15;&#x5165;ARM&#x67B6;&#x6784;&#x4E4B;&#x524D;&#xFF0C;SWP&#x548C;SWPB&#x6307;&#x4EE4;&#x5E38;&#x7528;&#x4E8E;&#x540C;&#x6B65;&#x3002; &#x5176;&#x5C40;&#x9650;&#x6027;&#x662F;&#xFF1A; &#x5982;&#x679C;&#x4E2D;&#x65AD;&#x5728;&#x89E6;&#x53D1;&#x4EA4;&#x6362;&#x64CD;&#x4F5C;&#x65F6;&#x89E6;&#x53D1;&#xFF0C;&#x5219;&#x5904;&#x7406;&#x5668;&#x5FC5;&#x987B;&#x5728;&#x6267;&#x884C;&#x4E2D;&#x65AD;&#x4E4B;&#x524D;&#x5B8C;&#x6210;&#x6307;&#x4EE4;&#x7684;&#x52A0;&#x8F7D;&#x548C;&#x5B58;&#x50A8;&#x90E8;&#x5206;&#xFF0C;&#x4ECE;&#x800C;&#x589E;&#x52A0;&#x4E2D;&#x65AD;&#x5EF6;&#x8FDF;&#x3002; &#x7531;&#x4E8E;&#x72EC;&#x7ACB;&#x52A0;&#x8F7D;&#x548C;&#x72EC;&#x5360;&#x5B58;&#x50A8;&#x662F;&#x5355;&#x72EC;&#x7684;&#x6307;&#x4EE4;&#xFF0C;&#x56E0;&#x6B64;&#x5728;&#x4F7F;&#x7528;&#x65B0;&#x7684;&#x540C;&#x6B65;&#x57FA;&#x5143;&#x65F6;&#x4F1A;&#x964D;&#x4F4E;&#x6B64;&#x6548;&#x679C;&#x3002; &#x4F46;&#x662F;&#x5728;&#x591A;&#x6838;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x4EA4;&#x6362;&#x6307;&#x4EE4;&#x671F;&#x95F4;&#x963B;&#x6B62;&#x6240;&#x6709;&#x5904;&#x7406;&#x5668;&#x8BBF;&#x95EE;&#x4E3B;&#x5B58;&#x4F1A;&#x964D;&#x4F4E;&#x7CFB;&#x7EDF;&#x6027;&#x80FD;&#x3002;&#x5728;&#x5904;&#x7406;&#x5668;&#x5DE5;&#x4F5C;&#x5728;&#x4E0D;&#x540C;&#x9891;&#x7387;&#x4F46;&#x662F;&#x5171;&#x4EAB;&#x76F8;&#x540C;&#x4E3B;&#x5B58;&#x7684;&#x591A;&#x6838;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x60C5;&#x51B5;&#x5C24;&#x5176;&#x5982;&#x6B64;&#x3002; &#x6240;&#x4EE5;&#x5728;ARMv6&#x53CA;&#x4EE5;&#x540E;&#x7684;&#x7248;&#x672C;&#x4E2D;&#xFF0C;&#x5F03;&#x7528;&#x4E86;SWP&#x3002; ARMv6&#x67B6;&#x6784;&#x5F15;&#x5165;&#x4E86;&#x72EC;&#x5360;&#x8BBF;&#x95EE;&#x5185;&#x5B58;&#x4E3A;&#x6B62;&#x7684;&#x6982;&#x5FF5;&#xFF0C;&#x63D0;&#x4F9B;&#x4E86;&#x66F4;&#x7075;&#x6D3B;&#x7684;&#x539F;&#x5B50;&#x5185;&#x5B58;&#x66F4;&#x65B0;&#x3002; ARMv6&#x4F53;&#x7CFB;&#x7ED3;&#x6784;&#x4EE5;Load-Exclusive&#x548C;Store-Exclusive&#x540C;&#x6B65;&#x539F;&#x8BED;LDREX&#x548C;STREX&#x7684;&#x5F62;&#x5F0F;&#x5F15;&#x5165;&#x4E86;Load Link&#x548C;Store Conditional&#x6307;&#x4EE4;&#x3002; &#x4ECE;ARMv6T2&#x5F00;&#x59CB;&#xFF0C;&#x8FD9;&#x4E9B;&#x6307;&#x4EE4;&#x5728;ARM&#x548C;Thumb&#x6307;&#x4EE4;&#x96C6;&#x4E2D;&#x53EF;&#x7528;&#x3002; &#x72EC;&#x7ACB;&#x52A0;&#x8F7D;&#x548C;&#x4E13;&#x6709;&#x5B58;&#x50A8;&#x63D0;&#x4F9B;&#x4E86;&#x7075;&#x6D3B;&#x548C;&#x53EF;&#x6269;&#x5C55;&#x7684;&#x540C;&#x6B65;&#xFF0C;&#x53D6;&#x4EE3;&#x4E86;&#x5F03;&#x7528;&#x7684;SWP&#x548C;SWPB&#x6307;&#x4EE4;&#x3002; &#x540E;&#x6765;&#x4F7F;&#x7528;&#x7684;&#x662F;LDREX&#x548C;STREX&#x6307;&#x4EE4;&#x3002; armv7&#x4E4B;&#x540E;&#x7EE7;&#x7EED;&#x770B;&#x4EE3;&#x7801;&#xFF0C;&#x5728;armv7&#x4E4B;&#x540E;&#x5C31;&#x7528;&#x4E86;ldrex&#x548C;strex 1234567891011121314151617181920#define&#xA0;ATOMIC_OP_RETURN(op, c_op, asm_op)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\static inline int atomic_##op##_return_relaxed(int i,&#xA0;atomic_t&#xA0;*v)&#xA0;&#xA0;\{&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0; unsigned long tmp;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0; int result;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;prefetchw(&amp;v-&gt;counter);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0; __asm__&#xA0;__volatile__(&quot;@ atomic_&quot;&#xA0;#op&#xA0;&quot;_return\n&quot;&#xA0;&#xA0;&#xA0;&#xA0;\ /* &#x4F18;&#x5316;&#x5C4F;&#x969C;&#xFF0C;&#x9632;&#x6B62;&#x7F16;&#x8BD1;&#x5668;&#x4F18;&#x5316; */&quot;1: ldrex&#xA0;&#xA0;&#xA0;%0, [%3]\n&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\/*&#x3010;1&#x3011;&#x72EC;&#x5360;&#x65B9;&#x5F0F;&#x52A0;&#x8F7D;v-&gt;counter&#x5230;result*/&quot;&#xA0;&#xA0; &quot;&#xA0;#asm_op&#xA0;&quot;&#xA0;%0,&#xA0;%0,&#xA0;%4\n&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\ /*&#x3010;2&#x3011;&#x5BF9;result&#x8FDB;&#x884C;&#x64CD;&#x4F5C;*/&quot;&#xA0;&#xA0; strex&#xA0;&#xA0;&#xA0;%1,&#xA0;%0, [%3]\n&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\ /*&#x3010;3&#x3011;&#x72EC;&#x5360;&#x65B9;&#x5F0F;&#x5C06;result&#x503C;&#x5199;&#x56DE;v-&gt;counter*/&quot;&#xA0;&#xA0; teq&#xA0;%1, #0\n&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\ /*&#x3010;4&#x3011;&#x5224;&#x65AD;strex&#x66F4;&#x65B0;&#x5185;&#x5B58;&#x662F;&#x5426;&#x6210;*/&quot;&#xA0;&#xA0; bne 1b&quot;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\ /*&#x3010;5&#x3011;&#x4E0D;&#x6210;&#x529F;&#x8DF3;&#x8F6C;&#x5230;1:*/&#xA0;&#xA0;&#xA0; :&#xA0;&quot;=&amp;r&quot;&#xA0;(result),&#xA0;&quot;=&amp;r&quot;&#xA0;(tmp),&#xA0;&quot;+Qo&quot;&#xA0;(v-&gt;counter)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\/*&#x8F93;&#x51FA;&#x90E8;*/&#xA0;&#xA0;&#xA0; :&#xA0;&quot;r&quot;&#xA0;(&amp;v-&gt;counter),&#xA0;&quot;Ir&quot;&#xA0;(i)&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\/*&#x8F93;&#x5165;&#x90E8;*/&#xA0;&#xA0;&#xA0; :&#xA0;&quot;cc&quot;);&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\/*&#x635F;&#x574F;&#x90E8;*/&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\&#xA0;&#xA0;&#xA0;&#xA0;return&#xA0;result;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;&#xA0;\} &#x8BBF;&#x5B58;&#x6307;&#x4EE4;LDREX/STREX&#x548C;&#x666E;&#x901A;&#x7684;LDR/STR&#x8BBF;&#x5B58;&#x6307;&#x4EE4;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x5B83;&#x662F;&#x201C;&#x72EC;&#x5360;&#x201D;&#x8BBF;&#x5B58;&#x6307;&#x4EE4;&#x3002;&#x8FD9;&#x5BF9;&#x6307;&#x4EE4;&#x8BBF;&#x5B58;&#x8FC7;&#x7A0B;&#x7531;&#x4E00;&#x4E2A;&#x79F0;&#x4F5C;&#x201C;exclusive monitor&#x201D;&#x7684;&#x90E8;&#x4EF6;&#x6765;&#x76D1;&#x89C6;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x72EC;&#x5360;&#x8BBF;&#x95EE;&#x3002; &#x5148;&#x770B;&#x770B;&#x8FD9;&#x5BF9;&#x72EC;&#x5360;&#x8BBF;&#x5B58;&#x6307;&#x4EE4;&#xFF1A; (1)LDREX R1 &#xFF0C;[R0] &#x6307;&#x4EE4;&#x662F;&#x4EE5;&#x72EC;&#x5360;&#x7684;&#x65B9;&#x5F0F;&#x4ECE;R0&#x6240;&#x6307;&#x7684;&#x5730;&#x5740;&#x4E2D;&#x53D6;&#x4E00;&#x4E2A;&#x5B57;&#x5B58;&#x653E;&#x5230;R0&#x4E2D;&#xFF1B; (2)STREX R2&#xFF0C;R1&#xFF0C;[R0] &#x6307;&#x4EE4;&#x662F;&#x4EE5;&#x72EC;&#x5360;&#x7684;&#x65B9;&#x5F0F;&#x7528;R1&#x6765;&#x66F4;&#x65B0;&#x5185;&#x5B58;&#xFF0C;&#x5982;&#x679C;&#x72EC;&#x5360;&#x8BBF;&#x95EE;&#x6761;&#x4EF6;&#x5141;&#x8BB8;&#xFF0C;&#x5219;&#x66F4;&#x65B0;&#x6210;&#x529F;&#x5E76;&#x8FD4;&#x56DE;0&#x5230;R2&#xFF0C;&#x5426;&#x5219;&#x5931;&#x8D25;&#x8FD4;&#x56DE;1&#x5230;R2&#x3002; &#x5173;&#x4E8E;LDREX&#x548C;STREX&#x7684;&#x539F;&#x7406;&#xFF0C;&#x53E6;&#x6709;&#x4E00;&#x7BC7;&#x535A;&#x5BA2;&#x8BB2;&#x7684;&#x5F88;&#x597D;&#xFF0C;&#x53EF;&#x4EE5;&#x53BB;&#x770B;&#x770B;&#x3002; &#x53C2;&#x8003;&#x8D44;&#x6599;Linux&#x5185;&#x6838;&#x540C;&#x6B65;&#x673A;&#x5236;&#x4E4B;&#xFF08;&#x4E00;&#xFF09;&#xFF1A;&#x539F;&#x5B50;&#x64CD;&#x4F5C; Linux&#x7684;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x4E0E;&#x540C;&#x6B65;&#x673A;&#x5236; &#x5173;&#x4E8E;&#x5355;CPU&#xFF0C;&#x591A;CPU&#x4E0A;&#x7684;&#x539F;&#x5B50;&#x64CD;&#x4F5C; &#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x2013;ARM&#x67B6;&#x6784; ARM&#x5E73;&#x53F0;&#x4E0B;&#x72EC;&#x5360;&#x8BBF;&#x95EE;&#x6307;&#x4EE4;LDREX&#x548C;STREX&#x7684;&#x539F;&#x7406;&#x4E0E;&#x4F7F;&#x7528;&#x8BE6;&#x89E3;]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>ARM</tag>
        <tag>X86</tag>
        <tag>原子操作</tag>
        <tag>操作系统</tag>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-1852 Ants]]></title>
    <url>%2F%2Fposts%2F1ddc535a%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x8682;&#x8681;&#x5728;&#x6746;&#x5B50;&#x4E0A;&#x884C;&#x8D70;&#xFF0C;&#x6C42;&#x8682;&#x8681;&#x6389;&#x843D;&#x7684;&#x6700;&#x5FEB;&#x548C;&#x6700;&#x6162;&#x65F6;&#x95F4;&#x3002; &#x8F93;&#x5165;&#x4E00;&#x961F;&#x8682;&#x8681;&#x5728;1&#x5398;&#x7C73;&#x957F;&#x7684;&#x6C34;&#x5E73;&#x6746;&#x4E0A;&#x884C;&#x8D70;&#xFF0C;&#x6BCF;&#x6746;&#x4EE5;1&#x5398;&#x7C73;/&#x79D2;&#x7684;&#x901F;&#x5EA6;&#x5300;&#x901F;&#x884C;&#x8FDB;&#x3002;&#x5F53;&#x4E00;&#x53EA;&#x884C;&#x8D70;&#x7684;&#x8682;&#x8681;&#x5230;&#x8FBE;&#x6746;&#x7684;&#x4E00;&#x7AEF;&#x65F6;&#xFF0C;&#x5B83;&#x4F1A;&#x7ACB;&#x5373;&#x6389;&#x843D;&#x3002;&#x5F53;&#x4E24;&#x53EA;&#x8682;&#x8681;&#x76F8;&#x9047;&#x65F6;&#xFF0C;&#x4ED6;&#x4EEC;&#x8F6C;&#x8FC7;&#x5934;&#x53BB;&#x5F00;&#x59CB;&#x671D;&#x76F8;&#x53CD;&#x7684;&#x65B9;&#x5411;&#x884C;&#x8D70;&#x3002;&#x53EA;&#x77E5;&#x9053;&#x8682;&#x8681;&#x5728;&#x7AFF;&#x5B50;&#x4E0A;&#x7684;&#x539F;&#x59CB;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x8682;&#x8681;&#x884C;&#x8D70;&#x7684;&#x65B9;&#x5411;&#x3002;&#x6C42;&#x6240;&#x6709;&#x8682;&#x8681;&#x4ECE;&#x7AEF;&#x70B9;&#x4E0A;&#x6389;&#x843D;&#x6240;&#x9700;&#x7684;&#x6700;&#x5FEB;&#x548C;&#x6700;&#x6162;&#x7684;&#x65F6;&#x95F4;&#x3002; &#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x7684;&#x6570;&#x91CF;&#x3002; &#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#xFF0C;&#x9996;&#x5148;&#x7ED9;&#x51FA;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x8FD9;&#x6839;&#x6746;&#x5B50;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x5355;&#x4F4D;cm&#xFF0C;&#x548C;&#x8FD9;&#x6839;&#x6746;&#x5B50;&#x4E0A;&#x8682;&#x8681;&#x7684;&#x6570;&#x91CF;N&#x3002;&#x7B2C;&#x4E09;&#x884C;&#x662F;N&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x7ED9;&#x51FA;&#x4E86;&#x6BCF;&#x4E2A;&#x8682;&#x8681;&#x5728;&#x6746;&#x5B50;&#x4E0A;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5373;&#x4ECE;&#x6746;&#x5B50;&#x5DE6;&#x7AEF;&#x5F00;&#x59CB;&#x6D4B;&#x91CF;&#x7684;&#x8DDD;&#x79BB;&#xFF0C;&#x6CA1;&#x6709;&#x7279;&#x522B;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7684;&#x6574;&#x6570;&#x90FD;&#x4E0D;&#x5927;&#x4E8E;1000000&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x6700;&#x65E9;&#x7684;&#x5168;&#x6389;&#x843D;&#x7684;&#x65F6;&#x95F4;&#x548C;&#x6700;&#x665A;&#x7684;&#x5168;&#x6389;&#x843D;&#x7684;&#x65F6;&#x95F4;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x628A;&#x8682;&#x8681;&#x76F8;&#x9047;&#x770B;&#x505A;&#x4EA4;&#x6362;&#x4F4D;&#x7F6E;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738#include&lt;cmath&gt;#include&lt;algorithm&gt;#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;void solution(){ int a; cin &gt;&gt; a; int L = 0, n = 0; int X; int minT = 0; int maxT = 0; for (int i = 0; i &lt; a; i++) { minT = 0; maxT = 0; cin &gt;&gt; L &gt;&gt; n; //&#x6700;&#x77ED;&#x7684;&#x65F6;&#x95F4;&#x5C31;&#x662F;&#x5411;&#x5176;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x7AEF;&#x70B9;&#x53BB;&#x8D70; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; X; minT = max(minT, min(L - X, X)); maxT = max(maxT, max(L - X, X)); } cout &lt;&lt; minT &lt;&lt; &apos; &apos; &lt;&lt; maxT &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910Sample Input210 32 6 7214 711 12 7 13 176 23 191Sample Output4 838 207]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>POJ</tag>
        <tag>基础题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[POJ-2386 Lake Counting]]></title>
    <url>%2F%2Fposts%2Fb1ffa901%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x4E00;&#x7247;&#x5730;&#x91CC;&#x9762;&#x6709;&#x4E00;&#x4E9B;&#x79EF;&#x6C34;&#xFF0C;&#x8981;&#x6C42;&#x6570;&#x6E05;&#x695A;&#x4E00;&#x5171;&#x6709;&#x51E0;&#x7247;&#x79EF;&#x6C34;&#xFF0C;W&#x8868;&#x793A;&#x6C34;&#xFF0C;&#x201D; . &#x201C; &#x8868;&#x793A;&#x65F1;&#x5730;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#xFF0C;N&#x548C;M &#x63A5;&#x4E0B;&#x6765;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;M&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x8868;&#x793A;&#x8FD9;&#x4E00;&#x7247;&#x7530;&#x5730;&#xFF0C;W&#x8868;&#x793A;&#x6C34;&#xFF0C;&#x201D; . &#x201C; &#x8868;&#x793A;&#x65F1;&#x5730;&#x3002; &#x8F93;&#x51FA;&#x6C60;&#x5858;&#x7684;&#x6570;&#x91CF;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4F7F;&#x7528;DFS&#xFF0C;&#x4ECE;&#x4EFB;&#x610F;&#x7684;W&#x5C31;&#x5F00;&#x59CB;&#xFF0C;&#x4E0D;&#x505C;&#x7684;&#x628A;&#x4E34;&#x8857;&#x7684;&#x90E8;&#x5206;&#x7528; &#x201C; . &#x201C;&#x4EE3;&#x66FF;&#xFF0C;&#x4E8E;&#x662F;&#x4E00;&#x6B21;DFS&#x4E4B;&#x540E;&#xFF0C;&#x4E0E;&#x521D;&#x59CB;&#x7684;&#x8FD9;&#x4E2A;W&#x94FE;&#x63A5;&#x7684;&#x6240;&#x6709;W&#x90FD;&#x88AB;&#x66FF;&#x6362;&#x6210;&#x4E86;&#x201D; . &#x201C;&#x3002;&#x7EE7;&#x7EED;&#x4E0B;&#x53BB;&#xFF0C;&#x76F4;&#x5230;&#x56FE;&#x4E2D;&#x4E0D;&#x518D;&#x5B58;&#x5728;W&#x4E3A;&#x6B62;&#x3002;&#x603B;&#x5171;&#x8FDB;&#x884C;&#x7684;DFS&#x6B21;&#x6570;&#x5C31;&#x662F;&#x7B54;&#x6848;&#x3002;8&#x4E2A;&#x65B9;&#x5411;&#x5171;&#x5BF9;&#x5E94;&#x4E86;8&#x79CD;&#x72B6;&#x6001;&#x7684;&#x8F6C;&#x4E49;&#xFF0C;&#x5355;&#x4E2A;&#x683C;&#x5B50;&#x4F5C;&#x4E3A;DFS&#x7684;&#x53C2;&#x6570;&#x81F3;&#x591A;&#x5457;&#x8C03;&#x7528;&#x4E00;&#x6B21;&#x3002;&#x6240;&#x4EE5;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5C31;&#x662F;O(8&#xD7;N&#xD7;M)=O(M&#xD7;N)&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758//&#x83DC;&#x56ED;&#x5B50;&#x4E2D;&#x7684;&#x79EF;&#x6C34;&#xFF0C;DFS#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;int N, M;char field[101][101];void DFS(int x,int y) { field[x][y] = &apos;.&apos;; //&#x6807;&#x8BB0;&#x4E3A;&#x8BBF;&#x95EE;&#x8FC7; for (int dx = -1; dx &lt;= 1; dx++) { for (int dy = -1; dy &lt;= 1; dy++)//&#x5468;&#x56F4;&#x7684;&#x533A;&#x57DF; { int newX = x + dx; int newY = y + dy; //&#x5224;&#x65AD;&#x5176;&#x5468;&#x56F4;&#x7684;&#x533A;&#x57DF;&#xFF0C;1&#xFF0C;&#x662F;&#x5426;&#x5728;&#x9662;&#x5B50;&#x91CC;&#xFF0C;2&#xFF0C;&#x662F;&#x5426;&#x6709;&#x79EF;&#x6C34;&#xFF0C; if (0&lt;=newX&amp;&amp;newX&lt;N&amp;&amp;0&lt;=newY&amp;&amp;newY&lt;M&amp;&amp;field[newX][newY]==&apos;W&apos;) { DFS(newX, newY); } } } return;}int res = 0;void solution() { cin&gt;&gt;N&gt;&gt;M; for (int i = 0; i &lt; N; i++) { for (int j = 0; j &lt; M; j++) { cin &gt;&gt; field[i][j]; } } //&#x5168;&#x90E8;&#x90FD;&#x8F93;&#x5165;&#x5B8C;&#xFF0C;&#x5F00;&#x59CB;&#x904D;&#x5386; for (int i = 0; i &lt; N; i++) { for (int j = 0; j &lt; M; j++) { if (field[i][j]==&apos;W&apos;) { DFS(i, j); res++; } } } cout &lt;&lt; res &lt;&lt; endl;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516Sample Input10 12W........WW..WWW.....WWW....WW...WW..........WW..........W....W......W...W.W.....WW.W.W.W.....W..W.W......W...W.......W.Sample Output3&#x6709;&#x4E09;&#x4E2A;&#x6C60;&#x5858;&#xFF0C;&#x4E00;&#x4E2A;&#x5728;&#x5DE6;&#x4E0A;&#x89D2;&#xFF0C;&#x4E00;&#x4E2A;&#x5728;&#x5DE6;&#x4E0B;&#x89D2;&#xFF0C;&#x4E00;&#x4E2A;&#x5728;&#x53F3;&#x4FA7;&#x3002;]]></content>
      <categories>
        <category>POJ</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>DFS</tag>
        <tag>POJ</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1064 Complete Binary Search Tree (30)]]></title>
    <url>%2F%2Fposts%2Fd57071f2%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x7ED9;&#x5B9A;&#x4E00;&#x4E32;&#x5E8F;&#x5217;&#xFF0C;&#x5DF2;&#x77E5;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x80FD;&#x591F;&#x6210;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#xFF0C;&#x6C42;&#x51FA;&#x8FD9;&#x4E2A;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x662F;N&#x4E2A;&#x975E;&#x8D1F;&#x6574;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x8FD9;&#x4E2A;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x5C42;&#x6B21;&#x904D;&#x5386;&#x5E8F;&#x5217;&#xFF0C;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7531;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x5DF2;&#x77E5;&#x8FD9;&#x662F;&#x4E00;&#x68F5;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x4E5F;&#x662F;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x3002; &#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x7684;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x5E8F;&#x5217;&#x6EE1;&#x8DB3;&#xFF1A;&#x6309;&#x952E;&#x503C;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5217;&#x3002;&#x6240;&#x4EE5;&#x5C06;&#x7ED9;&#x5B9A;&#x5E8F;&#x5217;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x5373;&#x53EF;&#x5F97;&#x5230;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x3002; &#x5728;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#xFF1A;&#x7528;&#x6570;&#x7EC4;&#x8868;&#x793A;&#x7684;&#x8BDD;&#xFF0C;&#x7F16;&#x53F7;&#x4E3A;i&#x8282;&#x70B9;&#x7684;&#x505A;&#x5B69;&#x5B50;&#x5E8F;&#x53F7;&#x4E3A;2*i&#xFF0C;&#x53F3;&#x5B69;&#x5B50;&#x4E3A;2*i+1&#x3002; &#x901A;&#x8FC7;&#x9012;&#x5F52;&#x91CD;&#x5EFA;&#x4E8C;&#x53C9;&#x6811;&#x3002; Tips&#x901A;&#x8FC7;&#x4E2D;&#x5E8F;&#x91CD;&#x5EFA;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x601D;&#x60F3;&#x5982;&#x4E0B;&#xFF1A; &#x5047;&#x8BBE;&#x4E00;&#x5171;&#x6709;10&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x6700;&#x5C0F;&#x7684;&#x90A3;&#x4E2A;&#x6570;&#x4E00;&#x5B9A;&#x5728;&#x6700;&#x5DE6;&#x4E0B;&#x89D2;&#xFF0C;&#x662F;&#x4E8C;&#x53C9;&#x641C;&#x7D22;&#x6811;&#x4E2D;&#x5E8F;&#x904D;&#x5386;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x3002; &#x7B2C;&#x4E8C;&#x5C0F;&#x7684;&#x662F;&#x6700;&#x5C0F;&#x7684;&#x8282;&#x70B9;&#x7684;&#x7236;&#x8282;&#x70B9;&#x3002; &#x7B2C;&#x4E09;&#x5C0F;&#x7684;&#x662F;&#x7B2C;&#x4E8C;&#x5C0F;&#x7684;&#x53F3;&#x5B69;&#x5B50;&#x3002; &#x5982;&#x679C;&#x7528;&#x6570;&#x7EC4;&#x5B58;&#x50A8;&#x8FD9;&#x4E2A;&#x6811;&#x3002;&#x6700;&#x5C0F;&#x8282;&#x70B9;&#x5728;&#x6570;&#x7EC4;&#x4E2D;&#x662F;&#x7B2C;8&#x4E2A;&#xFF0C;8&#x662F;2^N&#xFF0C;&#x6EE1;&#x8DB3;2^N&lt;=10&#xFF0C;&#x4E14;N&#x6700;&#x5927;&#x3002;&#xFF08;&#x56E0;&#x4E3A;&#x5728;&#x6700;&#x5DE6;&#x4E0B;&#x89D2;&#xFF09;&#x3002; &#x5199;&#x7684;&#x6BD4;&#x8F83;&#x7ED5;&#xFF0C;&#x770B;&#x4EE3;&#x7801;&#xFF1A; 1234567891011void creat_tree(int root){ if (root&gt;N) { return; } int lchild = root * 2, rchild = root * 2 + 1; creat_tree(lchild); rebuild_tree[root] = node[pos++]; creat_tree(rchild);} &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;iostream&gt;#include&lt;algorithm&gt;//#pragma warning(disable:4996)using namespace std;int node[1001], rebuild_tree[1001];int N, pos = 0;bool cmp(int a, int b){ return a &lt; b;}void creat_tree(int root){ if (root&gt;N) { return; } int lchild = root * 2, rchild = root * 2 + 1; creat_tree(lchild); rebuild_tree[root] = node[pos++]; creat_tree(rchild);}void solution(){ cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; node[i]; } sort(node, node + N, cmp); creat_tree(1); for (int i = 1; i &lt;= N; i++) { cout &lt;&lt; rebuild_tree[i]; if (i&lt;N) { cout &lt;&lt; &apos; &apos;; } }}int main(){ //freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345Sample Input:101 2 3 4 5 6 7 8 9 0Sample Output:6 3 8 1 5 7 9 0 2 4]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>二叉搜索树</tag>
        <tag>完全二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1063 Set Similarity (25)]]></title>
    <url>%2F%2Fposts%2F4b14e451%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6C42;&#x4E24;&#x4E2A;&#x96C6;&#x5408;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x3002;&#x7ED9;&#x5B9A;&#x4E24;&#x7EC4;&#x6574;&#x6570;&#xFF0C;&#x5176;&#x76F8;&#x4F3C;&#x5EA6;&#x5B9A;&#x4E49;&#x4E3A;Nc/Nt*100%&#xFF0C;Nc&#x662F;&#x4E24;&#x7EC4;&#x6570;&#x76F8;&#x540C;&#x6570;&#x5B57;&#x7684;&#x4E2A;&#x6570; &#xFF0C;Nt&#x662F;&#x4E24;&#x7EC4;&#x6570;&#x7684;&#x4E0D;&#x540C;&#x6570;&#x5B57;&#x603B;&#x4E2A;&#x6570;&#x3002;&#x8981;&#x6C42;&#x8BA1;&#x7B97;&#x51FA;&#x4EFB;&#x610F;&#x7ED9;&#x5B9A;&#x4E24;&#x7EC4;&#x6570;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x8868;&#x793A;&#x6709;&#x591A;&#x5C11;&#x7EC4;&#x3002; &#x5728;&#x968F;&#x540E;&#x7684;N&#x884C;&#x4E2D;&#xFF0C;&#x6BCF;&#x884C;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;M&#x8868;&#x793A;&#x8BE5;&#x7EC4;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x6570;&#xFF0C;&#x63A5;&#x7740;&#x662F;M&#x4E2A;&#x6574;&#x6570;&#x3002; &#x8F93;&#x5165;&#x5B8C;&#x6240;&#x6709;&#x7684;&#x96C6;&#x5408;&#x4E4B;&#x540E;&#xFF0C;&#x7ED9;&#x51FA;&#x6B63;&#x6574;&#x6570;K&#xFF0C;&#x63A5;&#x7740;&#x662F;K&#x884C;&#x67E5;&#x8BE2;&#xFF0C;&#x6BCF;&#x4E2A;&#x67E5;&#x8BE2;&#x7ED9;&#x51FA;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x6C42;&#x8FD9;&#x4E24;&#x7EC4;&#x7684;&#x76F8;&#x4F3C;&#x5EA6;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x67E5;&#x8BE2;&#xFF0C;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x96C6;&#x5408;&#x7684;&#x50CF;&#x662F;&#x5BF9;&#xFF0C;&#x7CBE;&#x786E;&#x5230;&#x5C0F;&#x6570;&#x70B9;&#x540E;&#x4E00;&#x4F4D;&#x3002; &#x6BD4;&#x5982;&#x5BF9;&#x4E8E;&#x6837;&#x4F8B;&#x4E2D;&#x7684;1&#xFF0C;2&#x7EC4;&#xFF0C;&#x4E00;&#x5171;&#x6709;4&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x5B57;&#xFF08;5,87,99,101&#xFF09;&#x4E00;&#x5171;&#x6709;2&#x4E2A;&#x6570;&#x5B57;&#x5728;&#x4E24;&#x7EC4;&#x90FD;&#x6709;&#xFF0C;&#x4E3A;&#xFF08;87,101&#xFF09;&#x6240;&#x4EE5;&#x4E3A;50%&#x3002;&#x5BF9;&#x4E8E;1,3&#x7EC4;&#xFF0C;&#x4E00;&#x5171;&#x6709;&#xFF08;5,18,87,99,101,135&#xFF09;&#x5171;&#x540C;&#x7684;&#x6570;&#x5B57;&#x4E3A;&#xFF08;99,101&#xFF09;&#x6240;&#x4EE5;&#x76F8;&#x4F3C;&#x5EA6;&#x4E3A;2/6=33.3% &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4F7F;&#x7528;set&#xFF0C;&#x5728;&#x5934;&#x6587;&#x4EF6;set&#x4E2D;&#x3002; Tipsset.size() &#x8FD4;&#x56DE;&#x5F53;&#x524D;set&#x5BB9;&#x5668;&#x4E2D;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;&#x3002; set.find() &#x8FD4;&#x56DE;&#x7ED9;&#x5B9A;&#x5236;&#x6240;&#x5728;&#x7684;&#x8FED;&#x4EE3;&#x5668;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x5219;&#x8FD4;&#x56DE;set.end() &#x7528;&#x6CD5; set.find(1)&#x3002; set.count() &#x7528;&#x6765;&#x67E5;&#x627E;set&#x4E2D;&#x67D0;&#x4E2A;&#x952E;&#x503C;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x4E0D;&#x662F;&#x7279;&#x522B;&#x5B9E;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x4E2A;&#x952E;&#x503C;&#x53EA;&#x80FD;&#x5728;set&#x4E2D;&#x51FA;&#x73B0;0&#x6B21;&#x6216;&#x8005;1&#x6B21;&#x3002;&#x7528;&#x6CD5; set.count(1)&#x3002; &#x63D2;&#x5165;&#xFF0C;set.insert(Key_value) &#x5C06;Key_value&#x63D2;&#x5165;&#x5230;set&#x4E2D; &#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;iostream&gt;#include&lt;set&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;set&lt;int&gt; num[51];int N, M, K;void solution(){ cin &gt;&gt; K; int set1, set2; int cnt;//&#x8BA1;&#x6570;&#x6709;&#x591A;&#x5C11;&#x4E2A;&#x76F8;&#x540C;&#x7684;&#x6570;&#x5B57; for (int i = 0; i &lt; K; i++) { cnt = 0; cin &gt;&gt; set1 &gt;&gt; set2; if (num[set1].size() &lt; num[set2].size()) { for (auto it = num[set1].begin(); it != num[set1].end(); it++) { if (num[set2].count(*it)) cnt++; } } else { for (auto it = num[set2].begin(); it != num[set2].end(); it++) { if (num[set1].count(*it)) cnt++; } } //float temp = cnt*100.0 / (num[set1].size() + num[set2].size() - cnt); printf(&quot;%.1f%%\n&quot;, cnt*100.0 / (num[set1].size() + num[set2].size() - cnt)); }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; N; int temp; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; M; for (int j = 0; j &lt; M; j++) { cin &gt;&gt; temp; num[i + 1].insert(temp); } } solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011Sample Input:33 99 87 1014 87 101 5 877 99 101 18 5 135 18 9921 21 3Sample Output:50.0%33.3%]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>C++ STL</tag>
        <tag>C++ set</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1049 Counting Ones (30)]]></title>
    <url>%2F%2Fposts%2F7987c544%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x6C42;1~N&#x4E4B;&#x95F4;&#x7684;&#x5341;&#x8FDB;&#x5236;&#x5F62;&#x5F0F;&#x7684;&#x6240;&#x6709;&#x6570;&#x4E2D;&#xFF0C;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x3002; &#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#x3002; &#x8F93;&#x51FA;&#x6C42;1~N&#x4E4B;&#x95F4;&#x7684;&#x5341;&#x8FDB;&#x5236;&#x5F62;&#x5F0F;&#x7684;&#x6240;&#x6709;&#x6570;&#x4E2D;&#xFF0C;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x3002; &#x6BD4;&#x5982;&#x8F93;&#x5165;12&#xFF0C;&#x4ECE;1~12&#x6709;&#xFF1A;1,10,11,12&#x3002;&#x8FD9;4&#x4E2A;&#x6570;&#x4E2D;&#x4E00;&#x5171;&#x51FA;&#x73B0;&#x4E86;5&#x4E2A;1&#x3002;&#x56E0;&#x6B64;&#x8F93;&#x51FA;5&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8FD9;&#x4E2A;&#x9898;&#x662F;&#x7528;&#x4E58;&#x6CD5;&#x539F;&#x7406;&#x548C;&#x52A0;&#x6CD5;&#x539F;&#x7406;&#x53BB;&#x505A;&#x7684;&#x3002;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#x5206;&#x6790;&#xFF0C;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#x3002;&#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x4E2A;&#x4E94;&#x4F4D;&#x6570;abcde&#xFF0C;&#x73B0;&#x53EA;&#x8003;&#x8651;&#x767E;&#x4F4D;&#x6570;c&#x3002; &#x5206;&#x4E09;&#x79CD;&#x60C5;&#x51B5;&#xFF1A; &#x5982;&#x679C;c=0&#xFF0C;&#x5219;1&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x4E3A;ab*100&#x3002;&#x5373;&#xFF1A;c&#x524D;&#x9762;&#x7684;&#x6570;*c&#x5BF9;&#x5E94;&#x7684;&#x7CFB;&#x6570;&#x3002;&#x4EE5;N=12045&#x4E3A;&#x4F8B;&#xFF1A;&#x767E;&#x4F4D;&#x6570;&#x51FA;&#x73B0;1&#x7684;&#x6709;&#xFF1A;00100~00199&#xFF08;100&#x4E2A;&#xFF09;&#xFF0C;01100~01199&#xFF08;100&#x4E2A;&#xFF09;&#xFF0C;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#xFF0C;&#x5373;&#x4ECE;001xx~111xx&#xFF0C;&#x5171;12&#x7EC4;100&#x4E2A;&#x3002; &#x5982;&#x679C;c=1&#xFF0C;&#x5219;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x4E3A;ab*100+de+1&#x3002;&#x5373;&#xFF1A;c&#x524D;&#x9762;&#x7684;&#x6570;*c&#x5BF9;&#x5E94;&#x7684;&#x7CFB;&#x6570;+c&#x540E;&#x9762;&#x7684;&#x6570;+1&#x3002;&#x4EE5;12145&#x4E3A;&#x4F8B;&#xFF1A;&#x767E;&#x4F4D;&#x6570;&#x51FA;&#x73B0;1&#x7684;&#x6709;001xx~111xx&#xFF0C;&#x5171;12&#x7EC4;100&#x4E2A;&#xFF0C;&#x518D;&#x52A0;&#x4E0A;12100~12145&#xFF0C;&#x5171;45+1=46&#x4E2A;&#x3002; &#x5982;&#x679C;c&gt;1&#xFF0C;&#x5219;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#x4E3A;(ab+1)*100&#xFF0C;&#x5373;&#xFF1A;(c&#x524D;&#x9762;&#x7684;&#x6570;+1)*c&#x5BF9;&#x5E94;&#x7684;&#x7CFB;&#x6570;&#x3002;&#x4EE5;12345&#x4E3A;&#x4F8B;&#xFF1A;&#x767E;&#x4F4D;&#x51FA;&#x73B0;1&#x7684;&#x6709;001xx~121xx&#xFF0C;&#x5171;13&#x7EC4;100&#x4E2A;&#x3002; &#x5176;&#x4ED6;&#x4F4D;&#x6570;&#x540C;&#x7406;&#x3002;&#x6700;&#x540E;&#x52A0;&#x8D77;&#x6765;&#x5373;&#x53EF;&#x5F97;&#x7ED3;&#x679C;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;//#pragma warning(disable:4996)using namespace std;int num;void solution(){ cin &gt;&gt; num; int left = 0, right = 0,now=0, res = 0; for (int i = 1; num/i!=0; i=i*10) { left = num / (i * 10); now = num / i % 10; right = num%i; if (now == 0) { res += left*i; } else if (now == 1) res += left*i + right + 1; else res += (left + 1)* i; } cout &lt;&lt; res;}int main(){ //freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234Sample Input:12Sample Output:5]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>数学问题</tag>
        <tag>乘法原理</tag>
        <tag>加法原理</tag>
        <tag>分类讨论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[求最长上升子序列的长度]]></title>
    <url>%2F%2Fposts%2Feacf7b1a%2F</url>
    <content type="text"><![CDATA[&#x5F15;&#x8A00;&#x6709;&#x4E00;&#x4E2A;&#x957F;&#x4E3A;n&#x7684;&#x6570;&#x5217; a0,a1,a2&#x2026;an-1 &#xFF0C;&#x6C42;&#x51FA;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x4E2D;&#x6700;&#x957F;&#x7684;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x6307;&#x7684;&#x662F;&#x5BF9;&#x4E8E;&#x4EFB;&#x610F;&#x7684;i&lt;j&#xFF0C;&#x90FD;&#x6709;ai&lt;aj&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002; &#x6837;&#x4F8B;&#x5047;&#x8BBE;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;a[1..9] = 2 1 5 3 6 4 8 9 7&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x6765;&#x5B83;&#x7684;LIS&#x957F;&#x5EA6;&#x4E3A;5&#x3002; O&#xFF08;n^2&#xFF09;&#x89E3;&#x6CD5;&#x9012;&#x63A8;&#x5173;&#x7CFB;&#x5982;&#x4E0B;&#xFF1A; &#x5B9A;&#x4E49;dp[i]=&#x4EE5;ai&#x4E3A;&#x672B;&#x5C3E;&#x7684;&#x6700;&#x957F;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x3002; &#x4EE5;ai&#x4E3A;&#x7ED3;&#x5C3E;&#x7684;&#x4E0A;&#x5347;&#x81F3;&#x5E8F;&#x5217;&#x662F; &#x53EA;&#x5305;&#x542B;ai&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002; &#x5728;&#x6EE1;&#x8DB3;j&lt;i&#x5E76;&#x4E14;aj&lt;ai&#x7684;&#x4EE5;aj&#x4E3A;&#x7ED3;&#x5C3E;&#x7684;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x672B;&#x5C3E;&#xFF0C;&#x8FFD;&#x52A0;&#x4E0A;ai&#x540E;&#x5F97;&#x5230;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002; &#x8FD9;&#x4E8C;&#x8005;&#x4E4B;&#x4E00;&#x3002;&#x56E0;&#x6B64;&#x80FD;&#x5F97;&#x5230;&#x5982;&#x4E0B;&#x9012;&#x63A8;&#x5173;&#x7CFB;&#xFF1A; dp[i]=max{1,dp[j]+1} (j&lt;i&#x4E14;aj&lt;ai) &#x7528;&#x8FD9;&#x4E2A;&#x9012;&#x63A8;&#x516C;&#x5F0F;&#x53EF;&#x4EE5;&#x5728;O(n^2)&#x65F6;&#x95F4;&#x5185;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819int n;int a[MAX_N];int dp[MAX_N]; //dp&#x6570;&#x7EC4;using namespace std;void solve(){ int res = 0; for (int i = 0; i &lt; n; i++) { dp[i] = 1; //&#x81F3;&#x5C11;&#x8FD9;&#x4E2A;&#x6570;&#x672C;&#x8EAB;&#x662F;&#x4E00;&#x4E2A;LIS for (int j = 0; j &lt; i; j++) { if (a[j]&lt;a[i]) dp[i] = max(dp[i], dp[j] + 1); } res = max(res,dp[i]); } cout &lt;&lt; res &lt;&lt; endl;} O(nlogn)&#x89E3;&#x6CD5;&#x524D;&#x9762;&#x6211;&#x4EEC;&#x7528;DP&#x6C42;&#x5F97;&#x9488;&#x5BF9;&#x6700;&#x672B;&#x5C3E;&#x5143;&#x7D20;&#x7684;&#x6700;&#x957F;&#x5B50;&#x5E8F;&#x5217;&#xFF0C;&#x5982;&#x679C;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x76F8;&#x540C;&#xFF0C;&#x90A3;&#x4E48;&#x6700;&#x672B;&#x5C3E;&#x7684;&#x5143;&#x7D20;&#x8F83;&#x5C0F;&#x7684;&#x5728;&#x4E4B;&#x540E;&#x4F1A;&#x66F4;&#x6709;&#x4F18;&#x52BF;&#xFF0C;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x53CD;&#x8FC7;&#x6765;&#x7528;DP&#x9488;&#x5BF9;&#x957F;&#x5EA6;&#x76F8;&#x540C;&#x60C5;&#x51B5;&#x4E0B;&#x6700;&#x5C0F;&#x7684;&#x672B;&#x5C3E;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x6C42;&#x89E3;&#x3002; dp[i]=&#x957F;&#x5EA6;&#x4E3A;i+1&#x7684;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x4E2D;&#x672B;&#x5C3E;&#x5143;&#x7D20;&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF08;&#x4E0D;&#x5B58;&#x5728;&#x7684;&#x8BDD;&#x5C31;&#x662F;INF&#xFF09; &#x6765;&#x770B;&#x5982;&#x4F55;&#x7528;DP&#x66F4;&#x65B0;&#x8FD9;&#x4E2A;&#x6570;&#x7EC4;&#x3002; &#x4E00;&#x5F00;&#x59CB;&#xFF0C;&#x5168;&#x90E8;&#x7684;dp[i]&#x7684;&#x503C;&#x90FD;&#x521D;&#x59CB;&#x5316;&#x4E3A;INF&#xFF0C;&#x7136;&#x540E;&#x7531;&#x524D;&#x5230;&#x540E;&#x9010;&#x4E2A;&#x8003;&#x8651;&#x6570;&#x5217;&#x7684;&#x5143;&#x7D20;&#x3002;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;aj&#xFF0C;&#x5982;&#x679C;i=0&#xFF0C;&#x6216;&#x8005;dp[i-1]&lt;aj&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x7528;dp[i]=min(dp[i],aj)&#x8FDB;&#x884C;&#x66F4;&#x65B0;&#x3002;&#x6700;&#x7EC8;&#x627E;&#x51FA;&#x4F7F;&#x5F97;dp[i]&lt;INF&#x7684;&#x6700;&#x5927;&#x7684;i+1&#x5C31;&#x662F;&#x7ED3;&#x679C;&#x4E86;&#x3002; &#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7528;DP&#x76F4;&#x63A5;&#x5B9E;&#x73B0;&#x7684;&#x8BDD;&#xFF0C;&#x8FD8;&#x662F;&#x4E0E;&#x524D;&#x9762;&#x7684;&#x65B9;&#x6CD5;&#x4E00;&#x6837;&#xFF0C;&#x5728;O(n^2)&#x7684;&#x65F6;&#x95F4;&#x5185;&#x7ED9;&#x51FA;&#x7ED3;&#x679C;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E00;&#x7B97;&#x6CD5;&#x8FD8;&#x53EF;&#x4EE5;&#x8FDB;&#x4E00;&#x6B65;&#x4F18;&#x5316;&#x3002; &#x9996;&#x5148;dp&#x6570;&#x5217;&#x4E2D;&#xFF0C;&#x9664;INF&#x4E4B;&#x5916;&#x90FD;&#x662F;&#x5355;&#x8C03;&#x9012;&#x589E;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;aj&#x6700;&#x591A;&#x53EA;&#x9700;&#x8981;1&#x6B21;&#x66F4;&#x65B0;&#xFF0C;&#x5BF9;&#x4E8E;&#x8FD9;&#x6B21;&#x66F4;&#x65B0;&#x5E94;&#x8BE5;&#x5728;&#x4EC0;&#x4E48;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E0D;&#x5FC5;&#x9010;&#x4E2A;&#x904D;&#x5386;&#xFF0C;&#x53EF;&#x4EE5;&#x5229;&#x7528;&#x4E8C;&#x5206;&#x641C;&#x7D22;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x53EF;&#x4EE5;&#x5728;O&#xFF08;nlogn&#xFF09;&#x7684;&#x65F6;&#x95F4;&#x5185;&#x6C42;&#x51FA;&#x7ED3;&#x679C;&#x3002; &#x4EE3;&#x7801;123456789void solve(){ fill(dp, dp + n, INF); for (int i = 0; i &lt; n; i++) { * lower_bound(dp, dp + n, a[i]) = a[i]; } cout &lt;&lt; lower_bound(dp, dp + n, INF) - dp;} lower_boundlower_bound&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x4ECE;&#x5DF2;&#x6392;&#x597D;&#x7684;&#x5E8F;&#x5217;a&#x4E2D;&#x5229;&#x7528;&#x4E8C;&#x5206;&#x641C;&#x7D22;&#x627E;&#x51FA;&#x6307;&#x5411;&#x6EE1;&#x8DB3;ai&gt;=k&#x7684;ai&#x7684;&#x6700;&#x5C0F;&#x7684;&#x6307;&#x9488;&#x3002;&#x7C7B;&#x4F3C;&#x7684;&#x51FD;&#x6570;&#x8FD8;&#x6709;upper_bound&#xFF0C;&#x5B83;&#x7684;&#x529F;&#x80FD;&#x662F;&#x6C42;&#x51FA;&#x6307;&#x5411;&#x6EE1;&#x8DB3;ai&gt;k&#x7684;&#x6700;&#x5C0F;&#x7684;&#x6307;&#x9488;&#x3002; &#x6BD4;&#x5982;&#x6C42;&#x957F;&#x5EA6;&#x4E3A;n&#x7684;&#x6709;&#x5E8F;&#x6570;&#x7EC4;a&#x4E2D;k&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x7528; upper_bound(a, a + n, k) - lower_bound(a, a + n, k); &#x4F8B;&#x5B50;&#x5047;&#x8BBE;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;d[1..9] = 2 1 5 3 6 4 8 9 7&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#x6765;&#x5B83;&#x7684;LIS&#x957F;&#x5EA6;&#x4E3A;5&#x3002; &#x4E0B;&#x9762;&#x4E00;&#x6B65;&#x4E00;&#x6B65;&#x8BD5;&#x7740;&#x627E;&#x51FA;&#x5B83;&#x3002; &#x6211;&#x4EEC;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x5E8F;&#x5217;B&#xFF0C;&#x7136;&#x540E;&#x4EE4; i = 1 to 9 &#x9010;&#x4E2A;&#x8003;&#x5BDF;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x3002;&#x6B64;&#x5916;&#xFF0C;&#x6211;&#x4EEC;&#x7528;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;Len&#x6765;&#x8BB0;&#x5F55;&#x73B0;&#x5728;&#x6700;&#x957F;&#x7B97;&#x5230;&#x591A;&#x5C11;&#x4E86;&#x3002; &#x628A;d[1]&#x6709;&#x5E8F;&#x5730;&#x653E;&#x5230;B&#x91CC;&#xFF0C;&#x4EE4;B[1] = 2&#xFF0C;&#x5C31;&#x662F;&#x8BF4;&#x5F53;&#x53EA;&#x6709;1&#x4E00;&#x4E2A;&#x6570;&#x5B57;2&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x957F;&#x5EA6;&#x4E3A;1&#x7684;LIS&#x7684;&#x6700;&#x5C0F;&#x672B;&#x5C3E;&#x662F;2&#x3002;&#x8FD9;&#x65F6;Len=1&#x3002; &#x628A;d[2]&#x6709;&#x5E8F;&#x5730;&#x653E;&#x5230;B&#x91CC;&#xFF0C;&#x4EE4;B[1] = 1&#xFF0C;&#x5C31;&#x662F;&#x8BF4;&#x957F;&#x5EA6;&#x4E3A;1&#x7684;LIS&#x7684;&#x6700;&#x5C0F;&#x672B;&#x5C3E;&#x662F;1&#xFF0C;d[1]=2&#x5DF2;&#x7ECF;&#x6CA1;&#x7528;&#x4E86;&#x3002;&#x8FD9;&#x65F6;Len=1&#x3002; d[3] = 5&#xFF0C;d[3]&gt;B[1]&#xFF0C;&#x6240;&#x4EE5;&#x4EE4;B[1+1]=B[2]=d[3]=5&#xFF0C;&#x5C31;&#x662F;&#x8BF4;&#x957F;&#x5EA6;&#x4E3A;2&#x7684;LIS&#x7684;&#x6700;&#x5C0F;&#x672B;&#x5C3E;&#x662F;5&#x3002;&#x8FD9;&#x65F6;&#x5019;B[1..2] = 1, 5&#xFF0C;Len&#xFF1D;2&#x3002; d[4] = 3&#xFF0C;&#x5B83;&#x6B63;&#x597D;&#x52A0;&#x5728;1,5&#x4E4B;&#x95F4;&#xFF0C;&#x653E;&#x5728;1&#x7684;&#x4F4D;&#x7F6E;&#x663E;&#x7136;&#x4E0D;&#x5408;&#x9002;&#xFF0C;&#x56E0;&#x4E3A;1&#x5C0F;&#x4E8E;3&#xFF0C;&#x957F;&#x5EA6;&#x4E3A;1&#x7684;LIS&#x6700;&#x5C0F;&#x672B;&#x5C3E;&#x5E94;&#x8BE5;&#x662F;1&#xFF0C;&#x8FD9;&#x6837;&#x5F88;&#x5BB9;&#x6613;&#x63A8;&#x77E5;&#xFF0C;&#x957F;&#x5EA6;&#x4E3A;2&#x7684;LIS&#x6700;&#x5C0F;&#x672B;&#x5C3E;&#x662F;3&#xFF0C;&#x4E8E;&#x662F;&#x53EF;&#x4EE5;&#x628A;5&#x6DD8;&#x6C70;&#x6389;&#xFF0C;&#x8FD9;&#x65F6;&#x5019;B[1..2] = 1, 3&#xFF0C;Len = 2&#x3002; d[5] = 6&#xFF0C;&#x5B83;&#x5728;3&#x540E;&#x9762;&#xFF0C;&#x56E0;&#x4E3A;B[2] = 3, &#x800C;6&#x5728;3&#x540E;&#x9762;&#xFF0C;&#x4E8E;&#x662F;&#x5F88;&#x5BB9;&#x6613;&#x53EF;&#x4EE5;&#x63A8;&#x77E5;B[3] = 6, &#x8FD9;&#x65F6;B[1..3] = 1, 3, 6&#xFF0C; Len = 3 &#x3002; d[6] = 4&#xFF0C;&#x4F60;&#x770B;&#x5B83;&#x5728;3&#x548C;6&#x4E4B;&#x95F4;&#xFF0C;&#x4E8E;&#x662F;&#x5C31;&#x53EF;&#x4EE5;&#x628A;6&#x66FF;&#x6362;&#x6389;&#xFF0C;&#x5F97;&#x5230;B[3] = 4&#x3002;B[1..3] = 1, 3, 4&#xFF0C; Len&#x7EE7;&#x7EED;&#x7B49;&#x4E8E;3&#x3002; d[7] = 8&#xFF0C;&#x5B83;&#x5F88;&#x5927;&#xFF0C;&#x6BD4;4&#x5927;&#x3002;&#x4E8E;&#x662F;B[4] = 8&#x3002;Len&#x53D8;&#x6210;4&#x3002; d[8] = 9&#xFF0C;&#x5F97;&#x5230;B[5] = 9&#x3002;Len=5&#x3002; d[9] = 7&#xFF0C;&#x5B83;&#x5728;B[3] = 4&#x548C;B[4] = 8&#x4E4B;&#x95F4;&#xFF0C;&#x6240;&#x4EE5;&#xFF0C;&#x6700;&#x65B0;&#x7684;B[4] =7&#xFF0C;B[1..5] = 1, 3, 4, 7, 9&#xFF0C;Len = 5&#x3002; &#x4E8E;&#x662F;&#x77E5;&#x9053;&#x4E86;LIS&#x7684;&#x957F;&#x5EA6;&#x4E3A;5&#x3002; &#x6CE8;&#x610F;&#x3002;&#x8FD9;&#x4E2A;1,3,4,7,9&#x4E0D;&#x662F;LIS&#xFF0C;&#x5B83;&#x53EA;&#x662F;&#x5B58;&#x50A8;&#x7684;&#x5BF9;&#x5E94;&#x957F;&#x5EA6;LIS&#x7684;&#x6700;&#x5C0F;&#x672B;&#x5C3E;&#x3002;&#x6709;&#x4E86;&#x8FD9;&#x4E2A;&#x672B;&#x5C3E;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x4E00;&#x4E2A;&#x4E00;&#x4E2A;&#x5730;&#x63D2;&#x5165;&#x6570;&#x636E;&#x3002;&#x867D;&#x7136;&#x6700;&#x540E;&#x4E00;&#x4E2A;d[9] = 7&#x66F4;&#x65B0;&#x8FDB;&#x53BB;&#x5BF9;&#x4E8E;&#x8FD9;&#x7EC4;&#x6570;&#x636E;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x610F;&#x4E49;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x540E;&#x9762;&#x518D;&#x51FA;&#x73B0;&#x4E24;&#x4E2A;&#x6570;&#x5B57; 8 &#x548C; 9&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x628A;8&#x66F4;&#x65B0;&#x5230;d[5], 9&#x66F4;&#x65B0;&#x5230;d[6]&#xFF0C;&#x5F97;&#x51FA;LIS&#x7684;&#x957F;&#x5EA6;&#x4E3A;6&#x3002; &#x7136;&#x540E;&#x5E94;&#x8BE5;&#x53D1;&#x73B0;&#x4E00;&#x4EF6;&#x4E8B;&#x60C5;&#x4E86;&#xFF1A;&#x5728;B&#x4E2D;&#x63D2;&#x5165;&#x6570;&#x636E;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x662F;&#x8FDB;&#x884C;&#x66FF;&#x6362;&#x800C;&#x4E0D;&#x9700;&#x8981;&#x632A;&#x52A8;&#x2014;&#x2014;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E8C;&#x5206;&#x67E5;&#x627E;&#xFF0C;&#x5C06;&#x6BCF;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x7684;&#x63D2;&#x5165;&#x65F6;&#x95F4;&#x4F18;&#x5316;&#x5230;O(logn)&#xFF0C;&#x4E8E;&#x662F;&#x7B97;&#x6CD5;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5C31;&#x964D;&#x4F4E;&#x5230;&#x4E86;O(nlogn)&#x3002;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>动态规划</tag>
        <tag>最长上升子序列</tag>
        <tag>DP</tag>
        <tag>LIS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1045 Favorite Color Stripe (30)]]></title>
    <url>%2F%2Fposts%2F904123e6%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x559C;&#x6B22;&#x7684;&#x5F69;&#x6761;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x3002; &#x62BD;&#x8C61;&#x51FA;&#x6765;&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;&#x6C42;&#x5E8F;&#x5217;&#x7684;&#x6700;&#x957F;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x4F46;&#x662F;&#x5141;&#x8BB8;&#x5143;&#x7D20;&#x91CD;&#x590D;&#x51FA;&#x73B0;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x4ED6;&#x662F;&#x6D89;&#x53CA;&#x5230;&#x7684;&#x989C;&#x8272;&#x603B;&#x6570;&#xFF0C;&#x4ECE;1~N&#x7F16;&#x53F7;&#x3002; &#x7B2C;&#x4E8C;&#x884C;&#x4EE5;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;M&#x5F00;&#x5934;&#xFF0C;&#x540E;&#x8DDF;M&#x4E2A;&#x559C;&#x6B22;&#x7684;&#x989C;&#x8272;&#x3002; &#x6700;&#x540E;&#xFF0C;&#x7B2C;&#x4E09;&#x884C;&#x4EE5;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;L&#x5F00;&#x5934;&#xFF0C;&#x8868;&#x793A;&#x7ED9;&#x5B9A;&#x6761;&#x5E26;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x540E;&#x9762;&#x662F;L&#x4E2A;&#x989C;&#x8272;&#x3002; &#x8F93;&#x51FA;&#x53EA;&#x9700;&#x8981;&#x8F93;&#x51FA;&#x6700;&#x559C;&#x6B22;&#x7684;&#x5F69;&#x6761;&#x7684;&#x6700;&#x5927;&#x957F;&#x5EA6;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8FD9;&#x4E2A;&#x9898;&#x5176;&#x5B9E;&#x662F;&#x4E00;&#x4E2A;&#x6700;&#x957F;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x95EE;&#x9898;&#x3002; &#x5173;&#x4E8E;&#x66F4;&#x591A;&#x4FE1;&#x606F;&#xFF0C;&#x8BF7;&#x770B;&#x6C42;&#x6700;&#x957F;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6; &#x9012;&#x63A8;&#x5173;&#x7CFB;&#x5982;&#x4E0B;&#xFF1A; &#x5B9A;&#x4E49;dp[i]=&#x4EE5;ai&#x4E3A;&#x672B;&#x5C3E;&#x7684;&#x6700;&#x957F;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x3002; &#x4EE5;ai&#x4E3A;&#x7ED3;&#x5C3E;&#x7684;&#x4E0A;&#x5347;&#x81F3;&#x5E8F;&#x5217;&#x662F; &#x53EA;&#x5305;&#x542B;ai&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002; &#x5728;&#x6EE1;&#x8DB3;j&lt;i&#x5E76;&#x4E14;aj&lt;ai&#x7684;&#x4EE5;aj&#x4E3A;&#x7ED3;&#x5C3E;&#x7684;&#x4E0A;&#x5347;&#x5B50;&#x5E8F;&#x5217;&#x672B;&#x5C3E;&#xFF0C;&#x8FFD;&#x52A0;&#x4E0A;ai&#x540E;&#x5F97;&#x5230;&#x7684;&#x5B50;&#x5E8F;&#x5217;&#x3002; &#x8FD9;&#x4E8C;&#x8005;&#x4E4B;&#x4E00;&#x3002;&#x56E0;&#x6B64;&#x80FD;&#x5F97;&#x5230;&#x5982;&#x4E0B;&#x9012;&#x63A8;&#x5173;&#x7CFB;&#xFF1A; dp[i]=max{1,dp[j]+1} (j&lt;i&#x4E14;aj&lt;ai) &#x7528;&#x8FD9;&#x4E2A;&#x9012;&#x63A8;&#x516C;&#x5F0F;&#x53EF;&#x4EE5;&#x5728;O(n^2)&#x65F6;&#x95F4;&#x5185;&#x89E3;&#x51B3;&#x95EE;&#x9898;&#x3002; &#x5269;&#x4E0B;&#x7684;&#x5173;&#x952E;&#x662F;&#x786E;&#x5B9A;&#x989C;&#x8272;&#x95F4;&#x7684;&#x5927;&#x5C0F;&#x5173;&#x7CFB;&#x3002;&#x5373;&#x4EBA;&#x4E3A;&#x7684;&#x6784;&#x5EFA;&#x540E;&#x9762;&#x7684;&#x989C;&#x8272;&#x7684;&#x503C;&#x5927;&#x4E8E;&#x524D;&#x9762;&#x989C;&#x8272;&#x7684;&#x503C;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int N, like[201] = {0}, stripe[10001];void solution(){ int M, L; cin &gt;&gt; N &gt;&gt; M; int color; for (int i = 1; i &lt;= M; i++) { cin &gt;&gt; color; like[color] = i; //&#x4EBA;&#x4E3A;&#x7684;&#x6784;&#x5EFA;&#x989C;&#x8272;&#x7684;&#x5927;&#x5C0F;&#x5173;&#x7CFB; } int like_num=0; cin &gt;&gt; L; for (int i = 0; i &lt; L; i++) { cin &gt;&gt; color; if (like[color]) { stripe[like_num++] = like[color]; //&#x53EA;&#x4FDD;&#x5B58;&#x559C;&#x6B22;&#x7684;&#xFF0C;&#x53CD;&#x6B63;&#x4E0D;&#x559C;&#x6B22;&#x7684;&#x4E5F;&#x5F97;&#x526A;&#x53BB; } } int dp[10001]; int res = 0; for (int i = 0; i &lt; like_num; i++) { dp[i] = 1; //&#x81F3;&#x5C11;&#x559C;&#x6B22;&#x4E00;&#x4E2A; for (int j = 0; j &lt; i; j++) { if(stripe[j] &lt;= stripe[i]) //&#x9700;&#x8981;&#x6DFB;&#x52A0;&#x4E86; dp[i] = max(dp[i], dp[j] + 1); } res = max(res, dp[i]); } cout &lt;&lt; res;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456Sample Input:65 2 3 1 5 612 2 2 4 1 5 5 6 3 1 1 5 6Sample Output:7]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
        <tag>最长上升子序列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1068 Find More Coins (30)]]></title>
    <url>%2F%2Fposts%2F5c4b01e5%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5728;&#x4E00;&#x5806;&#x786C;&#x5E01;&#x4E2D;&#x627E;&#x5230;&#x603B;&#x9762;&#x989D;&#x4E3A;&#x7ED9;&#x5B9A;&#x503C;&#x7684;&#x4E00;&#x4E9B;&#x786C;&#x5E01;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x62EC;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;N&#xFF0C;&#x8868;&#x793A;&#x786C;&#x5E01;&#x603B;&#x6570;&#x3002;M&#xFF0C;&#x8868;&#x793A;&#x91D1;&#x989D;&#x3002;&#x7B2C;&#x4E8C;&#x884C;&#x662F;N&#x4E2A;&#x786C;&#x5E01;&#x7684;&#x9762;&#x503C;&#xFF0C;&#x5747;&#x662F;&#x6B63;&#x6574;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA; V1 &lt;= V2 &lt;= &#x2026; &lt;= Vk &#xFF0C;&#x4F7F; V1 + V2 + &#x2026; + Vk = M&#x3002; &#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7531;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002;&#x5982;&#x679C;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x4E0D;&#x552F;&#x4E00;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x6700;&#x5C0F;&#x7684;&#x5E8F;&#x5217;&#xFF08;&#x5373;&#x4F7F;&#x6BCF;&#x4E2A;&#x6570;&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#xFF09;&#x3002;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x8F93;&#x51FA;No Solution&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;01&#x80CC;&#x5305;&#xFF0C;&#x52A8;&#x6001;&#x89C4;&#x5212;&#x53BB;&#x505A;&#x3002; &#x5047;&#x8BBE;F(N, M)&#x8868;&#x793A;&#x4E0D;&#x8D85;&#x8FC7;&#x9762;&#x503C;M, &#x800C;&#x4E14;&#x4ECE;&#x524D;&#x9762;N&#x4E2A;&#x786C;&#x5E01;&#x4E2D;&#x6311;&#x9009;&#x786C;&#x5E01;&#x503C;&#x80FD;&#x5F97;&#x5230;&#x7684;&#x6700;&#x5927;&#x786C;&#x5E01;&#x9762;&#x503C;&#x603B;&#x548C;, &#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x5982;&#x4E0B;&#x9012;&#x5F52;&#x516C;&#x5F0F;: F(N, M) = max{ F(N &#x2013; 1, M), F(N &#x2013; 1, M &#x2013; V(N)) + V(N) } &#x5176;&#x4E2D; V(N)&#x8868;&#x793A;&#x7B2C;N&#x4E2A;&#x786C;&#x5E01;&#x7684;&#x9762;&#x503C;&#x3002;&#x5982;&#x679C;&#x6700;&#x540E;F(N, M) == M&#x3002;&#x90A3;&#x4E48;&#x5C31;&#x8BF4;&#x660E;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x627E;&#x5230;&#x8FD9;&#x6837;&#x4E00;&#x7EC4;&#x786C;&#x5E01;, &#x4F7F;&#x5F97;&#x4ED6;&#x4EEC;&#x7684;&#x9762;&#x503C;&#x603B;&#x548C;&#x6070;&#x597D;&#x7B49;&#x4E8E;M&#x3002; &#x5269;&#x4E0B;&#x7684;&#x95EE;&#x9898;&#x662F;&#x5982;&#x4F55;&#x8BB0;&#x5F55;&#x8DEF;&#x5F84;, &#x4E5F;&#x5C31;&#x662F;&#x600E;&#x4E48;&#x8BB0;&#x5F55;&#x6311;&#x9009;&#x51FA;&#x54EA;&#x4E9B;&#x786C;&#x5E01;? &#x53E6;&#x5F00;&#x4E00;&#x5757;&#x7A7A;&#x95F4;&#xFF0C;&#x5728;&#x6211;&#x7684;&#x4EE3;&#x7801;&#x91CC;&#x4E3A;bool selected[N][M],&#x5982;&#x679C;&#x5176;&#x503C;&#x4E3A;true&#xFF0C;&#x5219;&#x8868;&#x793A;&#x4ECE;&#x524D;N&#x4E2A;&#x786C;&#x5E01;&#x4E2D;&#x9009;&#x51FA;&#x4E00;&#x7EC4;&#x5F97;&#x5230;&#x6700;&#x591A;&#x4E0D;&#x8D85;&#x8FC7;M&#x603B;&#x9762;&#x989D;&#x7684;&#x786C;&#x5E01;&#x4E2D;&#xFF0C;&#x5305;&#x62EC;&#x4E86;&#x7B2C;N&#x4E2A;&#x786C;&#x5E01;&#x3002; 01&#x80CC;&#x5305;&#x4E3A;&#x4E86;&#x7F29;&#x51CF;&#x7A7A;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x9700;&#x8981;&#x4ECE;&#x540E;&#x5F80;&#x524D;&#x63A8;&#x3002;&#x6240;&#x4EE5;&#x4EE3;&#x7801;&#x5E94;&#x8BE5;&#x4E3A;1234567891011for (int i = 0; i &lt; N; i++){ for (int j = M; j &gt;= coin[i]; j--) { if (dp[j] &lt;= dp[j - coin[i]] + coin[i]) { dp[j] = dp[j - coin[i]] + coin[i]; selected[i][j] = true; } }} &#x6700;&#x540E;&#xFF0C;&#x9898;&#x76EE;&#x8981;&#x6C42;&#x4F7F;&#x5E8F;&#x5217;&#x7684;&#x5B57;&#x5178;&#x5E8F;&#x6700;&#x5C0F;&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5BF9;&#x4E8E; 2&#xFF0C;2&#xFF0C;5&#xFF0C;&#x548C; 1&#xFF0C;3&#xFF0C;5 &#x8FD9;&#x6837;&#x7684;&#x5E8F;&#x5217;&#xFF0C;&#x8981;&#x6C42;&#x8F93;&#x51FA; 1&#xFF0C;3&#xFF0C;5&#x3002;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x5728;&#x4E4B;&#x524D;&#x5C31;&#x628A;&#x8F93;&#x5165;&#x7684;&#x786C;&#x5E01;&#x9762;&#x503C;&#x964D;&#x5E8F;&#x6392;&#x5217;&#xFF0C;&#x5148;&#x628A;&#x9762;&#x989D;&#x5927;&#x7684;&#x786C;&#x5E01;&#x653E;&#x8FDB;&#x53BB;&#xFF0C;&#x8FD9;&#x6837;&#x4F7F;&#x6700;&#x540E;&#x5269;&#x4E0B;&#x7684;&#x7A7A;&#x5C3D;&#x53EF;&#x80FD;&#x5C0F;&#xFF0C;&#x8FDB;&#x800C;&#x4F7F;&#x5B57;&#x5178;&#x5E8F;&#x6700;&#x5C0F;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;//#pragma warning(disable:4996)using namespace std;bool cmp(int a, int b){ return a &gt; b;}int dp[101];//dp&#x662F;&#x9012;&#x63A8;&#x6570;&#x7EC4;&#xFF0C;&#x8868;&#x793A;&#x5F53;&#x524D;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6700;&#x5927;&#x91CD;&#x91CF;&#x4E3A;dp[i]&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x80FD;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5927;&#x91CD;&#x91CF;&#x3002;int coin[10001];bool selected[10001][101] = {0};//&#x8868;&#x793A;&#x4ECE;&#x524D;&#x9762;N&#x4E2A;&#x786C;&#x5E01;&#x4E2D;&#x9009;&#x51FA;&#x4E00;&#x7EC4;&#x5F97;&#x5230;&#x6700;&#x591A;&#x4E0D;&#x8D85;&#x8FC7;M&#x91CD;&#x91CF;&#x91CC;&#x9762;&#xFF0C;&#x662F;&#x5426;&#x5305;&#x62EC;&#x4E86;&#x7B2C;N&#x786C;&#x5E01;void solution(){ int N, M; cin &gt;&gt; N &gt;&gt; M; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; coin[i]; //&#x8F93;&#x5165;&#x786C;&#x5E01;&#x4FE1;&#x606F; } sort(coin, coin + N, cmp); for (int i = 0; i &lt; N; i++) { for (int j = M; j &gt;= coin[i]; j--) { if (dp[j] &lt;= dp[j - coin[i]] + coin[i]) { dp[j] = dp[j - coin[i]] + coin[i]; selected[i][j] = true; } } } if (dp[M] != M) { cout &lt;&lt; &quot;No Solution&quot;; return; } vector&lt;int&gt; res; int weight = M, num = N; //weight&#x8868;&#x793A;&#x5F53;&#x524D;&#x91CD;&#x91CF;&#xFF0C;num&#x8868;&#x793A;&#x5728;&#x524D;num&#x4E2A;&#x786C;&#x5E01;&#x4E2D;&#x9009;&#x62E9; while (weight&gt;0) { if (selected[num][weight]) //&#x524D;num&#x4E2A;&#x786C;&#x5E01;&#x4E2D;&#xFF0C;&#x91CD;&#x91CF;&#x4E0D;&#x8D85;&#x8FC7;weight&#x7684;&#x7EC4;&#x5408;&#x4E2D;&#xFF0C;&#x5305;&#x542B;&#x4E86;&#x7B2C;num&#x4E2A;&#x786C;&#x5E01; { res.push_back(coin[num]); weight -= coin[num]; //&#x5982;&#x679C;&#x5305;&#x542B;&#xFF0C;&#x770B;weight-coin[num]&#x91CC;&#x7684;&#x60C5;&#x51B5; } num--; //&#x7B2C;num&#x4E2A;&#x786C;&#x5E01;&#x8BBF;&#x95EE;&#x8FC7;&#x4E86;&#xFF0C;&#x81EA;&#x51CF; } for (int i = 0; i &lt; res.size(); i++) { if (i != 0)cout &lt;&lt; &apos; &apos;; cout &lt;&lt; res[i]; }}int main(){ //freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345Sample Input 1:8 95 9 8 7 2 3 4 1Sample Output 1:1 3 5 12345Sample Input 2:4 87 2 4 3Sample Output 2:No Solution]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>01背包</tag>
        <tag>背包问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1072 Gas Station (30)]]></title>
    <url>%2F%2Fposts%2F67237530%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6C42;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x4F4D;&#x7F6E;&#x3002;&#x4E00;&#x4E2A;&#x52A0;&#x6CB9;&#x7AD9;&#x5FC5;&#x987B;&#x5EFA;&#x7ACB;&#x5728;&#x8FD9;&#x6837;&#x7684;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x4F7F;&#x5F97;&#x8BE5;&#x7AD9;&#x4E0E;&#x4EFB;&#x4F55;&#x4F4F;&#x5B85;&#x623F;&#x5C4B;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#xFF0C;&#x5C3D;&#x53EF;&#x80FD;&#x8FDC;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x5F97;&#x4FDD;&#x8BC1;&#x6240;&#x6709;&#x7684;&#x623F;&#x5C4B;&#x90FD;&#x5728;&#x5176;&#x670D;&#x52A1;&#x8303;&#x56F4;&#x4E4B;&#x5185;&#x3002; &#x5148;&#x7ED9;&#x51FA;&#x8BE5;&#x57CE;&#x5E02;&#x7684;&#x5730;&#x56FE;&#x548C;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x51E0;&#x4E2A;&#x5019;&#x9009;&#x5730;&#x70B9;&#xFF0C;&#x8981;&#x6C42;&#x4F60;&#x7ED9;&#x51FA;&#x5EFA;&#x8BAE;&#x3002;&#x5982;&#x679C;&#x6709;&#x591A;&#x4E2A;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x5230;&#x6240;&#x6709;&#x623F;&#x5C4B;&#x7684;&#x5E73;&#x5747;&#x8DDD;&#x79BB;&#x6700;&#x5C0F;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x5982;&#x679C;&#x4ECD;&#x7136;&#x4E0D;&#x552F;&#x4E00;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x7D22;&#x5F15;&#x53F7;&#x6700;&#x5C0F;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x62EC;4&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;N&#xFF0C;&#x8868;&#x793A;&#x623F;&#x5C4B;&#x7684;&#x603B;&#x6570;&#xFF0C;M&#xFF0C;&#x8868;&#x793A;&#x52A0;&#x6CB9;&#x7AD9;&#x5019;&#x9009;&#x5730;&#x70B9;&#x7684;&#x603B;&#x6570;&#xFF0C;K&#xFF0C;&#x8868;&#x793A;&#x8FDE;&#x63A5;&#x623F;&#x5C4B;&#x548C;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x9053;&#x8DEF;&#x7684;&#x6570;&#x91CF;&#x3002;Ds&#xFF0C;&#x8868;&#x793A;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x6700;&#x5927;&#x670D;&#x52A1;&#x8303;&#x56F4;&#x3002;&#x5047;&#x5B9A;&#x623F;&#x5C4B;&#x7684;&#x7F16;&#x53F7;&#x662F;[1&#xFF0C;N]&#xFF0C;&#x6240;&#x6709;&#x5019;&#x9009;&#x5730;&#x70B9;&#x7684;&#x7F16;&#x53F7;&#x662F;[G1&#xFF0C;GM] &#x7136;&#x540E;&#x662F;K&#x6761;&#x7EBF;&#xFF0C;&#x6BCF;&#x6761;&#x7EBF;&#x7684;&#x63CF;&#x8FF0;&#x683C;&#x5F0F;&#x4E3A; P1 P2 Dist P1&#x548C;P2&#x662F;&#x9053;&#x8DEF;&#x7684;&#x4E24;&#x7AEF;&#xFF0C;&#x53EF;&#x4EE5;&#x662F;&#x95E8;&#x724C;&#x53F7;&#x6216;&#x8005;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x53F7;&#x7801;&#xFF0C;Dist&#x8868;&#x793A;&#x9053;&#x8DEF;&#x7684;&#x957F;&#x5EA6;&#x3002; &#x8F93;&#x51FA;&#x5728;&#x7B2C;&#x4E00;&#x884C;&#x8F93;&#x51FA;&#x6700;&#x4F73;&#x4F4D;&#x7F6E;&#x7684;&#x7D22;&#x5F15;&#x53F7;&#x3002;&#x5728;&#x7B2C;&#x4E8C;&#x884C;&#x8F93;&#x51FA;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x548C;&#x6240;&#x6709;&#x623F;&#x5C4B;&#x4E4B;&#x95F4;&#x7684;&#x6700;&#x5C0F;&#x8DDD;&#x79BB;&#x548C;&#x5E73;&#x5747;&#x8DDD;&#x79BB;&#x3002;&#x6570;&#x5B57;&#x4E4B;&#x95F4;&#x7A7A;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#xFF0C;&#x4FDD;&#x7559;&#x4E00;&#x4F4D;&#x5C0F;&#x6570;&#x3002;&#x5982;&#x679C;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#x4E0D;&#x5B58;&#x5728;&#xFF0C;&#x8F93;&#x51FA; &#x201C;No Solution&#x201D; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x5BF9;M&#x4E2A;&#x52A0;&#x6CB9;&#x7AD9;&#x5206;&#x522B;&#x4F7F;&#x7528;Dijkstra&#x7B97;&#x6CD5;&#xFF0C;&#xFF0C;&#x6C42;&#x51FA;&#x6700;&#x77ED;&#x8DDD;&#x79BB;&#x3002; &#x6BD4;&#x8F83;&#xFF0C;&#x5224;&#x65AD;&#xFF0C;&#x6C42;&#x51FA;&#x6700;&#x4F18;&#x89E3;&#x3002; &#x6309;&#x8981;&#x6C42;&#x8F93;&#x51FA;&#x3002; Tips &#x52A0;&#x6CB9;&#x7AD9;&#x4E4B;&#x95F4;&#x4E5F;&#x662F;&#x6709;&#x9053;&#x8DEF;&#x8FDE;&#x63A5;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x8BA1;&#x7B97;&#x6700;&#x77ED;&#x8DEF;&#x5F84;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E5F;&#x8981;&#x628A;&#x52A0;&#x6CB9;&#x7AD9;&#x7B97;&#x4E0A;&#x3002; &#x5BF9;&#x8F93;&#x5165;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF0C;&#x6709;&#x53EF;&#x80FD;&#x6709; G1 G1 10 &#x8FD9;&#x6837;&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x6CE8;&#x610F;&#x7B5B;&#x9009;&#x6700;&#x5C0F;&#x503C;&#x3002; &#x65F6;&#x95F4;&#x9650;&#x5236;&#x662F;200ms&#xFF0C;Floyd&#x662F;&#x80AF;&#x5B9A;&#x4E0D;&#x884C;&#x7684;&#xFF0C;&#x8981;&#x7528;Dijkstra&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#include&lt;vector&gt;#pragma warning(disable:4996)#define MAX_NUM 2147483646using namespace std;int N, M, K, Ds;bool visit[1011] = {0};void solution(){ cin &gt;&gt; N &gt;&gt; M &gt;&gt; K &gt;&gt; Ds; vector&lt;vector&lt;int&gt;&gt; g(N + M + 1, vector&lt;int&gt;(N + M + 1, MAX_NUM/2)); //&#x521D;&#x59CB;&#x5316; for (int i = 1; i &lt;= N+M; i++) { g[i][i] = 0; //&#x5BF9;&#x89D2;&#x7EBF;&#x521D;&#x59CB;&#x5316; } string start_string, end_string; int input_dis; int start_num, end_num; //&#x8F93;&#x5165;&#x6570;&#x636E; for (int i = 0; i &lt; K; i++) { cin &gt;&gt; start_string &gt;&gt; end_string &gt;&gt; input_dis; if (start_string[0]==&apos;G&apos;) { start_string=start_string.substr(1);//&#x63D0;&#x53D6;&#x540E;&#x9762;&#x7684;&#x6570;&#x5B57; start_num = stoi(start_string)+N; //&#x8F6C;&#x4E3A;&#x6570;&#x5B57; } else { start_num = stoi(start_string); //&#x8F6C;&#x4E3A;&#x6570;&#x5B57; } if (end_string[0]==&apos;G&apos;) { end_string = end_string.substr(1); end_num = stoi(end_string)+N; } else { end_num = stoi(end_string); } g[end_num][start_num] = g[start_num][end_num] = min(g[start_num][end_num], input_dis); } int res = -1; //&#x8868;&#x793A;&#x672A;&#x627E;&#x5230; double res_dis = -1, res_aver =MAX_NUM/2; //&#x521D;&#x59CB;&#x5316; for (int start_point = N+1; start_point &lt;= N+M; start_point++) //&#x5BF9;&#x6BCF;&#x4E2A;&#x4F4D;&#x7F6E;&#x8FDB;&#x884C;Dij&#x6C42;&#x6700;&#x77ED;&#x8DEF;&#x5F84; { vector&lt;int&gt; dis = g[start_point]; fill(visit, visit + 1011, false); //dis[start_point] = 0; //&#x4ECE;i&#x5F00;&#x59CB; for (int i = 0; i &lt; N+M; i++) //dij&#x7B97;&#x6CD5; { int u = -1, min_dis = MAX_NUM/2; for (int j = 1; j &lt;= N+M; j++) { if (!visit[j]&amp;&amp;dis[j]&lt;min_dis) { u = j; min_dis = dis[j]; //&#x627E;&#x5230;&#x4E00;&#x4E2A;&#x6700;&#x8FD1;&#x7684; } } if (u == -1) break; visit[u] = true; //&#x5C06;&#x5176;&#x6807;&#x8BB0;&#x4E3A;&#x8BBF;&#x95EE; for (int k = 1; k &lt;= N+M; k++) { if (!visit[k]&amp;&amp;dis[k]&gt;dis[u]+g[u][k]) { dis[k] = dis[u] + g[u][k]; //&#x66F4;&#x65B0;dis&#x6570;&#x7EC4; } } } double min_dis=MAX_NUM/2, min_aver=0.0; for (int i = 1; i &lt;= N; i++) { if (dis[i]&gt;Ds) //&#x6709;&#x4E00;&#x4E2A;&#x8D85;&#x51FA;&#x6700;&#x5927;&#x8303;&#x56F4;&#x90FD;&#x4E0D;&#x884C; { min_dis = -1; break; } if (dis[i]&lt;min_dis) { min_dis = dis[i]; } min_aver += 1.0*dis[i]; } if (min_dis==-1)//&#x6CA1;&#x627E;&#x5230; { continue; //&#x4E0B;&#x4E00;&#x4E2A;&#x52A0;&#x6CB9;&#x7AD9; } min_aver /= N; if (min_dis&gt;res_dis) //&#x5982;&#x679C;&#x6B64;&#x52A0;&#x6CB9;&#x7AD9;&#x8DDD;&#x79BB;&#x6700;&#x8FD1;&#x7684;&#x623F;&#x5C4B; &#x5927;&#x4E8E;&#x76EE;&#x524D;&#x5DF2;&#x77E5;&#x7684;&#x6700;&#x8FD1;&#x8DDD;&#x79BB; { res = start_point;//&#x662F;&#x8FD9;&#x4E2A;&#x70B9; res_dis = min_dis; res_aver = min_aver; } else if (min_dis==res_dis&amp;&amp;min_aver&lt;res_aver) //&#x8DDD;&#x79BB;&#x76F8;&#x540C;&#x4F46;&#x662F;&#x5E73;&#x5747;&#x8DDD;&#x79BB;&#x66F4;&#x77ED; { res = start_point; res_aver = min_aver; } } if (res==-1) { cout &lt;&lt; &quot;No Solution&quot;; } else { printf(&quot;G%d\n%.1f %.1f&quot;, res - N, res_dis, res_aver); }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516Sample Input 1:4 3 11 51 2 21 4 21 G1 41 G2 32 3 22 G2 13 4 23 G3 24 G1 3G2 G1 1G3 G2 2Sample Output 1:G12.0 3.3 123456Sample Input 2:2 1 2 101 G1 92 G1 20Sample Output 2:No Solution &#x725B;&#x5BA2;&#x7F51;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4E2D;&#x7684;bug&#x5728;&#x725B;&#x5BA2;&#x7F51;&#x4E0A;&#xFF0C;&#x8FD9;&#x4E2A;&#x9898;&#x7684;&#x6D4B;&#x8BD5;&#x70B9;1&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x5982;&#x4E0B;&#xFF1A;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520620720820921021121221321421521621721821922022122222322422522610 5 255 151 1 101 2 101 3 101 4 101 5 101 6 101 7 101 8 101 9 101 10 101 G1 101 G2 101 G3 101 G4 101 G5 102 1 102 2 102 3 102 4 102 5 102 6 102 7 102 8 102 9 102 10 102 G1 102 G2 102 G3 102 G4 102 G5 103 1 103 2 103 3 103 4 103 5 103 6 103 7 103 8 103 9 103 10 103 G1 103 G2 103 G3 103 G4 103 G5 104 1 104 2 104 3 104 4 104 5 104 6 104 7 104 8 104 9 104 10 104 G1 104 G2 104 G3 104 G4 104 G5 105 1 105 2 105 3 105 4 105 5 105 6 105 7 105 8 105 9 105 10 105 G1 105 G2 105 G3 105 G4 105 G5 106 1 106 2 106 3 106 4 106 5 106 6 106 7 106 8 106 9 106 10 106 G1 106 G2 106 G3 106 G4 106 G5 107 1 107 2 107 3 107 4 107 5 107 6 107 7 107 8 107 9 107 10 107 G1 107 G2 107 G3 107 G4 107 G5 108 1 108 2 108 3 108 4 108 5 108 6 108 7 108 8 108 9 108 10 108 G1 108 G2 108 G3 108 G4 108 G5 109 1 109 2 109 3 109 4 109 5 109 6 109 7 109 8 109 9 109 10 109 G1 109 G2 109 G3 109 G4 109 G5 1010 1 1010 2 1010 3 1010 4 1010 5 1010 6 1010 7 1010 8 1010 9 1010 10 1010 G1 1010 G2 1010 G3 1010 G4 1010 G5 10G1 1 10G1 2 10G1 3 10G1 4 10G1 5 10G1 6 10G1 7 10G1 8 10G1 9 10G1 10 10G1 G1 10G1 G2 10G1 G3 10G1 G4 10G1 G5 10G2 1 10G2 2 10G2 3 10G2 4 10G2 5 10G2 6 10G2 7 10G2 8 10G2 9 10G2 10 10G2 G1 10G2 G2 10G2 G3 10G2 G4 10G2 G5 10G3 1 10G3 2 10G3 3 10G3 4 10G3 5 10G3 6 10G3 7 10G3 8 10G3 9 10G3 10 10G3 G1 10G3 G2 10G3 G3 10G3 G4 10G3 G5 10G4 1 10G4 2 10G4 3 10G4 4 10G4 5 10G4 6 10G4 7 10G4 8 10G4 9 10G4 10 10G4 G1 10G4 G2 10G4 G3 10G4 G4 10G4 G5 10G5 1 10G5 2 10G5 3 10G5 4 10G5 5 10G5 6 10G5 7 10G5 8 10G5 9 10G5 10 10G5 G1 10G5 G2 10G5 G3 10G5 G4 10G5 G5 10 &#x8FD9;&#x4E2A;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4E2D;&#x7684;K&#x9519;&#x8BEF;&#xFF0C;&#x5E94;&#x4E3A;225&#xFF0C;&#x4E0D;&#x5E94;&#x8BE5;&#x662F;255&#x3002; &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x5E94;&#x8BE5;&#x662F;123410 5 225 15&#x5BF9;&#x5E94;&#x7684;&#x8F93;&#x51FA;&#x5E94;&#x8BE5;&#x662F;G1 10.0 10.0]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>图论</tag>
        <tag>Dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1076 Forwards on Weibo (30)]]></title>
    <url>%2F%2Fposts%2F9486a851%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5FAE;&#x535A;&#x7684;&#x5173;&#x6CE8;&#x8005;&#x3002; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x793E;&#x4EA4;&#x7F51;&#x7EDC;&#xFF0C;&#x5728;&#x53EA;&#x8BA1;&#x7B97;L&#x5C42;&#x7684;&#x95F4;&#x63A5;&#x5173;&#x6CE8;&#x8005;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#xFF0C;&#x6C42;&#x4EFB;&#x4E00;&#x7279;&#x5B9A;&#x7528;&#x6237;&#x7684;&#x6700;&#x5927;&#x6F5C;&#x5728;&#x8F6C;&#x53D1;&#x91CF;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x8868;&#x793A;&#x7528;&#x6237;&#x6570;&#xFF0C;L&#xFF0C;&#x7ED9;&#x5B9A;&#x7684;&#x95F4;&#x63A5;&#x5173;&#x6CE8;&#x8005;&#x7684;&#x5C42;&#x6570;&#x3002;&#x7136;&#x540E;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x7684;&#x683C;&#x5F0F;&#x662F; M[i] user_list[i] &#x5176;&#x4E2D;M[i]&#x8868;&#x793A;&#x7528;&#x6237;i&#x7684;&#x5173;&#x6CE8;&#x6570;&#x3002;user_list[i]&#x662F;&#x5177;&#x4F53;&#x5173;&#x6CE8;&#x5217;&#x8868;&#xFF0C; &#x5171;M[i]&#x4E2A;&#x3002; &#x6700;&#x540E;&#x7ED9;&#x51FA;K&#xFF0C;&#x548C;K&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x8868;&#x793A;&#x7528;&#x6237;ID&#xFF0C;&#x8981;&#x6C42;&#x5BF9;&#x6BCF;&#x4E2A;&#x7528;&#x6237;ID&#x8FDB;&#x884C;&#x67E5;&#x8BE2;&#xFF0C;&#x67E5;&#x8BE2;&#x5176;L&#x5C42;&#x7C89;&#x4E1D;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;ID&#xFF0C;&#x8F93;&#x51FA;&#x5176;L&#x5C42;&#x5171;&#x591A;&#x5C11;&#x4E2A;&#x7C89;&#x4E1D;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;BFS&#x3002;&#x8FD9;&#x9053;&#x9898;&#x62BD;&#x8C61;&#x7684;&#x6982;&#x8FF0;&#x5C31;&#x662F;&#xFF0C;&#x5E7F;&#x5EA6;&#x4F18;&#x5148;&#x641C;&#x7D22;K&#x8F6E;&#xFF0C;&#x4E00;&#x5171;&#x8BBF;&#x95EE;&#x4E86;&#x591A;&#x5C11;&#x4E2A;&#x8282;&#x70B9;&#x3002; Tips&#x6CE8;&#x610F;&#xFF1A;&#x5176;&#x4E2D;M[i]&#x8868;&#x793A;&#x7528;&#x6237;i&#x7684;&#x5173;&#x6CE8;&#x6570;&#x3002;user_list[i]&#x662F;&#x5177;&#x4F53;&#x5173;&#x6CE8;&#x5217;&#x8868;&#xFF0C; &#x5171;M[i]&#x4E2A;&#x3002;&#x56E0;&#x6B64;i&#x662F;&#x5176;&#x5173;&#x6CE8;&#x8005;&#x7684;&#x7C89;&#x4E1D;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x6784;&#x5EFA;&#x56FE;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8981;&#x53CD;&#x7740;&#x5199;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;queue&gt;#pragma warning(disable:4996)using namespace std;vector &lt;vector&lt;int&gt;&gt; g;typedef struct{ int id; int level;}fans;int N, L;int BFS(fans follow){ bool visit[1001] = {0}; queue&lt;fans&gt; q; q.push(follow); visit[follow.id] = true; int cnt = 0; //&#x8BA1;&#x6570; while (!q.empty()) { follow = q.front(); q.pop(); for (int i = 0; i &lt; g[follow.id].size(); i++) { int next_id = g[follow.id][i]; if (!visit[next_id]&amp;&amp;follow.level&lt;L) { q.push({ next_id,follow.level + 1 }); //&#x628A;next_id&#x538B;&#x5165;&#x961F;&#x5217;&#x4E2D; visit[next_id] = true; cnt++; } } } return cnt;}void solution(){ int M, input_id; cin &gt;&gt; N &gt;&gt; L; g.resize(N+1); for (int i = 1; i &lt;= N; i++) { cin &gt;&gt; M; for (int j = 0; j &lt; M; j++) { cin &gt;&gt; input_id; g[input_id].push_back(i); //&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x8981;&#x53CD;&#x7740;&#x5199;&#xFF0C;&#x56E0;&#x4E3A;M[i]&#x662F;&#x5173;&#x6CE8;&#x5217;&#x8868;&#xFF0C;&#x5373;&#x7528;&#x6237;i&#x662F;&#x8C01;&#x7684;&#x7C89;&#x4E1D;&#x3002; } } int K; cin &gt;&gt; K; for (int i = 0; i &lt; K; i++) { cin &gt;&gt; input_id; cout&lt;&lt;BFS({ input_id,0 })&lt;&lt;endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213Sample Input:7 33 2 3 402 5 62 3 12 3 41 41 52 2 6Sample Output:45]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1075 PAT Judge (25)]]></title>
    <url>%2F%2Fposts%2F73f16db0%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x8F93;&#x51FA;PAT&#x7684;&#x6392;&#x540D;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E09;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;N&#x8868;&#x793A;&#x7528;&#x6237;&#x7684;&#x6570;&#x91CF;&#xFF0C;K&#xFF0C;&#x95EE;&#x9898;&#x7684;&#x603B;&#x6570;&#xFF0C;M&#x63D0;&#x4EA4;&#x7684;&#x603B;&#x6570;&#x3002;&#x5047;&#x8BBE;&#x7528;&#x6237;&#x7684;ID&#x662F;5&#x4F4D;&#x6570;&#x5B57;&#xFF0C;&#x4ECE;00001~N&#xFF0C;&#x95EE;&#x9898;&#x7684;ID&#x4ECE;1~K&#x3002;&#x4E0B;&#x4E00;&#x884C;&#x5305;&#x62EC;K&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x5BF9;&#x5E94;&#x7B2C;i&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x6EE1;&#x5206;&#x3002;&#x7136;&#x540E;M&#x884C;&#x6309;&#x7167;&#x4EE5;&#x4E0B;&#x683C;&#x5F0F;&#x7ED9;&#x51FA;&#x63D0;&#x4EA4;&#x4FE1;&#x606F; user_id&#x3000;problem_id&#x3000;partial_score_obtained &#x5176;&#x4E2D;partial_score_obtained&#xFF0C;&#x5982;&#x679C;&#x63D0;&#x4EA4;&#x4E0D;&#x80FD;&#x901A;&#x8FC7;&#x7F16;&#x8BD1;&#xFF0C;&#x5219;&#x4E3A;-1&#xFF0C;&#x6216;&#x8005;&#x662F;[0~&#x8BE5;&#x9898;&#x6EE1;&#x5206;]&#x8303;&#x56F4;&#x5185;&#x7684;&#x6574;&#x6570;&#xFF0C;&#x4E00;&#x884C;&#x4E2D;&#x6240;&#x6709;&#x6570;&#x5B57;&#x7528;&#x7A7A;&#x683C;&#x5206;&#x5F00; &#x8F93;&#x51FA;&#x6309;&#x7167; rank&#x3000;user_id total_score&#x3000;s [1] &#x2026; s [K] &#x7684;&#x683C;&#x5F0F;&#x8F93;&#x51FA;&#x3002;rank&#x662F;&#x7531;total_score&#x6765;&#x7B97;&#x7684;&#xFF0C;&#x76F8;&#x540C;&#x603B;&#x5206;&#x7684;&#x7528;&#x6237;&#x6392;&#x540D;&#x76F8;&#x540C;&#xFF0C;s[i]&#x662F;&#x7B2C;i&#x4E2A;&#x95EE;&#x9898;&#x83B7;&#x5F97;&#x7684;&#x5206;&#x6570;&#x3002;&#x5982;&#x679C;&#x7528;&#x6237;&#x4ECE;&#x672A;&#x63D0;&#x4EA4;&#xFF0C;&#x5219;&#x5FC5;&#x987B;&#x5728;&#x8BE5;&#x4F4D;&#x7F6E;&#x6253;&#x5370;-&#xFF0C;&#x5982;&#x679C;&#x63D0;&#x4EA4;&#x4E86;&#x591A;&#x4E2A;&#xFF0C;&#x8F93;&#x51FA;&#x6700;&#x9AD8;&#x7684;&#x5206;&#x6570;&#x3002;&#x6392;&#x540D;&#x6309;&#x7167;&#x7B2C;&#x4E00;&#x540D;&#x5728;&#x524D;&#x7684;&#x987A;&#x5E8F;&#xFF0C;&#x6392;&#x540D;&#x76F8;&#x540C;&#x7684;&#x7528;&#x6237;&#xFF0C;&#x6309;&#x7167;&#x5B8C;&#x5168;&#x89E3;&#x51B3;&#x7684;&#x95EE;&#x9898;&#x7684;&#x6570;&#x91CF;&#x4EE5;&#x975E;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF08;&#x591A;&#x7684;&#x5728;&#x524D;&#x9762;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x8FD8;&#x76F8;&#x540C;&#xFF0C;&#x6309;&#x7167;ID&#x9012;&#x589E;&#x7684;&#x987A;&#x5E8F;&#x6392;&#x5E8F;&#x3002;&#x5BF9;&#x4E8E;&#x90A3;&#x4E9B;&#x6CA1;&#x6709;&#x63D0;&#x4EA4;&#x53EF;&#x4EE5;&#x7F16;&#x8BD1;&#x901A;&#x8FC7;&#x7684;&#x4EE3;&#x7801;&#x7684;&#x6216;&#x8005;&#x4ECE;&#x672A;&#x63D0;&#x4EA4;&#x8FC7;&#x7684;&#xFF0C;&#x5219;&#x4E0D;&#x5728;&#x6392;&#x884C;&#x699C;&#x4E0A;&#x663E;&#x793A;&#x3002;&#x4FDD;&#x8BC1;&#x81F3;&#x5C11;&#x6709;&#x4E00;&#x4E2A;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x5148;&#x662F;&#x5728;&#x6392;&#x884C;&#x699C;&#x4E0A;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;Tips &#x4E0D;&#x7528;&#x5224;&#x65AD;&#x5206;&#x6570;&#x662F;&#x5426;&#x4F1A;&#x8D85;&#x8FC7;FullMark &#x5982;&#x679C;&#x5B66;&#x751F;A&#x88AB;&#x8F93;&#x51FA;&#xFF0C;&#x4ED6;&#x66FE;&#x63D0;&#x4EA4;&#x8FC7;&#x67D0;&#x9898;x&#xFF0C;&#x4F46;&#x662F;&#x6CA1;&#x901A;&#x8FC7;&#x5373;&#x8F93;&#x5165;&#x201C;A x -1&#x201D;&#xFF0C;x&#x6210;&#x7EE9;&#x8F93;&#x51FA;&#x4E3A;0 &#x5B66;&#x751F;A&#x88AB;&#x8F93;&#x51FA;&#xFF0C;&#x5F53;&#x4E14;&#x4EC5;&#x5F53;A&#x81F3;&#x5C11;&#x6709;&#x4E00;&#x9053;&#x9898;&#x63D0;&#x4EA4;&#x5E76;&#x4E14;&#x901A;&#x8FC7;&#x4E86;&#x7F16;&#x8BD1;&#x3002;&#x53EF;&#x4EE5;&#x5F97;0&#x5206;&#xFF0C;&#x4F46;&#x662F;&#x5F97;&#x901A;&#x8FC7;&#x7F16;&#x8BD1;&#x3002; &#x6309;&#x7167;&#x603B;&#x5206;&#x9012;&#x51CF;&#x3001;&#x7B54;&#x5BF9;&#x9012;&#x51CF;&#x3001;ID&#x9012;&#x589E;&#x7684;&#x987A;&#x5E8F;&#x6392;&#x5217;&#xFF0C;&#x4EC5;&#x5217;&#x51FA;&#x6709;&#x6210;&#x7EE9;&#x7684;&#x5B66;&#x751F;&#xFF08;0 - - -&#x4E5F;&#x7B97;&#xFF0C;&#x4F46;&#x662F;- - - -&#x4E0D;&#x7B97;&#xFF09; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include &lt;stdio.h&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ int ID; //&#x6CE8;&#x610F;ID&#x521D;&#x503C;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5F53;&#x7136;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x8F93;&#x51FA;&#x7684;&#x65F6;&#x5019;&#x5199;if(user[i].show)&#x5219;&#x4E0D;&#x7528;&#x5728;&#x8FD9;&#x91CC;&#x6DFB;&#x52A0;&#x521D;&#x503C;&#xFF0C;&#x5426;&#x5219;ID&#x9ED8;&#x8BA4;&#x521D;&#x503C;&#x4E3A;0&#xFF0C;&#x4F1A;&#x6392;&#x5728;&#x6240;&#x6709;0&#x5206;&#x5B66;&#x751F;&#x7684;&#x524D;&#x9762;&#x3002; int score[6] = { -2,-2,-2,-2,-2,-2 }; int solved = 0; int total_score = 0; int rank; bool show = false;}u;vector&lt;u&gt; user;int N, K, M;int full_mark[6];bool cmp(u a, u b){ if (a.total_score != b.total_score) return a.total_score &gt; b.total_score; else if (a.solved != b.solved) return a.solved &gt; b.solved; else return a.ID &lt; b.ID;}void solution(){ cin &gt;&gt; N &gt;&gt; K &gt;&gt; M; user.resize(N + 1); for (int i = 1; i &lt;= K; i++) { cin &gt;&gt; full_mark[i]; } int user_ID, problem_ID, get_score; for (int i = 0; i &lt; M; i++) { cin &gt;&gt; user_ID &gt;&gt; problem_ID &gt;&gt; get_score; user[user_ID].ID = user_ID; if (user[user_ID].score[problem_ID]&lt;get_score) { user[user_ID].score[problem_ID] = get_score; } } for (int i = 1; i &lt;= N; i++) { for (int j = 1; j &lt;= K; j++) { if (user[i].score[j] &gt;= 0) { user[i].total_score += user[i].score[j]; user[i].show = true; //&#x6709;&#x4E00;&#x4E2A;&#x9898;&#x5F97;0&#x5206;&#x53CA;&#x4EE5;&#x4E0A;&#x5C31;&#x53EF;&#x4EE5;&#x8F93;&#x51FA; } if (user[i].score[j] == full_mark[j]) { user[i].solved++; } } } sort(user.begin() + 1, user.end(), cmp); user[1].rank = 1; for (int i = 2; i &lt;= N; i++) { user[i].rank = i; if (user[i].total_score == user[i - 1].total_score) { user[i].rank = user[i - 1].rank; } } for (int i = 1; i &lt;= N; i++) { if (user[i].show) //&#x6CE8;&#x610F;&#x8FD9;&#x91CC;&#x5FC5;&#x987B;&#x8FD9;&#x4E48;&#x5199;&#xFF0C;&#x5982;&#x679C;&#x5199;for (int i = 1; i &lt;=N&amp;&amp;user[i].show ; i++)&#x5219;&#x5728;&#x540C;&#x6837;&#x90FD;&#x662F;0&#x5206;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5C0F;&#x53F7;&#x5728;&#x524D;&#xFF0C;&#x5927;&#x53F7;&#x5728;&#x540E;&#xFF0C;&#x4F46;&#x662F;&#x5C0F;&#x53F7;&#x4E0D;&#x8BE5;&#x88AB;&#x8F93;&#x51FA;&#xFF0C;&#x5219;&#x4F1A;&#x6709;&#x95EE;&#x9898; { printf(&quot;%d %05d %d&quot;, user[i].rank, user[i].ID, user[i].total_score); for (int j = 1; j &lt;= K; j++) { if (user[i].score[j] &gt;= 0) cout &lt;&lt; &apos; &apos; &lt;&lt; user[i].score[j]; else if (user[i].score[j] == -1) cout &lt;&lt; &quot; 0&quot;; else cout &lt;&lt; &quot; -&quot;; } cout &lt;&lt; endl; } }}int main(){ freopen(&quot;3.txt&quot;, &quot;r&quot;, stdin); solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456782 4 420 25 25 3000002 2 000002 2 -100001 1 -100001 2 -1&#x8F93;&#x51FA;&#x5E94;&#x8BE5;&#x4E3A;1 00002 0 - 0 - - 1234567891011121314151617181920212223242526272829Sample Input:7 4 2020 25 25 3000002 2 1200007 4 1700005 1 1900007 2 2500005 1 2000002 2 200005 1 1500001 1 1800004 3 2500002 2 2500005 3 2200006 4 -100001 2 1800002 1 2000004 1 1500002 4 1800001 3 400001 4 200005 2 -100004 2 0Sample Output:1 00002 63 20 25 - 182 00005 42 20 0 22 -2 00007 42 - 25 - 172 00001 42 18 18 4 25 00004 40 15 0 25 -]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1074 Reversing Linked List (25)]]></title>
    <url>%2F%2Fposts%2F892b22de%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x94FE;&#x8868;&#x7684;&#x9006;&#x7F6E;&#x3002;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x5E38;&#x6570;K&#x548C;&#x4E00;&#x4E2A;&#x5355;&#x94FE;&#x8868;L&#x3002;&#x5BF9;&#x4E8E;&#x94FE;&#x8868;&#x4E0A;&#x6BCF;K&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x5C06;&#x5176;&#x9006;&#x7F6E;&#x3002; &#x8F93;&#x5165;&#x4F8B;&#x5982;&#xFF0C;&#x5047;&#x8BBE;L&#x662F;1&#x2192;2&#x2192;3&#x2192;4&#x2192;5&#x2192;6&#xFF0C;&#x5982;&#x679C;K = 3&#xFF0C;&#x90A3;&#x4E48;&#x4F60;&#x5FC5;&#x987B;&#x8F93;&#x51FA;3&#x2192;2&#x2192;1&#x2192;6&#x2192;5&#x2192;4; &#x5982;&#x679C;K = 4&#xFF0C;&#x5219;&#x5FC5;&#x987B;&#x8F93;&#x51FA;4&#x2192;3&#x2192;2&#x2192;1&#x2192;5&#x2192;6&#x3002; &#x8F93;&#x5165;&#x7684;&#x7B2C;&#x4E00;&#x884C;&#x5305;&#x62EC; &#x9996;&#x8282;&#x70B9;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x8868;&#x793A;&#x8282;&#x70B9;&#x7684;&#x603B;&#x6570;&#xFF0C;K&#xFF0C;&#x8981;&#x6C42;&#x9006;&#x8F6C;&#x7684;&#x4E2A;&#x6570;&#x3002;NULL&#x8868;&#x793A;&#x4E3A;-1&#x3002; &#x63A5;&#x7740;&#x662F;K&#x884C;&#xFF0C;&#x683C;&#x5F0F;&#x4E3A; &#x5730;&#x5740; &#x6570;&#x636E; &#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5730;&#x5740; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x751F;&#x6210;&#x7684;&#x6709;&#x5E8F;&#x94FE;&#x8868;&#xFF0C;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x5360;&#x4E00;&#x884C;&#xFF0C;&#x683C;&#x5F0F;&#x540C;&#x4E0A;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x94FE;&#x8868;&#x7684;&#x7EBF;&#x6027;&#x5B58;&#x50A8;&#xFF0C;&#x4F7F;&#x7528;vector&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#x548C;&#x9006;&#x7F6E;&#x3002;&#x6CE8;&#x610F;&#xFF0C;&#x8FD9;&#x7C7B;&#x9898;&#x5E38;&#x6709;&#x7684;&#x5927;&#x5751;&#x662F;&#xFF0C;&#x94FE;&#x8868;&#x7684;&#x957F;&#x5EA6;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;N&#xFF0C;&#x867D;&#x7136;&#x6709;N&#x4E2A;&#x8282;&#x70B9;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E9B;&#x8282;&#x70B9;&#x5E76;&#x4E0D;&#x90FD;&#x5728;&#x94FE;&#x8868;&#x4E0A;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int first, k, n;int LinkData[100001];int LinkNext[100001];vector&lt;int&gt; L;void solution(){ cin &gt;&gt; first &gt;&gt; n &gt;&gt; k; int addr, node_data, next_addr; for (int i = 0; i &lt; n; i++) { cin &gt;&gt; addr &gt;&gt; node_data &gt;&gt; next_addr; LinkData[addr] = node_data; LinkNext[addr] = next_addr; } for (int i = first; i != -1; i = LinkNext[i]) { L.push_back(i); } int length = L.size(); for (int i = 0; i*k+k &lt;= length; i++) { reverse(L.begin() + i*k, L.begin() + i*k + k); } length = L.size() - 1; for (int i = 0; i &lt; length; i++) { printf(&quot;%05d %d %05d\n&quot;, L[i], LinkData[L[i]], L[i + 1]); } printf(&quot;%05d %d -1&quot;, L[length], LinkData[L[length]]);}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456789101112131415Sample Input:00100 6 400000 4 9999900100 1 1230968237 6 -133218 3 0000099999 5 6823712309 2 33218Sample Output:00000 4 3321833218 3 1230912309 2 0010000100 1 9999999999 5 6823768237 6 -1]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1073 Scientific Notation (20)]]></title>
    <url>%2F%2Fposts%2Ffc7b145c%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6570;&#x7684;&#x79D1;&#x5B66;&#x8BA1;&#x6570;&#x6CD5;&#xFF0C;&#x6C42;&#x8FD9;&#x4E2A;&#x6570;&#x7684;&#x4F20;&#x7EDF;&#x8BA1;&#x6570;&#x6CD5;&#x3002; &#x8F93;&#x5165;&#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x79D1;&#x5B66;&#x8BA1;&#x6570;&#x6CD5;&#x8868;&#x793A;&#x7684;&#x5B9E;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7;9999&#x5B57;&#x8282;&#xFF0C;&#x6307;&#x6570;&#x7684;&#x7EDD;&#x5BF9;&#x503C;&#x4E0D;&#x8D85;&#x8FC7;9999&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x8FD9;&#x4E2A;&#x6570;&#x7684;&#x4F20;&#x7EDF;&#x8BA1;&#x6570;&#x6CD5;&#xFF0C;&#x4FDD;&#x7559;&#x6240;&#x6709;&#x7684;&#x6709;&#x6548;&#x6570;&#x5B57;&#xFF0C;&#x5305;&#x62EC;&#x5C3E;&#x968F;&#x96F6;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5B57;&#x7B26;&#x4E32;&#x5904;&#x7406; Tips &#x5C06;&#x8F93;&#x5165;&#x7684;&#x6570;&#x5206;&#x6210;&#x4E09;&#x90E8;&#x5206;&#xFF0C;&#x7B26;&#x53F7;&#xFF0C;&#x5E95;&#x6570;&#xFF0C;&#x6307;&#x6570;&#x3002; &#x4F7F;&#x7528;str.insert()&#x548C;string.erase()&#xFF0C;&#x4F1A;&#x66F4;&#x65B9;&#x4FBF;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;iostream&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;string str;int num;void solution(){ cin &gt;&gt; str; int pos_e, pos_exp; bool isPositive = true; if (str[0] == &apos;-&apos;) isPositive = false; pos_e = str.find(&apos;E&apos;); string str_num = str.substr(1, pos_e - 1); string str_exp = str.substr(pos_e + 1); int exp = stoi(str_exp); if (exp &gt; 0) { str_num.erase(1, 1); //&#x53BB;&#x6389;&#x5C0F;&#x6570;&#x70B9; if (exp &lt; str_num.size() - 1) str_num.insert(exp + 1, &quot;.&quot;); //&#x91CD;&#x65B0;&#x786E;&#x5B9A;&#x5C0F;&#x6570;&#x70B9; else { int pos = exp - (str_num.size() - 1); for (int i = 0; i &lt; pos; i++) { str_num += &apos;0&apos;; //&#x5728;&#x540E;&#x9762;&#x6DFB;&#x52A0;0 } } } else if (exp&lt;0) { str_num.erase(1, 1); //&#x53BB;&#x6389;&#x5C0F;&#x6570;&#x70B9; for (int i = 0; i &lt; (-exp); i++) { str_num.insert(0, &quot;0&quot;); } str_num.insert(1, &quot;.&quot;); //&#x586B;&#x5B8C;0&#x4E4B;&#x540E;&#x518D;&#x52A0;&#x4E0A;&#x5C0F;&#x6570;&#x70B9; } if (!isPositive) cout &lt;&lt; &apos;-&apos;; cout &lt;&lt; str_num;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678Sample Input 1:+1.23400E-03Sample Output 1:0.00123400Sample Input 2:-1.2E+10Sample Output 2:-12000000000]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>C++ STL</tag>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1071 Speech Patterns (25)]]></title>
    <url>%2F%2Fposts%2Fe490869c%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x7EDF;&#x8BA1;&#x4E00;&#x884C;&#x5185;&#x51FA;&#x73B0;&#x6700;&#x591A;&#x6B21;&#x6570;&#x7684;&#x5355;&#x8BCD;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x6709;&#x4E00;&#x884C;&#x4E0D;&#x8D85;&#x8FC7;1048576&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x4EE5;&#x56DE;&#x8F66;&#x2019;\n&#x2019;&#x7ED3;&#x5C3E;&#xFF0C;&#x8F93;&#x5165;&#x81F3;&#x5C11;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6570;&#x5B57;&#x5B57;&#x6BCD;&#x5B57;&#x7B26;&#xFF0C;&#x5373;[0-9 A-Z a-z]&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x3002; &#x8F93;&#x51FA;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;&#x7ED9;&#x5B9A;&#x6587;&#x672C;&#x4E2D;&#x6700;&#x5E38;&#x51FA;&#x73B0;&#x7684;&#x5355;&#x8BCD;&#xFF0C;&#x540E;&#x8DDF;&#x4E00;&#x4E2A;&#x7A7A;&#x683C;&#x548C;&#x8F93;&#x5165;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x6B21;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x591A;&#x4E2A;&#x8FD9;&#x6837;&#x7684;&#x5355;&#x8BCD;&#xFF0C;&#x8F93;&#x51FA;&#x5B57;&#x5178;&#x4E0A;&#x6700;&#x5C0F;&#x7684;&#x5355;&#x8BCD;&#xFF0C;&#x5168;&#x90E8;&#x5C0F;&#x5199;&#x3002; &#x5355;&#x8BCD;&#x7684;&#x5B9A;&#x4E49;&#x662F;&#xFF1A;&#x4E00;&#x4E32;&#x5B57;&#x6BCD;&#x6570;&#x5B57;&#x7684;&#x8FDE;&#x7EED;&#x5E8F;&#x5217;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E8F;&#x5217;&#x7531;&#x975E;&#x5B57;&#x6BCD;&#x6570;&#x5B57;&#x6216;&#x8005;&#x884C;&#x5F00;&#x59CB;&#x6216;&#x8005;&#x884C;&#x7ED3;&#x675F;&#x5206;&#x9694;&#x5F00;&#x7684;&#x3002; &#x6BD4;&#x5982; Can1: &#x201C;Can a can can a can? It can!&#x201D; &#x5728;&#x8FD9;&#x53E5;&#x8BDD;&#x4E2D;&#xFF0C;&#x5FFD;&#x7565;&#x5927;&#x5C0F;&#x5199;&#x7684;&#x8BDD;&#xFF0C;can&#x4E00;&#x5171;&#x51FA;&#x73B0;&#x4E86;5&#x6B21;&#xFF0C;&#x4F46;&#x662F;can1&#x5C31;&#x4E0D;&#x80FD;&#x7B97;&#x8FDB;&#x53BB;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x7EDF;&#x8BA1;&#x5355;&#x8BCD;&#x4E2A;&#x6570;&#xFF0C;&#x8F93;&#x51FA;&#x51FA;&#x73B0;&#x6700;&#x591A;&#x6B21;&#x6570;&#x7684;&#x5355;&#x8BCD;&#x3002; Tips&#x4F7F;&#x7528;Map&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;map&gt;#pragma warning(disable:4996)using namespace std;map&lt;string, int&gt; res;string str, word;void solution(){ getline(cin, str); //&#x6709;&#x7A7A;&#x683C;&#x5C31;&#x7528;getline for (int i = 0; i &lt; str.size(); i++) { while ((str[i] &gt;= &apos;A&apos;&amp;&amp;str[i] &lt;= &apos;Z&apos;) || (str[i] &gt;= &apos;a&apos;&amp;&amp;str[i] &lt;= &apos;z&apos;) || str[i] &gt;= &apos;0&apos;&amp;&amp;str[i] &lt;= &apos;9&apos;) //&#x5982;&#x679C;&#x662F;&#x6709;&#x6548;&#x7684;&#x5B57;&#x7B26; { if (str[i] &gt;= &apos;A&apos;&amp;&amp;str[i] &lt;= &apos;Z&apos;) str[i] = &apos;a&apos; + str[i] - &apos;A&apos;; word += str[i]; i++; } if (word.size()) { res[word]++; word.clear(); } } int MaxNum = 0; auto i = res.begin(); auto temp = i; for (; i != res.end(); i++) { if (i-&gt;second &gt; MaxNum) { MaxNum = i-&gt;second; temp = i; } } cout &lt;&lt; temp-&gt;first &lt;&lt; &apos; &apos; &lt;&lt; temp-&gt;second;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234Sample Input:Can1: &quot;Can a can can a can? It can!&quot;Sample Output:can 5]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>C++ STL</tag>
        <tag>Map映射</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1070 Mooncake (25)]]></title>
    <url>%2F%2Fposts%2Fcb0684aa%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x7ED9;&#x51FA;&#x5404;&#x79CD;&#x6708;&#x997C;&#x7684;&#x5E93;&#x5B58;&#x548C;&#x4EF7;&#x683C;&#xFF0C;&#x4EE5;&#x53CA;&#x5E02;&#x573A;&#x7684;&#x6700;&#x5927;&#x9700;&#x6C42;&#xFF0C;&#x6C42;&#x6700;&#x5927;&#x5229;&#x6DA6;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E24;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x8868;&#x793A;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x6708;&#x997C;&#x548C;&#x6700;&#x5927;&#x603B;&#x9700;&#x6C42;&#x91CF;&#x3002;&#x7B2C;&#x4E8C;&#x884C;&#x662F;&#x6BCF;&#x79CD;&#x6708;&#x997C;&#x7684;&#x5E93;&#x5B58;&#x91CF;&#xFF08;&#x4E0D;&#x4E00;&#x5B9A;&#x662F;&#x6574;&#x6570;&#xFF09;&#xFF0C;&#x7B2C;&#x4E09;&#x884C;&#x662F;&#x6BCF;&#x79CD;&#x6708;&#x997C;&#x7684;&#x603B;&#x4EF7;&#x683C;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x6700;&#x5927;&#x5229;&#x6DA6;&#xFF0C;&#x7CBE;&#x786E;&#x5230;&#x4E24;&#x4F4D;&#x5C0F;&#x6570;&#x3002;&#x6BD4;&#x5982;&#x8F93;&#x5165;1233 200180 150 1007.5 7.2 4.5 &#x8868;&#x793A;&#x6709;3&#x79CD;&#x6708;&#x997C;&#xFF0C;&#x5206;&#x522B;&#x6709;180 150 100 &#x603B;&#x4EF7;&#x4E3A;7.5 7.2 4.5 &#x56E0;&#x6B64;&#x663E;&#x7136;&#x7B2C;&#x4E8C;&#x79CD;&#x548C;&#x7B2C;&#x4E09;&#x79CD;&#x5355;&#x4EF7;&#x66F4;&#x9AD8;&#x3002;&#x5728;&#x9700;&#x8981;200&#x7684;&#x60C5;&#x51B5;&#x4E0B;:&#x5356;&#x51FA;&#x53BB;150&#x7684;&#x7B2C;&#x4E8C;&#x79CD;&#xFF0C;&#x5356;&#x51FA;&#x53BB;50&#x7684;&#x7B2C;&#x4E09;&#x79CD;&#x3002;&#x56E0;&#x6B64;&#x603B;&#x5229;&#x6DA6;&#x4E3A;7.2 + 4.5 / 2 = 9.45 &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#xFF0C;&#x4E70;&#x5355;&#x4EF7;&#x6700;&#x8D35;&#x7684;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int N, need;float res = 0.0;typedef struct{ float weight; //&#x6BCF;&#x79CD;&#x7684;&#x91CD;&#x91CF;&#x5E76;&#x4E0D;&#x4E00;&#x5B9A;&#x90FD;&#x662F;&#x6574;&#x6570; float TotalPrice; float UnitPrice;}Mooncake;vector&lt;Mooncake&gt; mooncake;bool cmp(Mooncake a, Mooncake b){ return a.UnitPrice &gt; b.UnitPrice;}void solution(){ cin &gt;&gt; N &gt;&gt; need; mooncake.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; mooncake[i].weight; } for (int i = 0; i &lt; N; i++) { cin &gt;&gt; mooncake[i].TotalPrice; mooncake[i].UnitPrice = mooncake[i].TotalPrice / mooncake[i].weight; } sort(mooncake.begin(), mooncake.end(), cmp); for (int i = 0; i&lt;N; i++) //&#x53EF;&#x80FD;&#x6700;&#x540E;&#x5168;&#x5356;&#x5B8C;&#x8FD8;&#x65E0;&#x6CD5;&#x8FBE;&#x5230;&#x9700;&#x6C42; { if (need&gt;mooncake[i].weight) { need -= mooncake[i].weight; res += mooncake[i].TotalPrice; } else { res += mooncake[i].UnitPrice*need; need = 0; break; //&#x591F;&#x4E86;&#x5C31;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF; } } printf(&quot;%.2f&quot;, res);}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123456Sample Input:3 200180 150 1007.5 7.2 4.5Sample Output:9.45]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1069 The Black Hole of Numbers (20)]]></title>
    <url>%2F%2Fposts%2Fabc10d4f%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6570;&#x5B57;&#x7684;&#x9ED1;&#x6D1E;&#x3002; &#x4EFB;&#x4F55;&#x4E00;&#x4E2A;&#x56DB;&#x4F4D;&#x4E0D;&#x76F8;&#x540C;&#x7684;&#x6570;&#x5B57;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x5148;&#x628A;&#x8FD9;4&#x4E2A;&#x6570;&#x5B57;&#x964D;&#x5E8F;&#x6392;&#x5217;&#xFF0C;&#x51CF;&#x53BB;&#x5176;&#x5347;&#x5E8F;&#x6392;&#x5217;&#x6240;&#x5F97;&#x7684;&#x6570;&#xFF0C;&#x4F9D;&#x6B21;&#x53CD;&#x590D;&#xFF0C;&#x6700;&#x540E;&#x7684;&#x7ED3;&#x679C;&#x6C38;&#x8FDC;&#x90FD;&#x4F1A;&#x5F97;&#x5230;6174.&#x79F0;&#x4E4B;&#x4E3A;&#x6570;&#x5B57;&#x9ED1;&#x6D1E;&#xFF0C;&#x7ED9;&#x5B9A;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;4&#x4F4D;&#x6570;&#x5B57;&#xFF0C;&#x6C42;&#x51FA;&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x8FDB;&#x5165;&#x9ED1;&#x6D1E;&#x7684;&#x6B65;&#x9AA4;&#x3002; &#x8F93;&#x5165;&#xFF08;0&#xFF0C;10000&#xFF09;&#x5185;&#x7684;&#x6B63;&#x6574;&#x6570;N&#x3002; &#x8F93;&#x51FA;&#x5982;&#x679C;N&#x7684;&#x6240;&#x6709;&#x56DB;&#x4F4D;&#x6570;&#x90FD;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x5728;&#x4E00;&#x884C;&#x4E2D;&#x8F93;&#x51FA;N - N = 0000&#x3002;&#x5426;&#x5219;&#x8F93;&#x51FA;&#x6BCF;&#x4E00;&#x6B65;&#x7684;&#x8BA1;&#x7B97;&#x7ED3;&#x679C;&#x76F4;&#x5230;&#x51FA;&#x73B0;6174.&#x6240;&#x6709;&#x7684;&#x6570;&#x5B57;&#x5FC5;&#x987B;&#x6253;&#x5370;&#x6210;4&#x4F4D;&#x6570;&#x5B57;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; reverse(str.begin(),str.end()); sort(str.start,str.end(),cmp; stoi(str) // &#x5B57;&#x7B26;&#x4E32;&#x8F6C;int to_string(int) //int&#x8F6C;&#x5B57;&#x7B26;&#x4E32; Tips&#x6CE8;&#x610F;&#x5728;to_string(int) //int&#x8F6C;&#x5B57;&#x7B26;&#x4E32;&#x540E;&#xFF0C;&#x8981;&#x63D2;&#x5165;0 &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;string input;int a, b, c=-1;bool cmp(char a, char b){ return a &gt; b;}void solution(){ cin &gt;&gt; input; input.insert(0, 4 - input.length(), &apos;0&apos;); while (c!=6174&amp;&amp;c!=0) { sort(input.begin(), input.end()); a = stoi(input); //&#x4ECE;&#x5C0F;&#x5230;&#x5927; sort(input.begin(), input.end(), cmp); b = stoi(input); c = b - a; printf(&quot;%04d - %04d = %04d\n&quot;, b, a, c); input = to_string(c); input.insert(0, 4 - input.length(), &apos;0&apos;); }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234566767&#x8F93;&#x51FA;&#x5E94;&#x4E3A;7766 - 6677 = 10899810 - 0189 = 96219621 - 1269 = 83528532 - 2358 = 6174 1232222&#x8F93;&#x51FA;&#x5E94;&#x4E3A;2222 - 2222 = 0000]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>字符串</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1067 Sort with Swap(0,*) (25)]]></title>
    <url>%2F%2Fposts%2F4c792048%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x4F7F;&#x7528;Swap(0,* )&#x6765;&#x6392;&#x5E8F;&#x3002;&#x6C42;&#x5BF9;&#x4E8E;&#x7ED9;&#x5B9A;&#x5E8F;&#x5217;&#xFF0C;&#x6700;&#x5C11;&#x7684;&#x4EA4;&#x6362;&#x6B21;&#x6570;&#x3002; &#x8F93;&#x5165;&#x5148;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x968F;&#x540E;&#x662F;N&#x4E2A;&#x6570;&#xFF0C;&#x4E71;&#x5E8F;&#x7684; 0~N-1&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x4F7F;&#x6570;&#x5217;&#x6392;&#x5E8F;&#x6210;&#x589E;&#x5E8F;&#x7684;&#x6700;&#x5C11;&#x4EA4;&#x6362;&#x6B21;&#x6570;&#x3002;&#x4F7F;&#x7528;Swap&#xFF08;0&#xFF0C;* &#xFF09;&#x7684;&#x89E3;&#x91CA;&#x5982;&#x4E0B;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x5FC5;&#x987B;&#x662F;0&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x6570;&#x662F;&#x5176;&#x4ED6;&#x7684;&#x3002;&#x6BD4;&#x5982;&#x5BF9;{4, 0, 2, 1, 3}&#x8FDB;&#x884C;&#x6392;&#x5E8F; &#x4EA4;&#x6362;&#xFF08;0,1&#xFF09;&#x5F97;&#x5230;{4, 1, 2, 0, 3} &#x5BF9;{4, 1, 2, 0, 3}&#x4EA4;&#x6362;&#xFF08;0,3&#xFF09; &#x5F97;&#x5230;{4, 1, 2, 3, 0} &#x5BF9;{4, 1, 2, 3, 0}&#x4EA4;&#x6362;&#xFF08;0,4&#xFF09;&#x5F97;&#x5230; {0, 1, 2, 3, 4} &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;1234Order| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | +---+---+---+---+---+---+---+---+---+---+&#xA0;&#xA0;&#xA0;&#xA0; | 3 | 5 | 7 | 2 | 6 | 4 | 9 | 0 | 8 | 1 |&#xA0;&#xA0;&#xA0;&#xA0; +---+---+---+-&#x2014;-+---+---+---+---+---+---+ &#x5404;&#x56DE;&#x5404;&#x5BB6;&#xFF0C;&#x5404;&#x627E;&#x5404;&#x5988;&#x3002;&#x88AB;&#x8D76;&#x51FA;&#x6765;&#x7684;&#x53BB;&#x8D76;&#x522B;&#x4EBA;&#x3002; a[0] -&gt; a[3] a[3] -&gt; a[2] a[2] -&gt; a[7] a[7] -&gt; a[0] &#x7B2C;&#x4E00;&#x6B65;&#x4EA4;&#x6362;&#x4E2D;&#x6709;0&#x53C2;&#x4E0E;&#xFF0C;&#x6240;&#x4EE5;&#x6B21;&#x6570;&#x4E3A;3&#x3002;&#x5206;&#x522B;&#x662F;&#xFF08;0,7&#xFF09;&#xFF08;0,2&#xFF09;&#xFF08;0,3&#xFF09;&#xFF0C;&#x8FD9;&#x4E2A;&#x6570;&#x6B63;&#x597D;&#x7B49;&#x4E8E;&#x53C2;&#x4E0E;&#x4EA4;&#x6362;&#x7684;&#x6570;&#x5B57;&#x7684;&#x4E2A;&#x6570;&#xFF08;4&#xFF09;-1,&#x628A;&#x8FD9;&#x4E9B;&#x6570;&#x5B57;&#xFF08;0,2,3,7&#xFF09;&#x5F52;&#x4E3A;&#x7B2C;&#x4E00;&#x7EC4;1234Order| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |&#xA0;&#xA0;&#xA0;&#xA0; +---+---+---+---+---+---+---+---+---+---+&#xA0;&#xA0;&#xA0;&#xA0; | 0 | 5 | 2 | 3 | 6 | 4 | 9 | 7 | 8 | 1 |&#xA0;&#xA0;&#xA0;&#xA0; +-^-+---+-^-+-&#x2014;-+---+---+---+-^-+---+---+ a[1] -&gt; a[5] a[5] -&gt; a[4] a[4] -&gt; a[6] a[6] -&gt; a[9] a[9] -&gt; a[1] &#x7B2C;&#x4E8C;&#x6B65;&#x4EA4;&#x6362;&#x4E2D;&#x6CA1;&#x6709;0&#x53C2;&#x4E0E;&#xFF0C;&#x6240;&#x4EE5;&#x6B21;&#x6570;&#x4E3A;6&#x6B21;&#xFF0C;&#x5206;&#x522B;&#x662F;&#xFF08;0,5&#xFF09;&#xFF08;0,1&#xFF09;&#xFF08;0,9&#xFF09;&#xFF08;0,6&#xFF09;&#xFF08;0,4&#xFF09;&#xFF08;0,5&#xFF09;&#x8FD9;&#x4E2A;&#x6570;&#x5B57;&#x6B63;&#x597D;&#x7B49;&#x4E8E;&#x53C2;&#x4E0E;&#x4EA4;&#x6362;&#x7684;&#x6570;&#x5B57;&#x4E2A;&#x6570;+1&#x3002;&#x8BF4;&#x6CA1;&#x6709;0&#x53C2;&#x4E0E;&#x662F;&#x6307;&#x8981;&#x4EA4;&#x6362;&#x7684;&#x6570;&#x5B57;&#x4E2D;&#x6CA1;&#x6709;0&#xFF0C;&#x4F46;&#x662F;0&#x95F4;&#x63A5;&#x53C2;&#x4E0E;&#x4E86;&#x4EA4;&#x6362;&#x3002;&#x628A;&#x8FD9;&#x4E9B;&#x6570;&#x5B57;&#xFF08;1,4,5,6,9&#xFF09;&#x5F52;&#x4E3A;&#x7B2C;&#x4E8C;&#x7EC4;&#x3002;1234Order| 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |&#xA0;&#xA0;&#xA0;&#xA0; +---+---+---+---+---+---+---+---+---+---+&#xA0;&#xA0;&#xA0;&#xA0; | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |&#xA0;&#xA0;&#xA0;&#xA0; +-^-+-^-+-^-+-&#x2014;-+-^-+-^-+-^-+-^-+---+-^-+ &#x7531;&#x4E0A;&#x5206;&#x6790;&#xFF0C;&#x63A8;&#x5BFC;&#x5982;&#x4E0B;&#xFF1A; &#x53C8;&#x7531;&#x4E8E;&#x5728;&#x4E00;&#x6B21;&#x6392;&#x5E8F;&#x4E2D;&#xFF0C;&#x5982;&#x679C;0&#x4E0D;&#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#xFF0C;&#x90A3;&#x4E48;0&#x6709;&#x4E14;&#x4EC5;&#x6709;&#x4E00;&#x6B21;&#x76F4;&#x63A5;&#x53C2;&#x4E0E;&#x4EA4;&#x6362;&#x3002;&#x5176;&#x4ED6;&#x7684;&#x53C2;&#x4E0E;&#xFF08;&#x5982;&#x679C;&#x6709;&#x7684;&#x8BDD;&#xFF09;&#x90FD;&#x662F;&#x95F4;&#x63A5;&#x53C2;&#x4E0E;&#x3002;&#x5982;&#x679C;0&#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#xFF0C;&#x90A3;&#x4E48;0&#x4E00;&#x5B9A;&#x662F;&#x95F4;&#x63A5;&#x53C2;&#x4E0E;&#x6392;&#x5E8F;&#x3002; &#x56E0;&#x6B64;&#x53EF;&#x4EE5;&#x5F97;&#xFF1A; &#x8BBE;&#x4E00;&#x5171;&#x6709;N&#x7EC4;&#x3002;&#x6BCF;&#x7EC4;&#x5206;&#x522B;&#x6709;a1,a2,a3&#x2026;..an&#x6570;&#x5B57;&#x3002;&#x82E5;num[0]!=0&#xFF0C;&#x5219;0&#x6709;&#x4E14;&#x4EC5;&#x6709;&#x4E00;&#x6B21;&#x76F4;&#x63A5;&#x53C2;&#x4E0E;&#x4EA4;&#x6362;&#x3002;&#x8BBE;0&#x5728;&#x7B2C;t&#x7EC4;&#x76F4;&#x63A5;&#x53C2;&#x4E0E;&#x6392;&#x5E8F;&#xFF0C;&#x90A3;&#x4E48;&#x4E00;&#x5171;&#x4EA4;&#x6362;&#x6B21;&#x6570;&#x4E3A;(a1+1)+(a2+1)+&#x2026;+(at-1)+&#x2026;(an+1)=(a1+a2+&#x2026;at)+N-2.&#x53C8;a1+a2+a3+&#x2026;+an&#x662F;&#x6240;&#x6709;&#x4E0D;&#x5728;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x4E0A;&#x7684;&#x6570;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;num[i]==i&#x662F;&#x5426;&#x6210;&#x7ACB;&#x6765;&#x5224;&#x65AD;&#x3002; &#x82E5;num[0]==0 &#x5219;0&#x5168;&#x90E8;&#x662F;&#x95F4;&#x63A5;&#x53C2;&#x4E0E;&#x4EA4;&#x6362;&#x6240;&#x4EE5;&#x4EA4;&#x6362;&#x6B21;&#x6570; =(a1+1)+(a2+1)+&#x2026;+(an+1)=(a1+a2+&#x2026;at)+N&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;int num[100001];bool visit[100001] = { 0 };int N, group = 0, swap_time = 0;void solution(){ cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) cin &gt;&gt; num[i]; for (int i = 0; i &lt; N; i++) { if (visit[i] || num[i] == i) continue; group++; int j = i; while (!visit[j]) { visit[j] = true; swap_time++; j = num[j]; } } if (num[0] != 0) cout &lt;&lt; swap_time + group - 2; else cout &lt;&lt; swap_time + group; return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234input10 3 5 7 2 6 4 9 0 8 1output9 1234input11 3 5 7 2 6 4 9 0 11 1 8output14]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1065 A+B and C (64bit) (20)]]></title>
    <url>%2F%2Fposts%2Fa2774164%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;64&#x4F4D;&#x7684;A+B&#x548C;C&#xFF0C;&#x5224;&#x65AD;&#x662F;&#x5426;A+B&gt;C&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x7ED9;&#x51FA;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x7684;&#x6570;&#x91CF;T&#x3002;&#x5728;&#x968F;&#x540E;&#x7684;T&#x884C;&#x5185;&#xFF0C;&#x6BCF;&#x884C;&#x6709;3&#x4E2A;&#x6570;&#x5B57;A,B,C&#xFF0C;&#x7531;&#x7A7A;&#x683C;&#x9694;&#x5F00;&#x3002; &#x8F93;&#x51FA;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#xFF0C;&#x5982;&#x679C;A+B&gt;C&#xFF0C;&#x5219;&#x5728;&#x4E00;&#x884C;&#x5185;&#x8F93;&#x51FA; Case #X: true &#x5426;&#x5219;&#x8F93;&#x51FA; Case #X: false &#x5176;&#x4E2D;X&#x662F;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x7684;&#x5E8F;&#x53F7;&#xFF0C;&#x4ECE;1&#x5F00;&#x59CB;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x9898;&#x76EE;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5224;&#x65AD;&#x662F;&#x5426;&#x4E0A;&#x6EA2;&#x5373;&#x53EF;&#x3002; Tips&#x6211;&#x611F;&#x89C9;&#x8FD9;&#x4E2A;&#x9898;&#x6709;&#x70B9;&#x95EE;&#x9898;&#xFF0C;&#x9898;&#x76EE;&#x60F3;&#x8981;&#x8868;&#x8FBE;&#x7684;&#x610F;&#x601D;&#x5E94;&#x8BE5;&#x662F; [-2^63, 2^63)&#xFF0C;&#x5373;&#x4E0D;&#x5305;&#x62EC; 2^63 &#x7684;&#x3002;&#x4F46;&#x662F;&#x5982;&#x679C;&#x8FD8;&#x662F;&#x6309;&#x7167; [-2^63, 2^63]&#x6765;&#x505A;&#x7684;&#x8BDD;&#xFF0C;&#x6211;&#x4E5F;&#x6CA1;&#x60F3;&#x51FA;&#x592A;&#x597D;&#x7684;&#x529E;&#x6CD5;&#xFF0C;&#x76EE;&#x524D;&#x6211;&#x7684;&#x601D;&#x8DEF;&#x662F;&#x5927;&#x6574;&#x6570;&#x52A0;&#x6CD5;&#xFF0C;&#x7528;&#x7EBF;&#x6027;&#x5BB9;&#x5668;&#xFF08;&#x6570;&#x7EC4;&#xFF0C;string&#xFF0C;vrctor&#xFF09;&#x53BB;&#x505A;&#x3002; &#x4EE3;&#x7801;&#xFF08;&#x6309;&#x7167;[-2^63, 2^63)&#x53BB;&#x505A;&#x7684;&#xFF09;&#xFF0C;&#x80FD;&#x901A;&#x8FC7;PAT&#x6D4B;&#x8BD5;&#x3002;123456789101112131415161718192021222324252627282930313233343536#include&lt;iostream&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;int T;long long int A, B, C, D;void solution(){ cin &gt;&gt; T; bool res; for (int i = 0; i &lt; T; i++) { cin &gt;&gt; A &gt;&gt; B &gt;&gt; C; D = A + B; if (A &gt; 0 &amp;&amp; B &gt; 0 &amp;&amp; D &lt; 0) res = true; //&#x4E0A;&#x6EA2;&#x4E00;&#x5B9A;&#x5927;&#x4E8E; else if (A &lt; 0 &amp;&amp; B &lt; 0 &amp;&amp; D&gt;=0) res = false; //&#x4E0B;&#x6EA2;&#x4E00;&#x5B9A;&#x5C0F;&#x4E8E; else res = (D &gt; C); if (res) cout &lt;&lt; &quot;Case #&quot; &lt;&lt; i + 1 &lt;&lt; &quot;: &quot; &lt;&lt; &quot;true&quot; &lt;&lt; endl; else cout &lt;&lt; &quot;Case #&quot; &lt;&lt; i + 1 &lt;&lt; &quot;: &quot; &lt;&lt; &quot;false&quot; &lt;&lt; endl; }}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x56DE;&#x5934;&#x5199;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x3002; &#x6D4B;&#x8BD5;&#x6570;&#x636E;123431 2 32 3 49223372036854775807 -9223372036854775808 0 1219223372036854775808 -9223372036854775808 -1]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>判断溢出</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1066 Root of AVL Tree (25)]]></title>
    <url>%2F%2Fposts%2F3b7e10de%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6C42;&#x4E00;&#x4E2A;AVL&#x6811;&#x7684;&#x6839;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N(&lt;=20)&#xFF0C;&#x8868;&#x793A;&#x8981;&#x63D2;&#x5165;&#x8FDB;AVL&#x6811;&#x7684;&#x6570;&#x5B57;&#x7684;&#x4E2A;&#x6570;&#xFF08;&#x5373;AVL&#x6811;&#x7684;&#x8282;&#x70B9;&#xFF09;&#x3002;&#x7136;&#x540E;&#x662F;N&#x4E2A;&#x4E92;&#x4E0D;&#x76F8;&#x540C;&#x7684;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x751F;&#x6210;&#x7684;AVL&#x6811;&#x7684;&#x6839;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6A21;&#x62DF;&#xFF0C;&#x56E0;&#x4E3A;&#x5BF9;&#x4E8E;&#x540C;&#x6837;&#x7684;&#x4E00;&#x7EC4;&#x6570;&#xFF0C;&#x6700;&#x540E;&#x751F;&#x6210;&#x7684;AVL&#x6811;&#x662F;&#x7531;&#x63D2;&#x5165;&#x7684;&#x987A;&#x5E8F;&#x51B3;&#x5B9A;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x9898;&#x6CA1;&#x6709;&#x7B80;&#x4FBF;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x53EA;&#x80FD;&#x901A;&#x8FC7;&#x6A21;&#x62DF;&#x63D2;&#x5165;&#xFF0C;&#x8C03;&#x6574;&#x64CD;&#x4F5C;&#x6765;&#x6700;&#x7EC8;&#x6784;&#x5EFA;&#x4E00;&#x68F5;AVL&#x6811;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;iostream&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;int N;typedef struct tree{ int val; int height; struct tree *left; struct tree *right;}Tree;int HTree(Tree* root) //&#x6C42;&#x6811;&#x7684;&#x9AD8;&#x5EA6;{ if (root == NULL) return -1; else return root-&gt;height;}Tree* SingleRotateWithLeft(Tree* r1) //&#x5355;&#x5DE6;&#x65CB;{ Tree* r2; r2 = r1-&gt;left; r1-&gt;left = r2-&gt;right; r2-&gt;right = r1; r1-&gt;height = max(HTree(r1-&gt;left), HTree(r1-&gt;right)) + 1; r2-&gt;height = max(HTree(r2-&gt;left), r1-&gt;height) + 1; return r2;}Tree* SingleRotateWithRight(Tree* r1){ Tree* r2; r2 = r1-&gt;right; r1-&gt;right = r2-&gt;left; r2-&gt;left = r1; r1-&gt;height = max(HTree(r1-&gt;left), HTree(r1-&gt;right)) + 1; r2-&gt;height = max(r1-&gt;height, HTree(r2-&gt;right)) + 1; return r2; //return the root}Tree* DoubleRotateWithLeft(Tree* root) //&#x5BF9;&#x5DE6;&#x5B50;&#x6811;&#x5148;&#x505A;&#x5355;&#x53F3;&#x65CB;&#x8F6C;&#xFF0C;&#x518D;&#x5BF9;&#x6839;&#x505A;&#x5DE6;&#x65CB;&#x8F6C;{ root-&gt;left = SingleRotateWithRight(root-&gt;left); return SingleRotateWithLeft(root);}Tree* DoubleRotateWithRight(Tree* root){ root-&gt;right = SingleRotateWithLeft(root-&gt;right); return SingleRotateWithRight(root);}Tree* AVLInsert(Tree* root, int num){ if (root==NULL) { root = (Tree*)malloc(sizeof(Tree)); root-&gt;val = num; root-&gt;height = 1; root-&gt;left = NULL; root-&gt;right = NULL; } else if (num &lt; root-&gt;val) //&#x63D2;&#x5165;&#x5230;&#x5DE6;&#x5B50;&#x6811; { root-&gt;left = AVLInsert(root-&gt;left, num); //&#x63D2;&#x5165;&#x5230;&#x5DE6;&#x5B50;&#x6811;&#x4E2D; if (HTree(root-&gt;left) - HTree(root-&gt;right) == 2) //&#x9AD8;&#x5EA6;&#x5DEE;&#x4E3A;2&#x8868;&#x793A;&#x9700;&#x8981;&#x8C03;&#x6574; if (num &lt; root-&gt;left-&gt;val) root = SingleRotateWithLeft(root); else root = DoubleRotateWithLeft(root); } else if (num &gt; root-&gt;val) { root-&gt;right = AVLInsert(root-&gt;right, num); if (HTree(root-&gt;right) - HTree(root-&gt;left) == 2) if (num &gt; root-&gt;right-&gt;val) root = SingleRotateWithRight(root); else root = DoubleRotateWithRight(root); } root-&gt;height = max(HTree(root-&gt;left), HTree(root-&gt;right))+1; return root;}void solution(){ Tree* root = NULL; cin &gt;&gt; N; int temp; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; temp; root = AVLInsert(root, temp); } cout &lt;&lt; root-&gt;val; return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12588 70 61 96 120 12788 70 61 96 120 90 65]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>AVL Tree</tag>
        <tag>模拟</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1062 Talent and Virtue (25)]]></title>
    <url>%2F%2Fposts%2F3c13d4c7%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x6839;&#x636E;&#x7ED9;&#x5B9A;&#x89C4;&#x5219;&#xFF0C;&#x5BF9;&#x5723;&#x4EBA;&#xFF0C;&#x541B;&#x5B50;&#xFF0C;&#x611A;&#x4EBA;&#xFF0C;&#x5C0F;&#x4EBA;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x9996;&#x5148;&#x7ED9;&#x51FA;&#x4E09;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;N&#xFF0C;&#x6709;&#x591A;&#x5C11;&#x4EBA;&#xFF0C;L&#xFF0C;&#x53CA;&#x683C;&#x7EBF;&#xFF0C;&#x53EA;&#x6709;&#x624D;&#x80FD;&#x5206;&#x6570;&#x548C;&#x5230;&#x7684;&#x5206;&#x6570;&#x90FD;&#x4E0D;&#x4F4E;&#x4E8E;&#x6B64;&#x6570;&#x7684;&#x4EBA;&#x624D;&#x53C2;&#x52A0;&#x6392;&#x540D;&#x3002;H&#xFF0C;&#x4F18;&#x79C0;&#x7EBF;&#xFF0C;&#x8FBE;&#x5230;&#x6B64;&#x7EBF;&#x7684;&#x4EBA;&#x5373;&#x53EF;&#x8BA4;&#x4E3A;&#x8BE5;&#x9879;&#x8FBE;&#x6807;&#xFF0C;&#x9053;&#x5FB7;&#x548C;&#x624D;&#x80FD;&#x90FD;&#x8FBE;&#x5230;&#x4F18;&#x79C0;&#x7EBF;&#x7684;&#x4EBA;&#x53EB;&#x5723;&#x4EBA;&#xFF0C;&#x9053;&#x5FB7;&#x5206;&#x6570;&#x8FBE;&#x6807;&#xFF0C;&#x4F46;&#x662F;&#x624D;&#x80FD;&#x5206;&#x6570;&#x4E0D;&#x8FBE;&#x6807;&#x7684;&#x53EB;&#x541B;&#x5B50;&#xFF0C;&#x6392;&#x5728;&#x5723;&#x4EBA;&#x4E4B;&#x540E;&#xFF0C;&#x5168;&#x90FD;&#x4E0D;&#x8FBE;&#x6807;&#xFF0C;&#x4F46;&#x662F;&#x9053;&#x5FB7;&#x5206;&#x6570;&#x4E0D;&#x4F4E;&#x4E8E;&#x624D;&#x80FD;&#x5206;&#x6570;&#x7684;&#x53EB;&#x611A;&#x4EBA;&#xFF0C;&#x6392;&#x5728;&#x5747;&#x503C;&#x4E4B;&#x540E;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x4EBA;&#xFF0C;&#x4E24;&#x9879;&#x5206;&#x6570;&#x5747;&#x8FBE;&#x5230;L&#x53CA;&#x683C;&#x7EBF;&#x7684;&#x4EBA;&#xFF0C;&#x6392;&#x5728;&#x611A;&#x4EBA;&#x4E4B;&#x540E;&#x3002;&#x5728;&#x6BCF;&#x4E00;&#x5C0F;&#x9879;&#x5185;&#xFF0C;&#x6309;&#x7167;&#x4E24;&#x9879;&#x5206;&#x6570;&#x603B;&#x548C;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002; &#x7136;&#x540E;&#x662F;N&#x884C;&#xFF0C;&#x7ED9;&#x51FA;&#x6BCF;&#x4E2A;&#x4EBA;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x4EE5; ID_Number Virtue_Grade Talent_Grade &#x683C;&#x5F0F;&#x3002; &#x8F93;&#x51FA;&#x9996;&#x5148;&#x7ED9;&#x51FA;&#x53C2;&#x4E0E;&#x6392;&#x540D;&#x7684;&#x4EBA;&#x6570;M&#xFF0C;M&lt;=N&#xFF0C;&#x7136;&#x540E;&#x5728;&#x63A5;&#x4E0B;&#x6765;&#x7684;M&#x884C;&#x5185;&#xFF0C;&#x4ECD;&#x7136;&#x6309;&#x7167;ID_Number Virtue_Grade Talent_Grade &#x683C;&#x5F0F;&#xFF0C;&#x6309;&#x7167;&#x6392;&#x540D;&#x89C4;&#x5219;&#x8FDB;&#x884C;&#x6392;&#x540D;&#x3002;&#x5982;&#x679C;&#x603B;&#x5206;&#x76F8;&#x540C;&#xFF0C;&#x6309;&#x7167;&#x9053;&#x5FB7;&#x5206;&#x6570;&#xFF0C;&#x975E;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;&#x5373;&#x9053;&#x5FB7;&#x5206;&#x6570;&#x9AD8;&#x7684;&#x4EBA;&#x5728;&#x524D;&#x9762;&#xFF0C;&#x5982;&#x679C;&#x9053;&#x5FB7;&#x5206;&#x6570;&#x8FD8;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x6309;ID&#x597D;&#x9012;&#x589E;&#x6392;&#x5E8F;&#xFF0C;&#x5373;&#x5C0F;&#x53F7;&#x5728;&#x524D;&#x9762;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;sort&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#xFF0C;&#x81EA;&#x5B9A;&#x4E49;compare&#x51FD;&#x6570; Tips&#x5BF9;&#x6BCF;&#x4E2A;&#x4EBA;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x6807;&#x7B7E;&#xFF0C;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ int ID_Number; int Virtue_Grade; int Talent_Grade; int tag; //0&#x8868;&#x793A;&#x5723;&#x4EBA;&#xFF0C;1&#x8868;&#x793A;&#x541B;&#x5B50;&#xFF0C;2&#x8868;&#x793A;&#x611A;&#x4EBA;&#xFF0C;3&#x8868;&#x793A;&#x5C0F;&#x4EBA;}people;vector&lt;people&gt; p;int N, L, H;bool cmp(people a, people b){ if (a.tag != b.tag) return a.tag &lt; b.tag; else if ((a.Virtue_Grade + a.Talent_Grade) != (b.Virtue_Grade + b.Talent_Grade)) return (a.Virtue_Grade + a.Talent_Grade) &gt; (b.Virtue_Grade + b.Talent_Grade); else if (a.Virtue_Grade != b.Virtue_Grade) return a.Virtue_Grade &gt; b.Virtue_Grade; else return a.ID_Number &lt; b.ID_Number;}void solution(){ people input; cin &gt;&gt; N &gt;&gt; L &gt;&gt; H; for (int i = 0; i &lt; N; i++) { scanf(&quot;%d %d %d&quot;, &amp;input.ID_Number, &amp;input.Virtue_Grade, &amp;input.Talent_Grade); //cin &gt;&gt; input.ID_Number &gt;&gt; input.Virtue_Grade &gt;&gt; input.Talent_Grade; if (input.Talent_Grade &gt;= L&amp;&amp;input.Virtue_Grade &gt;= L) { if (input.Talent_Grade &gt;= H&amp;&amp;input.Virtue_Grade &gt;= H) input.tag = 0; else if (input.Virtue_Grade &gt;= H) input.tag = 1; else if (input.Virtue_Grade &gt;= input.Talent_Grade) input.tag = 2; else input.tag = 3; p.push_back(input); } } sort(p.begin(), p.end(), cmp); cout &lt;&lt; p.size() &lt;&lt; endl; for (auto i = p.begin(); i != p.end(); i++) printf(&quot;%d %d %d\n&quot;, i-&gt;ID_Number, i-&gt;Virtue_Grade, i-&gt;Talent_Grade); //cout &lt;&lt; i-&gt;ID_Number &lt;&lt; &apos; &apos; &lt;&lt; i-&gt;Virtue_Grade &lt;&lt; &apos; &apos; &lt;&lt; i-&gt;Talent_Grade &lt;&lt; endl; return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141514 60 8010000001 64 9010000002 90 6010000011 85 8010000003 85 8010000004 80 8510000005 82 7710000006 83 7610000007 90 7810000008 75 7910000009 59 9010000010 88 4510000012 80 10010000013 90 9910000014 66 60]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1061 Dating (20)]]></title>
    <url>%2F%2Fposts%2Fa51a857d%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x798F;&#x5C14;&#x6469;&#x65AF;&#x7834;&#x89E3;&#x5B57;&#x7B26;&#x4E32;&#x5BC6;&#x7801;&#xFF0C;&#x5F97;&#x5230;&#x7EA6;&#x4F1A;&#x65F6;&#x95F4;&#x3002; &#x8F93;&#x5165;&#x8F93;&#x5165;&#x56DB;&#x884C;&#x5B57;&#x7B26;&#x4E32;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x4F60;&#x7834;&#x8BD1;&#x8FC7;&#x540E;&#xFF0C;&#x5F97;&#x5230;&#x7684;&#x7EA6;&#x4F1A;&#x7684;&#x65F6;&#x95F4;&#x3002;&#x524D;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x76F8;&#x540C;&#x7684;&#x5927;&#x5199;&#x5B57;&#x6BCD; &#x8868;&#x793A;&#x5468;&#x51E0;&#xFF0C;&#x5982;A&#x8868;&#x793A;MON&#xFF08;&#x661F;&#x671F;&#x4E00;&#xFF09;&#xFF0C;B&#x8868;&#x793A;THU&#xFF08;&#x661F;&#x671F;&#x4E8C;&#xFF09;&#xFF0C;&#x524D;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7B2C;&#x4E8C;&#x4E2A;&#x76F8;&#x7B49;&#x7684;&#x5B57;&#x6BCD;&#x8868;&#x793A;&#x65F6;&#x95F4;&#xFF0C;0~9&#x5206;&#x522B;&#x8868;&#x793A;0~9&#x70B9;&#xFF0C;A~N&#x8868;&#x793A;10~23&#x70B9;&#x3002; &#x540E;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x76F8;&#x540C;&#x7684;&#x5B57;&#x6BCD;&#xFF0C;&#x5176;&#x4F4D;&#x7F6E;&#x8868;&#x793A;&#x65F6;&#x95F4;&#xFF0C;&#x6BD4;&#x5982;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x6BCD;&#x76F8;&#x7B49;&#xFF0C;&#x5728;&#x5B57;&#x7B26;&#x4E32;&#x4E2D;&#x662F;0&#x4F4D;&#xFF0C;&#x8868;&#x793A;00&#x5206;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#xFF0C;&#x8868;&#x793A;01&#x5206;&#x3002;&#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8FD9;&#x9053;&#x9898;&#x662F;&#x8981;&#x6BD4;&#x8F83;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x5BF9;&#x5E94;&#x4F4D;&#x7F6E;&#x7684;&#x5B57;&#x7B26;&#x662F;&#x5426;&#x76F8;&#x7B49;&#xFF0C;&#x76F4;&#x63A5;&#x7528;string&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#x5373;&#x53EF;&#x3002;&#x6CE8;&#x610F;&#x5173;&#x952E;&#x5B57;&#x7B26;&#x7684;&#x8303;&#x56F4;&#x3002; Tips&#x6CE8;&#x610F;&#x8303;&#x56F4;&#xFF0C;&#x6BD4;&#x5982;&#x7B2C;&#x4E00;&#x4E2A;&#x4EE3;&#x8868;&#x5468;&#x51E0;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x5FC5;&#x987B;&#x5728;[A,G]&#x624D;&#x6709;&#x6548;&#x3002; &#x7B2C;&#x4E8C;&#x4E2A;&#x4EE3;&#x8868;&#x5C0F;&#x65F6;&#x7684;&#x5B57;&#x7B26;&#xFF0C;&#x5FC5;&#x987B;&#x5728;[0&#xFF0C;9]&#x548C;[A&#xFF0C;N]&#x4E4B;&#x95F4;&#x624D;&#x6709;&#x6548;&#x3002; &#x7B2C;&#x4E09;&#x4E2A;&#x5FC5;&#x987B;&#x662F;&#x5B57;&#x6BCD;&#xFF0C;&#x5927;&#x5C0F;&#x5199;&#x4E0D;&#x9650;&#xFF0C;&#x5373;&#x5728;[a&#xFF0C;z]&#x548C;[A&#xFF0C;Z]&#x4E4B;&#x95F4;&#x624D;&#x6709;&#x6548;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;iostream&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;string Week[7] = { &quot;MON &quot;,&quot;TUE &quot;,&quot;WED &quot;,&quot;THU &quot;,&quot;FRI &quot;,&quot;SAT &quot;,&quot;SUN &quot; };string str1, str2, str3, str4;void solution(){ bool flag = false; for (int i = 0; i&lt;str1.size() &amp;&amp; i&lt;str2.size(); i++) { if (str1[i] == str2[i] &amp;&amp; flag == false &amp;&amp; str1[i] &lt;= &apos;G&apos;&amp;&amp;str1[i] &gt;= &apos;A&apos;) //&#x6CE8;&#x610F;&#x8303;&#x56F4;A~G { cout &lt;&lt; Week[str1[i] - &apos;A&apos;]; flag = true; i++; } if (str1[i] == str2[i] &amp;&amp; flag == true &amp;&amp; ((str1[i] &lt;= &apos;N&apos;&amp;&amp;str1[i] &gt;= &apos;A&apos;) || (str1[i] &lt;= &apos;9&apos;&amp;&amp;str1[i] &gt;= &apos;0&apos;))) //&#x6CE8;&#x610F;&#x8303;&#x56F4;A~N { if (str1[i] &lt;= &apos;9&apos;&amp;&amp;str1[i] &gt;= &apos;0&apos;) printf(&quot;%02d:&quot;, str1[i] - &apos;0&apos;); else cout &lt;&lt; 10 + str1[i] - &apos;A&apos; &lt;&lt; &apos;:&apos;; break; } } for (int i = 0; i &lt; str3.size() &amp;&amp; i&lt;str4.size(); i++) { if (str3[i] == str4[i] &amp;&amp; ((str3[i] &lt;= &apos;Z&apos;&amp;&amp;str3[i] &gt;= &apos;A&apos;) || (str3[i] &lt;= &apos;z&apos;&amp;&amp;str3[i] &gt;= &apos;a&apos;))) { printf(&quot;%02d&quot;, i); return; } }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; str1 &gt;&gt; str2 &gt;&gt; str3 &gt;&gt; str4; solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12343485djDkxh4hhGE2984akDfkkkkggEdsbs&amp;hgsfdkd&amp;Hyscvnm 12343485djGkxh4hhG22984akGfkkkkgg2dsbs&amp;hgsfdkd&amp;hyscvnm]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>字符串处理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1059 Prime Factors (25)]]></title>
    <url>%2F%2Fposts%2F80ec5e8c%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x5206;&#x89E3;&#x8D28;&#x56E0;&#x6570; &#x8F93;&#x5165;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;&#xFF0C;&#x8303;&#x56F4;&#x5728;long int &#x4E4B;&#x95F4;&#x3002; &#x8F93;&#x51FA;&#x5C06;&#x5176;&#x8D28;&#x56E0;&#x6570;&#x5206;&#x89E3;&#x540E;&#x7684;&#x5F0F;&#x5B50;&#xFF0C;&#x6CE8;&#x610F;&#x5982;&#x679C;&#x6B21;&#x6570;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;2&#xFF0C;&#x8981;&#x91C7;&#x7528;&#x4E0A;&#x6807;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x6BD4;&#x5982;2^2&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4F7F;&#x7528;map&#x6807;&#x8BB0;&#x6BCF;&#x4E2A;&#x8D28;&#x56E0;&#x6570;&#x7684;&#x6307;&#x6570;&#x3002; &#x5173;&#x952E;&#x4EE3;&#x7801;123456789for (int i = 2; i*i &lt;= n; i++){ while (n%i == 0) { ++res[i]; n /= i; }}if (n != 1)res[n] = 1; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#include&lt;map&gt;#pragma warning(disable:4996)using namespace std;long int num;map&lt;long int, int&gt;res;void Prime_factor(long int n){ for (int i = 2; i*i &lt;= n; i++) { while (n%i == 0) { ++res[i]; n /= i; } } if (n != 1)res[n] = 1; return;}void solution(){ if (num == 1) { cout &lt;&lt; &quot;1=1&quot;; return; } Prime_factor(num); cout &lt;&lt; num &lt;&lt; &apos;=&apos;; auto i = res.begin(); if (i-&gt;second &gt;= 2) cout &lt;&lt; i-&gt;first &lt;&lt; &apos;^&apos; &lt;&lt; i-&gt;second; else cout &lt;&lt; i-&gt;first; i++; for (; i != res.end(); i++) { if (i-&gt;second &gt;= 2) { cout &lt;&lt;&apos;*&apos;&lt;&lt; i-&gt;first &lt;&lt; &apos;^&apos; &lt;&lt; i-&gt;second; } else cout &lt;&lt; &apos;*&apos; &lt;&lt; i-&gt;first; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; num; solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;197532468]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>分解质因数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1058 A+B in Hogwarts (20)]]></title>
    <url>%2F%2Fposts%2Ff7eb6e1a%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5;&#x970D;&#x683C;&#x6C83;&#x5179;&#x7684;&#x8D27;&#x5E01;&#x8BA1;&#x7B97;&#x3002; &#x8F93;&#x5165;&#x4E24;&#x4E2A;&#x6570;&#xFF0C;&#x683C;&#x5F0F;&#x662F;&#x201D;Galleon.Sickle.Knut&#x201D;&#x3002;&#x7C7B;&#x4F3C;&#x4E8E;&#x5706;&#x89D2;&#x5206;&#x3002; &#x8F93;&#x51FA;&#x4E24;&#x4E2A;&#x6570;&#x76F8;&#x52A0;&#x540E;&#x7684;&#x7ED3;&#x679C;&#xFF0C;&#x6254;&#x7136;&#x6309;&#x7167;&#x201D;Galleon.Sickle.Knut&#x201D;&#x7684;&#x683C;&#x5F0F;&#x8F93;&#x51FA;&#x3002; 29Kunt=1Sickle 17Sickle=1Galleon &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8FDB;&#x5236;&#x8F6C;&#x6362; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;typedef struct{ int Sickle, Knut, Galleon;}currency;currency a, b, sum;void solution(){ sum.Knut=a.Knut+b.Knut; sum.Sickle = sum.Knut / 29; sum.Knut = sum.Knut % 29; sum.Sickle = a.Sickle + b.Sickle + sum.Sickle; sum.Galleon = sum.Sickle / 17; sum.Sickle = sum.Sickle % 17; sum.Galleon = sum.Galleon + a.Galleon + b.Galleon; cout &lt;&lt; sum.Galleon &lt;&lt; &apos;.&apos; &lt;&lt; sum.Sickle &lt;&lt; &apos;.&apos; &lt;&lt; sum.Knut; return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); scanf(&quot;%d.%d.%d %d.%d.%d&quot;,&amp;a.Galleon,&amp;a.Sickle,&amp;a.Knut,&amp;b.Galleon,&amp;b.Sickle,&amp;b.Knut); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;13.2.1 10.16.27]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>进制转换</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1054 The Dominant Color (20)]]></title>
    <url>%2F%2Fposts%2Ffe5d2231%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x6C42;&#x4E00;&#x4E9B;&#x6570;&#x5B57;&#x4E2D;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x8D85;&#x8FC7;&#x4E00;&#x534A;&#x7684;&#x6570;&#x5B57;. &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E24;&#x4E2A;&#x6570; M&#x548C;N&#xFF0C;&#x63A5;&#x4E0B;&#x6765;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x6709;M&#x4E2A;&#x6570;&#x5B57;&#x3002; &#x8F93;&#x51FA;&#x6C42;&#x4E0A;&#x8FF0;M*N&#x4E2A;&#x6570;&#x5B57;&#x4E2D;&#xFF0C;&#x51FA;&#x73B0;&#x6B21;&#x6570;&#x6700;&#x591A;&#x7684;&#x6570;&#x5B57;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x6CD5;&#xFF1A; &#x4F7F;&#x7528;Map &#x4F7F;&#x7528;&#x6392;&#x5E8F; Map&#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;map&gt;#pragma warning(disable:4996)using namespace std;map&lt;int, int&gt; color;int M, N;void solution(){ cin &gt;&gt; M &gt;&gt; N; int input,half=M*N/2; for (int i = 0; i &lt;N; i++) { for (int i = 0; i &lt; M; i++) { scanf(&quot;%d&quot;, &amp;input); color[input]++; if (color[input]&gt;half) { printf(&quot;%d&quot;, input); return; } } }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6392;&#x5E8F;&#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;int N, M;vector&lt;int&gt; color;void solution(){ cin &gt;&gt; M &gt;&gt; N; int input; for (int i = 0; i &lt; N; i++) { for (int j = 0; j &lt; M; j++) { scanf(&quot;%d&quot;, &amp;input); color.push_back(input); } } sort(color.begin(), color.end()); cout &lt;&lt; color[color.size() / 2];}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345 30 0 255 16777215 2424 24 0 0 2424 0 24 24 24]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>map映射</tag>
        <tag>C++ STL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1052 Linked List Sorting (25)]]></title>
    <url>%2F%2Fposts%2F173e8704%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#xFF0C;&#x8981;&#x6C42;&#x6309;&#x952E;&#x503C;&#x5347;&#x5E8F;&#x6392;&#x5E8F;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#x3002;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6574;&#x6570;N&#xFF0C;&#x8868;&#x793A;&#x8282;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#xFF0C;&#x4E00;&#x4E2A;&#x5934;&#x7ED3;&#x70B9;&#x7684;&#x5730;&#x5740;&#x3002;NULL&#x7528;-1&#x8868;&#x793A;&#x3002; &#x63A5;&#x4E0B;&#x6765;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x884C;&#x683C;&#x5F0F;&#x4E3A;&#x5730;&#x5740;&#x3000;&#x952E;&#x503C;&#x3000;&#x4E0B;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x5730;&#x5740; &#x4FDD;&#x8BC1;&#x952E;&#x503C;&#x5404;&#x4E0D;&#x76F8;&#x540C;&#xFF0C;&#x8303;&#x56F4;&#x5728; [-100000, 100000]&#x4E4B;&#x95F4;&#x3002; &#x8F93;&#x51FA;&#x683C;&#x5F0F;&#x4E0A;&#x6309;&#x8F93;&#x5165;&#x7684;&#x6837;&#x5F0F;&#x8F93;&#x51FA;&#xFF0C;&#x4EE5;&#x952E;&#x503C;&#x9012;&#x589E;&#x5E8F;&#x5217;&#x8FDB;&#x884C;&#x8F93;&#x51FA;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x81EA;&#x5B9A;&#x4E49;&#x89C4;&#x5219;&#x6392;&#x5E8F; Tips &#x6709;&#x4E9B;&#x8282;&#x70B9;&#x5E76;&#x4E0D;&#x5728;&#x94FE;&#x8868;&#x4E2D; &#x53EF;&#x80FD;&#x6709;&#x591A;&#x4E2A;&#x94FE;&#x8868; &#x5982;&#x679C;&#x94FE;&#x8868;&#x4E3A;&#x7A7A;&#xFF0C;&#x9700;&#x8981;&#x8F93;&#x51FA; 0&#x3000;-1 &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;typedef struct node{ int addr; int next; int key; bool isLinked=false;}Node;int N, startaddr;vector&lt;Node&gt;LinkList(100001);bool cmp(Node a, Node b){ if (!a.isLinked || !b.isLinked) //&#x4E24;&#x4E2A;&#x5168;&#x90FD;&#x5728;&#x7684;&#x8BDD;&#xFF0C;&#x5224;&#x65AD;&#x7ED3;&#x679C;&#x4E3A;0&#xFF0C;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x952E;&#x503C;&#x7684;&#x6BD4;&#x8F83; return a.isLinked &gt; b.isLinked; else return a.key &lt; b.key;}void solution(){ int NodeNumber = 0; for (int i = startaddr; i !=-1 ; i=LinkList[i].next) { LinkList[i].isLinked = true; NodeNumber++; } if (NodeNumber == 0) { cout &lt;&lt; &quot;0 -1&quot;; return; } sort(LinkList.begin(), LinkList.end(), cmp); printf(&quot;%d %05d\n&quot;, NodeNumber, LinkList[0].addr); for (int i = 0; i &lt; NodeNumber-1; i++) { printf(&quot;%05d %d %05d\n&quot;, LinkList[i].addr, LinkList[i].key, LinkList[i + 1].addr); } printf(&quot;%05d %d -1&quot;, LinkList[NodeNumber - 1].addr, LinkList[NodeNumber - 1].key); return;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; N &gt;&gt; startaddr; int addr; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; addr; LinkList[addr].addr = addr; cin &gt;&gt; LinkList[addr].key &gt;&gt; LinkList[addr].next; } solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234565 0000111111 100 -100001 0 2222233333 100000 1111112345 -1 3333322222 1000 12345]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1048 Find Coins (25)]]></title>
    <url>%2F%2Fposts%2Feef05f5b%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x627E;&#x51FA;&#x4E24;&#x679A;&#x786C;&#x5E01;&#xFF0C;&#x4F7F;&#x5176;&#x548C;&#x7B49;&#x4E8E;&#x7ED9;&#x5B9A;&#x7684;&#x503C;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x70B9;&#x53EA;&#x6709;&#x4E00;&#x884C;&#x8F93;&#x5165;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6570;N&#xFF08;&lt;=100000&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x662F;N&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x5728;[1,10000]&#x4E4B;&#x95F4; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x7B2C;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x8FC7;&#x4E00;&#x6B21;&#x7684;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x7684;&#x8BDD;&#xFF0C;&#x8F93;&#x51FA;None&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6709;&#x4E24;&#x4E2A;&#x89E3;&#x6CD5;&#xFF0C;&#x4E00;&#x4E2A;&#x662F;&#x7528;&#x54C8;&#x5E0C;&#xFF0C;&#x6216;&#x8005;&#x4F7F;&#x7528;&#x67E5;&#x627E;&#x3002; &#x54C8;&#x5E0C;&#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;//#pragma warning(disable:4996)using namespace std;int coins[10010] = {0};int N, M;void solution(){ int i = 0; for (i = 0; i &lt; M; i++) { if (coins[i]&amp;&amp;coins[M-i]) //&#x5982;&#x679C;&#x6070;&#x597D;&#x6709;&#x8FD9;&#x4E24;&#x679A;&#x786C;&#x5E01; { if (i!=M-i) break; else if (coins[i]&gt;=2) break; } } if (i == M) cout &lt;&lt; &quot;No Solution&quot;; else cout &lt;&lt; i &lt;&lt; &apos; &apos; &lt;&lt; M - i; return;}int main(){ //freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; N &gt;&gt; M; int value; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; value; coins[value]++; } solution(); //system(&quot;pause&quot;); return 0;} &#x67E5;&#x627E;&#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;int N, M;vector&lt;int&gt; coins;void solution(){ sort(coins.begin(), coins.end()); int j = N - 1; for (int i = 0; i&lt;j; ) { if (coins[i] + coins[j] == M) { cout &lt;&lt; coins[i] &lt;&lt; &apos; &apos; &lt;&lt; coins[j]; return; } else if (coins[i] + coins[j] &gt; M) j--; else i++; } cout &lt;&lt; &quot;No Solution&quot;;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; N &gt;&gt; M; coins.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; coins[i]; } solution(); system(&quot;pause&quot;); return 0;}]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>Hash散列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1041 Be Unique (20)]]></title>
    <url>%2F%2Fposts%2F972ce7ff%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x627E;&#x51FA;&#x4E00;&#x5217;&#x6570;&#x5B57;&#x4E2D;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x8FC7;&#x4E00;&#x6B21;&#x7684;&#x6570;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x70B9;&#x53EA;&#x6709;&#x4E00;&#x884C;&#x8F93;&#x5165;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x662F;&#x4E00;&#x4E2A;&#x6B63;&#x6570;N&#xFF08;&lt;=100000&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x662F;N&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x6BCF;&#x4E2A;&#x6570;&#x5B57;&#x5728;[1,10000]&#x4E4B;&#x95F4; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x7B2C;&#x4E00;&#x4E2A;&#x53EA;&#x51FA;&#x73B0;&#x8FC7;&#x4E00;&#x6B21;&#x7684;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x7684;&#x8BDD;&#xFF0C;&#x8F93;&#x51FA;None&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x4F7F;&#x7528;&#x54C8;&#x5E0C;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536#include&lt;iostream&gt;#pragma warning(disable:4996)using namespace std;int input[100001];int countNumber[100001] = {0};int N;void solution(){ for (int i = 0; i &lt; N; i++) { countNumber[input[i]]++; } for (int i = 0; i &lt; N; i++) { if (countNumber[input[i]] == 1) { cout &lt;&lt; input[i]; return; } } cout &lt;&lt; &quot;None&quot;; return;}int main(){ freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; input[i]; } solution(); system(&quot;pause&quot;); return 0;}]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>Hash散列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1040 Longest Symmetric String (25)]]></title>
    <url>%2F%2Fposts%2Fe02bd769%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x7ED9;&#x5B9A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x6C42;&#x5176;&#x6700;&#x957F;&#x7684;&#x5BF9;&#x79F0;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#xFF0C;&#x7ED9;&#x51FA;&#x4E00;&#x4E2A;&#x957F;&#x5EA6;&#x4E0D;&#x8D85;&#x8FC7;1000&#x7684;&#x975E;&#x7A7A;&#x5B57;&#x7B26;&#x4E32;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x5176;&#x6700;&#x957F;&#x7684;&#x5BF9;&#x79F0;&#x5B50;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x957F;&#x5EA6;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6709;&#x4E24;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x5982;&#x4E0B;&#xFF1A; &#x52A8;&#x6001;&#x89C4;&#x5212;&#x53BB;&#x89E3;&#x3002; &#x4EE5;&#x4E00;&#x4E2A;&#x70B9;&#x4E3A;&#x4E2D;&#x5FC3;&#xFF0C;&#x6C42;&#x5176;&#x5DE6;&#x8FB9;&#x548C;&#x53F3;&#x8FB9;&#x76F8;&#x7B49;&#x5B57;&#x7B26;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x6CE8;&#x610F;&#x5206;&#x5947;&#x6570;&#x548C;&#x5076;&#x6570;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#x3002; &#x5224;&#x65AD;&#x5DE6;&#x53F3;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x5426;&#x76F8;&#x7B49;&#x7684;&#x601D;&#x8DEF;&#x770B;&#x4EE3;&#x7801;&#x5373;&#x53EF;&#xFF0C;&#x6CE8;&#x610F;&#x5206;&#x5947;&#x6570;&#x548C;&#x5076;&#x6570;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#x5206;&#x522B;&#x8BA8;&#x8BBA;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;string str;void solution(){ int len1, len2, length = 1; for (int i = 0; i &lt; str.length(); i++) { len1 = len2 = 0; while (i-len1&gt;=0&amp;&amp;i+len1&lt;str.length()&amp;&amp;str[i-len1]==str[i+len1]) //&#x957F;&#x5EA6;&#x4E3A;&#x5947;&#x6570; { len1++; } while (i-len2&gt;=0&amp;&amp;i+len2+1&lt;str.length()&amp;&amp;str[i-len2]==str[i+len2+1]) { len2++; } length = max(length,max(2 * len1 - 1, 2 * len2)); } cout &lt;&lt; length;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); getline(cin, str); solution(); system(&quot;pause&quot;); return 0;} &#x52A8;&#x6001;&#x89C4;&#x5212;&#x7684;&#x601D;&#x8DEF;dp[i][j]&#x8868;&#x793A;s[i]&#x5230;s[j]&#x6240;&#x8868;&#x793A;&#x7684;&#x5B57;&#x4E32;&#x662F;&#x5426;&#x662F;&#x56DE;&#x6587;&#x5B57;&#x4E32;&#x3002;&#x53EA;&#x6709;0&#x548C;1 &#x9012;&#x63A8;&#x65B9;&#x7A0B;&#xFF1A; &#x5F53;str[i] == str[j] : dp[i][j] = dp[i+1][j-1] &#x5F53;str[i] != str[j] : dp[i][j] =0 &#x8FB9;&#x754C;&#xFF1A;dp[i][i] = 1, dp[i][i+1] = (str[i] == str[i+1]) ? 1 : 0 &#x9996;&#x5148;&#x521D;&#x59CB;&#x5316;dp[i][i] = 1, dp[i][i+1]&#xFF0C;&#x628A;&#x957F;&#x5EA6;&#x4E3A;1&#x548C;2&#x7684;&#x90FD;&#x521D;&#x59CB;&#x5316;&#x597D;&#xFF0C;&#x7136;&#x540E;&#x5F00;&#x59CB;&#x4E0D;&#x65AD;&#x9012;&#x63A8;&#x5373;&#x53EF;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;#pragma warning(disable:4996)using namespace std;string str;int length = 1;bool dp[1010][1010];//str[i]~str[j]&#x662F;&#x5426;&#x5BF9;&#x79F0;&#xFF0C;1&#x662F;&#xFF0C;0&#x4E0D;&#x662F;void solution(){ int n = str.size(); //&#x521D;&#x59CB;&#x5316; for (int i = 0; i &lt; n; i++) { dp[i][i] = 1; if (i&lt;n-1&amp;&amp;str[i]==str[i+1]) { dp[i][i + 1] = 1; length = 2; } } for (int i = 1; i &lt;n; i++) { for (int j = 0; j &lt; i; j++) { if (str[i]==str[j]&amp;&amp;dp[j+1][i-1]==true) { dp[j][i] = true; if (i - j + 1 &gt; length) length = i - j + 1; } } } cout &lt;&lt; length;}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); getline(cin, str); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1Is PAT&amp;TAP symmetric? 12345tgoqkicaklpnpvj cglvlv vbclejjjh mtpqtspfspgtw bjzsvfjmokqkdikbaqlel utlu wmeihwob wduecohzqmlpntvkkpoandwx ohyzkvhtvppfwrjsqwfkiqmke ouhuo ekmqikfwqsjrwfppvthxeihmbiqgacovhpafhrbvwdscizzwjqoqbdyjoqdknrbjyulioxjpcuc ggpaknuqctldclgxvyqfkietobbszlhs&#x5E94;&#x8BE5;&#x8F93;&#x51FA;45]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1037 Magic Coupon (25)]]></title>
    <url>%2F%2Fposts%2F310ed40d%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x6765;&#x81EA;&#x706B;&#x661F;&#x7684;&#x9B54;&#x6CD5;&#x8D34;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4F18;&#x60E0;&#x5238;&#x7684;&#x6570;&#x91CF;NC&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x5185;&#x6709;NC&#x4E2A;&#x6574;&#x6570;&#x3002; &#x7B2C;&#x4E09;&#x884C;&#x662F;&#x4EA7;&#x54C1;&#x7684;&#x6570;&#x91CF;NP&#xFF0C;&#x7B2C;&#x56DB;&#x884C;&#x5185;&#x6709;NP&#x4E2A;&#x6574;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x80FD;&#x83B7;&#x5F97;&#x7684;&#x6700;&#x5927;&#x91D1;&#x989D;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x8D2A;&#x5FC3;&#x7B97;&#x6CD5;&#xFF0C;&#x5206;4&#x4E2A;&#x90E8;&#x5206;&#xFF0C;NC&#x4E2D;&#x6B63;&#x6570;&#x548C;&#x8D1F;&#x6570;&#xFF0C;NP&#x4E2D;&#x6B63;&#x6570;&#x548C;&#x8D1F;&#x6570;&#x3002; &#x6B63;&#x6570;&#x4E0E;&#x6B63;&#x6570;&#x76F8;&#x4E58;&#xFF0C;&#x8D1F;&#x6570;&#x4E0E;&#x8D1F;&#x6570;&#x76F8;&#x4E58;&#xFF0C;&#x6700;&#x540E;&#x7ED3;&#x679C;&#x6C42;&#x548C;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;//#pragma warning(disable:4996)using namespace std;int NC, NP;vector&lt;long long int&gt;vPnega; //P&#x4E2D;&#x7684;&#x8D1F;&#x6570;vector&lt;long long int&gt;vCnega; //C&#x4E2D;&#x7684;&#x8D1F;&#x6570;vector&lt;long long int&gt;vPposi; //P&#x4E2D;&#x7684;&#x6B63;&#x6570;vector&lt;long long int&gt;vCposi; //C&#x4E2D;&#x7684;&#x6B63;&#x6570;long long int sum = 0;void solution(){ sort(vPposi.begin(), vPposi.end()); sort(vCposi.begin(), vCposi.end()); sort(vPnega.begin(), vPnega.end()); sort(vCnega.begin(), vCnega.end()); int j = vCposi.size() - 1; for (int i = vPposi.size()-1; i &gt;=0&amp;&amp;j&gt;=0; i--,j--) { sum += vPposi[i] * vCposi[j]; } j = 0; for (int i = 0; i &lt; vPnega.size() &amp;&amp; j &lt;vCnega.size(); i++, j++) { sum += vPnega[i] * vCnega[j]; } cout &lt;&lt; sum;}int main(){ //freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; NC; long long int input; for (int i = 0; i &lt; NC; i++) { cin &gt;&gt; input; if (input &gt; 0) vCposi.push_back(input); else if (input &lt; 0) vCnega.push_back(input); } cin &gt;&gt; NP; for (int i = 0; i &lt; NP; i++) { cin &gt;&gt; input; if (input &gt; 0) vPposi.push_back(input); else if (input &lt; 0) vPnega.push_back(input); } solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;123441 2 4 -147 6 -2 -3]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1036 Boys vs Girls (25)]]></title>
    <url>%2F%2Fposts%2F4609e49b%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x6C42;&#x6210;&#x7EE9;&#x6700;&#x597D;&#x7684;&#x5973;&#x751F;&#x548C;&#x6210;&#x7EE9;&#x6700;&#x5DEE;&#x7684;&#x7537;&#x751F;&#x4E4B;&#x95F4;&#x7684;&#x5206;&#x6570;&#x5DEE;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x6D4B;&#x8BD5;&#x70B9;&#x5305;&#x62EC;&#x4E00;&#x4E2A;&#x8F93;&#x5165;&#x6837;&#x4F8B;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x662F;&#x4E00;&#x4E2A;N&#xFF0C;&#x63A5;&#x7740;&#x662F;N&#x884C;&#x5B66;&#x751F;&#x7684;&#x4FE1;&#x606F;&#x3002; &#x6BCF;&#x884C;&#x5305;&#x62EC; &#x5B66;&#x751F;&#x59D3;&#x540D;&#xFF0C;&#x6027;&#x522B;&#xFF08;F/M&#xFF09;&#xFF0C;ID&#xFF0C;&#x6210;&#x7EE9;&#x3002; ID&#x4E3A;&#x4E0D;&#x8D85;&#x8FC7;10&#x4E2A;&#x5B57;&#x7B26;&#x4E14;&#x6CA1;&#x6709;&#x7A7A;&#x683C;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x6210;&#x7EE9;&#x5728;0~100&#x4E4B;&#x95F4;&#xFF0C;&#x4E14;&#x4FDD;&#x8BC1;&#x4E92;&#x4E0D;&#x76F8;&#x540C;&#x3002; &#x8F93;&#x51FA;&#x6BCF;&#x4E2A;&#x8F93;&#x51FA;&#x5305;&#x62EC;&#x4E09;&#x884C;&#xFF0C;&#x7B2C;&#x4E00;&#x884C;&#x4E3A;&#x6210;&#x7EE9;&#x6700;&#x9AD8;&#x7684;&#x5973;&#x751F;(Female)&#x7684;&#x59D3;&#x540D;&#x548C;ID&#xFF0C;&#x7B2C;&#x4E8C;&#x884C;&#x662F;&#x6210;&#x7EE9;&#x6700;&#x4F4E;&#x7684;&#x7537;&#x751F;&#xFF08;Male&#xFF09;&#x7684;&#x59D3;&#x540D;&#x548C;ID&#xFF0C;&#x7B2C;&#x4E09;&#x884C;&#x662F; $grade_F$ - $gende_M$ &#x3002; &#x5982;&#x679C;&#x67D0;&#x79CD;&#x5B66;&#x751F;&#x4FE1;&#x606F;&#x7F3A;&#x5931;&#xFF0C;&#x5728;&#x5BF9;&#x5E94;&#x884C;&#x8F93;&#x51FA;Absent&#xFF0C;&#x7136;&#x540E;&#x5728;&#x7B2C;&#x4E09;&#x884C;&#x8F93;&#x51FA;NA&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x7528;sort&#x6392;&#x5E8F;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#include&lt;algorithm&gt;//#pragma warning(disable:4996)using namespace std;typedef struct student{ string name; char gender; string ID; int score;}Student;vector&lt;Student&gt; male, female;int N;bool cmp(Student a, Student b){ if (a.gender == &apos;M&apos;) return a.score &lt; b.score; else return a.score &gt; b.score;}void solution(){ sort(male.begin(),male.end(),cmp); sort(female.begin(), female.end(), cmp); if (female.size()) cout &lt;&lt; female[0].name &lt;&lt; &apos; &apos; &lt;&lt; female[0].ID &lt;&lt; endl; else cout &lt;&lt; &quot;Absent&quot; &lt;&lt; endl; if(male.size()) cout &lt;&lt; male[0].name &lt;&lt; &apos; &apos; &lt;&lt; male[0].ID &lt;&lt; endl; else cout &lt;&lt; &quot;Absent&quot; &lt;&lt; endl; if (female.size() &amp;&amp; male.size()) cout &lt;&lt; female[0].score - male[0].score; else cout &lt;&lt; &quot;NA&quot;;}int main(){ //freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); Student input; cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; input.name &gt;&gt; input.gender &gt;&gt; input.ID &gt;&gt; input.score; if (input.gender == &apos;M&apos;) male.push_back(input); else female.push_back(input); } solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12343Joe M Math990112 89Mike M CS991301 100Mary F EE990830 95 121Jean M AA980920 60]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>查找</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1033 To Fill or Not to Fill (25)]]></title>
    <url>%2F%2Fposts%2F36631014%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x8F66;&#x5728;&#x9AD8;&#x901F;&#x8DEF;&#x4E0A;&#x8DD1;&#xFF0C;&#x7531;&#x4E8E;&#x6CB9;&#x7BB1;&#x5BB9;&#x91CF;&#x6709;&#x9650;&#xFF0C;&#x9700;&#x8981;&#x5224;&#x65AD;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x52A0;&#x6CB9;&#xFF0C;&#x52A0;&#x591A;&#x5C11;&#x3002;&#x6C42;&#x6700;&#x7701;&#x94B1;&#x7684;&#x65B9;&#x5F0F;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x6709;4&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x6CB9;&#x7BB1;&#x7684;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#xFF0C;&#x8DDD;&#x79BB;&#xFF0C;&#x5E73;&#x5747;&#x6BCF;&#x5355;&#x4F4D;&#x6C7D;&#x6CB9;&#x53EF;&#x4EE5;&#x8DD1;&#x7684;&#x91CC;&#x7A0B;&#x6570;&#xFF0C;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x6570;&#x76EE;N&#x3002; &#x7136;&#x540E;&#x662F;N&#x884C;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x5305;&#x62EC;&#x4E00;&#x5BF9;&#x975E;&#x8D1F;&#x6570;&#xFF0C;&#x7B2C;&#x4E00;&#x4E2A;&#x662F;&#x6C7D;&#x6CB9;&#x4EF7;&#x683C;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x662F;&#x8DDD;&#x79BB;&#x51FA;&#x53D1;&#x70B9;&#x7684;&#x8DDD;&#x79BB;&#x3002; &#x8F93;&#x51FA;&#x5047;&#x8BBE;&#x4E00;&#x5F00;&#x59CB;&#x7684;&#x65F6;&#x5019;&#x90AE;&#x7BB1;&#x662F;&#x7A7A;&#x7684;&#x3002; &#x8F93;&#x51FA;&#x6700;&#x4F4E;&#x82B1;&#x8D39;&#x91D1;&#x989D;&#xFF0C;&#x4FDD;&#x7559;&#x4E24;&#x4F4D;&#x5C0F;&#x6570;&#x3002;&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x8FBE;&#x5230;&#x76EE;&#x7684;&#x5730;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x80FD;&#x8DD1;&#x7684;&#x6700;&#x8FDC;&#x8DDD;&#x79BB;&#xFF0C;&#x4FDD;&#x7559;&#x4E24;&#x4F4D;&#x5C0F;&#x6570;&#x3002; &#x7C7B;&#x4F3C;&#x9898;&#x76EE;POJ2431 &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#x7531;&#x4E8E;&#x4E00;&#x5F00;&#x59CB;&#x6CA1;&#x6CB9;&#xFF0C;&#x6240;&#x4EE5;&#x6240;&#x6709;&#x7684;&#x52A0;&#x6CB9;&#x7AD9;&#x5FC5;&#x987B;&#x5F97;&#x6709;&#x8DDD;&#x79BB;&#x4E3A;0&#x7684;&#xFF0C;&#x5426;&#x5219;&#x54EA;&#x4E5F;&#x53BB;&#x4E0D;&#x4E86;&#x3002; &#x6700;&#x540E;&#x6CB9;&#x7BB1;&#x4E0D;&#x5269;&#x6CB9;&#x3002; &#x5BFB;&#x627E;&#x6BD4;&#x5F53;&#x524D;&#x52A0;&#x6CB9;&#x7AD9;&#x8DDD;&#x79BB;&#x8FDC;&#x4E14;&#x80FD;&#x591F;&#x5230;&#x8FBE;&#x7684;&#x52A0;&#x6CB9;&#x7AD9;&#xFF0C;&#x5224;&#x65AD;&#x8FD9;&#x4E9B;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x6CB9;&#x4EF7;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#x4E86;&#x66F4;&#x4F4E;&#x7684;&#x4EF7;&#x683C;&#xFF0C;&#x5C31;&#x53EA;&#x52A0;&#x521A;&#x597D;&#x5230;&#x90A3;&#x4E2A;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x6CB9;&#x3002; &#x5982;&#x679C;&#x627E;&#x4E0D;&#x5230;&#x66F4;&#x4F4E;&#x7684;&#xFF0C;&#x5C31;&#x627E;&#x6CB9;&#x4EF7;&#x5C3D;&#x53EF;&#x80FD;&#x4F4E;&#x7684;&#x52A0;&#x6CB9;&#x7AD9;&#xFF0C;&#x5728;&#x5F53;&#x524D;&#x52A0;&#x6CB9;&#x7AD9;&#x52A0;&#x6EE1;&#x6CB9;&#x4E4B;&#x540E;&#x8DD1;&#x8FC7;&#x53BB;&#x3002; Tips&#x4E00;&#x822C;&#x800C;&#x8A00;&#xFF0C;&#x4E3A;&#x4E86;&#x65B9;&#x4FBF;&#xFF0C;&#x5F80;&#x5F80;&#x628A;&#x7EC8;&#x70B9;&#x4E5F;&#x8BBE;&#x7F6E;&#x4E3A;&#x52A0;&#x6CB9;&#x7AD9;. BugPAT&#x4E0A;&#x9762;&#x7684;&#x6D4B;&#x8BD5;&#x6570;&#x636E;&#x4E0D;&#x5B8C;&#x5584;&#xFF0C;&#x56E0;&#x6B64;&#x4F1A;&#x6709;&#x4E00;&#x4E9B;&#x6709;bug&#x7684;&#x4EE3;&#x7801;&#x80FD;AC&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;iomanip&gt;//#pragma warning(disable:4996)using namespace std;int Cmax, N;double D, avg;int sum, run;typedef struct station{ double price; double distance;}Station;vector&lt;Station&gt; sta;bool cmp(Station a, Station b){ return a.distance &lt; b.distance;}void solution(){ sort(sta.begin(), sta.end(), cmp); //&#x6309;&#x4ECE;&#x8FDB;&#x5230;&#x8FDC;&#x8FDB;&#x884C;&#x6392;&#x5E8F; //&#x4E24;&#x79CD;&#x7279;&#x6B8A;&#x60C5;&#x51B5; if (sta[0].distance != 0) { cout &lt;&lt; &quot;The maximum travel distance = 0.00&quot;; return; } int location = 0; bool arrive = false; double cost = 0; double gas = 0; //&#x8868;&#x793A;&#x521D;&#x59CB;&#x6709;&#x591A;&#x5C11;&#x6CB9; while (!arrive) { bool findcheap = false; double cheapest = sta[location].price; int next=-1; double minprice = 100000000; for (int i = location+1; i&lt;N&amp;&amp;sta[i].distance&lt;=sta[location].distance + Cmax*avg&amp;&amp;sta[i].distance&lt;=D; i++) { if (sta[i].price &lt; minprice) { next = i; minprice = sta[i].price; if (sta[i].price&lt;cheapest) { findcheap = true; next = i; //&#x627E;&#x5230;&#x4FBF;&#x5B9C;&#x7684;&#xFF0C;&#x8DD1;&#x5230;i&#x8FD9;&#x91CC; break; } } } if (findcheap) { cost += ((sta[next].distance - sta[location].distance) / avg-gas) * sta[location].price; gas = 0; location = next; } else if (next!=-1|| sta[location].distance + Cmax*avg &gt;= D)//&#x81F3;&#x5C11;&#x80FD;&#x5230;&#x4E00;&#x4E2A;&#x7AD9;&#xFF0C;&#x4E0D;&#x81F3;&#x4E8E;&#x6CA1;&#x6CB9; { if (sta[location].distance+Cmax*avg&gt;=D)//&#x591F;&#x4E86; { arrive = true; cost += (D - sta[location].distance) / avg*sta[location].price; break; } //&#x4E0D;&#x591F; cost += (Cmax - gas) * sta[location].price; gas = Cmax - (sta[next].distance - sta[location].distance) / avg; location = next; } else { break; //&#x5230;&#x4E0D;&#x4E86; } } if (arrive) { cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; cost; } else { cout &lt;&lt; &quot;The maximum travel distance = &quot; &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; sta[location].distance + Cmax*avg; }}int main(){ //freopen(&quot;3.txt&quot;, &quot;r&quot;, stdin); //Cmax&#x8868;&#x793A;&#x6CB9;&#x7BB1;&#x6700;&#x5927;&#x5BB9;&#x91CF;&#xFF0C;D&#x8868;&#x793A;&#x76F8;&#x8DDD;&#x8DDD;&#x79BB;&#xFF0C;avg&#x8868;&#x793A;&#x5E73;&#x5747;&#x6BCF;&#x5347;&#x6CB9;&#x8DD1;&#x7684;&#x8DDD;&#x79BB;&#xFF0C;N&#x8868;&#x793A;&#x52A0;&#x6CB9;&#x7AD9;&#x7684;&#x6570;&#x76EE; cin &gt;&gt; Cmax &gt;&gt; D &gt;&gt; avg &gt;&gt; N; sta.resize(N); for (int i = 0; i &lt; N; i++) { cin &gt;&gt; sta[i].price &gt;&gt; sta[i].distance; } solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234567891011121330 2 3 102145174067 035 12 058 167 156 142 173 119 037 0&#x8F93;&#x51FA;&#x5E94;&#x8BE5;&#x4E3A;1.33 1234567891011121321 474 15 101239036029 037 2793 19428 2711 43229 1824 46963 40138 12240 136&#x8F93;&#x51FA;&#x5E94;&#x8BE5;&#x4E3A;2230265642.67]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1032 Sharing (25)]]></title>
    <url>%2F%2Fposts%2F41642082%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x94FE;&#x8868;&#x904D;&#x5386;&#xFF0C;&#x6C42;&#x6700;&#x65E9;&#x7684;&#x516C;&#x5171;&#x8282;&#x70B9;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x4E09;&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x5206;&#x522B;&#x662F;&#x7B2C;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#x7684;&#x5F00;&#x59CB;&#x8282;&#x70B9;&#xFF0C;&#x7B2C;&#x4E8C;&#x4E2A;&#x94FE;&#x8868;&#x7684;&#x5F00;&#x59CB;&#x8282;&#x70B9;&#xFF0C;&#x8282;&#x70B9;&#x7684;&#x4E2A;&#x6570;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x4E24;&#x4E2A;&#x94FE;&#x8868;&#x7684;&#x6700;&#x65E9;&#x7684;&#x516C;&#x5171;&#x8282;&#x70B9;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#xFF0C;&#x8F93;&#x51FA;-1. &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x904D;&#x5386;&#x7B2C;&#x4E00;&#x4E2A;&#x94FE;&#x8868;&#x65F6;&#xFF0C;&#x4E3A;&#x6BCF;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x8BBE;&#x7F6E;&#x8BBF;&#x95EE;&#x4F4D;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x904D;&#x5386;&#x7B2C;&#x4E8C;&#x4E2A;&#x94FE;&#x8868;&#x65F6;&#xFF0C;&#x53D1;&#x73B0;&#x67D0;&#x4E00;&#x8282;&#x70B9;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x904D;&#x5386;&#x4E2D;&#x88AB;&#x8BBF;&#x95EE;&#x8FC7;&#x4E86;&#xFF0C;&#x5219;&#x8F93;&#x51FA;&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x7F16;&#x53F7;&#xFF0C;&#x5982;&#x679C;&#x5230;&#x6700;&#x540E;&#x90FD;&#x6CA1;&#x6709;&#xFF0C;&#x5219;&#x8F93;&#x51FA;-1&#x3002; Tips&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x4E2D;&#x7684;&#x5B57;&#x7B26;&#x65E0;&#x4EFB;&#x4F55;&#x4F5C;&#x7528;&#x3002; &#x5982;&#x679C;&#x5730;&#x5740;&#x662F;00010&#xFF0C;&#x5219;&#x4E5F;&#x8981;&#x8F93;&#x51FA;5&#x4F4D;&#xFF0C;&#x4E5F;&#x5F97;&#x8F93;&#x51FA;00010&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;iostream&gt;#include&lt;vector&gt;//#pragma warning(disable:4996)using namespace std;int node[100001] = {0};bool visit[100001] = {0};int startPoint1, startPoint2, N;void solution(){ for (int i = startPoint1; i != -1; i=node[i]) visit[i] = true; for (int i = startPoint2; i != -1; i=node[i]) { if (visit[i]) { printf(&quot;%05d&quot;, i); return; } visit[i] = true; } cout &lt;&lt; &quot;-1&quot;;}int main(){ //freopen(&quot;2.txt&quot;, &quot;r&quot;, stdin); char ch; int addr, next; cin &gt;&gt; startPoint1 &gt;&gt; startPoint2 &gt;&gt; N; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; addr &gt;&gt; ch &gt;&gt; next; node[addr] = next; } solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;1234500001 00002 400001 a 1000110001 s -100002 a 1000210002 t -1]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1029 Median (25)]]></title>
    <url>%2F%2Fposts%2Fcfadc84b%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x7ED9;&#x4E24;&#x4E2A;&#x6574;&#x6570;&#x7684;&#x4E0A;&#x5347;&#x5E8F;&#x5217;&#xFF0C;&#x8981;&#x6C42;&#x627E;&#x5230;&#x4ED6;&#x4EEC;&#x7684;&#x4E2D;&#x4F4D;&#x6570;&#x3002; &#x8F93;&#x5165;&#x6BCF;&#x4E2A;&#x8F93;&#x5165;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x6837;&#x4F8B;&#xFF0C;&#x5305;&#x62EC;&#x4E24;&#x884C;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x662F;&#x6574;&#x6570;N&#xFF0C;&#x8868;&#x793A;&#x8FD9;&#x4E00;&#x4E2A;&#x961F;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x3002;&#x968F;&#x540E;&#x662F;N&#x4E2A;&#x6574;&#x6570;&#xFF0C;&#x4FDD;&#x8BC1;&#x6BCF;&#x4E2A;&#x6574;&#x6570;&#x90FD;&#x5728;long int &#x7684;&#x8303;&#x56F4;&#x5185;&#x3002; &#x8F93;&#x51FA;&#x8F93;&#x51FA;&#x7ED9;&#x5B9A;&#x7684;&#x4E24;&#x884C;&#x7684;&#x4E2D;&#x4F4D;&#x6570;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790; &#xFF08;&#x5185;&#x5B58;&#x4F1A;&#x8D85;&#xFF09;&#x8F93;&#x5165;&#x5168;&#x90E8;&#x6570;&#x636E;&#xFF0C;&#x7528;vector&#x5B58;&#x50A8;&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x884C;sort&#xFF0C;&#x968F;&#x540E;&#x8F93;&#x51FA;&#x4E2D;&#x4F4D;&#x6570;&#x3002; &#x56E0;&#x4E3A;&#x8FD9;&#x4E24;&#x4E2A;&#x6570;&#x7EC4;&#x662F;&#x6709;&#x5E8F;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x5148;&#x5C06;&#x6570;&#x7EC4;A&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5728;&#x4E0D;&#x65AD;&#x8BFB;&#x53D6;&#x6570;&#x7EC4;B&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8BB0;&#x5F55;&#x8FD9;&#x4E2A;&#x6570;&#x662F;&#x7B2C;&#x51E0;&#x4E2A;&#x6570;&#xFF0C;&#x5F53;&#x8FD9;&#x4E2A;&#x6570;&#x662F;&#x7B2C;(N+M+1)/2&#x4E2A;&#x6570;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8F93;&#x51FA;&#xFF0C;&#x5E76;&#x8DF3;&#x51FA;&#x5FAA;&#x73AF;&#x3002; &#x82E5;&#x6570;&#x7EC4;A&#x67E5;&#x8BE2;&#x5B8C;&#x8FD8;&#x6CA1;&#x627E;&#x5230;&#x4E2D;&#x4F4D;&#x6570;&#xFF0C;&#x5219;&#x7EE7;&#x7EED;&#x4E0D;&#x65AD;&#x8BFB;&#x5165;&#x5E76;&#x8BB0;&#x5F55;&#x6570;&#x7EC4;B&#xFF08;&#x53EA;&#x8BB0;&#x5F55;&#x662F;&#x7B2C;&#x51E0;&#x4E2A;&#x6570;&#xFF09;&#x3002; &#x82E5;&#x6570;&#x7EC4;B&#x8F93;&#x5165;&#x5E76;&#x67E5;&#x8BE2;&#x5B8C;&#x8FD8;&#x6CA1;&#x627E;&#x5230;&#x4E2D;&#x4F4D;&#x6570;&#xFF0C;&#x5219;&#x5728;A&#x4E2D;&#x641C;&#x5BFB;&#x3002; Tips cin/cout&#x6BD4;scanf/printf&#x8017;&#x65F6;&#x66F4;&#x957F;&#xFF0C;&#x6211;&#x7B2C;&#x4E00;&#x6B21;&#x7528;&#x7684;cin/cout,&#x6D4B;&#x8BD5;&#x70B9;12&#x8D85;&#x65F6;&#x3002; &#x4E0D;&#x80FD;&#x5C06;&#x6240;&#x6709;&#x7684;&#x6570;&#x5168;&#x90FD;&#x5B58;&#x4E0B;&#x6765;&#xFF0C;&#x5426;&#x5219;&#x5185;&#x5B58;&#x4F1A;&#x8D85;&#x9650;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;iostream&gt;#include&lt;algorithm&gt;#include &lt;climits&gt;#include&lt;vector&gt;#pragma warning(disable:4996)using namespace std;int N, M;vector&lt;int&gt; v;void solution(){ cin &gt;&gt; N; long int temp; int num; v.resize(N + 1); for (int i = 0; i &lt; N; i++) { scanf(&quot;%ld&quot;, &amp;temp); num = min(temp, (long int)INT_MAX); v[i] = num; } v[N] = INT_MAX; cin &gt;&gt; M; int j = 0, cnt = 0; int i = 0; for (i = 0; i &lt; M; i++) { scanf(&quot;%ld&quot;, &amp;temp); num = min(temp, (long int)INT_MAX); while (num &gt;= v[j] &amp;&amp; j &lt; N) { j++; cnt++; if (cnt == (M + N + 1) / 2) { cout &lt;&lt; v[j - 1]; return; } } cnt++; if (cnt == (M + N + 1) / 2) { cout &lt;&lt; temp; return; } } while (cnt&lt;(M + N + 1) / 2) { j++; cnt++; } cout &lt;&lt; v[j - 1]; return;}int main(){ freopen(&quot;4.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x539F;&#x6765;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x5185;&#x5B58;&#x4F1A;&#x8D85;&#x9650;&#x3002;123456789101112131415161718192021222324252627282930313233343536373839//&#x8FD9;&#x4E2A;&#x5185;&#x5B58;&#x4F1A;&#x8D85;&#x9650;#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;//#pragma warning(disable:4996)using namespace std;vector&lt;long int&gt;v;int N,M;void solution(){ sort(v.begin(), v.end()); int i = (v.size() - 1)/2; cout &lt;&lt; v[i];}int main(){ //freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); cin &gt;&gt; N; v.resize(N); long int temp; for (int i = 0; i &lt; N; i++) { scanf(&quot;%ld&quot;, &amp;temp); v[i] = temp; } cin &gt;&gt; M; v.resize(N + M); for (int i = N; i &lt; M+N; i++) { scanf(&quot;%ld&quot;,&amp;temp); v[i] = temp; } solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;124 11 12 13 145 9 10 15 16 17]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>中位数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1028 List Sorting (25)]]></title>
    <url>%2F%2Fposts%2Fb8aaf8dd%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x6309;&#x7ED9;&#x5B9A;&#x8981;&#x6C42;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x3002; &#x7C7B;&#x4F3C;&#x9898;&#x76EE;&#xFF1A;PAT1025 &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x884C;&#x662F;N&#x548C;C&#xFF0C;N&#x662F;&#x8F93;&#x5165;&#x6570;&#x636E;&#x7684;&#x6761;&#x76EE;&#x6570;&#xFF0C;C&#x662F;&#x6392;&#x5E8F;&#x89C4;&#x5219;&#x3002; C=1&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6309;&#x5B66;&#x751F;&#x6CE8;&#x518C;&#x53F7;&#x9012;&#x589E;&#x6392;&#x5E8F;&#x3002;C=2&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6309;&#x5B66;&#x751F;&#x59D3;&#x540D;&#x975E;&#x9012;&#x51CF;&#x6392;&#x5E8F;&#x3002;C=3&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6309;&#x5B66;&#x751F;&#x6210;&#x7EE9;&#x975E;&#x9012;&#x51CF;&#x6392;&#x5E8F;&#x3002;&#x5728;C=2/C=3&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5982;&#x679C;&#x4E24;&#x4E2A;&#x59D3;&#x540D;/&#x6210;&#x7EE9;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x6309;&#x7167;&#x5B66;&#x53F7;&#x9012;&#x589E;&#x6392;&#x5E8F;&#x3002; &#x8F93;&#x51FA;ID &#x540D;&#x5B57; &#x6210;&#x7EE9;&#x6BCF;&#x884C;&#x4E00;&#x4E2A;&#x5B66;&#x751F;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5176;&#x5B9E;&#x8FD9;&#x4E2A;&#x9898;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C31;&#x662F;&#x6392;&#x5E8F;&#xFF0C;&#x901A;&#x8FC7;&#x8C03;&#x7528;sort&#x51FD;&#x6570;&#x5373;&#x53EF;&#x3002; Tipscin/cout&#x6BD4;scanf/printf&#x8017;&#x65F6;&#x66F4;&#x957F;&#x3002;&#x5982;&#x679C;&#x7528;cin/cout&#xFF0C;&#x5219;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x6D4B;&#x8BD5;&#x70B9;&#x4F1A;&#x8D85;&#x65F6;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;vector&gt;#include&lt;string.h&gt;//#pragma warning(disable:4996)using namespace std;typedef struct student{ int ID; char name[10]; int score;}Student;vector&lt;Student&gt; stu;int n, c;bool cmp1(Student a, Student b){ return a.ID&lt;b.ID; //ID&#x9012;&#x589E;&#x6392;&#x5E8F;}bool cmp2(Student a, Student b){ int temp = strcmp(a.name, b.name); if (temp) return temp &lt;= 0; else return a.ID&lt;b.ID;}bool cmp3(Student a, Student b){ if (a.score != b.score) return a.score &lt; b.score; else return a.ID&lt;b.ID;}void solution(){ cin &gt;&gt; n &gt;&gt; c; stu.resize(n); for (int i = 0; i &lt; n; i++) { scanf(&quot;%d %s %d&quot;, &amp;stu[i].ID, stu[i].name, &amp;stu[i].score); } switch (c) { case 1: sort(stu.begin(),stu.end(), cmp1); break; case 2: sort(stu.begin(), stu.end(), cmp2); break; case 3: sort(stu.begin(), stu.end(), cmp3); break; default: break; } for (auto i = stu.begin(); i != stu.end(); i++) { printf(&quot;%06d %s %d\n&quot;, i-&gt;ID, i-&gt;name, i-&gt;score); }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); //system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345676 2000007 James 87000001 James 81000002 James 82000003 James 83000004 James 84000005 James 85]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1025 PAT Ranking (25)]]></title>
    <url>%2F%2Fposts%2Fc61b8460%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; PAT&#x8003;&#x8BD5;&#x5728;&#x597D;&#x51E0;&#x4E2A;&#x5730;&#x65B9;&#x540C;&#x65F6;&#x8FDB;&#x884C;&#xFF0C;&#x6D4B;&#x8BD5;&#x540E;&#x5C31;&#x8FDB;&#x884C;&#x6392;&#x540D;&#xFF0C;&#x8981;&#x6C42;&#x4F60;&#x7EDF;&#x8BA1;&#x6392;&#x540D;&#x3002; &#x8F93;&#x5165;&#x7B2C;&#x4E00;&#x4E2A;N&#x662F;&#x6D4B;&#x8BD5;&#x4F4D;&#x7F6E;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x6B64;&#x540E;&#x6709;N&#xFF08;&lt;=100&#xFF09;&#x4E2A;&#x5217;&#x8868;&#xFF0C;&#x6BCF;&#x4E2A;&#x5217;&#x8868;&#x5305;&#x62EC;&#x6B63;&#x6574;&#x6570;K&#xFF08;&lt;=300&#xFF09;&#x8868;&#x793A;&#x88AB;&#x6D4B;&#x8BD5;&#x8005;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x968F;&#x540E;K&#x884C;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x6709;&#x4E00;&#x4E2A;13&#x4F4D;&#x7684;&#x6CE8;&#x518C;&#x7F16;&#x53F7;&#x548C;&#x5F97;&#x5206;&#x3002; &#x8F93;&#x51FA;&#x683C;&#x5F0F;&#xFF1A; &#x6CE8;&#x518C;&#x53F7;&#xFF0C;&#x6700;&#x7EC8;&#x6392;&#x540D;&#xFF0C;&#x8003;&#x573A;&#x53F7;&#xFF0C;&#x5728;&#x672C;&#x8003;&#x573A;&#x7684;&#x6392;&#x540D;&#x3002;&#x8003;&#x573A;&#x7F16;&#x53F7;&#x4ECE;1~n&#x8FDB;&#x884C;&#x7F16;&#x53F7;&#x3002; &#x8981;&#x6C42;&#xFF1A;&#x6309;&#x6700;&#x7EC8;&#x6392;&#x5E8F;&#x7684;&#x975E;&#x964D;&#x5E8F;&#x5217;&#xFF0C;&#x5177;&#x6709;&#x76F8;&#x540C;&#x6210;&#x7EE9;&#x7684;&#x4EBA;&#x5FC5;&#x987B;&#x6392;&#x540D;&#x76F8;&#x540C;&#x3002;&#x5982;&#x679C;&#x6210;&#x7EE9;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x6309;&#x7167;&#x62A5;&#x540D;&#x53F7;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x6392;&#x5E8F;&#x3002; &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x6392;&#x5E8F;&#xFF0C;&#x5C40;&#x90E8;&#x6392;&#x5E8F;&#x3002; Tips32&#x4F4D;C/C++&#x4E2D;&#xFF0C;int&#xFF0C;long int&#xFF0C;long long int&#x7684;&#x53D6;&#x503C;&#x8303;&#x56F4;&#x5982;&#x4E0B;&#xFF1A; unsigned int 0&#xFF5E;4294967295 int 2147483648&#xFF5E;2147483647 unsigned long 0&#xFF5E;4294967295 long 2147483648&#xFF5E;2147483647 long long&#x7684;&#x6700;&#x5927;&#x503C;&#xFF1A;9223372036854775807 long long&#x7684;&#x6700;&#x5C0F;&#x503C;&#xFF1A;-9223372036854775808 unsigned long long&#x7684;&#x6700;&#x5927;&#x503C;&#xFF1A;1844674407370955161 &#x56E0;&#x6B64;13&#x4F4D;&#x7684;&#x62A5;&#x540D;&#x53F7;&#x662F;&#x53EF;&#x4EE5;&#x7528;long long int &#x6765;&#x8FDB;&#x884C;&#x4FDD;&#x5B58;&#x7684;&#x3002;&#x5176;&#x5B9E;&#x67F3;&#x5A7C;&#x7684;&#x535A;&#x5BA2;&#x4E2D;&#x4E5F;&#x662F;&#x7528;&#x7684;long long int&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x6211;&#x8FD9;&#x91CC;&#xFF0C;&#x4E0D;&#x77E5;&#x9053;&#x4E3A;&#x4EC0;&#x4E48;&#xFF0C;&#x6211;&#x7528;long long int &#xFF0C;&#x5219;&#x6D4B;&#x8BD5;&#x70B9;3&#xFF0C;&#x5373;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#xFF0C;&#x4F1A;&#x62A5;&#x9519;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x725B;&#x5BA2;&#x7F51;&#x4E0A;&#x662F;&#x80FD;&#x901A;&#x8FC7;&#x7684;&#x3002;&#x7528;string&#x5219;&#x6CA1;&#x6709;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002; &#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;algorithm&gt;#include&lt;string&gt;#pragma warning(disable:4996)using namespace std;typedef struct student{ //long long int num; //&#x4E0D;&#x77E5;&#x9053;&#x54EA;&#x91CC;&#x4E0D;&#x5BF9;&#xFF0C;&#x5982;&#x679C;&#x7528; long long int &#x5219;&#x6D4B;&#x8BD5;&#x70B9;3&#x4F1A;&#x7B54;&#x6848;&#x9519;&#x8BEF;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x725B;&#x5BA2;&#x7F51;&#x4E0A;&#x662F;&#x5168;&#x5BF9;&#x7684; string num; int local_rank; int score; int final_rank; int location;}Student;vector&lt;Student&gt; stu;int N, M;bool cmp(const Student &amp;a, const Student &amp;b){ if (a.score != b.score) return a.score &gt; b.score; else return a.num &lt; b.num;}void solution(){ //int input_num; cin &gt;&gt; N; for (int i = 0; i &lt; N; i++) { cin &gt;&gt; M; int length = stu.size();//&#x4FDD;&#x5B58;&#x4E0A;&#x4E00;&#x6B21;&#x7684;&#x5927;&#x5C0F; int new_length = length + M; stu.resize(length + M); for (int j = length; j &lt; new_length; j++) { cin &gt;&gt; stu[j].num; cin &gt;&gt; stu[j].score; stu[j].location = i + 1; } sort(stu.begin() + length, stu.end(), cmp); stu[length].local_rank = 1; for (int j = length + 1; j &lt; new_length; j++) { if (stu[j - 1].score == stu[j].score) stu[j].local_rank = stu[j - 1].local_rank; else stu[j].local_rank = j - length + 1; } } sort(stu.begin(), stu.end(), cmp); stu[0].final_rank = 1; for (int i = 1; i &lt; stu.size(); i++) { if (stu[i - 1].score == stu[i].score) stu[i].final_rank = stu[i - 1].final_rank; else stu[i].final_rank = i + 1; } cout &lt;&lt; stu.size() &lt;&lt; endl; for (int i = 0; i &lt; stu.size(); i++) { cout &lt;&lt; stu[i].num &lt;&lt; &apos; &apos; &lt;&lt; stu[i].final_rank &lt;&lt; &apos; &apos; &lt;&lt; stu[i].location &lt;&lt; &apos; &apos; &lt;&lt; stu[i].local_rank &lt;&lt; endl; }}int main(){ freopen(&quot;1.txt&quot;, &quot;r&quot;, stdin); solution(); system(&quot;pause&quot;); return 0;} &#x6D4B;&#x8BD5;&#x6570;&#x636E;12345678910111213141516171819202122232425262728293031323334353637481234026808810 931234604135729 971234707202308 901234464735740 921234096866161 931234563439254 951234665517583 901234587155559 9371234158282819 981234695464275 1001234216099242 921234953874157 961234833082961 941234954741173 931234698042486 9781234359915502 901234462299800 921234475059130 1001234373450093 911234872093302 991234421607748 1001234444203313 981234441487675 9091234825487256 991234838520186 991234625359404 991234539728328 901234482393613 911234656113051 901234493672093 931234382973981 901234477404316 92]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PAT-A-1024 Palindromic Number (25)]]></title>
    <url>%2F%2Fposts%2Fb11cb4f6%2F</url>
    <content type="text"><![CDATA[&#x9898;&#x76EE;&#x9898;&#x76EE;&#x94FE;&#x63A5; &#x6C42;&#x4E00;&#x4E2A;&#x6570;&#x5BF9;&#x5E94;&#x7684;&#x56DE;&#x6587;&#x6570;&#x3002;&#x6BD4;&#x5982;&#x8F93;&#x5165;67&#x3000;3&#x3002;&#x5373;&#x8981;&#x6C42;&#x662F;&#x5728;3&#x6B65;&#x4E4B;&#x5185;&#x627E;&#x5230;&#x56DE;&#x6587;&#x6570;&#x3002; 67+76=143 143+341=484 484&#x662F;&#x56DE;&#x6587;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x8F93;&#x51FA;484&#x3000;2 &#x8F93;&#x5165; 69&#x3000;3 69+96=165 165+561=726 726+627=1353 &#x8FBE;&#x5230;&#x6B65;&#x6570;&#x9650;&#x5236;&#x8981;&#x6C42;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x662F;&#x4E0D;&#x662F;&#x56DE;&#x6587;&#x6570;&#xFF0C;&#x6240;&#x4EE5;&#x8F93;&#x51FA;1353&#x3000;3 &#x89E3;&#x9898;&#x601D;&#x8DEF;&#x5206;&#x6790;&#x5927;&#x6570;&#x52A0;&#x6CD5;&#xFF0C;&#x6211;&#x7528;&#x7684;&#x662F;string&#xFF0C;&#x7528;vector&#x4E5F;&#x53EF;&#x3002; &#x5224;&#x65AD;&#x56DE;&#x6587;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#x8BBE;&#x6709;string number &#x3002;&#x82E5;&#x5176;&#x9006;&#x7F6E;&#x548C;&#x5176;&#x672C;&#x8EAB;&#x76F8;&#x7B49;&#xFF0C;&#x5219;&#x8FD9;&#x4E2A;&#x6570;&#x662F;&#x56DE;&#x6587;&#x6570;&#x3002; &#x4EE3;&#x7801;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//&#x5224;&#x65AD;&#x56DE;&#x6587;&#x6570;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x9006;&#x7F6E;&#xFF0C;&#x770B;&#x9006;&#x7F6E;&#x524D;&#x540E;&#x662F;&#x5426;&#x76F8;&#x7B49;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;string&gt;using namespace std;string num;void getsum(string str){ int length = str.length(); int carry = 0; for (int i = 0; i &lt; length; i++) { num[i] = num[i] + str[i] + carry - &apos;0&apos;; carry = 0; if (num[i]&gt;&apos;9&apos;) { num[i] = num[i] - 10; carry = 1; } } if (carry) { num += &apos;1&apos;; } reverse(num.begin(), num.end());}void solution(){ int n; string str; cin &gt;&gt; num &gt;&gt; n; for (int i = 0; i &lt; n; i++) { str = num; reverse(str.begin(), str.end());//str&#x662F;num&#x7684;&#x9006;&#x7F6E; if (str==num) { cout &lt;&lt; num &lt;&lt; endl &lt;&lt; i; return; } getsum(str); } cout &lt;&lt; num &lt;&lt; endl &lt;&lt; n;}int main(){ solution(); return 0;}]]></content>
      <categories>
        <category>PAT-A</category>
      </categories>
      <tags>
        <tag>PAT</tag>
        <tag>算法</tag>
        <tag>回文数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[并查集]]></title>
    <url>%2F%2Fposts%2Fc517589e%2F</url>
    <content type="text"><![CDATA[&#x6982;&#x8FF0;&#x6211;&#x4E2A;&#x4EBA;&#x89C9;&#x5F97;&#x5E76;&#x67E5;&#x96C6;&#x66F4;&#x50CF;&#x662F;&#x6811;&#x7684;&#x7236;&#x6BCD;&#x8868;&#x793A;&#x6CD5;&#x3002;&#x53EF;&#x4EE5;&#x7528;&#x4E8E;&#x5224;&#x65AD;&#x56FE;&#x662F;&#x5426;&#x8FDE;&#x901A;&#x3002; &#x4EE3;&#x7801;12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//&#x5E76;&#x67E5;&#x96C6;int par[100];int deep[100];//&#x521D;&#x59CB;&#x5316;void init(int n){ for (int i = 0; i &lt; n; i++) { par[i] = i; deep[i] = 0; }}//&#x67E5;&#x8BE2;&#x6811;&#x7684;&#x6839;&#xFF0C;&#x5E76;&#x538B;&#x7F29;&#xFF0C;&#x9012;&#x5F52;&#x5199;&#x6CD5;int find(int x){ if (par[x] == x) return x; else return par[x] = find(par[x]);}//&#x975E;&#x9012;&#x5F52;&#x5B9E;&#x73B0;int find(int x){ int j,k=x; while (x!=par[x]) x = par[x]; while (k!=x) { j = par[k]; par[k] = x; k = j; } return x;}//&#x5408;&#x5E76;x&#x548C;y&#x6240;&#x5C5E;&#x7684;&#x96C6;&#x5408;void merge(int x, int y){ x = find(x); y = find(y); if (x == y) return; if (deep[x] &lt; deep[y]) //&#x5982;&#x679C;y&#x7684;&#x6811;&#x66F4;&#x9AD8;&#xFF0C;&#x5219;x&#x5408;&#x5E76;&#x8FC7;&#x53BB; { par[x] = y; } else //x&gt;=y { par[y] = x; if (deep[x]==deep[y]) //&#x5982;&#x679C;&#x5F53;&#x524D;&#x4E24;&#x4E2A;&#x6811;&#x7B49;&#x9AD8;&#xFF0C;&#x5408;&#x5E76;&#x4E4B;&#x540E;&#x6DF1;&#x5EA6;+1 { deep[x]++; } }}//&#x5224;&#x65AD;x&#x548C;y&#x662F;&#x5426;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x96C6;&#x5408;&#x5185;bool same(int x, int y){ return find(x) == find(y);}]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>并查集</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[快排为什么那么快]]></title>
    <url>%2F%2Fposts%2Fae807e52%2F</url>
    <content type="text"><![CDATA[&#x603B;&#x8FF0;&#x3000;&#x3000;&#x6709;&#x8BB8;&#x591A;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x4E3A;O(nlog2n)&#x7684;&#x6392;&#x5E8F;&#x7B97;&#x6CD5;&#xFF0C;&#x4F46;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5FEB;&#x6392;&#xFF0C;&#x7406;&#x7531;&#x5982;&#x4E0B;&#xFF1A; &#x3000;&#x3000;&#x8FD9;&#x4E9B;&#x7B97;&#x6CD5;&#x7684;&#x57FA;&#x672C;&#x6267;&#x884C;&#x6B21;&#x6570;&#x7684;&#x591A;&#x9879;&#x5F0F;&#x6700;&#x9AD8;&#x6B21;&#x9879;&#x4E3A;X*nlog2n&#xFF0C;X&#x4E3A;&#x7CFB;&#x6570;&#xFF0C;&#x5FEB;&#x901F;&#x6392;&#x5E8F;&#x7684;X&#x6700;&#x5C0F;&#x3002;&#x4ED6;&#x5728;&#x540C;&#x7EA7;&#x522B;&#x7684;&#x7B97;&#x6CD5;&#x4E2D;&#x662F;&#x6700;&#x597D;&#x7684;&#xFF0C;&#x56E0;&#x6B64;&#x53EB;&#x5FEB;&#x6392;&#x3002; &#x4E3A;&#x4EC0;&#x4E48;X&#x662F;&#x6700;&#x5C0F;&#x7684;&#x3000;&#x3000;&#x5176;&#x5B9E;&#x4E0A;&#x9762;&#x90A3;&#x53E5;&#x8BDD;&#xFF0C;&#x8BF4;&#x4E86;&#x548C;&#x6CA1;&#x8BF4;&#x6CA1;&#x4EC0;&#x4E48;&#x4E24;&#x6837;&#x3002;&#x672C;&#x8D28;&#x5728;&#x4E8E;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;X&#x662F;&#x6700;&#x5C0F;&#x7684;&#x3002; &#x3000;&#x3000;&#x6392;&#x5E8F;&#x7684;&#x672C;&#x8D28;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x6765;&#x8868;&#x8FF0;&#xFF1A;&#x4E00;&#x7EC4;&#x672A;&#x6392;&#x5E8F;&#x7684;N&#x4E2A;&#x6570;&#x5B57;&#xFF0C;&#x5B83;&#x4EEC;&#x4E00;&#x5171;&#x6709;N!&#x79CD;&#x91CD;&#x6392;&#xFF0C;&#x5176;&#x4E2D;&#x53EA;&#x6709;&#x4E00;&#x79CD;&#x6392;&#x5217;&#x662F;&#x6EE1;&#x8DB3;&#x9898;&#x610F;&#x7684;&#xFF08;&#x8B6C;&#x5982;&#x4ECE;&#x5927;&#x5230;&#x5C0F;&#x6392;&#x5217;&#xFF09;&#x3002;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;&#xFF0C;&#x6392;&#x5E8F;&#x95EE;&#x9898;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x4E00;&#x5171;&#x6709;N!&#x79CD;&#x3002;&#x4EFB;&#x4F55;&#x57FA;&#x4E8E;&#x6BD4;&#x8F83;&#x7684;&#x6392;&#x5E8F;&#x7684;&#x57FA;&#x672C;&#x64CD;&#x4F5C;&#x5355;&#x5143;&#x90FD;&#x662F;&#x201C;&#x6BD4;&#x8F83;a&#x548C;b&#x201D;&#xFF0C;&#x8FD9;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x731C;&#x6570;&#x5B57;&#x6E38;&#x620F;&#x91CC;&#x9762;&#x7684;&#x4E00;&#x4E2A;&#x95EE;&#x53E5;&#xFF0C;&#x663E;&#x7136;&#x8FD9;&#x4E2A;&#x95EE;&#x53E5;&#x7684;&#x7B54;&#x6848;&#x53EA;&#x80FD;&#x662F;&#x201C;&#x662F;&#x201D;&#x6216;&#x201C;&#x5426;&#x201D;&#xFF0C;&#x4E00;&#x4E2A;&#x53EA;&#x6709;&#x4E24;&#x79CD;&#x8F93;&#x51FA;&#x7684;&#x95EE;&#x9898;&#x6700;&#x591A;&#x53EA;&#x80FD;&#x5C06;&#x53EF;&#x80FD;&#x6027;&#x7A7A;&#x95F4;&#x5207;&#x6210;&#x4E24;&#x534A;&#xFF0C;&#x6839;&#x636E;&#x4E0A;&#x9762;&#x7684;&#x601D;&#x8DEF;&#xFF0C;&#x6700;&#x4F73;&#x5207;&#x6CD5;&#x5C31;&#x662F;&#x5207;&#x6210;1/2&#x548C;1/2&#x3002;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x5728;&#x6BD4;&#x8F83;&#x4E86;a&#x548C;b&#x7684;&#x5927;&#x5C0F;&#x5173;&#x7CFB;&#x4E4B;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x53D1;&#x73B0;a&lt;b&#x7684;&#x8BDD;&#x5269;&#x4E0B;&#x7684;&#x6392;&#x5217;&#x53EF;&#x80FD;&#x6027;&#x5C31;&#x53D8;&#x6210;N!/2&#xFF0C;&#x5982;&#x679C;&#x53D1;&#x73B0;a&gt;b&#x4E5F;&#x662F;&#x5269;&#x4E0B;N!/2&#x79CD;&#x53EF;&#x80FD;&#x6027;&#x3002;&#x7531;&#x4E8E;&#x5047;&#x8BBE;&#x6BCF;&#x79CD;&#x6392;&#x5217;&#x7684;&#x6982;&#x7387;&#x662F;&#x5747;&#x7B49;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E5F;&#x5C31;&#x610F;&#x5473;&#x7740;&#x652F;&#x6301;a&lt;b&#x7684;&#x6392;&#x5217;&#x4E00;&#x5171;&#x6709;N!/2&#x4E2A;&#xFF0C;&#x652F;&#x6301;a&gt;b&#x7684;&#x4E5F;&#x662F;N!/2&#x4E2A;&#xFF0C;&#x6362;&#x8A00;&#x4E4B;&#xFF0C;a&lt;b&#x7684;&#x6982;&#x7387;&#x7B49;&#x4E8E;a&gt;b&#x7684;&#x6982;&#x7387;&#x3002; &#x3000;&#x3000;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x6BCF;&#x6B21;&#x5728;&#x6BD4;&#x8F83;a&#x548C;b&#x7684;&#x65F6;&#x5019;&#xFF0C;a&lt;b&#x548C;a&gt;b&#x7684;&#x6982;&#x7387;&#x662F;&#x5747;&#x7B49;&#x7684;&#xFF0C;&#x8FD9;&#x6837;&#x6211;&#x4EEC;&#x5C31;&#x80FD;&#x4FDD;&#x8BC1;&#x65E0;&#x8BBA;&#x5982;&#x4F55;&#x90FD;&#x80FD;&#x5C06;&#x53EF;&#x80FD;&#x6027;&#x7F29;&#x5C0F;&#x4E3A;&#x539F;&#x6765;&#x7684;&#x4E00;&#x534A;&#x4E86;&#xFF0C;&#x8FD9;&#x5C31;&#x662F;&#x6700;&#x4F18;&#x4E0B;&#x754C;&#x3002; &#x3000;&#x3000;&#x4E00;&#x4E2A;&#x76F4;&#x63A5;&#x7684;&#x63A8;&#x8BBA;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x6BCF;&#x6B21;&#x90FD;&#x50CF;&#x4E0A;&#x9762;&#x8FD9;&#x6837;&#x7684;&#x5B8C;&#x7F8E;&#x6BD4;&#x8F83;&#xFF0C;&#x90A3;&#x4E48;N&#x4E2A;&#x5143;&#x7D20;&#x7684;N!&#x79CD;&#x53EF;&#x80FD;&#x6392;&#x5217;&#x53EA;&#x9700;&#x8981;log2(N!)&#x5C31;&#x6392;&#x67E5;&#x5B8C;&#x4E86;&#xFF0C;&#x800C;log2(N!)&#x8FD1;&#x4F3C;&#x4E8E;Nlog2N&#x3002;&#x8FD9;&#x6B63;&#x662F;&#x5FEB;&#x6392;&#x7684;&#x590D;&#x6742;&#x5EA6;&#x3002; &#x4E3A;&#x4EC0;&#x4E48;&#x5806;&#x6392;&#x6BD4;&#x5FEB;&#x6392;&#x6162;&#x56DE;&#x987E;&#x4E00;&#x4E0B;&#x5806;&#x6392;&#x7684;&#x8FC7;&#x7A0B;&#xFF1A; &#x5EFA;&#x7ACB;&#x6700;&#x5927;&#x5806;&#x3002;&#xFF08;&#x5806;&#x9876;&#x7684;&#x5143;&#x7D20;&#x5927;&#x4E8E;&#x5176;&#x4E24;&#x4E2A;&#x513F;&#x5B50;&#xFF0C;&#x4E24;&#x4E2A;&#x513F;&#x5B50;&#x53C8;&#x5206;&#x522B;&#x5927;&#x4E8E;&#x5B83;&#x4EEC;&#x5404;&#x81EA;&#x4E0B;&#x5C5E;&#x7684;&#x4E24;&#x4E2A;&#x513F;&#x5B50;&#x2026; &#x4EE5;&#x6B64;&#x7C7B;&#x63A8;&#xFF09; &#x5C06;&#x5806;&#x9876;&#x7684;&#x5143;&#x7D20;&#x548C;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5BF9;&#x8C03;&#xFF08;&#x76F8;&#x5F53;&#x4E8E;&#x5C06;&#x5806;&#x9876;&#x5143;&#x7D20;&#xFF08;&#x6700;&#x5927;&#x503C;&#xFF09;&#x62FF;&#x8D70;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5806;&#x5E95;&#x7684;&#x90A3;&#x4E2A;&#x5143;&#x7D20;&#x8865;&#x4E0A;&#x5B83;&#x7684;&#x7A7A;&#x7F3A;&#xFF09;&#xFF0C;&#x7136;&#x540E;&#x8BA9;&#x90A3;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4ECE;&#x9876;&#x4E0A;&#x5F80;&#x4E0B;&#x6ED1;&#x5230;&#x6070;&#x5F53;&#x7684;&#x4F4D;&#x7F6E;&#xFF08;&#x91CD;&#x65B0;&#x4F7F;&#x5806;&#x6700;&#x5927;&#x5316;&#xFF09;&#x3002; &#x91CD;&#x590D;&#x7B2C;2&#x6B65;&#x3002; &#x8FD9;&#x91CC;&#x7684;&#x5173;&#x952E;&#x95EE;&#x9898;&#x5C31;&#x5728;&#x4E8E;&#x7B2C;2&#x6B65;&#xFF0C;&#x5806;&#x5E95;&#x7684;&#x5143;&#x7D20;&#x80AF;&#x5B9A;&#x5F88;&#x5C0F;&#xFF0C;&#x5C06;&#x5B83;&#x62FF;&#x5230;&#x5806;&#x9876;&#x548C;&#x539F;&#x672C;&#x5C5E;&#x4E8E;&#x6700;&#x5927;&#x5143;&#x7D20;&#x7684;&#x4E24;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x6BD4;&#x8F83;&#xFF0C;&#x5B83;&#x6BD4;&#x5B83;&#x4EEC;&#x5927;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x662F;&#x5FAE;&#x4E4E;&#x5176;&#x5FAE;&#x7684;&#x3002;&#x5B9E;&#x9645;&#x4E0A;&#x5B83;&#x80AF;&#x5B9A;&#x5C0F;&#x4E8E;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x4E2A;&#x513F;&#x5B50;&#x3002;&#x800C;&#x5927;&#x4E8E;&#x53E6;&#x4E00;&#x4E2A;&#x513F;&#x5B50;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x975E;&#x5E38;&#x5C0F;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x8FD9;&#x4E00;&#x6B21;&#x6BD4;&#x8F83;&#x7684;&#x7ED3;&#x679C;&#x5C31;&#x662F;&#x6982;&#x7387;&#x4E0D;&#x5747;&#x7B49;&#x7684;&#xFF0C;&#x6839;&#x636E;&#x524D;&#x9762;&#x7684;&#x5206;&#x6790;&#xFF0C;&#x6982;&#x7387;&#x4E0D;&#x5747;&#x7B49;&#x7684;&#x6BD4;&#x8F83;&#x662F;&#x4E0D;&#x660E;&#x667A;&#x7684;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5E76;&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;&#x5728;&#x7CDF;&#x7CD5;&#x60C5;&#x51B5;&#x4E0B;&#x4E5F;&#x80FD;&#x5C06;&#x95EE;&#x9898;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x524A;&#x51CF;&#x5230;&#x539F;&#x672C;&#x7684;1/2&#x3002;&#x53EF;&#x4EE5;&#x60F3;&#x50CF;&#x4E00;&#x79CD;&#x6781;&#x7AEF;&#x60C5;&#x51B5;&#xFF0C;&#x5982;&#x679C;a&#x80AF;&#x5B9A;&#x5C0F;&#x4E8E;b&#xFF0C;&#x90A3;&#x4E48;&#x6BD4;&#x8F83;a&#x548C;b&#x5C31;&#x4F1A;&#x4EC0;&#x4E48;&#x4FE1;&#x606F;&#x4E5F;&#x5F97;&#x4E0D;&#x5230;&#x2014;&#x2014;&#x539F;&#x672C;&#x5269;&#x4E0B;&#x591A;&#x5C11;&#x53EF;&#x80FD;&#x6027;&#x8FD8;&#x662F;&#x5269;&#x4E0B;&#x591A;&#x5C11;&#x53EF;&#x80FD;&#x6027;&#x3002; &#x5728;&#x5806;&#x6392;&#x91CC;&#x9762;&#x6709;&#x5927;&#x91CF;&#x8FD9;&#x79CD;&#x8FD1;&#x4E4E;&#x65E0;&#x6548;&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x56E0;&#x4E3A;&#x88AB;&#x62FF;&#x5230;&#x5806;&#x9876;&#x7684;&#x90A3;&#x4E2A;&#x5143;&#x7D20;&#x51E0;&#x4E4E;&#x80AF;&#x5B9A;&#x662F;&#x5F88;&#x5C0F;&#x7684;&#xFF0C;&#x800C;&#x9760;&#x8FD1;&#x5806;&#x9876;&#x7684;&#x5143;&#x7D20;&#x53C8;&#x51E0;&#x4E4E;&#x80AF;&#x5B9A;&#x662F;&#x5F88;&#x5927;&#x7684;&#xFF0C;&#x5C06;&#x4E00;&#x4E2A;&#x5F88;&#x5C0F;&#x7684;&#x6570;&#x548C;&#x4E00;&#x4E2A;&#x5F88;&#x5927;&#x7684;&#x6570;&#x6BD4;&#x8F83;&#xFF0C;&#x7ED3;&#x679C;&#x51E0;&#x4E4E;&#x80AF;&#x5B9A;&#x662F;&#x201C;&#x5C0F;&#x4E8E;&#x201D;&#x7684;&#xFF0C;&#x8FD9;&#x5C31;&#x610F;&#x5473;&#x7740;&#x95EE;&#x9898;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x53EA;&#x88AB;&#x6392;&#x9664;&#x6389;&#x4E86;&#x5F88;&#x5C0F;&#x4E00;&#x90E8;&#x5206;&#x3002; &#x8FD9;&#x5C31;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x5806;&#x6392;&#x6BD4;&#x8F83;&#x6162;&#xFF08;&#x5806;&#x6392;&#x867D;&#x7136;&#x548C;&#x5FEB;&#x6392;&#x4E00;&#x6837;&#x590D;&#x6742;&#x5EA6;&#x90FD;&#x662F;O(Nlog2N)&#x4F46;&#x5806;&#x6392;&#x590D;&#x6742;&#x5EA6;&#x7684;&#x5E38;&#x7CFB;&#x6570;&#x66F4;&#x5927;&#xFF09;&#x3002; MacKay&#x4E5F;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x4FEE;&#x6539;&#x7248;&#x7684;&#x5806;&#x6392;&#xFF1A;&#x6BCF;&#x6B21;&#x4E0D;&#x662F;&#x5C06;&#x5806;&#x5E95;&#x7684;&#x5143;&#x7D20;&#x62FF;&#x5230;&#x4E0A;&#x9762;&#x53BB;&#xFF0C;&#x800C;&#x662F;&#x76F4;&#x63A5;&#x6BD4;&#x8F83;&#x5806;&#x9876;&#xFF08;&#x6700;&#x5927;&#xFF09;&#x5143;&#x7D20;&#x7684;&#x4E24;&#x4E2A;&#x513F;&#x5B50;&#xFF0C;&#x5373;&#x9009;&#x51FA;&#x6B21;&#x5927;&#x7684;&#x5143;&#x7D20;&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x4E24;&#x4E2A;&#x513F;&#x5B50;&#x4E4B;&#x95F4;&#x7684;&#x5927;&#x5C0F;&#x5173;&#x7CFB;&#x662F;&#x5F88;&#x4E0D;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x4E24;&#x8005;&#x90FD;&#x5F88;&#x5927;&#xFF0C;&#x8BF4;&#x4E0D;&#x597D;&#x54EA;&#x4E2A;&#x66F4;&#x5927;&#x54EA;&#x4E2A;&#x66F4;&#x5C0F;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x6B21;&#x6BD4;&#x8F83;&#x7684;&#x4E24;&#x4E2A;&#x7ED3;&#x679C;&#x5C31;&#x662F;&#x6982;&#x7387;&#x5747;&#x7B49;&#x7684;&#x4E86;&#x3002; &#x4E3A;&#x4EC0;&#x4E48;&#x5FEB;&#x6392;&#x5176;&#x5B9E;&#x4E5F;&#x4E0D;&#x662F;&#x90A3;&#x4E48;&#x5FEB;&#x6211;&#x4EEC;&#x8003;&#x8651;&#x5FEB;&#x6392;&#x7684;&#x8FC7;&#x7A0B;&#xFF1A;&#x968F;&#x673A;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x505A;&#x201C;&#x8F74;&#x5143;&#x7D20;&#x201D;&#xFF0C;&#x5C06;&#x6240;&#x6709;&#x5927;&#x4E8E;&#x8F74;&#x5143;&#x7D20;&#x7684;&#x79FB;&#x5230;&#x5DE6;&#x8FB9;&#xFF0C;&#x5176;&#x4F59;&#x79FB;&#x5230;&#x53F3;&#x8FB9;&#x3002;&#x6839;&#x636E;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#xFF0C;&#x5FEB;&#x6392;&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x6BD4;&#x8F83;&#x5C31;&#x662F;&#x5C06;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x548C;&#x8F74;&#x5143;&#x7D20;&#x6BD4;&#x8F83;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x663E;&#x800C;&#x6613;&#x89C1;&#x7684;&#x662F;&#xFF0C;&#x201C;&#x5927;&#x4E8E;&#x201D;&#x548C;&#x201C;&#x5C0F;&#x4E8E;&#x201D;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x5404;&#x5360;&#x4E00;&#x534A;&#x3002;&#x8FD9;&#x662F;&#x4E00;&#x6B21;&#x6F02;&#x4EAE;&#x7684;&#x6BD4;&#x8F83;&#x3002; &#x7136;&#x800C;&#xFF0C;&#x5FEB;&#x6392;&#x7684;&#x7B2C;&#x4E8C;&#x6B21;&#x6BD4;&#x8F83;&#x5C31;&#x4E0D;&#x90A3;&#x4E48;&#x9AD8;&#x660E;&#x4E86;&#xFF1A;&#x6211;&#x4EEC;&#x4E0D;&#x59A8;&#x4EE4;&#x8F74;&#x5143;&#x7D20;&#x4E3A;pivot&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x6BD4;&#x8F83;&#x7ED3;&#x679C;&#x662F;a1 &lt; pivot&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x8BC1;&#x660E;&#x7B2C;&#x4E8C;&#x6B21;&#x6BD4;&#x8F83;a2&#x4E5F;&#x5C0F;&#x4E8E;pivot&#x7684;&#x53EF;&#x80FD;&#x6027;&#x662F;2/3&#xFF01;&#x8FD9;&#x5BB9;&#x6613;&#x8BC1;&#x660E;&#xFF1A;&#x5982;&#x679C;a2&gt;pivot&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4E48;a1&#xFF0C;a2&#xFF0C;pivot&#x8FD9;&#x4E09;&#x4E2A;&#x5143;&#x7D20;&#x4E4B;&#x95F4;&#x7684;&#x5173;&#x7CFB;&#x5C31;&#x5B8C;&#x5168;&#x786E;&#x5B9A;&#x4E86;&#x2014;&#x2014;a1 &lt; pivot &lt; a2&#xFF0C;&#x5269;&#x4E0B;&#x6765;&#x7684;&#x5143;&#x7D20;&#x6392;&#x5217;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x6211;&#x4EEC;&#x4E0D;&#x59A8;&#x8BB0;&#x4E3A;P&#xFF08;&#x4E0D;&#x9700;&#x8981;&#x5177;&#x4F53;&#x7B97;&#x51FA;&#x6765;&#xFF09;&#x3002;&#x800C;&#x5982;&#x679C;a2 &lt; pivot&#x5462;&#xFF1F;&#x90A3;&#x4E48;a1&#x548C;a2&#x7684;&#x5173;&#x7CFB;&#x5C31;&#x4ECD;&#x7136;&#x662F;&#x4E0D;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E2A;&#x5206;&#x652F;&#x91CC;&#x9762;&#x542B;&#x6709;&#x4E24;&#x79CD;&#x60C5;&#x51B5;&#xFF1A;a1 &lt; a2 &lt; pivot&#xFF0C;&#x4EE5;&#x53CA;a2 &lt; a1 &lt; pivot&#x3002;&#x5BF9;&#x4E8E;&#x5176;&#x4E2D;&#x4EFB;&#x4E00;&#x79CD;&#x60C5;&#x51B5;&#xFF0C;&#x5269;&#x4E0B;&#x7684;&#x5143;&#x7D20;&#x6392;&#x5217;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x90FD;&#x662F;P&#xFF0C;&#x4E8E;&#x662F;&#x8FD9;&#x4E2A;&#x5206;&#x652F;&#x91CC;&#x9762;&#x5269;&#x4E0B;&#x7684;&#x6392;&#x5217;&#x53EF;&#x80FD;&#x6027;&#x5C31;&#x662F;2P&#x3002;&#x6240;&#x4EE5;&#x5F53;a2 &lt; pivot&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8FD8;&#x5269;&#x4E0B;2/3&#x7684;&#x53EF;&#x80FD;&#x6027;&#x9700;&#x8981;&#x6392;&#x67E5;&#x3002; &#x518D;&#x8FDB;&#x4E00;&#x6B65;&#xFF0C;&#x5982;&#x679C;&#x7B2C;&#x4E8C;&#x6B65;&#x6BD4;&#x8F83;&#x679C;&#x771F;&#x53D1;&#x73B0;a2 &lt; pivot&#x7684;&#x8BDD;&#xFF0C;&#x7B2C;&#x4E09;&#x6B65;&#x6BD4;&#x8F83;&#x5C31;&#x66F4;&#x4E0D;&#x5999;&#x4E86;&#xFF0C;&#x6A21;&#x4EFF;&#x4E0A;&#x9762;&#x7684;&#x63A8;&#x7406;&#xFF0C;a3 &lt; pivot&#x7684;&#x6982;&#x7387;&#x5C06;&#x4F1A;&#x662F;3/4&#xFF01; &#x8FD9;&#x5C31;&#x662F;&#x5FEB;&#x6392;&#x4E5F;&#x4E0D;&#x90A3;&#x4E48;&#x5FEB;&#x7684;&#x539F;&#x56E0;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4E5F;&#x6CA1;&#x6709;&#x505A;&#x5230;&#x6BCF;&#x6B21;&#x6BD4;&#x8F83;&#x90FD;&#x80FD;&#x5C06;&#x5269;&#x4E0B;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x780D;&#x6389;&#x4E00;&#x534A;&#x3002; &#x57FA;&#x6570;&#x6392;&#x5E8F;&#x4E3A;&#x4EC0;&#x4E48;&#x6BD4;&#x8F83;&#x5FEB;&#x4F20;&#x7EDF;&#x7684;&#x89E3;&#x91CA;&#x662F;&#xFF1A;&#x57FA;&#x6392;&#x4E0D;&#x662F;&#x57FA;&#x4E8E;&#x6BD4;&#x8F83;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x5177;&#x6709;&#x540E;&#x8005;&#x7684;&#x5C40;&#x9650;&#x6027;&#x3002;&#x8BDD;&#x662F;&#x6CA1;&#x9519;&#xFF0C;&#x4F46;&#x5176;&#x5B9E;&#x8FD8;&#x53EF;&#x4EE5;&#x5C06;&#x5B83;&#x548C;&#x57FA;&#x4E8E;&#x6BD4;&#x8F83;&#x7684;&#x6392;&#x5E8F;&#x505A;&#x4E00;&#x4E2A;&#x7C7B;&#x6BD4;&#x3002; &#x57FA;&#x6392;&#x7684;&#x8FC7;&#x7A0B;&#x4E5F;&#x8BB8;&#x662F;&#x6E90;&#x4E8E;&#x6211;&#x4EEC;&#x7406;&#x987A;&#x4E00;&#x526F;&#x724C;&#x7684;&#x8FC7;&#x7A0B;&#xFF1A;&#x5982;&#x679C;&#x4F60;&#x6709;N&#xFF08;N&lt;=13&#xFF09;&#x5F20;&#x724C;&#xFF0C;&#x4E71;&#x5E8F;&#xFF0C;&#x5982;&#x4F55;&#x7406;&#x987A;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x5047;&#x8C61;&#x684C;&#x4E0A;&#x6709;&#x5341;&#x4E09;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x6211;&#x4EEC;&#x5C06;&#x624B;&#x91CC;&#x7684;&#x724C;&#x4E00;&#x5F20;&#x4E00;&#x5F20;&#x653E;&#x51FA;&#x53BB;&#xFF0C;&#x5982;&#x679C;&#x662F;3&#xFF0C;&#x5C31;&#x653E;&#x5728;&#x4F4D;&#x7F6E;3&#x4E0A;&#xFF0C;&#x5982;&#x679C;&#x662F;J&#xFF0C;&#x5C31;&#x653E;&#x5728;&#x4F4D;&#x7F6E;11&#x4E0A;&#xFF0C;&#x653E;&#x5B8C;&#x4E86;&#x4E4B;&#x540E;&#x4ECE;&#x4F4D;&#x7F6E;1&#x5230;&#x4F4D;&#x7F6E;13&#x6536;&#x96C6;&#x6240;&#x6709;&#x7684;&#x724C;&#xFF08;&#x6CA1;&#x6709;&#x724C;&#x7684;&#x4F4D;&#x7F6E;&#x4E0A;&#x4E0D;&#x6536;&#x96C6;&#x4EFB;&#x4F55;&#x724C;&#xFF09;&#x3002; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8FD9;&#x6837;&#x6765;&#x7406;&#x89E3;&#x57FA;&#x6392;&#x9AD8;&#x6548;&#x7684;&#x672C;&#x8D28;&#x539F;&#x56E0;&#xFF1A;&#x5047;&#x8BBE;&#x524D;i&#x5F20;&#x724C;&#x90FD;&#x5DF2;&#x7ECF;&#x653E;&#x5230;&#x4E86;&#x5B83;&#x4EEC;&#x5BF9;&#x5E94;&#x7684;&#x4F4D;&#x7F6E;&#x4E0A;&#xFF0C;&#x7B2C;i+1&#x5F20;&#x724C;&#x653E;&#x51FA;&#x53BB;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5B9E;&#x9645;&#x4E0A;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x201C;&#x4E00;&#x4E0B;&#x5B50;&#x201D;&#x5C31;&#x786E;&#x7ACB;&#x4E86;&#x5B83;&#x548C;&#x524D;i&#x5F20;&#x724C;&#x7684;&#x5927;&#x5C0F;&#x5173;&#x7CFB;&#xFF0C;&#x7528;O(1)&#x7684;&#x64CD;&#x4F5C;&#x5C31;&#x5C06;&#x8FD9;&#x5F20;&#x724C;&#x6B63;&#x786E;&#x5730;&#x63D2;&#x5165;&#x5230;&#x4E86;&#x524D;i&#x5F20;&#x724C;&#x4E2D;&#x7684;&#x6B63;&#x786E;&#x4F4D;&#x7F6E;&#x4E0A;&#xFF0C;&#x8FD9;&#x4E2A;&#x6548;&#x679C;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x63D2;&#x5165;&#x6392;&#x5E8F;&#x7684;&#x7B2C;i&#x8F6E;&#x539F;&#x672C;&#x9700;&#x8981;&#x6BD4;&#x8F83;O(i)&#x6B21;&#x7684;&#xFF0C;&#x73B0;&#x5728;&#x53EA;&#x9700;&#x8981;O(1)&#x4E86;&#x3002; &#x4F46;&#x662F;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x57FA;&#x6392;&#x80FD;&#x591F;&#x8FBE;&#x5230;&#x8FD9;&#x4E2A;&#x6548;&#x679C;&#x5462;&#xFF1F;&#x4E0A;&#x9762;&#x53EA;&#x662F;&#x89E3;&#x91CA;&#x4E86;&#x8FC7;&#x7A0B;&#xFF0C;&#x89E3;&#x91CA;&#x4E86;&#x8FC7;&#x7A0B;&#x4E0D;&#x4EE3;&#x8868;&#x89E3;&#x91CA;&#x4E86;&#x672C;&#x8D28;&#x3002; &#x5F53;i&#x5F20;&#x724C;&#x653E;&#x5230;&#x4F4D;&#x4E4B;&#x540E;&#xFF0C;&#x653E;&#x7F6E;&#x7B2C;i+1&#x5F20;&#x724C;&#x7684;&#x65F6;&#x5019;&#x6709;&#x591A;&#x5C11;&#x79CD;&#x53EF;&#x80FD;&#x6027;&#xFF1F;&#x5927;&#x7EA6;i+1&#x79CD;&#xFF0C;&#x56E0;&#x4E3A;&#x524D;i&#x5F20;&#x724C;&#x5C06;13&#x4E2A;&#x4F4D;&#x7F6E;&#x5206;&#x5272;&#x6210;&#x4E86;i+1&#x4E2A;&#x533A;&#x95F4;&#x2014;&#x2014;&#x7B2C;i+1&#x5F20;&#x724C;&#x53EF;&#x4EE5;&#x843D;&#x5728;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x533A;&#x95F4;&#x3002;&#x6240;&#x4EE5;&#x653E;&#x7F6E;&#x7B2C;i+1&#x5F20;&#x724C;&#x5C31;&#x597D;&#x6BD4;&#x662F;&#x8BE2;&#x95EE;&#x8FD9;&#x6837;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF1A;&#x201C;&#x8FD9;&#x5F20;&#x724C;&#x843D;&#x5728;&#x54EA;&#x4E2A;&#x533A;&#x95F4;&#x5462;&#xFF1F;&#x201D;&#x800C;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x7684;&#x7B54;&#x6848;&#x6709;i+1&#x79CD;&#x53EF;&#x80FD;&#x6027;&#xFF1F;&#x6240;&#x4EE5;&#x5B83;&#x5C31;&#x5C06;&#x5269;&#x4E0B;&#x6765;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x5747;&#x5206;&#x6210;&#x4E86;i+1&#x4EFD;&#xFF08;&#x6362;&#x53E5;&#x8BDD;&#x8BF4;&#xFF0C;&#x780D;&#x6389;&#x4E86;i/i+1&#x7684;&#x53EF;&#x80FD;&#x6027;&#xFF01;&#xFF09;&#x3002;&#x518D;&#x770B;&#x770B;&#x57FA;&#x4E8E;&#x6BD4;&#x8F83;&#x7684;&#x6392;&#x5E8F;&#x5427;&#xFF1A;&#x7531;&#x4E8E;&#x6BCF;&#x6B21;&#x6BD4;&#x8F83;&#x53EA;&#x6709;&#x4E24;&#x79CD;&#x7ED3;&#x679C;&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x591A;&#x53EA;&#x80FD;&#x5C06;&#x5269;&#x4E0B;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x780D;&#x6389;&#x4E00;&#x534A;&#x3002; &#x8FD9;&#x5C31;&#x662F;&#x4E3A;&#x4EC0;&#x4E48;&#x57FA;&#x6392;&#x8981;&#x5FEB;&#x5F97;&#x591A;&#x3002;&#x800C;&#x6240;&#x6709;&#x57FA;&#x4E8E;&#x6BD4;&#x8F83;&#x7684;&#x6392;&#x5E8F;&#x90FD;&#x9003;&#x8131;&#x4E0D;&#x4E86;Nlog2N&#x7684;&#x5BBF;&#x547D;&#x3002; &#x5F15;&#x7528;&#x5FEB;&#x6392;&#x4E3A;&#x4EC0;&#x4E48;&#x90A3;&#x4E48;&#x5FEB; 2018&#x7248;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x9AD8;&#x5206;&#x7B14;&#x8BB0;&#xFF0C;&#x7387;&#x8F89; &#x4E3B;&#x7F16;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>排序</tag>
        <tag>快速排序</tag>
      </tags>
  </entry>
</search>
